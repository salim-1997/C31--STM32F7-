
C31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018294  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dc4  08018464  08018464  00028464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a228  0801a228  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  0801a228  0801a228  0002a228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a230  0801a230  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a230  0801a230  0002a230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a234  0801a234  0002a234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0801a238  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c030  20000100  0801a338  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001c130  0801a338  0003c130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004acc9  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008596  00000000  00000000  0007adf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000033e8  00000000  00000000  00083390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003038  00000000  00000000  00086778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036fa6  00000000  00000000  000897b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00033ac1  00000000  00000000  000c0756  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012c858  00000000  00000000  000f4217  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00220a6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000df94  00000000  00000000  00220aec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000100 	.word	0x20000100
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801844c 	.word	0x0801844c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000104 	.word	0x20000104
 800020c:	0801844c 	.word	0x0801844c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2f>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000630:	bf24      	itt	cs
 8000632:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000636:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800063a:	d90d      	bls.n	8000658 <__aeabi_d2f+0x30>
 800063c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000640:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000644:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000648:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800064c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000650:	bf08      	it	eq
 8000652:	f020 0001 	biceq.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800065c:	d121      	bne.n	80006a2 <__aeabi_d2f+0x7a>
 800065e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000662:	bfbc      	itt	lt
 8000664:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000668:	4770      	bxlt	lr
 800066a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000672:	f1c2 0218 	rsb	r2, r2, #24
 8000676:	f1c2 0c20 	rsb	ip, r2, #32
 800067a:	fa10 f30c 	lsls.w	r3, r0, ip
 800067e:	fa20 f002 	lsr.w	r0, r0, r2
 8000682:	bf18      	it	ne
 8000684:	f040 0001 	orrne.w	r0, r0, #1
 8000688:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800068c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000690:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000694:	ea40 000c 	orr.w	r0, r0, ip
 8000698:	fa23 f302 	lsr.w	r3, r3, r2
 800069c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a0:	e7cc      	b.n	800063c <__aeabi_d2f+0x14>
 80006a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006a6:	d107      	bne.n	80006b8 <__aeabi_d2f+0x90>
 80006a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006ac:	bf1e      	ittt	ne
 80006ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006b6:	4770      	bxne	lr
 80006b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop

080006c8 <__aeabi_uldivmod>:
 80006c8:	b953      	cbnz	r3, 80006e0 <__aeabi_uldivmod+0x18>
 80006ca:	b94a      	cbnz	r2, 80006e0 <__aeabi_uldivmod+0x18>
 80006cc:	2900      	cmp	r1, #0
 80006ce:	bf08      	it	eq
 80006d0:	2800      	cmpeq	r0, #0
 80006d2:	bf1c      	itt	ne
 80006d4:	f04f 31ff 	movne.w	r1, #4294967295
 80006d8:	f04f 30ff 	movne.w	r0, #4294967295
 80006dc:	f000 b972 	b.w	80009c4 <__aeabi_idiv0>
 80006e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e8:	f000 f806 	bl	80006f8 <__udivmoddi4>
 80006ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f4:	b004      	add	sp, #16
 80006f6:	4770      	bx	lr

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9e08      	ldr	r6, [sp, #32]
 80006fe:	4604      	mov	r4, r0
 8000700:	4688      	mov	r8, r1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d14b      	bne.n	800079e <__udivmoddi4+0xa6>
 8000706:	428a      	cmp	r2, r1
 8000708:	4615      	mov	r5, r2
 800070a:	d967      	bls.n	80007dc <__udivmoddi4+0xe4>
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	b14a      	cbz	r2, 8000726 <__udivmoddi4+0x2e>
 8000712:	f1c2 0720 	rsb	r7, r2, #32
 8000716:	fa01 f302 	lsl.w	r3, r1, r2
 800071a:	fa20 f707 	lsr.w	r7, r0, r7
 800071e:	4095      	lsls	r5, r2
 8000720:	ea47 0803 	orr.w	r8, r7, r3
 8000724:	4094      	lsls	r4, r2
 8000726:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000730:	fa1f fc85 	uxth.w	ip, r5
 8000734:	fb0e 8817 	mls	r8, lr, r7, r8
 8000738:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800073c:	fb07 f10c 	mul.w	r1, r7, ip
 8000740:	4299      	cmp	r1, r3
 8000742:	d909      	bls.n	8000758 <__udivmoddi4+0x60>
 8000744:	18eb      	adds	r3, r5, r3
 8000746:	f107 30ff 	add.w	r0, r7, #4294967295
 800074a:	f080 811b 	bcs.w	8000984 <__udivmoddi4+0x28c>
 800074e:	4299      	cmp	r1, r3
 8000750:	f240 8118 	bls.w	8000984 <__udivmoddi4+0x28c>
 8000754:	3f02      	subs	r7, #2
 8000756:	442b      	add	r3, r5
 8000758:	1a5b      	subs	r3, r3, r1
 800075a:	b2a4      	uxth	r4, r4
 800075c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000760:	fb0e 3310 	mls	r3, lr, r0, r3
 8000764:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000768:	fb00 fc0c 	mul.w	ip, r0, ip
 800076c:	45a4      	cmp	ip, r4
 800076e:	d909      	bls.n	8000784 <__udivmoddi4+0x8c>
 8000770:	192c      	adds	r4, r5, r4
 8000772:	f100 33ff 	add.w	r3, r0, #4294967295
 8000776:	f080 8107 	bcs.w	8000988 <__udivmoddi4+0x290>
 800077a:	45a4      	cmp	ip, r4
 800077c:	f240 8104 	bls.w	8000988 <__udivmoddi4+0x290>
 8000780:	3802      	subs	r0, #2
 8000782:	442c      	add	r4, r5
 8000784:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000788:	eba4 040c 	sub.w	r4, r4, ip
 800078c:	2700      	movs	r7, #0
 800078e:	b11e      	cbz	r6, 8000798 <__udivmoddi4+0xa0>
 8000790:	40d4      	lsrs	r4, r2
 8000792:	2300      	movs	r3, #0
 8000794:	e9c6 4300 	strd	r4, r3, [r6]
 8000798:	4639      	mov	r1, r7
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0xbe>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	f000 80eb 	beq.w	800097e <__udivmoddi4+0x286>
 80007a8:	2700      	movs	r7, #0
 80007aa:	e9c6 0100 	strd	r0, r1, [r6]
 80007ae:	4638      	mov	r0, r7
 80007b0:	4639      	mov	r1, r7
 80007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b6:	fab3 f783 	clz	r7, r3
 80007ba:	2f00      	cmp	r7, #0
 80007bc:	d147      	bne.n	800084e <__udivmoddi4+0x156>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d302      	bcc.n	80007c8 <__udivmoddi4+0xd0>
 80007c2:	4282      	cmp	r2, r0
 80007c4:	f200 80fa 	bhi.w	80009bc <__udivmoddi4+0x2c4>
 80007c8:	1a84      	subs	r4, r0, r2
 80007ca:	eb61 0303 	sbc.w	r3, r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	4698      	mov	r8, r3
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d0e0      	beq.n	8000798 <__udivmoddi4+0xa0>
 80007d6:	e9c6 4800 	strd	r4, r8, [r6]
 80007da:	e7dd      	b.n	8000798 <__udivmoddi4+0xa0>
 80007dc:	b902      	cbnz	r2, 80007e0 <__udivmoddi4+0xe8>
 80007de:	deff      	udf	#255	; 0xff
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f040 808f 	bne.w	8000908 <__udivmoddi4+0x210>
 80007ea:	1b49      	subs	r1, r1, r5
 80007ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007f0:	fa1f f885 	uxth.w	r8, r5
 80007f4:	2701      	movs	r7, #1
 80007f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000800:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000804:	fb08 f10c 	mul.w	r1, r8, ip
 8000808:	4299      	cmp	r1, r3
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0x124>
 800080c:	18eb      	adds	r3, r5, r3
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0x122>
 8000814:	4299      	cmp	r1, r3
 8000816:	f200 80cd 	bhi.w	80009b4 <__udivmoddi4+0x2bc>
 800081a:	4684      	mov	ip, r0
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1410 	mls	r4, lr, r0, r1
 8000828:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x14c>
 8000834:	192c      	adds	r4, r5, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x14a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80b6 	bhi.w	80009ae <__udivmoddi4+0x2b6>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e79f      	b.n	800078e <__udivmoddi4+0x96>
 800084e:	f1c7 0c20 	rsb	ip, r7, #32
 8000852:	40bb      	lsls	r3, r7
 8000854:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000858:	ea4e 0e03 	orr.w	lr, lr, r3
 800085c:	fa01 f407 	lsl.w	r4, r1, r7
 8000860:	fa20 f50c 	lsr.w	r5, r0, ip
 8000864:	fa21 f30c 	lsr.w	r3, r1, ip
 8000868:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800086c:	4325      	orrs	r5, r4
 800086e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000872:	0c2c      	lsrs	r4, r5, #16
 8000874:	fb08 3319 	mls	r3, r8, r9, r3
 8000878:	fa1f fa8e 	uxth.w	sl, lr
 800087c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000880:	fb09 f40a 	mul.w	r4, r9, sl
 8000884:	429c      	cmp	r4, r3
 8000886:	fa02 f207 	lsl.w	r2, r2, r7
 800088a:	fa00 f107 	lsl.w	r1, r0, r7
 800088e:	d90b      	bls.n	80008a8 <__udivmoddi4+0x1b0>
 8000890:	eb1e 0303 	adds.w	r3, lr, r3
 8000894:	f109 30ff 	add.w	r0, r9, #4294967295
 8000898:	f080 8087 	bcs.w	80009aa <__udivmoddi4+0x2b2>
 800089c:	429c      	cmp	r4, r3
 800089e:	f240 8084 	bls.w	80009aa <__udivmoddi4+0x2b2>
 80008a2:	f1a9 0902 	sub.w	r9, r9, #2
 80008a6:	4473      	add	r3, lr
 80008a8:	1b1b      	subs	r3, r3, r4
 80008aa:	b2ad      	uxth	r5, r5
 80008ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b0:	fb08 3310 	mls	r3, r8, r0, r3
 80008b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008bc:	45a2      	cmp	sl, r4
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x1da>
 80008c0:	eb1e 0404 	adds.w	r4, lr, r4
 80008c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008c8:	d26b      	bcs.n	80009a2 <__udivmoddi4+0x2aa>
 80008ca:	45a2      	cmp	sl, r4
 80008cc:	d969      	bls.n	80009a2 <__udivmoddi4+0x2aa>
 80008ce:	3802      	subs	r0, #2
 80008d0:	4474      	add	r4, lr
 80008d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008d6:	fba0 8902 	umull	r8, r9, r0, r2
 80008da:	eba4 040a 	sub.w	r4, r4, sl
 80008de:	454c      	cmp	r4, r9
 80008e0:	46c2      	mov	sl, r8
 80008e2:	464b      	mov	r3, r9
 80008e4:	d354      	bcc.n	8000990 <__udivmoddi4+0x298>
 80008e6:	d051      	beq.n	800098c <__udivmoddi4+0x294>
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d069      	beq.n	80009c0 <__udivmoddi4+0x2c8>
 80008ec:	ebb1 050a 	subs.w	r5, r1, sl
 80008f0:	eb64 0403 	sbc.w	r4, r4, r3
 80008f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008f8:	40fd      	lsrs	r5, r7
 80008fa:	40fc      	lsrs	r4, r7
 80008fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000900:	e9c6 5400 	strd	r5, r4, [r6]
 8000904:	2700      	movs	r7, #0
 8000906:	e747      	b.n	8000798 <__udivmoddi4+0xa0>
 8000908:	f1c2 0320 	rsb	r3, r2, #32
 800090c:	fa20 f703 	lsr.w	r7, r0, r3
 8000910:	4095      	lsls	r5, r2
 8000912:	fa01 f002 	lsl.w	r0, r1, r2
 8000916:	fa21 f303 	lsr.w	r3, r1, r3
 800091a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800091e:	4338      	orrs	r0, r7
 8000920:	0c01      	lsrs	r1, r0, #16
 8000922:	fbb3 f7fe 	udiv	r7, r3, lr
 8000926:	fa1f f885 	uxth.w	r8, r5
 800092a:	fb0e 3317 	mls	r3, lr, r7, r3
 800092e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000932:	fb07 f308 	mul.w	r3, r7, r8
 8000936:	428b      	cmp	r3, r1
 8000938:	fa04 f402 	lsl.w	r4, r4, r2
 800093c:	d907      	bls.n	800094e <__udivmoddi4+0x256>
 800093e:	1869      	adds	r1, r5, r1
 8000940:	f107 3cff 	add.w	ip, r7, #4294967295
 8000944:	d22f      	bcs.n	80009a6 <__udivmoddi4+0x2ae>
 8000946:	428b      	cmp	r3, r1
 8000948:	d92d      	bls.n	80009a6 <__udivmoddi4+0x2ae>
 800094a:	3f02      	subs	r7, #2
 800094c:	4429      	add	r1, r5
 800094e:	1acb      	subs	r3, r1, r3
 8000950:	b281      	uxth	r1, r0
 8000952:	fbb3 f0fe 	udiv	r0, r3, lr
 8000956:	fb0e 3310 	mls	r3, lr, r0, r3
 800095a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800095e:	fb00 f308 	mul.w	r3, r0, r8
 8000962:	428b      	cmp	r3, r1
 8000964:	d907      	bls.n	8000976 <__udivmoddi4+0x27e>
 8000966:	1869      	adds	r1, r5, r1
 8000968:	f100 3cff 	add.w	ip, r0, #4294967295
 800096c:	d217      	bcs.n	800099e <__udivmoddi4+0x2a6>
 800096e:	428b      	cmp	r3, r1
 8000970:	d915      	bls.n	800099e <__udivmoddi4+0x2a6>
 8000972:	3802      	subs	r0, #2
 8000974:	4429      	add	r1, r5
 8000976:	1ac9      	subs	r1, r1, r3
 8000978:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800097c:	e73b      	b.n	80007f6 <__udivmoddi4+0xfe>
 800097e:	4637      	mov	r7, r6
 8000980:	4630      	mov	r0, r6
 8000982:	e709      	b.n	8000798 <__udivmoddi4+0xa0>
 8000984:	4607      	mov	r7, r0
 8000986:	e6e7      	b.n	8000758 <__udivmoddi4+0x60>
 8000988:	4618      	mov	r0, r3
 800098a:	e6fb      	b.n	8000784 <__udivmoddi4+0x8c>
 800098c:	4541      	cmp	r1, r8
 800098e:	d2ab      	bcs.n	80008e8 <__udivmoddi4+0x1f0>
 8000990:	ebb8 0a02 	subs.w	sl, r8, r2
 8000994:	eb69 020e 	sbc.w	r2, r9, lr
 8000998:	3801      	subs	r0, #1
 800099a:	4613      	mov	r3, r2
 800099c:	e7a4      	b.n	80008e8 <__udivmoddi4+0x1f0>
 800099e:	4660      	mov	r0, ip
 80009a0:	e7e9      	b.n	8000976 <__udivmoddi4+0x27e>
 80009a2:	4618      	mov	r0, r3
 80009a4:	e795      	b.n	80008d2 <__udivmoddi4+0x1da>
 80009a6:	4667      	mov	r7, ip
 80009a8:	e7d1      	b.n	800094e <__udivmoddi4+0x256>
 80009aa:	4681      	mov	r9, r0
 80009ac:	e77c      	b.n	80008a8 <__udivmoddi4+0x1b0>
 80009ae:	3802      	subs	r0, #2
 80009b0:	442c      	add	r4, r5
 80009b2:	e747      	b.n	8000844 <__udivmoddi4+0x14c>
 80009b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009b8:	442b      	add	r3, r5
 80009ba:	e72f      	b.n	800081c <__udivmoddi4+0x124>
 80009bc:	4638      	mov	r0, r7
 80009be:	e708      	b.n	80007d2 <__udivmoddi4+0xda>
 80009c0:	4637      	mov	r7, r6
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0xa0>

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <TimeDoctor_START>:




void TimeDoctor_START()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80009ce:	f3ef 8310 	mrs	r3, PRIMASK
 80009d2:	607b      	str	r3, [r7, #4]
  return(result);
 80009d4:	687b      	ldr	r3, [r7, #4]
	PROLOG();
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	2301      	movs	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	f383 8810 	msr	PRIMASK, r3
 80009e2:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <TimeDoctor_START+0xc8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d845      	bhi.n	8000a7c <TimeDoctor_START+0xb4>

	buffer_used += sprintf( buffer+buffer_used, "SPEED %lu\r\n", TD_GET_TICK_FREQ() );
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <TimeDoctor_START+0xc8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <TimeDoctor_START+0xcc>)
 80009f8:	18d0      	adds	r0, r2, r3
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <TimeDoctor_START+0xd0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4926      	ldr	r1, [pc, #152]	; (8000a9c <TimeDoctor_START+0xd4>)
 8000a02:	f017 f81b 	bl	8017a3c <siprintf>
 8000a06:	4602      	mov	r2, r0
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a10:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "MEMSPEED %lu\r\n", TD_GET_TICK_FREQ() );
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <TimeDoctor_START+0xcc>)
 8000a1a:	18d0      	adds	r0, r2, r3
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <TimeDoctor_START+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	491f      	ldr	r1, [pc, #124]	; (8000aa0 <TimeDoctor_START+0xd8>)
 8000a24:	f017 f80a 	bl	8017a3c <siprintf>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a32:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "TIME %lu\r\n", TD_GET_TICK_FREQ() );
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <TimeDoctor_START+0xcc>)
 8000a3c:	18d0      	adds	r0, r2, r3
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <TimeDoctor_START+0xd0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4917      	ldr	r1, [pc, #92]	; (8000aa4 <TimeDoctor_START+0xdc>)
 8000a46:	f016 fff9 	bl	8017a3c <siprintf>
 8000a4a:	4602      	mov	r2, r0
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <TimeDoctor_START+0xc8>)
 8000a54:	6013      	str	r3, [r2, #0]

	TD_INIT_TICK();
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <TimeDoctor_START+0xe0>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <TimeDoctor_START+0xe0>)
 8000a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a60:	60d3      	str	r3, [r2, #12]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <TimeDoctor_START+0xe8>)
 8000a66:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <TimeDoctor_START+0xe4>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f383 8810 	msr	PRIMASK, r3

	EPILOG();
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20009e94 	.word	0x20009e94
 8000a94:	20009e98 	.word	0x20009e98
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	08018464 	.word	0x08018464
 8000aa0:	08018470 	.word	0x08018470
 8000aa4:	08018480 	.word	0x08018480
 8000aa8:	e000edf0 	.word	0xe000edf0
 8000aac:	e0001000 	.word	0xe0001000
 8000ab0:	c5acce55 	.word	0xc5acce55

08000ab4 <TimeDoctor_STOP>:

void TimeDoctor_STOP()
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000aba:	f3ef 8310 	mrs	r3, PRIMASK
 8000abe:	603b      	str	r3, [r7, #0]
  return(result);
 8000ac0:	683b      	ldr	r3, [r7, #0]
	PROLOG0();
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f383 8810 	msr	PRIMASK, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	f383 8810 	msr	PRIMASK, r3

	EPILOG();
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <TimeDoctor_SAVE>:

void TimeDoctor_SAVE( int(*putchar_function)(int) )
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

	for( int i=0; i<buffer_used; ++i ) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e00a      	b.n	8000b08 <TimeDoctor_SAVE+0x24>
		putchar_function(buffer[i]);
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <TimeDoctor_SAVE+0x50>)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4610      	mov	r0, r2
 8000b00:	4798      	blx	r3
	for( int i=0; i<buffer_used; ++i ) {
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3301      	adds	r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <TimeDoctor_SAVE+0x54>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	dbef      	blt.n	8000af2 <TimeDoctor_SAVE+0xe>
	}
	putchar_function('E');
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2045      	movs	r0, #69	; 0x45
 8000b16:	4798      	blx	r3
	putchar_function('N');
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	204e      	movs	r0, #78	; 0x4e
 8000b1c:	4798      	blx	r3
	putchar_function('D');
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2044      	movs	r0, #68	; 0x44
 8000b22:	4798      	blx	r3
	putchar_function('\n');
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	200a      	movs	r0, #10
 8000b28:	4798      	blx	r3
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20009e98 	.word	0x20009e98
 8000b38:	20009e94 	.word	0x20009e94

08000b3c <TimeDoctor_CREATE>:


/////////////////////// trace functions for task //////////////////////////////////////

void TimeDoctor_CREATE(  uint32_t uxTaskNumber, char* taskName )
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000b46:	f3ef 8211 	mrs	r2, BASEPRI
 8000b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b4e:	b672      	cpsid	i
 8000b50:	f383 8811 	msr	BASEPRI, r3
 8000b54:	f3bf 8f6f 	isb	sy
 8000b58:	f3bf 8f4f 	dsb	sy
 8000b5c:	b662      	cpsie	i
 8000b5e:	613a      	str	r2, [r7, #16]
 8000b60:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000b62:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d820      	bhi.n	8000bb6 <TimeDoctor_CREATE+0x7a>

	buffer_used += sprintf( buffer+buffer_used, "CRE 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK());
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <TimeDoctor_CREATE+0x90>)
 8000b7c:	18d0      	adds	r0, r2, r3
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <TimeDoctor_CREATE+0x94>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	4913      	ldr	r1, [pc, #76]	; (8000bd4 <TimeDoctor_CREATE+0x98>)
 8000b86:	f016 ff59 	bl	8017a3c <siprintf>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b94:	6013      	str	r3, [r2, #0]
	buffer_used += sprintf( buffer+buffer_used, "NAM 0 %lu %s\r\n", uxTaskNumber, taskName );
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <TimeDoctor_CREATE+0x90>)
 8000b9e:	18d0      	adds	r0, r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <TimeDoctor_CREATE+0x9c>)
 8000ba6:	f016 ff49 	bl	8017a3c <siprintf>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <TimeDoctor_CREATE+0x8c>)
 8000bb4:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f383 8811 	msr	BASEPRI, r3
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20009e94 	.word	0x20009e94
 8000bcc:	20009e98 	.word	0x20009e98
 8000bd0:	e0001000 	.word	0xe0001000
 8000bd4:	0801850c 	.word	0x0801850c
 8000bd8:	0801851c 	.word	0x0801851c

08000bdc <TimeDoctor_TASK_SWITCHED_IN>:

void TimeDoctor_TASK_SWITCHED_IN( uint32_t uxTaskNumber )
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000be4:	f3ef 8211 	mrs	r2, BASEPRI
 8000be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bec:	b672      	cpsid	i
 8000bee:	f383 8811 	msr	BASEPRI, r3
 8000bf2:	f3bf 8f6f 	isb	sy
 8000bf6:	f3bf 8f4f 	dsb	sy
 8000bfa:	b662      	cpsie	i
 8000bfc:	613a      	str	r2, [r7, #16]
 8000bfe:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000c00:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d810      	bhi.n	8000c34 <TimeDoctor_TASK_SWITCHED_IN+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STA 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <TimeDoctor_TASK_SWITCHED_IN+0x70>)
 8000c1a:	18d0      	adds	r0, r2, r3
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <TimeDoctor_TASK_SWITCHED_IN+0x74>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	490c      	ldr	r1, [pc, #48]	; (8000c54 <TimeDoctor_TASK_SWITCHED_IN+0x78>)
 8000c24:	f016 ff0a 	bl	8017a3c <siprintf>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <TimeDoctor_TASK_SWITCHED_IN+0x6c>)
 8000c32:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f383 8811 	msr	BASEPRI, r3
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20009e94 	.word	0x20009e94
 8000c4c:	20009e98 	.word	0x20009e98
 8000c50:	e0001000 	.word	0xe0001000
 8000c54:	0801852c 	.word	0x0801852c

08000c58 <TimeDoctor_TASK_SWITCHED_OUT>:

void TimeDoctor_TASK_SWITCHED_OUT(uint32_t uxTaskNumber )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000c60:	f3ef 8211 	mrs	r2, BASEPRI
 8000c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c68:	b672      	cpsid	i
 8000c6a:	f383 8811 	msr	BASEPRI, r3
 8000c6e:	f3bf 8f6f 	isb	sy
 8000c72:	f3bf 8f4f 	dsb	sy
 8000c76:	b662      	cpsie	i
 8000c78:	613a      	str	r2, [r7, #16]
 8000c7a:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000c7c:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d810      	bhi.n	8000cb0 <TimeDoctor_TASK_SWITCHED_OUT+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STO 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <TimeDoctor_TASK_SWITCHED_OUT+0x70>)
 8000c96:	18d0      	adds	r0, r2, r3
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <TimeDoctor_TASK_SWITCHED_OUT+0x74>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <TimeDoctor_TASK_SWITCHED_OUT+0x78>)
 8000ca0:	f016 fecc 	bl	8017a3c <siprintf>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <TimeDoctor_TASK_SWITCHED_OUT+0x6c>)
 8000cae:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f383 8811 	msr	BASEPRI, r3
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20009e94 	.word	0x20009e94
 8000cc8:	20009e98 	.word	0x20009e98
 8000ccc:	e0001000 	.word	0xe0001000
 8000cd0:	0801853c 	.word	0x0801853c

08000cd4 <TimeDoctor_TASK_SUSPEND>:

	EPILOG();
}

void TimeDoctor_TASK_SUSPEND ( uint32_t uxTaskNumber)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000cdc:	f3ef 8211 	mrs	r2, BASEPRI
 8000ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce4:	b672      	cpsid	i
 8000ce6:	f383 8811 	msr	BASEPRI, r3
 8000cea:	f3bf 8f6f 	isb	sy
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	b662      	cpsie	i
 8000cf4:	613a      	str	r2, [r7, #16]
 8000cf6:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000cf8:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d810      	bhi.n	8000d2c <TimeDoctor_TASK_SUSPEND+0x58>

	buffer_used += sprintf( buffer+buffer_used, "STO 0 %lu %lu\r\n", uxTaskNumber, TD_GET_TICK() );
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <TimeDoctor_TASK_SUSPEND+0x70>)
 8000d12:	18d0      	adds	r0, r2, r3
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <TimeDoctor_TASK_SUSPEND+0x74>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	490c      	ldr	r1, [pc, #48]	; (8000d4c <TimeDoctor_TASK_SUSPEND+0x78>)
 8000d1c:	f016 fe8e 	bl	8017a3c <siprintf>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <TimeDoctor_TASK_SUSPEND+0x6c>)
 8000d2a:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	f383 8811 	msr	BASEPRI, r3
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20009e94 	.word	0x20009e94
 8000d44:	20009e98 	.word	0x20009e98
 8000d48:	e0001000 	.word	0xe0001000
 8000d4c:	0801853c 	.word	0x0801853c

08000d50 <TimeDoctor_QUEUE_CREATE>:


/////////////////////// trace functions for queue //////////////////////////////////////

void TimeDoctor_QUEUE_CREATE( uint32_t *uxQueueNumber )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	__asm volatile
 8000d58:	f3ef 8211 	mrs	r2, BASEPRI
 8000d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d60:	b672      	cpsid	i
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	b662      	cpsie	i
 8000d70:	613a      	str	r2, [r7, #16]
 8000d72:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000d74:	693b      	ldr	r3, [r7, #16]
	static uint32_t nextQueueNumber = 0;

	PROLOG();
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d818      	bhi.n	8000db8 <TimeDoctor_QUEUE_CREATE+0x68>

	*uxQueueNumber = nextQueueNumber++;
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <TimeDoctor_QUEUE_CREATE+0x80>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	4910      	ldr	r1, [pc, #64]	; (8000dd0 <TimeDoctor_QUEUE_CREATE+0x80>)
 8000d8e:	600a      	str	r2, [r1, #0]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6013      	str	r3, [r2, #0]
 	buffer_used += sprintf( buffer+buffer_used, "CRE 3 %lu %lu\r\n", *uxQueueNumber, TD_GET_TICK() );
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <TimeDoctor_QUEUE_CREATE+0x84>)
 8000d9c:	18d0      	adds	r0, r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <TimeDoctor_QUEUE_CREATE+0x88>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <TimeDoctor_QUEUE_CREATE+0x8c>)
 8000da8:	f016 fe48 	bl	8017a3c <siprintf>
 8000dac:	4602      	mov	r2, r0
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <TimeDoctor_QUEUE_CREATE+0x7c>)
 8000db6:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	f383 8811 	msr	BASEPRI, r3
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20009e94 	.word	0x20009e94
 8000dd0:	2000011c 	.word	0x2000011c
 8000dd4:	20009e98 	.word	0x20009e98
 8000dd8:	e0001000 	.word	0xe0001000
 8000ddc:	0801855c 	.word	0x0801855c

08000de0 <Timedoctor_QUEUE_REGISTRY_ADD>:

void Timedoctor_QUEUE_REGISTRY_ADD( uint32_t uxQueueNumber, const char *pcQueueName )
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	buffer_used += sprintf( buffer+buffer_used, "NAM 3 %lu %s\r\n", uxQueueNumber, pcQueueName );
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <Timedoctor_QUEUE_REGISTRY_ADD+0x38>)
 8000df2:	18d0      	adds	r0, r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	4908      	ldr	r1, [pc, #32]	; (8000e1c <Timedoctor_QUEUE_REGISTRY_ADD+0x3c>)
 8000dfa:	f016 fe1f 	bl	8017a3c <siprintf>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <Timedoctor_QUEUE_REGISTRY_ADD+0x34>)
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20009e94 	.word	0x20009e94
 8000e18:	20009e98 	.word	0x20009e98
 8000e1c:	0801856c 	.word	0x0801856c

08000e20 <TimeDoctor_QUEUE_SEND>:

void TimeDoctor_QUEUE_SEND(uint32_t uxQueueNumber, uint32_t uxMessagesWaiting)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8000e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e32:	b672      	cpsid	i
 8000e34:	f383 8811 	msr	BASEPRI, r3
 8000e38:	f3bf 8f6f 	isb	sy
 8000e3c:	f3bf 8f4f 	dsb	sy
 8000e40:	b662      	cpsie	i
 8000e42:	613a      	str	r2, [r7, #16]
 8000e44:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000e46:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d813      	bhi.n	8000e80 <TimeDoctor_QUEUE_SEND+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STA 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <TimeDoctor_QUEUE_SEND+0x78>)
 8000e60:	18d0      	adds	r0, r2, r3
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <TimeDoctor_QUEUE_SEND+0x7c>)
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	2301      	movs	r3, #1
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <TimeDoctor_QUEUE_SEND+0x80>)
 8000e70:	f016 fde4 	bl	8017a3c <siprintf>
 8000e74:	4602      	mov	r2, r0
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <TimeDoctor_QUEUE_SEND+0x74>)
 8000e7e:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f383 8811 	msr	BASEPRI, r3
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20009e94 	.word	0x20009e94
 8000e98:	20009e98 	.word	0x20009e98
 8000e9c:	e0001000 	.word	0xe0001000
 8000ea0:	0801857c 	.word	0x0801857c

08000ea4 <TimeDoctor_QUEUE_SEND_FROM_ISR>:

void TimeDoctor_QUEUE_SEND_FROM_ISR( uint32_t uxQueueNumber, uint32_t uxMessagesWaiting)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000eae:	f3ef 8211 	mrs	r2, BASEPRI
 8000eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb6:	b672      	cpsid	i
 8000eb8:	f383 8811 	msr	BASEPRI, r3
 8000ebc:	f3bf 8f6f 	isb	sy
 8000ec0:	f3bf 8f4f 	dsb	sy
 8000ec4:	b662      	cpsie	i
 8000ec6:	613a      	str	r2, [r7, #16]
 8000ec8:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000eca:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d813      	bhi.n	8000f04 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STA 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <TimeDoctor_QUEUE_SEND_FROM_ISR+0x78>)
 8000ee4:	18d0      	adds	r0, r2, r3
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x7c>)
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	490c      	ldr	r1, [pc, #48]	; (8000f24 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x80>)
 8000ef4:	f016 fda2 	bl	8017a3c <siprintf>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <TimeDoctor_QUEUE_SEND_FROM_ISR+0x74>)
 8000f02:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	f383 8811 	msr	BASEPRI, r3
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20009e94 	.word	0x20009e94
 8000f1c:	20009e98 	.word	0x20009e98
 8000f20:	e0001000 	.word	0xe0001000
 8000f24:	0801857c 	.word	0x0801857c

08000f28 <TimeDoctor_QUEUE_RECEIVE>:

void TimeDoctor_QUEUE_RECEIVE(uint32_t uxQueueNumber, uint32_t uxMessagesWaiting) /*The number of items currently in the queue. */
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000f32:	f3ef 8211 	mrs	r2, BASEPRI
 8000f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f3a:	b672      	cpsid	i
 8000f3c:	f383 8811 	msr	BASEPRI, r3
 8000f40:	f3bf 8f6f 	isb	sy
 8000f44:	f3bf 8f4f 	dsb	sy
 8000f48:	b662      	cpsie	i
 8000f4a:	613a      	str	r2, [r7, #16]
 8000f4c:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000f4e:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d813      	bhi.n	8000f88 <TimeDoctor_QUEUE_RECEIVE+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STO 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <TimeDoctor_QUEUE_RECEIVE+0x78>)
 8000f68:	18d0      	adds	r0, r2, r3
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <TimeDoctor_QUEUE_RECEIVE+0x7c>)
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4613      	mov	r3, r2
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <TimeDoctor_QUEUE_RECEIVE+0x80>)
 8000f78:	f016 fd60 	bl	8017a3c <siprintf>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <TimeDoctor_QUEUE_RECEIVE+0x74>)
 8000f86:	6013      	str	r3, [r2, #0]

	EPILOG();
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f383 8811 	msr	BASEPRI, r3
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20009e94 	.word	0x20009e94
 8000fa0:	20009e98 	.word	0x20009e98
 8000fa4:	e0001000 	.word	0xe0001000
 8000fa8:	08018590 	.word	0x08018590

08000fac <TimeDoctor_QUEUE_RECEIVE_FROM_ISR>:

void TimeDoctor_QUEUE_RECEIVE_FROM_ISR( uint32_t uxQueueNumber, uint32_t uxMessagesWaiting )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	__asm volatile
 8000fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8000fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbe:	b672      	cpsid	i
 8000fc0:	f383 8811 	msr	BASEPRI, r3
 8000fc4:	f3bf 8f6f 	isb	sy
 8000fc8:	f3bf 8f4f 	dsb	sy
 8000fcc:	b662      	cpsie	i
 8000fce:	613a      	str	r2, [r7, #16]
 8000fd0:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8000fd2:	693b      	ldr	r3, [r7, #16]
	PROLOG();
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	f64f 13bf 	movw	r3, #63935	; 0xf9bf
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d813      	bhi.n	800100c <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x60>

	buffer_used += sprintf( buffer+buffer_used, "STO 3 %lu %lu %u\r\n", uxQueueNumber, TD_GET_TICK(), 1 );
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x78>)
 8000fec:	18d0      	adds	r0, r2, r3
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x7c>)
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	490c      	ldr	r1, [pc, #48]	; (800102c <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x80>)
 8000ffc:	f016 fd1e 	bl	8017a3c <siprintf>
 8001000:	4602      	mov	r2, r0
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <TimeDoctor_QUEUE_RECEIVE_FROM_ISR+0x74>)
 800100a:	6013      	str	r3, [r2, #0]

	EPILOG();
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f383 8811 	msr	BASEPRI, r3
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20009e94 	.word	0x20009e94
 8001024:	20009e98 	.word	0x20009e98
 8001028:	e0001000 	.word	0xe0001000
 800102c:	08018590 	.word	0x08018590

08001030 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
#define AUDIO_IN_SAMPLES_RATE 16000
#define AUDIO_IN_SAMPLES (AUDIO_IN_SAMPLES_RATE/10)
int16_t audio_in_buffer[AUDIO_IN_SAMPLES*2]; // L+R interleaved

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	osStatus_t status = osMessageQueuePut(audioQueue, &audio_in_buffer[0] , 0 , 0);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x30>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	2200      	movs	r2, #0
 8001072:	4909      	ldr	r1, [pc, #36]	; (8001098 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>)
 8001074:	f012 ff0c 	bl	8013e90 <osMessageQueuePut>
 8001078:	6078      	str	r0, [r7, #4]
	if(status == osErrorResource){
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f113 0f03 	cmn.w	r3, #3
 8001080:	d004      	beq.n	800108c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x28>
		//check documentation
	}
	else if (status != osOK){
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x28>
		Error_Handler();
 8001088:	f001 fcc0 	bl	8002a0c <Error_Handler>
	}
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20019b84 	.word	0x20019b84
 8001098:	20019dac 	.word	0x20019dac

0800109c <BSP_AUDIO_IN_TransferComplete_CallBack>:
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	osStatus_t status = osMessageQueuePut(audioQueue, &audio_in_buffer[AUDIO_IN_SAMPLES/2] , 0 , 0);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <BSP_AUDIO_IN_TransferComplete_CallBack+0x30>)
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	2300      	movs	r3, #0
 80010a8:	2200      	movs	r2, #0
 80010aa:	4909      	ldr	r1, [pc, #36]	; (80010d0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>)
 80010ac:	f012 fef0 	bl	8013e90 <osMessageQueuePut>
 80010b0:	6078      	str	r0, [r7, #4]
	if(status == osErrorResource){
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f113 0f03 	cmn.w	r3, #3
 80010b8:	d004      	beq.n	80010c4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>
		//check documentation
	}
	else if (status != osOK){
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x28>
		Error_Handler();
 80010c0:	f001 fca4 	bl	8002a0c <Error_Handler>
	}
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20019b84 	.word	0x20019b84
 80010d0:	2001a3ec 	.word	0x2001a3ec

080010d4 <BSP_AUDIO_IN_Error_CallBack>:
void BSP_AUDIO_IN_Error_CallBack(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <AudioRecordingFunction>:
void AudioRecordingFunction(void *argument) ///function of AudioReacording thread
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	uint8_t ok;
	  ok = BSP_AUDIO_IN_Init(AUDIO_IN_SAMPLES_RATE, 16, 2);
 80010ec:	2202      	movs	r2, #2
 80010ee:	2110      	movs	r1, #16
 80010f0:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80010f4:	f004 fdc5 	bl	8005c82 <BSP_AUDIO_IN_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
	  if (ok != AUDIO_OK){
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <AudioRecordingFunction+0x22>
		  Error_Handler();
 8001102:	f001 fc83 	bl	8002a0c <Error_Handler>
	  }
	  ok = BSP_AUDIO_IN_Record(audio_in_buffer, AUDIO_IN_SAMPLES);
 8001106:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <AudioRecordingFunction+0x4c>)
 800110c:	f004 fe38 	bl	8005d80 <BSP_AUDIO_IN_Record>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]
	  if (ok != AUDIO_OK){
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <AudioRecordingFunction+0x3a>
	  	  Error_Handler();
 800111a:	f001 fc77 	bl	8002a0c <Error_Handler>
	    }
	  osThreadSuspend(audioRecordingHandle);
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <AudioRecordingFunction+0x50>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f012 fc84 	bl	8013a30 <osThreadSuspend>

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20019dac 	.word	0x20019dac
 8001134:	2001b72c 	.word	0x2001b72c

08001138 <calcdBFS>:
float calcdBFS(int16_t buffer[], int len){
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	float sum = 0;
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
			for (int i=0 ; i < len ; i+=2){
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	e01b      	b.n	8001186 <calcdBFS+0x4e>
				sum += buffer[i]*buffer[i];
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	4619      	mov	r1, r3
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	4413      	add	r3, r2
 8001164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001168:	fb03 f301 	mul.w	r3, r3, r1
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	ed97 7a07 	vldr	s14, [r7, #28]
 8001178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117c:	edc7 7a07 	vstr	s15, [r7, #28]
			for (int i=0 ; i < len ; i+=2){
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	3302      	adds	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	dbdf      	blt.n	800114e <calcdBFS+0x16>
			}
			sum /=  len/2 ;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	da00      	bge.n	8001196 <calcdBFS+0x5e>
 8001194:	3301      	adds	r3, #1
 8001196:	105b      	asrs	r3, r3, #1
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80011a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a8:	edc7 7a07 	vstr	s15, [r7, #28]
			//float moyenne = sum / AUDIO_IN_SAMPLES*2/2;

			float maxSignal = (1<<15)-1;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <calcdBFS+0xbc>)
 80011ae:	617b      	str	r3, [r7, #20]
			float maxMoyenne = maxSignal*maxSignal;
 80011b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80011b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011bc:	edc7 7a04 	vstr	s15, [r7, #16]

			float dBFS = 10 * log10f(sum/maxMoyenne);
 80011c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80011c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011cc:	eeb0 0a66 	vmov.f32	s0, s13
 80011d0:	f016 ff78 	bl	80180c4 <log10f>
 80011d4:	eeb0 7a40 	vmov.f32	s14, s0
 80011d8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	edc7 7a03 	vstr	s15, [r7, #12]

	    return dBFS;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	ee07 3a90 	vmov	s15, r3
}
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	46fffe00 	.word	0x46fffe00

080011f8 <AudioProcessingFunction>:
void AudioProcessingFunction(void *argument)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b08b      	sub	sp, #44	; 0x2c
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	int x = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
	for (;;){
		static int16_t buffer[AUDIO_IN_SAMPLES*2/2];
		osStatus_t status = osMessageQueueGet(audioQueue, &buffer[0], NULL, 1000);
 8001204:	4b52      	ldr	r3, [pc, #328]	; (8001350 <AudioProcessingFunction+0x158>)
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120c:	2200      	movs	r2, #0
 800120e:	4951      	ldr	r1, [pc, #324]	; (8001354 <AudioProcessingFunction+0x15c>)
 8001210:	f012 feb2 	bl	8013f78 <osMessageQueueGet>
 8001214:	61b8      	str	r0, [r7, #24]
		if(status != osOK){
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <AudioProcessingFunction+0x28>
			Error_Handler();
 800121c:	f001 fbf6 	bl	8002a0c <Error_Handler>
		}
		float dBFS_A = calcdBFS(&buffer[0], AUDIO_IN_SAMPLES*2/2);
 8001220:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001224:	484b      	ldr	r0, [pc, #300]	; (8001354 <AudioProcessingFunction+0x15c>)
 8001226:	f7ff ff87 	bl	8001138 <calcdBFS>
 800122a:	ed87 0a05 	vstr	s0, [r7, #20]
		float dBFS_B = calcdBFS(&buffer[1], AUDIO_IN_SAMPLES*2/2);
 800122e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001232:	4849      	ldr	r0, [pc, #292]	; (8001358 <AudioProcessingFunction+0x160>)
 8001234:	f7ff ff80 	bl	8001138 <calcdBFS>
 8001238:	ed87 0a04 	vstr	s0, [r7, #16]
		//printf("dBFS= %4d\n", (int)dBFS);
		//BSP_LED_Toggle(LED1);
		if (osMutexAcquire(mutexLCD, osWaitForever) == osOK){
 800123c:	4b47      	ldr	r3, [pc, #284]	; (800135c <AudioProcessingFunction+0x164>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	4618      	mov	r0, r3
 8001246:	f012 fcef 	bl	8013c28 <osMutexAcquire>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1d9      	bne.n	8001204 <AudioProcessingFunction+0xc>
			float min =-60;
 8001250:	4b43      	ldr	r3, [pc, #268]	; (8001360 <AudioProcessingFunction+0x168>)
 8001252:	60fb      	str	r3, [r7, #12]
			float max =0;
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]

			int h_A = (int)(BSP_LCD_GetYSize()/2 * (dBFS_A-min)/(max-min));
 800125a:	f004 ffbf 	bl	80061dc <BSP_LCD_GetYSize>
 800125e:	4603      	mov	r3, r0
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800126a:	edd7 6a05 	vldr	s13, [r7, #20]
 800126e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001272:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001276:	ee67 6a27 	vmul.f32	s13, s14, s15
 800127a:	ed97 7a02 	vldr	s14, [r7, #8]
 800127e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001282:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128e:	ee17 3a90 	vmov	r3, s15
 8001292:	623b      	str	r3, [r7, #32]
			if(h_A <= 0 ){
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	2b00      	cmp	r3, #0
 8001298:	dc01      	bgt.n	800129e <AudioProcessingFunction+0xa6>
				h_A = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
			}
			BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800129e:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80012a2:	f005 f80f 	bl	80062c4 <BSP_LCD_SetTextColor>
			BSP_LCD_DrawVLine(x, BSP_LCD_GetYSize()/2,h_A);
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	b29c      	uxth	r4, r3
 80012aa:	f004 ff97 	bl	80061dc <BSP_LCD_GetYSize>
 80012ae:	4603      	mov	r3, r0
 80012b0:	085b      	lsrs	r3, r3, #1
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	6a3a      	ldr	r2, [r7, #32]
 80012b6:	b292      	uxth	r2, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	4620      	mov	r0, r4
 80012bc:	f005 f9dc 	bl	8006678 <BSP_LCD_DrawVLine>

			int h_B = (int)(BSP_LCD_GetYSize()/2 * (dBFS_B-min)/(max-min));
 80012c0:	f004 ff8c 	bl	80061dc <BSP_LCD_GetYSize>
 80012c4:	4603      	mov	r3, r0
 80012c6:	085b      	lsrs	r3, r3, #1
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012d0:	edd7 6a04 	vldr	s13, [r7, #16]
 80012d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80012e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f4:	ee17 3a90 	vmov	r3, s15
 80012f8:	61fb      	str	r3, [r7, #28]
			if(h_B <= 0 ){
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	dc01      	bgt.n	8001304 <AudioProcessingFunction+0x10c>
				h_B = 1;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
			}
			BSP_LCD_DrawVLine(x, BSP_LCD_GetYSize()/2-h_B,h_B);
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	b29c      	uxth	r4, r3
 8001308:	f004 ff68 	bl	80061dc <BSP_LCD_GetYSize>
 800130c:	4603      	mov	r3, r0
 800130e:	085b      	lsrs	r3, r3, #1
 8001310:	b29a      	uxth	r2, r3
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	b29b      	uxth	r3, r3
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	b29b      	uxth	r3, r3
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	b292      	uxth	r2, r2
 800131e:	4619      	mov	r1, r3
 8001320:	4620      	mov	r0, r4
 8001322:	f005 f9a9 	bl	8006678 <BSP_LCD_DrawVLine>
			x++;
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	3301      	adds	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
			if(x == BSP_LCD_GetXSize()){
 800132c:	f004 ff42 	bl	80061b4 <BSP_LCD_GetXSize>
 8001330:	4602      	mov	r2, r0
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	429a      	cmp	r2, r3
 8001336:	d104      	bne.n	8001342 <AudioProcessingFunction+0x14a>
				BSP_LCD_Clear(LCD_COLOR_GRAY);
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <AudioProcessingFunction+0x16c>)
 800133a:	f005 f80f 	bl	800635c <BSP_LCD_Clear>
				x = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
			}
			osMutexRelease(mutexLCD);
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <AudioProcessingFunction+0x164>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f012 fccc 	bl	8013ce4 <osMutexRelease>
	for (;;){
 800134c:	e75a      	b.n	8001204 <AudioProcessingFunction+0xc>
 800134e:	bf00      	nop
 8001350:	20019b84 	.word	0x20019b84
 8001354:	20000120 	.word	0x20000120
 8001358:	20000122 	.word	0x20000122
 800135c:	20019afc 	.word	0x20019afc
 8001360:	c2700000 	.word	0xc2700000
 8001364:	ff808080 	.word	0xff808080

08001368 <TouchScreenFunction>:
		}
	}
}
void TouchScreenFunction(void *argument){
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b08f      	sub	sp, #60	; 0x3c
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001370:	f004 ff20 	bl	80061b4 <BSP_LCD_GetXSize>
 8001374:	4603      	mov	r3, r0
 8001376:	b29c      	uxth	r4, r3
 8001378:	f004 ff30 	bl	80061dc <BSP_LCD_GetYSize>
 800137c:	4603      	mov	r3, r0
 800137e:	b29b      	uxth	r3, r3
 8001380:	4619      	mov	r1, r3
 8001382:	4620      	mov	r0, r4
 8001384:	f005 ff62 	bl	800724c <BSP_TS_Init>
	for(;;){
		TS_StateTypeDef state;
		BSP_TS_GetState(&state);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4618      	mov	r0, r3
 800138e:	f005 ff9d 	bl	80072cc <BSP_TS_GetState>
		if(osMutexAcquire(mutexLCD, osWaitForever)== osOK){
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <TouchScreenFunction+0x70>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f04f 31ff 	mov.w	r1, #4294967295
 800139a:	4618      	mov	r0, r3
 800139c:	f012 fc44 	bl	8013c28 <osMutexAcquire>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <TouchScreenFunction+0x20>
			if ((state.touchDetected > 0) && (state.touchWeight[0]>0)){
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00f      	beq.n	80013cc <TouchScreenFunction+0x64>
 80013ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00b      	beq.n	80013cc <TouchScreenFunction+0x64>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f004 ff84 	bl	80062c4 <BSP_LCD_SetTextColor>
				BSP_LCD_FillCircle(state.touchX[0], state.touchY[0], state.touchWeight[0]);
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	8b39      	ldrh	r1, [r7, #24]
 80013c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80013c4:	b292      	uxth	r2, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f005 faf0 	bl	80069ac <BSP_LCD_FillCircle>
			}
			osMutexRelease(mutexLCD);
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <TouchScreenFunction+0x70>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f012 fc87 	bl	8013ce4 <osMutexRelease>
	for(;;){
 80013d6:	e7d7      	b.n	8001388 <TouchScreenFunction+0x20>
 80013d8:	20019afc 	.word	0x20019afc

080013dc <myPutchar>:
		}}
}
int myPutchar(int ch)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80013e4:	1d39      	adds	r1, r7, #4
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	2201      	movs	r2, #1
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <myPutchar+0x20>)
 80013ee:	f00e fbd1 	bl	800fb94 <HAL_UART_Transmit>
	return ch;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20019ccc 	.word	0x20019ccc

08001400 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
	TimeDoctor_STOP();
 800140a:	f7ff fb53 	bl	8000ab4 <TimeDoctor_STOP>
	// save output to UART1
	TimeDoctor_SAVE(&myPutchar);
 800140e:	4803      	ldr	r0, [pc, #12]	; (800141c <HAL_GPIO_EXTI_Callback+0x1c>)
 8001410:	f7ff fb68 	bl	8000ae4 <TimeDoctor_SAVE>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	080013dd 	.word	0x080013dd

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
__HAL_DBGMCU_FREEZE_TIM6();
 8001424:	4b57      	ldr	r3, [pc, #348]	; (8001584 <main+0x164>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a56      	ldr	r2, [pc, #344]	; (8001584 <main+0x164>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f006 f96c 	bl	800770c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001434:	f000 f8d0 	bl	80015d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001438:	f001 f8c8 	bl	80025cc <MX_GPIO_Init>
  MX_ADC3_Init();
 800143c:	f000 f98a 	bl	8001754 <MX_ADC3_Init>
  MX_CRC_Init();
 8001440:	f000 f9da 	bl	80017f8 <MX_CRC_Init>
  MX_DCMI_Init();
 8001444:	f000 f9fa 	bl	800183c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001448:	f000 fa2c 	bl	80018a4 <MX_DMA2D_Init>
  MX_ETH_Init();
 800144c:	f000 fa5c 	bl	8001908 <MX_ETH_Init>
  MX_FMC_Init();
 8001450:	f001 f86c 	bl	800252c <MX_FMC_Init>
  MX_I2C1_Init();
 8001454:	f000 fa60 	bl	8001918 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001458:	f000 fa9e 	bl	8001998 <MX_I2C3_Init>
  MX_LTDC_Init();
 800145c:	f000 fafa 	bl	8001a54 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001460:	f000 fbae 	bl	8001bc0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001464:	f000 fbd8 	bl	8001c18 <MX_RTC_Init>
  MX_SAI2_Init();
 8001468:	f000 fc7c 	bl	8001d64 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800146c:	f000 fd22 	bl	8001eb4 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8001470:	f000 fd50 	bl	8001f14 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001474:	f000 fdfa 	bl	800206c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001478:	f000 fe6e 	bl	8002158 <MX_TIM3_Init>
  MX_TIM5_Init();
 800147c:	f000 fee4 	bl	8002248 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001480:	f000 ff5a 	bl	8002338 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001484:	f000 ffac 	bl	80023e0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001488:	f000 fff0 	bl	800246c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800148c:	f001 f81e 	bl	80024cc <MX_USART6_UART_Init>
  MX_IWDG_Init();
 8001490:	f000 fac2 	bl	8001a18 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001494:	f004 fe1e 	bl	80060d4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001498:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800149c:	2000      	movs	r0, #0
 800149e:	f004 feb1 	bl	8006204 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_GRAY);
 80014a2:	4839      	ldr	r0, [pc, #228]	; (8001588 <main+0x168>)
 80014a4:	f004 ff5a 	bl	800635c <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80014a8:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80014ac:	f004 ff0a 	bl	80062c4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_GRAY);
 80014b0:	4835      	ldr	r0, [pc, #212]	; (8001588 <main+0x168>)
 80014b2:	f004 ff1f 	bl	80062f4 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, "Hello World !!!", CENTER_MODE);
 80014b6:	f004 fe91 	bl	80061dc <BSP_LCD_GetYSize>
 80014ba:	4603      	mov	r3, r0
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	b299      	uxth	r1, r3
 80014c0:	2301      	movs	r3, #1
 80014c2:	4a32      	ldr	r2, [pc, #200]	; (800158c <main+0x16c>)
 80014c4:	2000      	movs	r0, #0
 80014c6:	f004 ffb5 	bl	8006434 <BSP_LCD_DisplayStringAt>
  //LCD_LOG_Init();
  //LCD_LOG_SetHeader("Header");
  //LCD_LOG_SetFooter("Footer");


  TimeDoctor_START();
 80014ca:	f7ff fa7d 	bl	80009c8 <TimeDoctor_START>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014ce:	f012 f99f 	bl	8013810 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  mutexLCD = osMutexNew (&mutexLCD_attributes);
 80014d2:	482f      	ldr	r0, [pc, #188]	; (8001590 <main+0x170>)
 80014d4:	f012 fb0e 	bl	8013af4 <osMutexNew>
 80014d8:	4602      	mov	r2, r0
 80014da:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <main+0x174>)
 80014dc:	601a      	str	r2, [r3, #0]
  if (mutexLCD == NULL){
 80014de:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <main+0x174>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <main+0xca>
	  Error_Handler();
 80014e6:	f001 fa91 	bl	8002a0c <Error_Handler>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  audioQueue = osMessageQueueNew(2, sizeof(audio_in_buffer)/2 , &audioQueue_attributes);
 80014ea:	4a2b      	ldr	r2, [pc, #172]	; (8001598 <main+0x178>)
 80014ec:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80014f0:	2002      	movs	r0, #2
 80014f2:	f012 fc47 	bl	8013d84 <osMessageQueueNew>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <main+0x17c>)
 80014fa:	601a      	str	r2, [r3, #0]
  if (audioQueue == NULL){
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <main+0x17c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <main+0xe8>
	  Error_Handler();
 8001504:	f001 fa82 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001508:	4a25      	ldr	r2, [pc, #148]	; (80015a0 <main+0x180>)
 800150a:	2100      	movs	r1, #0
 800150c:	4825      	ldr	r0, [pc, #148]	; (80015a4 <main+0x184>)
 800150e:	f012 f9e9 	bl	80138e4 <osThreadNew>
 8001512:	4602      	mov	r2, r0
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <main+0x188>)
 8001516:	601a      	str	r2, [r3, #0]

  /* creation of defaulTask */
  defaulTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaulTask_attributes);
 8001518:	4a24      	ldr	r2, [pc, #144]	; (80015ac <main+0x18c>)
 800151a:	2100      	movs	r1, #0
 800151c:	4821      	ldr	r0, [pc, #132]	; (80015a4 <main+0x184>)
 800151e:	f012 f9e1 	bl	80138e4 <osThreadNew>
 8001522:	4602      	mov	r2, r0
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <main+0x190>)
 8001526:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  audioRecordingHandle = osThreadNew(&AudioRecordingFunction, NULL, &audioRecording_attributes);
 8001528:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <main+0x194>)
 800152a:	2100      	movs	r1, #0
 800152c:	4822      	ldr	r0, [pc, #136]	; (80015b8 <main+0x198>)
 800152e:	f012 f9d9 	bl	80138e4 <osThreadNew>
 8001532:	4602      	mov	r2, r0
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <main+0x19c>)
 8001536:	601a      	str	r2, [r3, #0]
  if (audioRecordingHandle == NULL){
 8001538:	4b20      	ldr	r3, [pc, #128]	; (80015bc <main+0x19c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <main+0x124>
	  Error_Handler();
 8001540:	f001 fa64 	bl	8002a0c <Error_Handler>
  }
  audioProcessingHandle = osThreadNew(&AudioProcessingFunction, NULL, &audioProcessing_attributes);
 8001544:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <main+0x1a0>)
 8001546:	2100      	movs	r1, #0
 8001548:	481e      	ldr	r0, [pc, #120]	; (80015c4 <main+0x1a4>)
 800154a:	f012 f9cb 	bl	80138e4 <osThreadNew>
 800154e:	4602      	mov	r2, r0
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <main+0x1a8>)
 8001552:	601a      	str	r2, [r3, #0]
  if (audioProcessingHandle == NULL){
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <main+0x1a8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <main+0x140>
	  Error_Handler();
 800155c:	f001 fa56 	bl	8002a0c <Error_Handler>
  }

  touchScreenHandle = osThreadNew(&TouchScreenFunction, NULL, &touchScreen_attributes);
 8001560:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <main+0x1ac>)
 8001562:	2100      	movs	r1, #0
 8001564:	481a      	ldr	r0, [pc, #104]	; (80015d0 <main+0x1b0>)
 8001566:	f012 f9bd 	bl	80138e4 <osThreadNew>
 800156a:	4602      	mov	r2, r0
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <main+0x1b4>)
 800156e:	601a      	str	r2, [r3, #0]
    if (touchScreenHandle == NULL){
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <main+0x1b4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <main+0x15c>
  	  Error_Handler();
 8001578:	f001 fa48 	bl	8002a0c <Error_Handler>
    }

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800157c:	f012 f97c 	bl	8013878 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001580:	e7fe      	b.n	8001580 <main+0x160>
 8001582:	bf00      	nop
 8001584:	e0042000 	.word	0xe0042000
 8001588:	ff808080 	.word	0xff808080
 800158c:	08018600 	.word	0x08018600
 8001590:	080186ec 	.word	0x080186ec
 8001594:	20019afc 	.word	0x20019afc
 8001598:	080186fc 	.word	0x080186fc
 800159c:	20019b84 	.word	0x20019b84
 80015a0:	08018638 	.word	0x08018638
 80015a4:	080029c9 	.word	0x080029c9
 80015a8:	2001991c 	.word	0x2001991c
 80015ac:	0801865c 	.word	0x0801865c
 80015b0:	2001b7b0 	.word	0x2001b7b0
 80015b4:	08018680 	.word	0x08018680
 80015b8:	080010e5 	.word	0x080010e5
 80015bc:	2001b72c 	.word	0x2001b72c
 80015c0:	080186a4 	.word	0x080186a4
 80015c4:	080011f9 	.word	0x080011f9
 80015c8:	20019b00 	.word	0x20019b00
 80015cc:	080186c8 	.word	0x080186c8
 80015d0:	08001369 	.word	0x08001369
 80015d4:	20019cc8 	.word	0x20019cc8

080015d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0b4      	sub	sp, #208	; 0xd0
 80015dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015e2:	2230      	movs	r2, #48	; 0x30
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f016 f967 	bl	80178ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	2284      	movs	r2, #132	; 0x84
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f016 f958 	bl	80178ba <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800160a:	f00a fe63 	bl	800c2d4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <SystemClock_Config+0x170>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a4d      	ldr	r2, [pc, #308]	; (8001748 <SystemClock_Config+0x170>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <SystemClock_Config+0x170>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001626:	4b49      	ldr	r3, [pc, #292]	; (800174c <SystemClock_Config+0x174>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a48      	ldr	r2, [pc, #288]	; (800174c <SystemClock_Config+0x174>)
 800162c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b46      	ldr	r3, [pc, #280]	; (800174c <SystemClock_Config+0x174>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800163e:	2309      	movs	r3, #9
 8001640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800164c:	2301      	movs	r3, #1
 800164e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001652:	2302      	movs	r3, #2
 8001654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800165c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001660:	2319      	movs	r3, #25
 8001662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001666:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800166a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001674:	2309      	movs	r3, #9
 8001676:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800167e:	4618      	mov	r0, r3
 8001680:	f00a ff4a 	bl	800c518 <HAL_RCC_OscConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800168a:	f001 f9bf 	bl	8002a0c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800168e:	f00a fe31 	bl	800c2f4 <HAL_PWREx_EnableOverDrive>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001698:	f001 f9b8 	bl	8002a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169c:	230f      	movs	r3, #15
 800169e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a2:	2302      	movs	r3, #2
 80016a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016c2:	2106      	movs	r1, #6
 80016c4:	4618      	mov	r0, r3
 80016c6:	f00b f9cb 	bl	800ca60 <HAL_RCC_ClockConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80016d0:	f001 f99c 	bl	8002a0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <SystemClock_Config+0x178>)
 80016d6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80016d8:	2364      	movs	r3, #100	; 0x64
 80016da:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80016dc:	2302      	movs	r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80016e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80016ee:	2305      	movs	r3, #5
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80016f6:	2303      	movs	r3, #3
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001702:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800170e:	2300      	movs	r3, #0
 8001710:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001712:	2300      	movs	r3, #0
 8001714:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001716:	2300      	movs	r3, #0
 8001718:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800171a:	2300      	movs	r3, #0
 800171c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800171e:	2300      	movs	r3, #0
 8001720:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001722:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4618      	mov	r0, r3
 8001730:	f00b fb9a 	bl	800ce68 <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0x166>
  {
    Error_Handler();
 800173a:	f001 f967 	bl	8002a0c <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	37d0      	adds	r7, #208	; 0xd0
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000
 8001750:	01314868 	.word	0x01314868

08001754 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800175a:	463b      	mov	r3, r7
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <MX_ADC3_Init+0x98>)
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <MX_ADC3_Init+0x9c>)
 800176a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <MX_ADC3_Init+0x98>)
 800176e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001772:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <MX_ADC3_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_ADC3_Init+0x98>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <MX_ADC3_Init+0x98>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <MX_ADC3_Init+0x98>)
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <MX_ADC3_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_ADC3_Init+0x98>)
 8001796:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <MX_ADC3_Init+0xa0>)
 8001798:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_ADC3_Init+0x98>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_ADC3_Init+0x98>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_ADC3_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_ADC3_Init+0x98>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80017b4:	480d      	ldr	r0, [pc, #52]	; (80017ec <MX_ADC3_Init+0x98>)
 80017b6:	f005 fff9 	bl	80077ac <HAL_ADC_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80017c0:	f001 f924 	bl	8002a0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017c4:	2304      	movs	r3, #4
 80017c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017c8:	2301      	movs	r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017d0:	463b      	mov	r3, r7
 80017d2:	4619      	mov	r1, r3
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_ADC3_Init+0x98>)
 80017d6:	f006 f82d 	bl	8007834 <HAL_ADC_ConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80017e0:	f001 f914 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20019c30 	.word	0x20019c30
 80017f0:	40012200 	.word	0x40012200
 80017f4:	0f000001 	.word	0x0f000001

080017f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <MX_CRC_Init+0x3c>)
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <MX_CRC_Init+0x40>)
 8001800:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_CRC_Init+0x3c>)
 8001804:	2200      	movs	r2, #0
 8001806:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_CRC_Init+0x3c>)
 800180a:	2200      	movs	r2, #0
 800180c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_CRC_Init+0x3c>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_CRC_Init+0x3c>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_CRC_Init+0x3c>)
 800181c:	2201      	movs	r2, #1
 800181e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_CRC_Init+0x3c>)
 8001822:	f006 fb2d 	bl	8007e80 <HAL_CRC_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800182c:	f001 f8ee 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20019ad8 	.word	0x20019ad8
 8001838:	40023000 	.word	0x40023000

0800183c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <MX_DCMI_Init+0x60>)
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <MX_DCMI_Init+0x64>)
 8001844:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_DCMI_Init+0x60>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <MX_DCMI_Init+0x60>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_DCMI_Init+0x60>)
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <MX_DCMI_Init+0x60>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_DCMI_Init+0x60>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <MX_DCMI_Init+0x60>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_DCMI_Init+0x60>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <MX_DCMI_Init+0x60>)
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_DCMI_Init+0x60>)
 8001878:	2200      	movs	r2, #0
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <MX_DCMI_Init+0x60>)
 800187e:	2200      	movs	r2, #0
 8001880:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_DCMI_Init+0x60>)
 8001884:	2200      	movs	r2, #0
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <MX_DCMI_Init+0x60>)
 800188a:	f006 fbe3 	bl	8008054 <HAL_DCMI_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001894:	f001 f8ba 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20019c78 	.word	0x20019c78
 80018a0:	50050000 	.word	0x50050000

080018a4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_DMA2D_Init+0x5c>)
 80018aa:	4a16      	ldr	r2, [pc, #88]	; (8001904 <MX_DMA2D_Init+0x60>)
 80018ac:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <MX_DMA2D_Init+0x5c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_DMA2D_Init+0x5c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_DMA2D_Init+0x5c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_DMA2D_Init+0x5c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_DMA2D_Init+0x5c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_DMA2D_Init+0x5c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <MX_DMA2D_Init+0x5c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <MX_DMA2D_Init+0x5c>)
 80018da:	f007 f809 	bl	80088f0 <HAL_DMA2D_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80018e4:	f001 f892 	bl	8002a0c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80018e8:	2101      	movs	r1, #1
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_DMA2D_Init+0x5c>)
 80018ec:	f007 fa6e 	bl	8008dcc <HAL_DMA2D_ConfigLayer>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80018f6:	f001 f889 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2001b730 	.word	0x2001b730
 8001904:	4002b000 	.word	0x4002b000

08001908 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_Init 0 */

  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */
return;
 800190c:	bf00      	nop
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <MX_I2C1_Init+0x74>)
 800191e:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <MX_I2C1_Init+0x78>)
 8001920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <MX_I2C1_Init+0x74>)
 8001924:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <MX_I2C1_Init+0x7c>)
 8001926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <MX_I2C1_Init+0x74>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <MX_I2C1_Init+0x74>)
 8001930:	2201      	movs	r2, #1
 8001932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <MX_I2C1_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_I2C1_Init+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <MX_I2C1_Init+0x74>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_I2C1_Init+0x74>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_I2C1_Init+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001952:	480e      	ldr	r0, [pc, #56]	; (800198c <MX_I2C1_Init+0x74>)
 8001954:	f009 fb40 	bl	800afd8 <HAL_I2C_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800195e:	f001 f855 	bl	8002a0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001962:	2100      	movs	r1, #0
 8001964:	4809      	ldr	r0, [pc, #36]	; (800198c <MX_I2C1_Init+0x74>)
 8001966:	f00a f84f 	bl	800ba08 <HAL_I2CEx_ConfigAnalogFilter>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001970:	f001 f84c 	bl	8002a0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001974:	2100      	movs	r1, #0
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_I2C1_Init+0x74>)
 8001978:	f00a f891 	bl	800ba9e <HAL_I2CEx_ConfigDigitalFilter>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001982:	f001 f843 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20019a7c 	.word	0x20019a7c
 8001990:	40005400 	.word	0x40005400
 8001994:	00c0eaff 	.word	0x00c0eaff

08001998 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <MX_I2C3_Init+0x74>)
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <MX_I2C3_Init+0x78>)
 80019a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_I2C3_Init+0x74>)
 80019a4:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <MX_I2C3_Init+0x7c>)
 80019a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_I2C3_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <MX_I2C3_Init+0x74>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <MX_I2C3_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <MX_I2C3_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <MX_I2C3_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_I2C3_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <MX_I2C3_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019d2:	480e      	ldr	r0, [pc, #56]	; (8001a0c <MX_I2C3_Init+0x74>)
 80019d4:	f009 fb00 	bl	800afd8 <HAL_I2C_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80019de:	f001 f815 	bl	8002a0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019e2:	2100      	movs	r1, #0
 80019e4:	4809      	ldr	r0, [pc, #36]	; (8001a0c <MX_I2C3_Init+0x74>)
 80019e6:	f00a f80f 	bl	800ba08 <HAL_I2CEx_ConfigAnalogFilter>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80019f0:	f001 f80c 	bl	8002a0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80019f4:	2100      	movs	r1, #0
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_I2C3_Init+0x74>)
 80019f8:	f00a f851 	bl	800ba9e <HAL_I2CEx_ConfigDigitalFilter>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001a02:	f001 f803 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20019920 	.word	0x20019920
 8001a10:	40005c00 	.word	0x40005c00
 8001a14:	00c0eaff 	.word	0x00c0eaff

08001a18 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_IWDG_Init+0x34>)
 8001a1e:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <MX_IWDG_Init+0x38>)
 8001a20:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <MX_IWDG_Init+0x34>)
 8001a24:	2203      	movs	r2, #3
 8001a26:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_IWDG_Init+0x34>)
 8001a2a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001a2e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2000;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_IWDG_Init+0x34>)
 8001a32:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a36:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <MX_IWDG_Init+0x34>)
 8001a3a:	f00a f87c 	bl	800bb36 <HAL_IWDG_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001a44:	f000 ffe2 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20019ac8 	.word	0x20019ac8
 8001a50:	40003000 	.word	0x40003000

08001a54 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b09a      	sub	sp, #104	; 0x68
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a5e:	2234      	movs	r2, #52	; 0x34
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f015 ff29 	bl	80178ba <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2234      	movs	r2, #52	; 0x34
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f015 ff23 	bl	80178ba <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001a76:	4a51      	ldr	r2, [pc, #324]	; (8001bbc <MX_LTDC_Init+0x168>)
 8001a78:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a7a:	4b4f      	ldr	r3, [pc, #316]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a80:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a86:	4b4c      	ldr	r3, [pc, #304]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001a92:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001a94:	2228      	movs	r2, #40	; 0x28
 8001a96:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001a98:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001a9a:	2209      	movs	r2, #9
 8001a9c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001a9e:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001aa0:	2235      	movs	r2, #53	; 0x35
 8001aa2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001aa4:	4b44      	ldr	r3, [pc, #272]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001aa6:	220b      	movs	r2, #11
 8001aa8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001aaa:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001aac:	f240 2215 	movw	r2, #533	; 0x215
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001ab4:	f240 121b 	movw	r2, #283	; 0x11b
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001aba:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001abc:	f240 2235 	movw	r2, #565	; 0x235
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001ac4:	f240 121d 	movw	r2, #285	; 0x11d
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001aca:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ad2:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ae2:	4835      	ldr	r0, [pc, #212]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001ae4:	f00a f87e 	bl	800bbe4 <HAL_LTDC_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001aee:	f000 ff8d 	bl	8002a0c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8001af6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8001b00:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b04:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001b06:	2302      	movs	r3, #2
 8001b08:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001b0a:	23ff      	movs	r3, #255	; 0xff
 8001b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b16:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b18:	2307      	movs	r3, #7
 8001b1a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001b1c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001b20:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8001b22:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b26:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001b28:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b2c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b44:	2200      	movs	r2, #0
 8001b46:	4619      	mov	r1, r3
 8001b48:	481b      	ldr	r0, [pc, #108]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001b4a:	f00a f9dd 	bl	800bf08 <HAL_LTDC_ConfigLayer>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001b54:	f000 ff5a 	bl	8002a0c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b74:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b76:	2305      	movs	r3, #5
 8001b78:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_LTDC_Init+0x164>)
 8001ba0:	f00a f9b2 	bl	800bf08 <HAL_LTDC_ConfigLayer>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8001baa:	f000 ff2f 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3768      	adds	r7, #104	; 0x68
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20019b88 	.word	0x20019b88
 8001bbc:	40016800 	.word	0x40016800

08001bc0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_QUADSPI_Init+0x50>)
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <MX_QUADSPI_Init+0x54>)
 8001bc8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_QUADSPI_Init+0x50>)
 8001bcc:	22ff      	movs	r2, #255	; 0xff
 8001bce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_QUADSPI_Init+0x50>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_QUADSPI_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_QUADSPI_Init+0x50>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_QUADSPI_Init+0x50>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_QUADSPI_Init+0x50>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_QUADSPI_Init+0x50>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_QUADSPI_Init+0x50>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_QUADSPI_Init+0x50>)
 8001bfc:	f00a fbca 	bl	800c394 <HAL_QSPI_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001c06:	f000 ff01 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2001b870 	.word	0x2001b870
 8001c14:	a0001000 	.word	0xa0001000

08001c18 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b092      	sub	sp, #72	; 0x48
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001c34:	463b      	mov	r3, r7
 8001c36:	222c      	movs	r2, #44	; 0x2c
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f015 fe3d 	bl	80178ba <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c40:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <MX_RTC_Init+0x144>)
 8001c42:	4a47      	ldr	r2, [pc, #284]	; (8001d60 <MX_RTC_Init+0x148>)
 8001c44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c46:	4b45      	ldr	r3, [pc, #276]	; (8001d5c <MX_RTC_Init+0x144>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c4c:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <MX_RTC_Init+0x144>)
 8001c4e:	227f      	movs	r2, #127	; 0x7f
 8001c50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c52:	4b42      	ldr	r3, [pc, #264]	; (8001d5c <MX_RTC_Init+0x144>)
 8001c54:	22ff      	movs	r2, #255	; 0xff
 8001c56:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c58:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <MX_RTC_Init+0x144>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <MX_RTC_Init+0x144>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c64:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <MX_RTC_Init+0x144>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c6a:	483c      	ldr	r0, [pc, #240]	; (8001d5c <MX_RTC_Init+0x144>)
 8001c6c:	f00b ff2a 	bl	800dac4 <HAL_RTC_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001c76:	f000 fec9 	bl	8002a0c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	482f      	ldr	r0, [pc, #188]	; (8001d5c <MX_RTC_Init+0x144>)
 8001c9e:	f00b ff8d 	bl	800dbbc <HAL_RTC_SetTime>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001ca8:	f000 feb0 	bl	8002a0c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cac:	2301      	movs	r3, #1
 8001cae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4823      	ldr	r0, [pc, #140]	; (8001d5c <MX_RTC_Init+0x144>)
 8001cce:	f00c f833 	bl	800dd38 <HAL_RTC_SetDate>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001cd8:	f000 fe98 	bl	8002a0c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4619      	mov	r1, r3
 8001d12:	4812      	ldr	r0, [pc, #72]	; (8001d5c <MX_RTC_Init+0x144>)
 8001d14:	f00c f8b8 	bl	800de88 <HAL_RTC_SetAlarm>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001d1e:	f000 fe75 	bl	8002a0c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480b      	ldr	r0, [pc, #44]	; (8001d5c <MX_RTC_Init+0x144>)
 8001d30:	f00c f8aa 	bl	800de88 <HAL_RTC_SetAlarm>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001d3a:	f000 fe67 	bl	8002a0c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001d3e:	2202      	movs	r2, #2
 8001d40:	2100      	movs	r1, #0
 8001d42:	4806      	ldr	r0, [pc, #24]	; (8001d5c <MX_RTC_Init+0x144>)
 8001d44:	f00c fa2a 	bl	800e19c <HAL_RTCEx_SetTimeStamp>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001d4e:	f000 fe5d 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	3748      	adds	r7, #72	; 0x48
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20019d4c 	.word	0x20019d4c
 8001d60:	40002800 	.word	0x40002800

08001d64 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001d68:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001d6a:	4a4e      	ldr	r2, [pc, #312]	; (8001ea4 <MX_SAI2_Init+0x140>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001d6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001d74:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001d7a:	4b49      	ldr	r3, [pc, #292]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001d7c:	2240      	movs	r2, #64	; 0x40
 8001d7e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d80:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001d86:	4b46      	ldr	r3, [pc, #280]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001d8c:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001d92:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001d98:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001d9e:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001da4:	4b3e      	ldr	r3, [pc, #248]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001da6:	4a40      	ldr	r2, [pc, #256]	; (8001ea8 <MX_SAI2_Init+0x144>)
 8001da8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001db0:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001db6:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001dbc:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001dc2:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001dc8:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001dce:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001dd4:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001dda:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001de0:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001dec:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001df2:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001df8:	4829      	ldr	r0, [pc, #164]	; (8001ea0 <MX_SAI2_Init+0x13c>)
 8001dfa:	f00c fa25 	bl	800e248 <HAL_SAI_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001e04:	f000 fe02 	bl	8002a0c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001e08:	4b28      	ldr	r3, [pc, #160]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e0a:	4a29      	ldr	r2, [pc, #164]	; (8001eb0 <MX_SAI2_Init+0x14c>)
 8001e0c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e0e:	4b27      	ldr	r3, [pc, #156]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e16:	2203      	movs	r2, #3
 8001e18:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e1c:	2240      	movs	r2, #64	; 0x40
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e20:	4b22      	ldr	r3, [pc, #136]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e38:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e50:	4b16      	ldr	r3, [pc, #88]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e58:	2208      	movs	r2, #8
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001e8c:	4807      	ldr	r0, [pc, #28]	; (8001eac <MX_SAI2_Init+0x148>)
 8001e8e:	f00c f9db 	bl	800e248 <HAL_SAI_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001e98:	f000 fdb8 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200199f8 	.word	0x200199f8
 8001ea4:	40015c04 	.word	0x40015c04
 8001ea8:	0002ee00 	.word	0x0002ee00
 8001eac:	20019898 	.word	0x20019898
 8001eb0:	40015c24 	.word	0x40015c24

08001eb4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001eba:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ebe:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <MX_SPDIFRX_Init+0x5c>)
 8001efe:	f00c fd43 	bl	800e988 <HAL_SPDIFRX_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001f08:	f000 fd80 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200199ac 	.word	0x200199ac

08001f14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b09a      	sub	sp, #104	; 0x68
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
 8001f44:	615a      	str	r2, [r3, #20]
 8001f46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	222c      	movs	r2, #44	; 0x2c
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f015 fcb3 	bl	80178ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f54:	4b43      	ldr	r3, [pc, #268]	; (8002064 <MX_TIM1_Init+0x150>)
 8001f56:	4a44      	ldr	r2, [pc, #272]	; (8002068 <MX_TIM1_Init+0x154>)
 8001f58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f5a:	4b42      	ldr	r3, [pc, #264]	; (8002064 <MX_TIM1_Init+0x150>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f60:	4b40      	ldr	r3, [pc, #256]	; (8002064 <MX_TIM1_Init+0x150>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f66:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <MX_TIM1_Init+0x150>)
 8001f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <MX_TIM1_Init+0x150>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f74:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <MX_TIM1_Init+0x150>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <MX_TIM1_Init+0x150>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f80:	4838      	ldr	r0, [pc, #224]	; (8002064 <MX_TIM1_Init+0x150>)
 8001f82:	f00c fd5d 	bl	800ea40 <HAL_TIM_Base_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001f8c:	f000 fd3e 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f94:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4831      	ldr	r0, [pc, #196]	; (8002064 <MX_TIM1_Init+0x150>)
 8001f9e:	f00d f807 	bl	800efb0 <HAL_TIM_ConfigClockSource>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001fa8:	f000 fd30 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fac:	482d      	ldr	r0, [pc, #180]	; (8002064 <MX_TIM1_Init+0x150>)
 8001fae:	f00c fd9d 	bl	800eaec <HAL_TIM_PWM_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001fb8:	f000 fd28 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4825      	ldr	r0, [pc, #148]	; (8002064 <MX_TIM1_Init+0x150>)
 8001fd0:	f00d fc68 	bl	800f8a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001fda:	f000 fd17 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fde:	2360      	movs	r3, #96	; 0x60
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fea:	2300      	movs	r3, #0
 8001fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ffe:	2200      	movs	r2, #0
 8002000:	4619      	mov	r1, r3
 8002002:	4818      	ldr	r0, [pc, #96]	; (8002064 <MX_TIM1_Init+0x150>)
 8002004:	f00c febc 	bl	800ed80 <HAL_TIM_PWM_ConfigChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800200e:	f000 fcfd 	bl	8002a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4619      	mov	r1, r3
 8002046:	4807      	ldr	r0, [pc, #28]	; (8002064 <MX_TIM1_Init+0x150>)
 8002048:	f00d fcba 	bl	800f9c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002052:	f000 fcdb 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002056:	4803      	ldr	r0, [pc, #12]	; (8002064 <MX_TIM1_Init+0x150>)
 8002058:	f001 f958 	bl	800330c <HAL_TIM_MspPostInit>

}
 800205c:	bf00      	nop
 800205e:	3768      	adds	r7, #104	; 0x68
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20019d6c 	.word	0x20019d6c
 8002068:	40010000 	.word	0x40010000

0800206c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208c:	463b      	mov	r3, r7
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	611a      	str	r2, [r3, #16]
 800209a:	615a      	str	r2, [r3, #20]
 800209c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <MX_TIM2_Init+0xe8>)
 80020a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020a6:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <MX_TIM2_Init+0xe8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <MX_TIM2_Init+0xe8>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80020b2:	4b28      	ldr	r3, [pc, #160]	; (8002154 <MX_TIM2_Init+0xe8>)
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <MX_TIM2_Init+0xe8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b24      	ldr	r3, [pc, #144]	; (8002154 <MX_TIM2_Init+0xe8>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020c6:	4823      	ldr	r0, [pc, #140]	; (8002154 <MX_TIM2_Init+0xe8>)
 80020c8:	f00c fcba 	bl	800ea40 <HAL_TIM_Base_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80020d2:	f000 fc9b 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e0:	4619      	mov	r1, r3
 80020e2:	481c      	ldr	r0, [pc, #112]	; (8002154 <MX_TIM2_Init+0xe8>)
 80020e4:	f00c ff64 	bl	800efb0 <HAL_TIM_ConfigClockSource>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80020ee:	f000 fc8d 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020f2:	4818      	ldr	r0, [pc, #96]	; (8002154 <MX_TIM2_Init+0xe8>)
 80020f4:	f00c fcfa 	bl	800eaec <HAL_TIM_PWM_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80020fe:	f000 fc85 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	4619      	mov	r1, r3
 8002110:	4810      	ldr	r0, [pc, #64]	; (8002154 <MX_TIM2_Init+0xe8>)
 8002112:	f00d fbc7 	bl	800f8a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800211c:	f000 fc76 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002120:	2360      	movs	r3, #96	; 0x60
 8002122:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002130:	463b      	mov	r3, r7
 8002132:	2200      	movs	r2, #0
 8002134:	4619      	mov	r1, r3
 8002136:	4807      	ldr	r0, [pc, #28]	; (8002154 <MX_TIM2_Init+0xe8>)
 8002138:	f00c fe22 	bl	800ed80 <HAL_TIM_PWM_ConfigChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002142:	f000 fc63 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002146:	4803      	ldr	r0, [pc, #12]	; (8002154 <MX_TIM2_Init+0xe8>)
 8002148:	f001 f8e0 	bl	800330c <HAL_TIM_MspPostInit>

}
 800214c:	bf00      	nop
 800214e:	3738      	adds	r7, #56	; 0x38
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2001b770 	.word	0x2001b770

08002158 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08e      	sub	sp, #56	; 0x38
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002178:	463b      	mov	r3, r7
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	611a      	str	r2, [r3, #16]
 8002186:	615a      	str	r2, [r3, #20]
 8002188:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <MX_TIM3_Init+0xe8>)
 800218c:	4a2d      	ldr	r2, [pc, #180]	; (8002244 <MX_TIM3_Init+0xec>)
 800218e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <MX_TIM3_Init+0xe8>)
 8002192:	2200      	movs	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <MX_TIM3_Init+0xe8>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <MX_TIM3_Init+0xe8>)
 800219e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a4:	4b26      	ldr	r3, [pc, #152]	; (8002240 <MX_TIM3_Init+0xe8>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <MX_TIM3_Init+0xe8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021b0:	4823      	ldr	r0, [pc, #140]	; (8002240 <MX_TIM3_Init+0xe8>)
 80021b2:	f00c fc45 	bl	800ea40 <HAL_TIM_Base_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80021bc:	f000 fc26 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ca:	4619      	mov	r1, r3
 80021cc:	481c      	ldr	r0, [pc, #112]	; (8002240 <MX_TIM3_Init+0xe8>)
 80021ce:	f00c feef 	bl	800efb0 <HAL_TIM_ConfigClockSource>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80021d8:	f000 fc18 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021dc:	4818      	ldr	r0, [pc, #96]	; (8002240 <MX_TIM3_Init+0xe8>)
 80021de:	f00c fc85 	bl	800eaec <HAL_TIM_PWM_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80021e8:	f000 fc10 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	4619      	mov	r1, r3
 80021fa:	4811      	ldr	r0, [pc, #68]	; (8002240 <MX_TIM3_Init+0xe8>)
 80021fc:	f00d fb52 	bl	800f8a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002206:	f000 fc01 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220a:	2360      	movs	r3, #96	; 0x60
 800220c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221a:	463b      	mov	r3, r7
 800221c:	2200      	movs	r2, #0
 800221e:	4619      	mov	r1, r3
 8002220:	4807      	ldr	r0, [pc, #28]	; (8002240 <MX_TIM3_Init+0xe8>)
 8002222:	f00c fdad 	bl	800ed80 <HAL_TIM_PWM_ConfigChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800222c:	f000 fbee 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002230:	4803      	ldr	r0, [pc, #12]	; (8002240 <MX_TIM3_Init+0xe8>)
 8002232:	f001 f86b 	bl	800330c <HAL_TIM_MspPostInit>

}
 8002236:	bf00      	nop
 8002238:	3738      	adds	r7, #56	; 0x38
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20019b44 	.word	0x20019b44
 8002244:	40000400 	.word	0x40000400

08002248 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08e      	sub	sp, #56	; 0x38
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002268:	463b      	mov	r3, r7
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	611a      	str	r2, [r3, #16]
 8002276:	615a      	str	r2, [r3, #20]
 8002278:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <MX_TIM5_Init+0xe8>)
 800227c:	4a2d      	ldr	r2, [pc, #180]	; (8002334 <MX_TIM5_Init+0xec>)
 800227e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002280:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <MX_TIM5_Init+0xe8>)
 8002282:	2200      	movs	r2, #0
 8002284:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <MX_TIM5_Init+0xe8>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <MX_TIM5_Init+0xe8>)
 800228e:	f04f 32ff 	mov.w	r2, #4294967295
 8002292:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002294:	4b26      	ldr	r3, [pc, #152]	; (8002330 <MX_TIM5_Init+0xe8>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <MX_TIM5_Init+0xe8>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022a0:	4823      	ldr	r0, [pc, #140]	; (8002330 <MX_TIM5_Init+0xe8>)
 80022a2:	f00c fbcd 	bl	800ea40 <HAL_TIM_Base_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80022ac:	f000 fbae 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ba:	4619      	mov	r1, r3
 80022bc:	481c      	ldr	r0, [pc, #112]	; (8002330 <MX_TIM5_Init+0xe8>)
 80022be:	f00c fe77 	bl	800efb0 <HAL_TIM_ConfigClockSource>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80022c8:	f000 fba0 	bl	8002a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80022cc:	4818      	ldr	r0, [pc, #96]	; (8002330 <MX_TIM5_Init+0xe8>)
 80022ce:	f00c fc0d 	bl	800eaec <HAL_TIM_PWM_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80022d8:	f000 fb98 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	4619      	mov	r1, r3
 80022ea:	4811      	ldr	r0, [pc, #68]	; (8002330 <MX_TIM5_Init+0xe8>)
 80022ec:	f00d fada 	bl	800f8a4 <HAL_TIMEx_MasterConfigSynchronization>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80022f6:	f000 fb89 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fa:	2360      	movs	r3, #96	; 0x60
 80022fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800230a:	463b      	mov	r3, r7
 800230c:	220c      	movs	r2, #12
 800230e:	4619      	mov	r1, r3
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <MX_TIM5_Init+0xe8>)
 8002312:	f00c fd35 	bl	800ed80 <HAL_TIM_PWM_ConfigChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800231c:	f000 fb76 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <MX_TIM5_Init+0xe8>)
 8002322:	f000 fff3 	bl	800330c <HAL_TIM_MspPostInit>

}
 8002326:	bf00      	nop
 8002328:	3738      	adds	r7, #56	; 0x38
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20019b04 	.word	0x20019b04
 8002334:	40000c00 	.word	0x40000c00

08002338 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <MX_TIM8_Init+0xa0>)
 8002358:	4a20      	ldr	r2, [pc, #128]	; (80023dc <MX_TIM8_Init+0xa4>)
 800235a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <MX_TIM8_Init+0xa0>)
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002362:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <MX_TIM8_Init+0xa0>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <MX_TIM8_Init+0xa0>)
 800236a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800236e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <MX_TIM8_Init+0xa0>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002376:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <MX_TIM8_Init+0xa0>)
 8002378:	2200      	movs	r2, #0
 800237a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <MX_TIM8_Init+0xa0>)
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002382:	4815      	ldr	r0, [pc, #84]	; (80023d8 <MX_TIM8_Init+0xa0>)
 8002384:	f00c fb5c 	bl	800ea40 <HAL_TIM_Base_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800238e:	f000 fb3d 	bl	8002a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002396:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	4619      	mov	r1, r3
 800239e:	480e      	ldr	r0, [pc, #56]	; (80023d8 <MX_TIM8_Init+0xa0>)
 80023a0:	f00c fe06 	bl	800efb0 <HAL_TIM_ConfigClockSource>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80023aa:	f000 fb2f 	bl	8002a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4806      	ldr	r0, [pc, #24]	; (80023d8 <MX_TIM8_Init+0xa0>)
 80023c0:	f00d fa70 	bl	800f8a4 <HAL_TIMEx_MasterConfigSynchronization>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80023ca:	f000 fb1f 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	3720      	adds	r7, #32
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2001996c 	.word	0x2001996c
 80023dc:	40010400 	.word	0x40010400

080023e0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
 80023f4:	615a      	str	r2, [r3, #20]
 80023f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <MX_TIM12_Init+0x84>)
 80023fa:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <MX_TIM12_Init+0x88>)
 80023fc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <MX_TIM12_Init+0x84>)
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <MX_TIM12_Init+0x84>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800240a:	4b16      	ldr	r3, [pc, #88]	; (8002464 <MX_TIM12_Init+0x84>)
 800240c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002410:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <MX_TIM12_Init+0x84>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <MX_TIM12_Init+0x84>)
 800241a:	2200      	movs	r2, #0
 800241c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800241e:	4811      	ldr	r0, [pc, #68]	; (8002464 <MX_TIM12_Init+0x84>)
 8002420:	f00c fb64 	bl	800eaec <HAL_TIM_PWM_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800242a:	f000 faef 	bl	8002a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800242e:	2360      	movs	r3, #96	; 0x60
 8002430:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	2200      	movs	r2, #0
 8002442:	4619      	mov	r1, r3
 8002444:	4807      	ldr	r0, [pc, #28]	; (8002464 <MX_TIM12_Init+0x84>)
 8002446:	f00c fc9b 	bl	800ed80 <HAL_TIM_PWM_ConfigChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002450:	f000 fadc 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <MX_TIM12_Init+0x84>)
 8002456:	f000 ff59 	bl	800330c <HAL_TIM_MspPostInit>

}
 800245a:	bf00      	nop
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2001b7b4 	.word	0x2001b7b4
 8002468:	40001800 	.word	0x40001800

0800246c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <MX_USART1_UART_Init+0x58>)
 8002472:	4a15      	ldr	r2, [pc, #84]	; (80024c8 <MX_USART1_UART_Init+0x5c>)
 8002474:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <MX_USART1_UART_Init+0x58>)
 8002478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800247c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <MX_USART1_UART_Init+0x58>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <MX_USART1_UART_Init+0x58>)
 8002486:	2200      	movs	r2, #0
 8002488:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <MX_USART1_UART_Init+0x58>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <MX_USART1_UART_Init+0x58>)
 8002492:	220c      	movs	r2, #12
 8002494:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <MX_USART1_UART_Init+0x58>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <MX_USART1_UART_Init+0x58>)
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <MX_USART1_UART_Init+0x58>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <MX_USART1_UART_Init+0x58>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_USART1_UART_Init+0x58>)
 80024b0:	f00d fb22 	bl	800faf8 <HAL_UART_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80024ba:	f000 faa7 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20019ccc 	.word	0x20019ccc
 80024c8:	40011000 	.word	0x40011000

080024cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <MX_USART6_UART_Init+0x58>)
 80024d2:	4a15      	ldr	r2, [pc, #84]	; (8002528 <MX_USART6_UART_Init+0x5c>)
 80024d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80024d6:	4b13      	ldr	r3, [pc, #76]	; (8002524 <MX_USART6_UART_Init+0x58>)
 80024d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <MX_USART6_UART_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <MX_USART6_UART_Init+0x58>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <MX_USART6_UART_Init+0x58>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <MX_USART6_UART_Init+0x58>)
 80024f2:	220c      	movs	r2, #12
 80024f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <MX_USART6_UART_Init+0x58>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <MX_USART6_UART_Init+0x58>)
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <MX_USART6_UART_Init+0x58>)
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <MX_USART6_UART_Init+0x58>)
 800250a:	2200      	movs	r2, #0
 800250c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800250e:	4805      	ldr	r0, [pc, #20]	; (8002524 <MX_USART6_UART_Init+0x58>)
 8002510:	f00d faf2 	bl	800faf8 <HAL_UART_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800251a:	f000 fa77 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2001b6ac 	.word	0x2001b6ac
 8002528:	40011400 	.word	0x40011400

0800252c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	615a      	str	r2, [r3, #20]
 8002542:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <MX_FMC_Init+0x98>)
 8002546:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <MX_FMC_Init+0x9c>)
 8002548:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <MX_FMC_Init+0x98>)
 800254c:	2200      	movs	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <MX_FMC_Init+0x98>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <MX_FMC_Init+0x98>)
 8002558:	2204      	movs	r2, #4
 800255a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <MX_FMC_Init+0x98>)
 800255e:	2210      	movs	r2, #16
 8002560:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <MX_FMC_Init+0x98>)
 8002564:	2240      	movs	r2, #64	; 0x40
 8002566:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <MX_FMC_Init+0x98>)
 800256a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800256e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <MX_FMC_Init+0x98>)
 8002572:	2200      	movs	r2, #0
 8002574:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <MX_FMC_Init+0x98>)
 8002578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800257c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <MX_FMC_Init+0x98>)
 8002580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <MX_FMC_Init+0x98>)
 8002588:	2200      	movs	r2, #0
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800258c:	2302      	movs	r3, #2
 800258e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002590:	2307      	movs	r3, #7
 8002592:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002594:	2304      	movs	r3, #4
 8002596:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002598:	2307      	movs	r3, #7
 800259a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800259c:	2303      	movs	r3, #3
 800259e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80025a0:	2302      	movs	r3, #2
 80025a2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80025a4:	2302      	movs	r3, #2
 80025a6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_FMC_Init+0x98>)
 80025ae:	f00c f96c 	bl	800e88a <HAL_SDRAM_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80025b8:	f000 fa28 	bl	8002a0c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80025bc:	bf00      	nop
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2001b7f4 	.word	0x2001b7f4
 80025c8:	a0000140 	.word	0xa0000140

080025cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b090      	sub	sp, #64	; 0x40
 80025d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025e2:	4baf      	ldr	r3, [pc, #700]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4aae      	ldr	r2, [pc, #696]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80025e8:	f043 0310 	orr.w	r3, r3, #16
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4bac      	ldr	r3, [pc, #688]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025fa:	4ba9      	ldr	r3, [pc, #676]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4aa8      	ldr	r2, [pc, #672]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4ba6      	ldr	r3, [pc, #664]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002612:	4ba3      	ldr	r3, [pc, #652]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4aa2      	ldr	r2, [pc, #648]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4ba0      	ldr	r3, [pc, #640]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	623b      	str	r3, [r7, #32]
 8002628:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800262a:	4b9d      	ldr	r3, [pc, #628]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a9c      	ldr	r2, [pc, #624]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b9a      	ldr	r3, [pc, #616]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002642:	4b97      	ldr	r3, [pc, #604]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a96      	ldr	r2, [pc, #600]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002648:	f043 0304 	orr.w	r3, r3, #4
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b94      	ldr	r3, [pc, #592]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	4b91      	ldr	r3, [pc, #580]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a90      	ldr	r2, [pc, #576]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b8e      	ldr	r3, [pc, #568]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002672:	4b8b      	ldr	r3, [pc, #556]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4a8a      	ldr	r2, [pc, #552]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800268a:	4b85      	ldr	r3, [pc, #532]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a84      	ldr	r2, [pc, #528]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b82      	ldr	r3, [pc, #520]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80026a2:	4b7f      	ldr	r3, [pc, #508]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a7e      	ldr	r2, [pc, #504]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80026a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b7c      	ldr	r3, [pc, #496]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ba:	4b79      	ldr	r3, [pc, #484]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a78      	ldr	r2, [pc, #480]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80026c0:	f043 0320 	orr.w	r3, r3, #32
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026d2:	4b73      	ldr	r3, [pc, #460]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a72      	ldr	r2, [pc, #456]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80026d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b70      	ldr	r3, [pc, #448]	; (80028a0 <MX_GPIO_Init+0x2d4>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80026ea:	2201      	movs	r2, #1
 80026ec:	2120      	movs	r1, #32
 80026ee:	486d      	ldr	r0, [pc, #436]	; (80028a4 <MX_GPIO_Init+0x2d8>)
 80026f0:	f006 ff4e 	bl	8009590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80026f4:	2200      	movs	r2, #0
 80026f6:	210e      	movs	r1, #14
 80026f8:	486b      	ldr	r0, [pc, #428]	; (80028a8 <MX_GPIO_Init+0x2dc>)
 80026fa:	f006 ff49 	bl	8009590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80026fe:	2201      	movs	r2, #1
 8002700:	2108      	movs	r1, #8
 8002702:	486a      	ldr	r0, [pc, #424]	; (80028ac <MX_GPIO_Init+0x2e0>)
 8002704:	f006 ff44 	bl	8009590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002708:	2201      	movs	r2, #1
 800270a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800270e:	4866      	ldr	r0, [pc, #408]	; (80028a8 <MX_GPIO_Init+0x2dc>)
 8002710:	f006 ff3e 	bl	8009590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002714:	2200      	movs	r2, #0
 8002716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800271a:	4865      	ldr	r0, [pc, #404]	; (80028b0 <MX_GPIO_Init+0x2e4>)
 800271c:	f006 ff38 	bl	8009590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002720:	2200      	movs	r2, #0
 8002722:	21c8      	movs	r1, #200	; 0xc8
 8002724:	4863      	ldr	r0, [pc, #396]	; (80028b4 <MX_GPIO_Init+0x2e8>)
 8002726:	f006 ff33 	bl	8009590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800272a:	2308      	movs	r3, #8
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800272e:	2300      	movs	r3, #0
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800273a:	4619      	mov	r1, r3
 800273c:	485e      	ldr	r0, [pc, #376]	; (80028b8 <MX_GPIO_Init+0x2ec>)
 800273e:	f006 fc73 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002742:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002754:	230a      	movs	r3, #10
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800275c:	4619      	mov	r1, r3
 800275e:	4857      	ldr	r0, [pc, #348]	; (80028bc <MX_GPIO_Init+0x2f0>)
 8002760:	f006 fc62 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002764:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002776:	230c      	movs	r3, #12
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800277e:	4619      	mov	r1, r3
 8002780:	484f      	ldr	r0, [pc, #316]	; (80028c0 <MX_GPIO_Init+0x2f4>)
 8002782:	f006 fc51 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278c:	2300      	movs	r3, #0
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002798:	4619      	mov	r1, r3
 800279a:	484a      	ldr	r0, [pc, #296]	; (80028c4 <MX_GPIO_Init+0x2f8>)
 800279c:	f006 fc44 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80027a0:	2340      	movs	r3, #64	; 0x40
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027a4:	4b48      	ldr	r3, [pc, #288]	; (80028c8 <MX_GPIO_Init+0x2fc>)
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b0:	4619      	mov	r1, r3
 80027b2:	483c      	ldr	r0, [pc, #240]	; (80028a4 <MX_GPIO_Init+0x2d8>)
 80027b4:	f006 fc38 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80027b8:	2320      	movs	r3, #32
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027bc:	2301      	movs	r3, #1
 80027be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80027c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027cc:	4619      	mov	r1, r3
 80027ce:	4835      	ldr	r0, [pc, #212]	; (80028a4 <MX_GPIO_Init+0x2d8>)
 80027d0:	f006 fc2a 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 80027d4:	f241 030e 	movw	r3, #4110	; 0x100e
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027da:	2301      	movs	r3, #1
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80027e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ea:	4619      	mov	r1, r3
 80027ec:	482e      	ldr	r0, [pc, #184]	; (80028a8 <MX_GPIO_Init+0x2dc>)
 80027ee:	f006 fc1b 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80027f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002804:	4619      	mov	r1, r3
 8002806:	482e      	ldr	r0, [pc, #184]	; (80028c0 <MX_GPIO_Init+0x2f4>)
 8002808:	f006 fc0e 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800280c:	2308      	movs	r3, #8
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002810:	2301      	movs	r3, #1
 8002812:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800281c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002820:	4619      	mov	r1, r3
 8002822:	4822      	ldr	r0, [pc, #136]	; (80028ac <MX_GPIO_Init+0x2e0>)
 8002824:	f006 fc00 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002828:	2310      	movs	r3, #16
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282c:	2300      	movs	r3, #0
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002838:	4619      	mov	r1, r3
 800283a:	481a      	ldr	r0, [pc, #104]	; (80028a4 <MX_GPIO_Init+0x2d8>)
 800283c:	f006 fbf4 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002840:	f248 0304 	movw	r3, #32772	; 0x8004
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002846:	2300      	movs	r3, #0
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800284e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002852:	4619      	mov	r1, r3
 8002854:	4816      	ldr	r0, [pc, #88]	; (80028b0 <MX_GPIO_Init+0x2e4>)
 8002856:	f006 fbe7 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800285a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002860:	2301      	movs	r3, #1
 8002862:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800286c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002870:	4619      	mov	r1, r3
 8002872:	480f      	ldr	r0, [pc, #60]	; (80028b0 <MX_GPIO_Init+0x2e4>)
 8002874:	f006 fbd8 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8002878:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <MX_GPIO_Init+0x300>)
 8002880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288a:	4619      	mov	r1, r3
 800288c:	4806      	ldr	r0, [pc, #24]	; (80028a8 <MX_GPIO_Init+0x2dc>)
 800288e:	f006 fbcb 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <MX_GPIO_Init+0x2fc>)
 800289a:	633b      	str	r3, [r7, #48]	; 0x30
 800289c:	e018      	b.n	80028d0 <MX_GPIO_Init+0x304>
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020c00 	.word	0x40020c00
 80028a8:	40022000 	.word	0x40022000
 80028ac:	40022800 	.word	0x40022800
 80028b0:	40021c00 	.word	0x40021c00
 80028b4:	40021800 	.word	0x40021800
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40022400 	.word	0x40022400
 80028c8:	10120000 	.word	0x10120000
 80028cc:	10110000 	.word	0x10110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d8:	4619      	mov	r1, r3
 80028da:	4835      	ldr	r0, [pc, #212]	; (80029b0 <MX_GPIO_Init+0x3e4>)
 80028dc:	f006 fba4 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80028e0:	2310      	movs	r3, #16
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028f0:	230a      	movs	r3, #10
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80028f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f8:	4619      	mov	r1, r3
 80028fa:	482e      	ldr	r0, [pc, #184]	; (80029b4 <MX_GPIO_Init+0x3e8>)
 80028fc:	f006 fb94 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002900:	23c8      	movs	r3, #200	; 0xc8
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002904:	2301      	movs	r3, #1
 8002906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002914:	4619      	mov	r1, r3
 8002916:	4828      	ldr	r0, [pc, #160]	; (80029b8 <MX_GPIO_Init+0x3ec>)
 8002918:	f006 fb86 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800291c:	2305      	movs	r3, #5
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800292c:	230a      	movs	r3, #10
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002934:	4619      	mov	r1, r3
 8002936:	4821      	ldr	r0, [pc, #132]	; (80029bc <MX_GPIO_Init+0x3f0>)
 8002938:	f006 fb76 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800293c:	2304      	movs	r3, #4
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002940:	2300      	movs	r3, #0
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294c:	4619      	mov	r1, r3
 800294e:	481a      	ldr	r0, [pc, #104]	; (80029b8 <MX_GPIO_Init+0x3ec>)
 8002950:	f006 fb6a 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002954:	2328      	movs	r3, #40	; 0x28
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002960:	2303      	movs	r3, #3
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002964:	230a      	movs	r3, #10
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800296c:	4619      	mov	r1, r3
 800296e:	4814      	ldr	r0, [pc, #80]	; (80029c0 <MX_GPIO_Init+0x3f4>)
 8002970:	f006 fb5a 	bl	8009028 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002974:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002986:	2305      	movs	r3, #5
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298e:	4619      	mov	r1, r3
 8002990:	480c      	ldr	r0, [pc, #48]	; (80029c4 <MX_GPIO_Init+0x3f8>)
 8002992:	f006 fb49 	bl	8009028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	2028      	movs	r0, #40	; 0x28
 800299c:	f005 fa46 	bl	8007e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029a0:	2028      	movs	r0, #40	; 0x28
 80029a2:	f005 fa5f 	bl	8007e64 <HAL_NVIC_EnableIRQ>

}
 80029a6:	bf00      	nop
 80029a8:	3740      	adds	r7, #64	; 0x40
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40022000 	.word	0x40022000
 80029b4:	40021c00 	.word	0x40021c00
 80029b8:	40021800 	.word	0x40021800
 80029bc:	40020800 	.word	0x40020800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	40020400 	.word	0x40020400

080029c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80029d0:	f014 fc38 	bl	8017244 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 80029d4:	4803      	ldr	r0, [pc, #12]	; (80029e4 <StartDefaultTask+0x1c>)
 80029d6:	f009 f8f4 	bl	800bbc2 <HAL_IWDG_Refresh>
	  osDelay(100);
 80029da:	2064      	movs	r0, #100	; 0x64
 80029dc:	f011 f85c 	bl	8013a98 <osDelay>
	  HAL_IWDG_Refresh(&hiwdg);
 80029e0:	e7f8      	b.n	80029d4 <StartDefaultTask+0xc>
 80029e2:	bf00      	nop
 80029e4:	20019ac8 	.word	0x20019ac8

080029e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029fa:	f004 fe95 	bl	8007728 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40001000 	.word	0x40001000

08002a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
while(1);
 8002a10:	e7fe      	b.n	8002a10 <Error_Handler+0x4>
	...

08002a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <HAL_MspInit+0x4c>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <HAL_MspInit+0x4c>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <HAL_MspInit+0x4c>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <HAL_MspInit+0x4c>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <HAL_MspInit+0x4c>)
 8002a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_MspInit+0x4c>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	210f      	movs	r1, #15
 8002a4e:	f06f 0001 	mvn.w	r0, #1
 8002a52:	f005 f9eb 	bl	8007e2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800

08002a64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <HAL_ADC_MspInit+0xa4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d13c      	bne.n	8002b00 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a86:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <HAL_ADC_MspInit+0xa8>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <HAL_ADC_MspInit+0xa8>)
 8002a8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <HAL_ADC_MspInit+0xa8>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_ADC_MspInit+0xa8>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_ADC_MspInit+0xa8>)
 8002aa4:	f043 0320 	orr.w	r3, r3, #32
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <HAL_ADC_MspInit+0xa8>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_ADC_MspInit+0xa8>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_ADC_MspInit+0xa8>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_ADC_MspInit+0xa8>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002ace:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002ad2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	480b      	ldr	r0, [pc, #44]	; (8002b10 <HAL_ADC_MspInit+0xac>)
 8002ae4:	f006 faa0 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aec:	2303      	movs	r3, #3
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4619      	mov	r1, r3
 8002afa:	4806      	ldr	r0, [pc, #24]	; (8002b14 <HAL_ADC_MspInit+0xb0>)
 8002afc:	f006 fa94 	bl	8009028 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002b00:	bf00      	nop
 8002b02:	3728      	adds	r7, #40	; 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40012200 	.word	0x40012200
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40021400 	.word	0x40021400
 8002b14:	40020000 	.word	0x40020000

08002b18 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_CRC_MspInit+0x38>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10b      	bne.n	8002b42 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_CRC_MspInit+0x3c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <HAL_CRC_MspInit+0x3c>)
 8002b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <HAL_CRC_MspInit+0x3c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023000 	.word	0x40023000
 8002b54:	40023800 	.word	0x40023800

08002b58 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08e      	sub	sp, #56	; 0x38
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a50      	ldr	r2, [pc, #320]	; (8002cb8 <HAL_DCMI_MspInit+0x160>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	f040 809a 	bne.w	8002cb0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002b7c:	4b4f      	ldr	r3, [pc, #316]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b80:	4a4e      	ldr	r2, [pc, #312]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6353      	str	r3, [r2, #52]	; 0x34
 8002b88:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b94:	4b49      	ldr	r3, [pc, #292]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	4a48      	ldr	r2, [pc, #288]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002b9a:	f043 0310 	orr.w	r3, r3, #16
 8002b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba0:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	4a42      	ldr	r2, [pc, #264]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002bb2:	f043 0308 	orr.w	r3, r3, #8
 8002bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb8:	4b40      	ldr	r3, [pc, #256]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bc4:	4b3d      	ldr	r3, [pc, #244]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bce:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd0:	4b3a      	ldr	r3, [pc, #232]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bdc:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	4a36      	ldr	r2, [pc, #216]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be6:	6313      	str	r3, [r2, #48]	; 0x30
 8002be8:	4b34      	ldr	r3, [pc, #208]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf4:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	4a30      	ldr	r2, [pc, #192]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_DCMI_MspInit+0x164>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002c0c:	2360      	movs	r3, #96	; 0x60
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c1c:	230d      	movs	r3, #13
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c24:	4619      	mov	r1, r3
 8002c26:	4826      	ldr	r0, [pc, #152]	; (8002cc0 <HAL_DCMI_MspInit+0x168>)
 8002c28:	f006 f9fe 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c3c:	230d      	movs	r3, #13
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c44:	4619      	mov	r1, r3
 8002c46:	481f      	ldr	r0, [pc, #124]	; (8002cc4 <HAL_DCMI_MspInit+0x16c>)
 8002c48:	f006 f9ee 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c5e:	230d      	movs	r3, #13
 8002c60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c66:	4619      	mov	r1, r3
 8002c68:	4817      	ldr	r0, [pc, #92]	; (8002cc8 <HAL_DCMI_MspInit+0x170>)
 8002c6a:	f006 f9dd 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002c6e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c80:	230d      	movs	r3, #13
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4810      	ldr	r0, [pc, #64]	; (8002ccc <HAL_DCMI_MspInit+0x174>)
 8002c8c:	f006 f9cc 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002c90:	2350      	movs	r3, #80	; 0x50
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002ca0:	230d      	movs	r3, #13
 8002ca2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4809      	ldr	r0, [pc, #36]	; (8002cd0 <HAL_DCMI_MspInit+0x178>)
 8002cac:	f006 f9bc 	bl	8009028 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002cb0:	bf00      	nop
 8002cb2:	3738      	adds	r7, #56	; 0x38
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	50050000 	.word	0x50050000
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021800 	.word	0x40021800
 8002ccc:	40021c00 	.word	0x40021c00
 8002cd0:	40020000 	.word	0x40020000

08002cd4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <HAL_DMA2D_MspInit+0x44>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d113      	bne.n	8002d0e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <HAL_DMA2D_MspInit+0x48>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_DMA2D_MspInit+0x48>)
 8002cec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_DMA2D_MspInit+0x48>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2100      	movs	r1, #0
 8002d02:	205a      	movs	r0, #90	; 0x5a
 8002d04:	f005 f892 	bl	8007e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002d08:	205a      	movs	r0, #90	; 0x5a
 8002d0a:	f005 f8ab 	bl	8007e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	4002b000 	.word	0x4002b000
 8002d1c:	40023800 	.word	0x40023800

08002d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	; 0x30
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2f      	ldr	r2, [pc, #188]	; (8002dfc <HAL_I2C_MspInit+0xdc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d129      	bne.n	8002d96 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a2e      	ldr	r2, [pc, #184]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002d5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d60:	2312      	movs	r3, #18
 8002d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d64:	2301      	movs	r3, #1
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d70:	f107 031c 	add.w	r3, r7, #28
 8002d74:	4619      	mov	r1, r3
 8002d76:	4823      	ldr	r0, [pc, #140]	; (8002e04 <HAL_I2C_MspInit+0xe4>)
 8002d78:	f006 f956 	bl	8009028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d7c:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002d82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d86:	6413      	str	r3, [r2, #64]	; 0x40
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002d94:	e02d      	b.n	8002df2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_I2C_MspInit+0xe8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d128      	bne.n	8002df2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002da0:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	4a16      	ldr	r2, [pc, #88]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002daa:	6313      	str	r3, [r2, #48]	; 0x30
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002db8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dbe:	2312      	movs	r3, #18
 8002dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dca:	2304      	movs	r3, #4
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002dce:	f107 031c 	add.w	r3, r7, #28
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	480d      	ldr	r0, [pc, #52]	; (8002e0c <HAL_I2C_MspInit+0xec>)
 8002dd6:	f006 f927 	bl	8009028 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002de0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_I2C_MspInit+0xe0>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
}
 8002df2:	bf00      	nop
 8002df4:	3730      	adds	r7, #48	; 0x30
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40005400 	.word	0x40005400
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40005c00 	.word	0x40005c00
 8002e0c:	40021c00 	.word	0x40021c00

08002e10 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <HAL_I2C_MspDeInit+0x64>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d110      	bne.n	8002e44 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_I2C_MspDeInit+0x68>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <HAL_I2C_MspDeInit+0x68>)
 8002e28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e32:	4812      	ldr	r0, [pc, #72]	; (8002e7c <HAL_I2C_MspDeInit+0x6c>)
 8002e34:	f006 faa2 	bl	800937c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e3c:	480f      	ldr	r0, [pc, #60]	; (8002e7c <HAL_I2C_MspDeInit+0x6c>)
 8002e3e:	f006 fa9d 	bl	800937c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002e42:	e013      	b.n	8002e6c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <HAL_I2C_MspDeInit+0x70>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10e      	bne.n	8002e6c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_I2C_MspDeInit+0x68>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <HAL_I2C_MspDeInit+0x68>)
 8002e54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	4809      	ldr	r0, [pc, #36]	; (8002e84 <HAL_I2C_MspDeInit+0x74>)
 8002e5e:	f006 fa8d 	bl	800937c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e66:	4807      	ldr	r0, [pc, #28]	; (8002e84 <HAL_I2C_MspDeInit+0x74>)
 8002e68:	f006 fa88 	bl	800937c <HAL_GPIO_DeInit>
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40005400 	.word	0x40005400
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40005c00 	.word	0x40005c00
 8002e84:	40021c00 	.word	0x40021c00

08002e88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08e      	sub	sp, #56	; 0x38
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a55      	ldr	r2, [pc, #340]	; (8002ffc <HAL_LTDC_MspInit+0x174>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	f040 80a3 	bne.w	8002ff2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002eac:	4b54      	ldr	r3, [pc, #336]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	4a53      	ldr	r2, [pc, #332]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002eb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb6:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb8:	4b51      	ldr	r3, [pc, #324]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec0:	623b      	str	r3, [r7, #32]
 8002ec2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ec4:	4b4e      	ldr	r3, [pc, #312]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	4a4d      	ldr	r2, [pc, #308]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002eca:	f043 0310 	orr.w	r3, r3, #16
 8002ece:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed0:	4b4b      	ldr	r3, [pc, #300]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002edc:	4b48      	ldr	r3, [pc, #288]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	4a47      	ldr	r2, [pc, #284]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee8:	4b45      	ldr	r3, [pc, #276]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ef4:	4b42      	ldr	r3, [pc, #264]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	4a41      	ldr	r2, [pc, #260]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002efe:	6313      	str	r3, [r2, #48]	; 0x30
 8002f00:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f0c:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	4a3b      	ldr	r2, [pc, #236]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f16:	6313      	str	r3, [r2, #48]	; 0x30
 8002f18:	4b39      	ldr	r3, [pc, #228]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f24:	4b36      	ldr	r3, [pc, #216]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	4a35      	ldr	r2, [pc, #212]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f30:	4b33      	ldr	r3, [pc, #204]	; (8003000 <HAL_LTDC_MspInit+0x178>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f4c:	230e      	movs	r3, #14
 8002f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f54:	4619      	mov	r1, r3
 8002f56:	482b      	ldr	r0, [pc, #172]	; (8003004 <HAL_LTDC_MspInit+0x17c>)
 8002f58:	f006 f866 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002f5c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f62:	2302      	movs	r3, #2
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f6e:	230e      	movs	r3, #14
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f76:	4619      	mov	r1, r3
 8002f78:	4823      	ldr	r0, [pc, #140]	; (8003008 <HAL_LTDC_MspInit+0x180>)
 8002f7a:	f006 f855 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002f7e:	23f7      	movs	r3, #247	; 0xf7
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f8e:	230e      	movs	r3, #14
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f96:	4619      	mov	r1, r3
 8002f98:	481c      	ldr	r0, [pc, #112]	; (800300c <HAL_LTDC_MspInit+0x184>)
 8002f9a:	f006 f845 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fac:	2300      	movs	r3, #0
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002fb0:	2309      	movs	r3, #9
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4815      	ldr	r0, [pc, #84]	; (8003010 <HAL_LTDC_MspInit+0x188>)
 8002fbc:	f006 f834 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002fc0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fd2:	230e      	movs	r3, #14
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fda:	4619      	mov	r1, r3
 8002fdc:	480d      	ldr	r0, [pc, #52]	; (8003014 <HAL_LTDC_MspInit+0x18c>)
 8002fde:	f006 f823 	bl	8009028 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2058      	movs	r0, #88	; 0x58
 8002fe8:	f004 ff20 	bl	8007e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002fec:	2058      	movs	r0, #88	; 0x58
 8002fee:	f004 ff39 	bl	8007e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002ff2:	bf00      	nop
 8002ff4:	3738      	adds	r7, #56	; 0x38
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40016800 	.word	0x40016800
 8003000:	40023800 	.word	0x40023800
 8003004:	40021000 	.word	0x40021000
 8003008:	40022400 	.word	0x40022400
 800300c:	40022800 	.word	0x40022800
 8003010:	40021800 	.word	0x40021800
 8003014:	40022000 	.word	0x40022000

08003018 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	; 0x30
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 031c 	add.w	r3, r7, #28
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a3b      	ldr	r2, [pc, #236]	; (8003124 <HAL_QSPI_MspInit+0x10c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d170      	bne.n	800311c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800303a:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	4a3a      	ldr	r2, [pc, #232]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	6393      	str	r3, [r2, #56]	; 0x38
 8003046:	4b38      	ldr	r3, [pc, #224]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003052:	4b35      	ldr	r3, [pc, #212]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a34      	ldr	r2, [pc, #208]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 8003058:	f043 0310 	orr.w	r3, r3, #16
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b32      	ldr	r3, [pc, #200]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a2e      	ldr	r2, [pc, #184]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a28      	ldr	r2, [pc, #160]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 8003088:	f043 0308 	orr.w	r3, r3, #8
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_QSPI_MspInit+0x110>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800309a:	2304      	movs	r3, #4
 800309c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a6:	2303      	movs	r3, #3
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80030aa:	2309      	movs	r3, #9
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80030ae:	f107 031c 	add.w	r3, r7, #28
 80030b2:	4619      	mov	r1, r3
 80030b4:	481d      	ldr	r0, [pc, #116]	; (800312c <HAL_QSPI_MspInit+0x114>)
 80030b6:	f005 ffb7 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80030ba:	2340      	movs	r3, #64	; 0x40
 80030bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c6:	2303      	movs	r3, #3
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80030ca:	230a      	movs	r3, #10
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80030ce:	f107 031c 	add.w	r3, r7, #28
 80030d2:	4619      	mov	r1, r3
 80030d4:	4816      	ldr	r0, [pc, #88]	; (8003130 <HAL_QSPI_MspInit+0x118>)
 80030d6:	f005 ffa7 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030da:	2304      	movs	r3, #4
 80030dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e6:	2303      	movs	r3, #3
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80030ea:	2309      	movs	r3, #9
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ee:	f107 031c 	add.w	r3, r7, #28
 80030f2:	4619      	mov	r1, r3
 80030f4:	480e      	ldr	r0, [pc, #56]	; (8003130 <HAL_QSPI_MspInit+0x118>)
 80030f6:	f005 ff97 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80030fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80030fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003108:	2303      	movs	r3, #3
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800310c:	2309      	movs	r3, #9
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	4619      	mov	r1, r3
 8003116:	4807      	ldr	r0, [pc, #28]	; (8003134 <HAL_QSPI_MspInit+0x11c>)
 8003118:	f005 ff86 	bl	8009028 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800311c:	bf00      	nop
 800311e:	3730      	adds	r7, #48	; 0x30
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	a0001000 	.word	0xa0001000
 8003128:	40023800 	.word	0x40023800
 800312c:	40021000 	.word	0x40021000
 8003130:	40020400 	.word	0x40020400
 8003134:	40020c00 	.word	0x40020c00

08003138 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a07      	ldr	r2, [pc, #28]	; (8003164 <HAL_RTC_MspInit+0x2c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d105      	bne.n	8003156 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_RTC_MspInit+0x30>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a06      	ldr	r2, [pc, #24]	; (8003168 <HAL_RTC_MspInit+0x30>)
 8003150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40002800 	.word	0x40002800
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800318c:	d127      	bne.n	80031de <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800318e:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <HAL_SPDIFRX_MspInit+0x7c>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <HAL_SPDIFRX_MspInit+0x7c>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_SPDIFRX_MspInit+0x7c>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_SPDIFRX_MspInit+0x7c>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <HAL_SPDIFRX_MspInit+0x7c>)
 80031ac:	f043 0308 	orr.w	r3, r3, #8
 80031b0:	6313      	str	r3, [r2, #48]	; 0x30
 80031b2:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <HAL_SPDIFRX_MspInit+0x7c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80031ce:	2308      	movs	r3, #8
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	4804      	ldr	r0, [pc, #16]	; (80031ec <HAL_SPDIFRX_MspInit+0x80>)
 80031da:	f005 ff25 	bl	8009028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80031de:	bf00      	nop
 80031e0:	3728      	adds	r7, #40	; 0x28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020c00 	.word	0x40020c00

080031f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a2e      	ldr	r2, [pc, #184]	; (80032b8 <HAL_TIM_Base_MspInit+0xc8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d10c      	bne.n	800321c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003202:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	4a2d      	ldr	r2, [pc, #180]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6453      	str	r3, [r2, #68]	; 0x44
 800320e:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800321a:	e046      	b.n	80032aa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d10c      	bne.n	8003240 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003226:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a24      	ldr	r2, [pc, #144]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	69bb      	ldr	r3, [r7, #24]
}
 800323e:	e034      	b.n	80032aa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_TIM_Base_MspInit+0xd0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d10c      	bne.n	8003264 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800324a:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
 8003256:	4b19      	ldr	r3, [pc, #100]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	697b      	ldr	r3, [r7, #20]
}
 8003262:	e022      	b.n	80032aa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <HAL_TIM_Base_MspInit+0xd4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10c      	bne.n	8003288 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a12      	ldr	r2, [pc, #72]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 8003274:	f043 0308 	orr.w	r3, r3, #8
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]
}
 8003286:	e010      	b.n	80032aa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <HAL_TIM_Base_MspInit+0xd8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10b      	bne.n	80032aa <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	4a09      	ldr	r2, [pc, #36]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	6453      	str	r3, [r2, #68]	; 0x44
 800329e:	4b07      	ldr	r3, [pc, #28]	; (80032bc <HAL_TIM_Base_MspInit+0xcc>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
}
 80032aa:	bf00      	nop
 80032ac:	3724      	adds	r7, #36	; 0x24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40010000 	.word	0x40010000
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000c00 	.word	0x40000c00
 80032c8:	40010400 	.word	0x40010400

080032cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <HAL_TIM_PWM_MspInit+0x38>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d10b      	bne.n	80032f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_TIM_PWM_MspInit+0x3c>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a09      	ldr	r2, [pc, #36]	; (8003308 <HAL_TIM_PWM_MspInit+0x3c>)
 80032e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <HAL_TIM_PWM_MspInit+0x3c>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40001800 	.word	0x40001800
 8003308:	40023800 	.word	0x40023800

0800330c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08c      	sub	sp, #48	; 0x30
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 031c 	add.w	r3, r7, #28
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a56      	ldr	r2, [pc, #344]	; (8003484 <HAL_TIM_MspPostInit+0x178>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d11d      	bne.n	800336a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332e:	4b56      	ldr	r3, [pc, #344]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4a55      	ldr	r2, [pc, #340]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6313      	str	r3, [r2, #48]	; 0x30
 800333a:	4b53      	ldr	r3, [pc, #332]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800334a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003358:	2301      	movs	r3, #1
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800335c:	f107 031c 	add.w	r3, r7, #28
 8003360:	4619      	mov	r1, r3
 8003362:	484a      	ldr	r0, [pc, #296]	; (800348c <HAL_TIM_MspPostInit+0x180>)
 8003364:	f005 fe60 	bl	8009028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003368:	e087      	b.n	800347a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003372:	d11d      	bne.n	80033b0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003374:	4b44      	ldr	r3, [pc, #272]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	4a43      	ldr	r2, [pc, #268]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6313      	str	r3, [r2, #48]	; 0x30
 8003380:	4b41      	ldr	r3, [pc, #260]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800338c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800339e:	2301      	movs	r3, #1
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	4619      	mov	r1, r3
 80033a8:	4838      	ldr	r0, [pc, #224]	; (800348c <HAL_TIM_MspPostInit+0x180>)
 80033aa:	f005 fe3d 	bl	8009028 <HAL_GPIO_Init>
}
 80033ae:	e064      	b.n	800347a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a36      	ldr	r2, [pc, #216]	; (8003490 <HAL_TIM_MspPostInit+0x184>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d11c      	bne.n	80033f4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ba:	4b33      	ldr	r3, [pc, #204]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a32      	ldr	r2, [pc, #200]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 80033c0:	f043 0302 	orr.w	r3, r3, #2
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80033d2:	2310      	movs	r3, #16
 80033d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033e2:	2302      	movs	r3, #2
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80033e6:	f107 031c 	add.w	r3, r7, #28
 80033ea:	4619      	mov	r1, r3
 80033ec:	4829      	ldr	r0, [pc, #164]	; (8003494 <HAL_TIM_MspPostInit+0x188>)
 80033ee:	f005 fe1b 	bl	8009028 <HAL_GPIO_Init>
}
 80033f2:	e042      	b.n	800347a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a27      	ldr	r2, [pc, #156]	; (8003498 <HAL_TIM_MspPostInit+0x18c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d11c      	bne.n	8003438 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a21      	ldr	r2, [pc, #132]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003416:	2301      	movs	r3, #1
 8003418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003422:	2300      	movs	r3, #0
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003426:	2302      	movs	r3, #2
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800342a:	f107 031c 	add.w	r3, r7, #28
 800342e:	4619      	mov	r1, r3
 8003430:	481a      	ldr	r0, [pc, #104]	; (800349c <HAL_TIM_MspPostInit+0x190>)
 8003432:	f005 fdf9 	bl	8009028 <HAL_GPIO_Init>
}
 8003436:	e020      	b.n	800347a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_TIM_MspPostInit+0x194>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d11b      	bne.n	800347a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a10      	ldr	r2, [pc, #64]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 8003448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_TIM_MspPostInit+0x17c>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800345a:	2340      	movs	r3, #64	; 0x40
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800346a:	2309      	movs	r3, #9
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	4619      	mov	r1, r3
 8003474:	480b      	ldr	r0, [pc, #44]	; (80034a4 <HAL_TIM_MspPostInit+0x198>)
 8003476:	f005 fdd7 	bl	8009028 <HAL_GPIO_Init>
}
 800347a:	bf00      	nop
 800347c:	3730      	adds	r7, #48	; 0x30
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40010000 	.word	0x40010000
 8003488:	40023800 	.word	0x40023800
 800348c:	40020000 	.word	0x40020000
 8003490:	40000400 	.word	0x40000400
 8003494:	40020400 	.word	0x40020400
 8003498:	40000c00 	.word	0x40000c00
 800349c:	40022000 	.word	0x40022000
 80034a0:	40001800 	.word	0x40001800
 80034a4:	40021c00 	.word	0x40021c00

080034a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08c      	sub	sp, #48	; 0x30
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a3c      	ldr	r2, [pc, #240]	; (80035b8 <HAL_UART_MspInit+0x110>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d145      	bne.n	8003556 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034ca:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <HAL_UART_MspInit+0x114>)
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	4a3b      	ldr	r2, [pc, #236]	; (80035bc <HAL_UART_MspInit+0x114>)
 80034d0:	f043 0310 	orr.w	r3, r3, #16
 80034d4:	6453      	str	r3, [r2, #68]	; 0x44
 80034d6:	4b39      	ldr	r3, [pc, #228]	; (80035bc <HAL_UART_MspInit+0x114>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <HAL_UART_MspInit+0x114>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	4a35      	ldr	r2, [pc, #212]	; (80035bc <HAL_UART_MspInit+0x114>)
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	6313      	str	r3, [r2, #48]	; 0x30
 80034ee:	4b33      	ldr	r3, [pc, #204]	; (80035bc <HAL_UART_MspInit+0x114>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	4b30      	ldr	r3, [pc, #192]	; (80035bc <HAL_UART_MspInit+0x114>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a2f      	ldr	r2, [pc, #188]	; (80035bc <HAL_UART_MspInit+0x114>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_UART_MspInit+0x114>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	2300      	movs	r3, #0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003522:	2307      	movs	r3, #7
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003526:	f107 031c 	add.w	r3, r7, #28
 800352a:	4619      	mov	r1, r3
 800352c:	4824      	ldr	r0, [pc, #144]	; (80035c0 <HAL_UART_MspInit+0x118>)
 800352e:	f005 fd7b 	bl	8009028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003538:	2302      	movs	r3, #2
 800353a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003540:	2300      	movs	r3, #0
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003544:	2307      	movs	r3, #7
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003548:	f107 031c 	add.w	r3, r7, #28
 800354c:	4619      	mov	r1, r3
 800354e:	481d      	ldr	r0, [pc, #116]	; (80035c4 <HAL_UART_MspInit+0x11c>)
 8003550:	f005 fd6a 	bl	8009028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003554:	e02c      	b.n	80035b0 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_UART_MspInit+0x120>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d127      	bne.n	80035b0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003560:	4b16      	ldr	r3, [pc, #88]	; (80035bc <HAL_UART_MspInit+0x114>)
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	4a15      	ldr	r2, [pc, #84]	; (80035bc <HAL_UART_MspInit+0x114>)
 8003566:	f043 0320 	orr.w	r3, r3, #32
 800356a:	6453      	str	r3, [r2, #68]	; 0x44
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_UART_MspInit+0x114>)
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_UART_MspInit+0x114>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	4a0f      	ldr	r2, [pc, #60]	; (80035bc <HAL_UART_MspInit+0x114>)
 800357e:	f043 0304 	orr.w	r3, r3, #4
 8003582:	6313      	str	r3, [r2, #48]	; 0x30
 8003584:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_UART_MspInit+0x114>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003590:	23c0      	movs	r3, #192	; 0xc0
 8003592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003594:	2302      	movs	r3, #2
 8003596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359c:	2303      	movs	r3, #3
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035a0:	2308      	movs	r3, #8
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	4619      	mov	r1, r3
 80035aa:	4808      	ldr	r0, [pc, #32]	; (80035cc <HAL_UART_MspInit+0x124>)
 80035ac:	f005 fd3c 	bl	8009028 <HAL_GPIO_Init>
}
 80035b0:	bf00      	nop
 80035b2:	3730      	adds	r7, #48	; 0x30
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40011000 	.word	0x40011000
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40020400 	.word	0x40020400
 80035c4:	40020000 	.word	0x40020000
 80035c8:	40011400 	.word	0x40011400
 80035cc:	40020800 	.word	0x40020800

080035d0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80035e4:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <HAL_FMC_MspInit+0x100>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d16d      	bne.n	80036c8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80035ec:	4b38      	ldr	r3, [pc, #224]	; (80036d0 <HAL_FMC_MspInit+0x100>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80035f2:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <HAL_FMC_MspInit+0x104>)
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	4a37      	ldr	r2, [pc, #220]	; (80036d4 <HAL_FMC_MspInit+0x104>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6393      	str	r3, [r2, #56]	; 0x38
 80035fe:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <HAL_FMC_MspInit+0x104>)
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800360a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800360e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003618:	2303      	movs	r3, #3
 800361a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800361c:	230c      	movs	r3, #12
 800361e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003620:	1d3b      	adds	r3, r7, #4
 8003622:	4619      	mov	r1, r3
 8003624:	482c      	ldr	r0, [pc, #176]	; (80036d8 <HAL_FMC_MspInit+0x108>)
 8003626:	f005 fcff 	bl	8009028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800362a:	f248 1333 	movw	r3, #33075	; 0x8133
 800362e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003630:	2302      	movs	r3, #2
 8003632:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003638:	2303      	movs	r3, #3
 800363a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800363c:	230c      	movs	r3, #12
 800363e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	4619      	mov	r1, r3
 8003644:	4825      	ldr	r0, [pc, #148]	; (80036dc <HAL_FMC_MspInit+0x10c>)
 8003646:	f005 fcef 	bl	8009028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800364a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800364e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	2302      	movs	r3, #2
 8003652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003658:	2303      	movs	r3, #3
 800365a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800365c:	230c      	movs	r3, #12
 800365e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	4619      	mov	r1, r3
 8003664:	481e      	ldr	r0, [pc, #120]	; (80036e0 <HAL_FMC_MspInit+0x110>)
 8003666:	f005 fcdf 	bl	8009028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800366a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800366e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003678:	2303      	movs	r3, #3
 800367a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800367c:	230c      	movs	r3, #12
 800367e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003680:	1d3b      	adds	r3, r7, #4
 8003682:	4619      	mov	r1, r3
 8003684:	4817      	ldr	r0, [pc, #92]	; (80036e4 <HAL_FMC_MspInit+0x114>)
 8003686:	f005 fccf 	bl	8009028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800368a:	2328      	movs	r3, #40	; 0x28
 800368c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003696:	2303      	movs	r3, #3
 8003698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800369a:	230c      	movs	r3, #12
 800369c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4811      	ldr	r0, [pc, #68]	; (80036e8 <HAL_FMC_MspInit+0x118>)
 80036a4:	f005 fcc0 	bl	8009028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80036a8:	2308      	movs	r3, #8
 80036aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ac:	2302      	movs	r3, #2
 80036ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b4:	2303      	movs	r3, #3
 80036b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036b8:	230c      	movs	r3, #12
 80036ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	4619      	mov	r1, r3
 80036c0:	480a      	ldr	r0, [pc, #40]	; (80036ec <HAL_FMC_MspInit+0x11c>)
 80036c2:	f005 fcb1 	bl	8009028 <HAL_GPIO_Init>
 80036c6:	e000      	b.n	80036ca <HAL_FMC_MspInit+0xfa>
    return;
 80036c8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000da0 	.word	0x20000da0
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40021800 	.word	0x40021800
 80036e0:	40020c00 	.word	0x40020c00
 80036e4:	40021400 	.word	0x40021400
 80036e8:	40021c00 	.word	0x40021c00
 80036ec:	40020800 	.word	0x40020800

080036f0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80036f8:	f7ff ff6a 	bl	80035d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <HAL_SAI_MspInit+0xbc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d124      	bne.n	8003760 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003716:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_SAI_MspInit+0xc0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10b      	bne.n	8003736 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800371e:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <HAL_SAI_MspInit+0xc4>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	4a29      	ldr	r2, [pc, #164]	; (80037c8 <HAL_SAI_MspInit+0xc4>)
 8003724:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003728:	6453      	str	r3, [r2, #68]	; 0x44
 800372a:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <HAL_SAI_MspInit+0xc4>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003736:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_SAI_MspInit+0xc0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	4a21      	ldr	r2, [pc, #132]	; (80037c4 <HAL_SAI_MspInit+0xc0>)
 800373e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003740:	23f0      	movs	r3, #240	; 0xf0
 8003742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374c:	2300      	movs	r3, #0
 800374e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003750:	230a      	movs	r3, #10
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4619      	mov	r1, r3
 800375a:	481c      	ldr	r0, [pc, #112]	; (80037cc <HAL_SAI_MspInit+0xc8>)
 800375c:	f005 fc64 	bl	8009028 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1a      	ldr	r2, [pc, #104]	; (80037d0 <HAL_SAI_MspInit+0xcc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d125      	bne.n	80037b6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <HAL_SAI_MspInit+0xc0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <HAL_SAI_MspInit+0xc4>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <HAL_SAI_MspInit+0xc4>)
 8003778:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800377c:	6453      	str	r3, [r2, #68]	; 0x44
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_SAI_MspInit+0xc4>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <HAL_SAI_MspInit+0xc0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3301      	adds	r3, #1
 8003790:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <HAL_SAI_MspInit+0xc0>)
 8003792:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379a:	2302      	movs	r3, #2
 800379c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80037a6:	230a      	movs	r3, #10
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80037aa:	f107 0314 	add.w	r3, r7, #20
 80037ae:	4619      	mov	r1, r3
 80037b0:	4808      	ldr	r0, [pc, #32]	; (80037d4 <HAL_SAI_MspInit+0xd0>)
 80037b2:	f005 fc39 	bl	8009028 <HAL_GPIO_Init>

    }
}
 80037b6:	bf00      	nop
 80037b8:	3728      	adds	r7, #40	; 0x28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40015c04 	.word	0x40015c04
 80037c4:	20000da4 	.word	0x20000da4
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40015c24 	.word	0x40015c24
 80037d4:	40021800 	.word	0x40021800

080037d8 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <HAL_SAI_MspDeInit+0x74>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d112      	bne.n	8003810 <HAL_SAI_MspDeInit+0x38>
    {
    SAI2_client --;
 80037ea:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_SAI_MspDeInit+0x78>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	4a17      	ldr	r2, [pc, #92]	; (8003850 <HAL_SAI_MspDeInit+0x78>)
 80037f2:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 80037f4:	4b16      	ldr	r3, [pc, #88]	; (8003850 <HAL_SAI_MspDeInit+0x78>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 80037fc:	4b15      	ldr	r3, [pc, #84]	; (8003854 <HAL_SAI_MspDeInit+0x7c>)
 80037fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003800:	4a14      	ldr	r2, [pc, #80]	; (8003854 <HAL_SAI_MspDeInit+0x7c>)
 8003802:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003806:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8003808:	21f0      	movs	r1, #240	; 0xf0
 800380a:	4813      	ldr	r0, [pc, #76]	; (8003858 <HAL_SAI_MspDeInit+0x80>)
 800380c:	f005 fdb6 	bl	800937c <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a11      	ldr	r2, [pc, #68]	; (800385c <HAL_SAI_MspDeInit+0x84>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d113      	bne.n	8003842 <HAL_SAI_MspDeInit+0x6a>
    {
    SAI2_client --;
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <HAL_SAI_MspDeInit+0x78>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3b01      	subs	r3, #1
 8003820:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <HAL_SAI_MspDeInit+0x78>)
 8003822:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_SAI_MspDeInit+0x78>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d105      	bne.n	8003838 <HAL_SAI_MspDeInit+0x60>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 800382c:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_SAI_MspDeInit+0x7c>)
 800382e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003830:	4a08      	ldr	r2, [pc, #32]	; (8003854 <HAL_SAI_MspDeInit+0x7c>)
 8003832:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003836:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8003838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800383c:	4808      	ldr	r0, [pc, #32]	; (8003860 <HAL_SAI_MspDeInit+0x88>)
 800383e:	f005 fd9d 	bl	800937c <HAL_GPIO_DeInit>

    }
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40015c04 	.word	0x40015c04
 8003850:	20000da4 	.word	0x20000da4
 8003854:	40023800 	.word	0x40023800
 8003858:	40022000 	.word	0x40022000
 800385c:	40015c24 	.word	0x40015c24
 8003860:	40021800 	.word	0x40021800

08003864 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08c      	sub	sp, #48	; 0x30
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003874:	2200      	movs	r2, #0
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	2036      	movs	r0, #54	; 0x36
 800387a:	f004 fad7 	bl	8007e2c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800387e:	2036      	movs	r0, #54	; 0x36
 8003880:	f004 faf0 	bl	8007e64 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003884:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <HAL_InitTick+0xa0>)
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <HAL_InitTick+0xa0>)
 800388a:	f043 0310 	orr.w	r3, r3, #16
 800388e:	6413      	str	r3, [r2, #64]	; 0x40
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <HAL_InitTick+0xa0>)
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800389c:	f107 0210 	add.w	r2, r7, #16
 80038a0:	f107 0314 	add.w	r3, r7, #20
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f009 faac 	bl	800ce04 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038ac:	f009 fa82 	bl	800cdb4 <HAL_RCC_GetPCLK1Freq>
 80038b0:	4603      	mov	r3, r0
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	4a13      	ldr	r2, [pc, #76]	; (8003908 <HAL_InitTick+0xa4>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	0c9b      	lsrs	r3, r3, #18
 80038c0:	3b01      	subs	r3, #1
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <HAL_InitTick+0xa8>)
 80038c6:	4a12      	ldr	r2, [pc, #72]	; (8003910 <HAL_InitTick+0xac>)
 80038c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_InitTick+0xa8>)
 80038cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038d2:	4a0e      	ldr	r2, [pc, #56]	; (800390c <HAL_InitTick+0xa8>)
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <HAL_InitTick+0xa8>)
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_InitTick+0xa8>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80038e4:	4809      	ldr	r0, [pc, #36]	; (800390c <HAL_InitTick+0xa8>)
 80038e6:	f00b f8ab 	bl	800ea40 <HAL_TIM_Base_Init>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80038f0:	4806      	ldr	r0, [pc, #24]	; (800390c <HAL_InitTick+0xa8>)
 80038f2:	f00b f8d1 	bl	800ea98 <HAL_TIM_Base_Start_IT>
 80038f6:	4603      	mov	r3, r0
 80038f8:	e000      	b.n	80038fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3730      	adds	r7, #48	; 0x30
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40023800 	.word	0x40023800
 8003908:	431bde83 	.word	0x431bde83
 800390c:	2001b8bc 	.word	0x2001b8bc
 8003910:	40001000 	.word	0x40001000

08003914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003926:	e7fe      	b.n	8003926 <HardFault_Handler+0x4>

08003928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800392c:	e7fe      	b.n	800392c <MemManage_Handler+0x4>

0800392e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003932:	e7fe      	b.n	8003932 <BusFault_Handler+0x4>

08003934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003938:	e7fe      	b.n	8003938 <UsageFault_Handler+0x4>

0800393a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800394c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003950:	f005 fe38 	bl	80095c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}

08003958 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <TIM6_DAC_IRQHandler+0x10>)
 800395e:	f00b f8f0 	bl	800eb42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	2001b8bc 	.word	0x2001b8bc

0800396c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <OTG_FS_IRQHandler+0x10>)
 8003972:	f006 f8cf 	bl	8009b14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	2001be68 	.word	0x2001be68

08003980 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <LTDC_IRQHandler+0x10>)
 8003986:	f008 f9fd 	bl	800bd84 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20019b88 	.word	0x20019b88

08003994 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003998:	4802      	ldr	r0, [pc, #8]	; (80039a4 <DMA2D_IRQHandler+0x10>)
 800399a:	f005 f907 	bl	8008bac <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	2001b730 	.word	0x2001b730

080039a8 <DMA2_Stream7_IRQHandler>:

/* USER CODE BEGIN 1 */
#include "stm32746g_discovery_audio.h"
extern SAI_HandleTypeDef haudio_in_sai;
 void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
 {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
	 HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <DMA2_Stream7_IRQHandler+0x14>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	4618      	mov	r0, r3
 80039b2:	f004 fd35 	bl	8008420 <HAL_DMA_IRQHandler>
 }
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000e8c 	.word	0x20000e8c

080039c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039c8:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <_sbrk+0x5c>)
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <_sbrk+0x60>)
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <_sbrk+0x64>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039dc:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <_sbrk+0x64>)
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <_sbrk+0x68>)
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <_sbrk+0x64>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d207      	bcs.n	8003a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039f0:	f013 ff1e 	bl	8017830 <__errno>
 80039f4:	4602      	mov	r2, r0
 80039f6:	230c      	movs	r3, #12
 80039f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295
 80039fe:	e009      	b.n	8003a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <_sbrk+0x64>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <_sbrk+0x64>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4a05      	ldr	r2, [pc, #20]	; (8003a24 <_sbrk+0x64>)
 8003a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a12:	68fb      	ldr	r3, [r7, #12]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20050000 	.word	0x20050000
 8003a20:	00000400 	.word	0x00000400
 8003a24:	20000da8 	.word	0x20000da8
 8003a28:	2001c130 	.word	0x2001c130

08003a2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <SystemInit+0x28>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <SystemInit+0x28>)
 8003a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <SystemInit+0x28>)
 8003a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a46:	609a      	str	r2, [r3, #8]
#endif
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a5e:	e003      	b.n	8003a68 <LoopCopyDataInit>

08003a60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a66:	3104      	adds	r1, #4

08003a68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a68:	480b      	ldr	r0, [pc, #44]	; (8003a98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a70:	d3f6      	bcc.n	8003a60 <CopyDataInit>
  ldr  r2, =_sbss
 8003a72:	4a0b      	ldr	r2, [pc, #44]	; (8003aa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a74:	e002      	b.n	8003a7c <LoopFillZerobss>

08003a76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a78:	f842 3b04 	str.w	r3, [r2], #4

08003a7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a80:	d3f9      	bcc.n	8003a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a82:	f7ff ffd3 	bl	8003a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a86:	f013 fed9 	bl	801783c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a8a:	f7fd fcc9 	bl	8001420 <main>
  bx  lr    
 8003a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a90:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003a94:	0801a238 	.word	0x0801a238
  ldr  r0, =_sdata
 8003a98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a9c:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 8003aa0:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8003aa4:	2001c130 	.word	0x2001c130

08003aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aa8:	e7fe      	b.n	8003aa8 <ADC_IRQHandler>

08003aaa <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8003ab4:	20c8      	movs	r0, #200	; 0xc8
 8003ab6:	f001 ff91 	bl	80059dc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003aba:	f000 fa7b 	bl	8003fb4 <ft5336_I2C_InitializeIfRequired>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4603      	mov	r3, r0
 8003ace:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8003aee:	2300      	movs	r3, #0
 8003af0:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8003af2:	f000 fa5f 	bl	8003fb4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
 8003afa:	e010      	b.n	8003b1e <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	21a8      	movs	r1, #168	; 0xa8
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 ff4c 	bl	80059a0 <TS_IO_Read>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8003b0c:	7b7b      	ldrb	r3, [r7, #13]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b51      	cmp	r3, #81	; 0x51
 8003b12:	d101      	bne.n	8003b18 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d802      	bhi.n	8003b2a <ft5336_ReadID+0x4e>
 8003b24:	7bbb      	ldrb	r3, [r7, #14]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0e8      	beq.n	8003afc <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8003b2a:	7b7b      	ldrb	r3, [r7, #13]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	b29b      	uxth	r3, r3
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fa45 	bl	8003fd4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 f933 	bl	8003db8 <ft5336_TS_DisableIT>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2102      	movs	r1, #2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 ff15 	bl	80059a0 <TS_IO_Read>
 8003b76:	4603      	mov	r3, r0
 8003b78:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d901      	bls.n	8003b92 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <ft5336_TS_DetectTouch+0x50>)
 8003b98:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8003b9a:	4b04      	ldr	r3, [pc, #16]	; (8003bac <ft5336_TS_DetectTouch+0x50>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	b2db      	uxtb	r3, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000dac 	.word	0x20000dac

08003bb0 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003bd2:	4b6d      	ldr	r3, [pc, #436]	; (8003d88 <ft5336_TS_GetXY+0x1d8>)
 8003bd4:	789a      	ldrb	r2, [r3, #2]
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	; (8003d88 <ft5336_TS_GetXY+0x1d8>)
 8003bd8:	785b      	ldrb	r3, [r3, #1]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	f080 80cf 	bcs.w	8003d7e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8003be0:	4b69      	ldr	r3, [pc, #420]	; (8003d88 <ft5336_TS_GetXY+0x1d8>)
 8003be2:	789b      	ldrb	r3, [r3, #2]
 8003be4:	2b09      	cmp	r3, #9
 8003be6:	d871      	bhi.n	8003ccc <ft5336_TS_GetXY+0x11c>
 8003be8:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <ft5336_TS_GetXY+0x40>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c2b 	.word	0x08003c2b
 8003bf8:	08003c3d 	.word	0x08003c3d
 8003bfc:	08003c4f 	.word	0x08003c4f
 8003c00:	08003c61 	.word	0x08003c61
 8003c04:	08003c73 	.word	0x08003c73
 8003c08:	08003c85 	.word	0x08003c85
 8003c0c:	08003c97 	.word	0x08003c97
 8003c10:	08003ca9 	.word	0x08003ca9
 8003c14:	08003cbb 	.word	0x08003cbb
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8003c18:	2304      	movs	r3, #4
 8003c1a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8003c20:	2306      	movs	r3, #6
 8003c22:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8003c24:	2305      	movs	r3, #5
 8003c26:	753b      	strb	r3, [r7, #20]
      break;
 8003c28:	e051      	b.n	8003cce <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8003c2a:	230a      	movs	r3, #10
 8003c2c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8003c2e:	2309      	movs	r3, #9
 8003c30:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8003c32:	230c      	movs	r3, #12
 8003c34:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8003c36:	230b      	movs	r3, #11
 8003c38:	753b      	strb	r3, [r7, #20]
      break;
 8003c3a:	e048      	b.n	8003cce <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8003c40:	230f      	movs	r3, #15
 8003c42:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8003c44:	2312      	movs	r3, #18
 8003c46:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8003c48:	2311      	movs	r3, #17
 8003c4a:	753b      	strb	r3, [r7, #20]
      break;
 8003c4c:	e03f      	b.n	8003cce <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8003c4e:	2316      	movs	r3, #22
 8003c50:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8003c52:	2315      	movs	r3, #21
 8003c54:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8003c56:	2318      	movs	r3, #24
 8003c58:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8003c5a:	2317      	movs	r3, #23
 8003c5c:	753b      	strb	r3, [r7, #20]
      break;
 8003c5e:	e036      	b.n	8003cce <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8003c60:	231c      	movs	r3, #28
 8003c62:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8003c64:	231b      	movs	r3, #27
 8003c66:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8003c68:	231e      	movs	r3, #30
 8003c6a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8003c6c:	231d      	movs	r3, #29
 8003c6e:	753b      	strb	r3, [r7, #20]
      break;
 8003c70:	e02d      	b.n	8003cce <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8003c72:	2322      	movs	r3, #34	; 0x22
 8003c74:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8003c76:	2321      	movs	r3, #33	; 0x21
 8003c78:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8003c7a:	2324      	movs	r3, #36	; 0x24
 8003c7c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8003c7e:	2323      	movs	r3, #35	; 0x23
 8003c80:	753b      	strb	r3, [r7, #20]
      break;
 8003c82:	e024      	b.n	8003cce <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8003c84:	2328      	movs	r3, #40	; 0x28
 8003c86:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8003c88:	2327      	movs	r3, #39	; 0x27
 8003c8a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8003c8c:	232a      	movs	r3, #42	; 0x2a
 8003c8e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8003c90:	2329      	movs	r3, #41	; 0x29
 8003c92:	753b      	strb	r3, [r7, #20]
      break;
 8003c94:	e01b      	b.n	8003cce <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8003c96:	232e      	movs	r3, #46	; 0x2e
 8003c98:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8003c9a:	232d      	movs	r3, #45	; 0x2d
 8003c9c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8003c9e:	2330      	movs	r3, #48	; 0x30
 8003ca0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8003ca2:	232f      	movs	r3, #47	; 0x2f
 8003ca4:	753b      	strb	r3, [r7, #20]
      break;
 8003ca6:	e012      	b.n	8003cce <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8003ca8:	2334      	movs	r3, #52	; 0x34
 8003caa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8003cac:	2333      	movs	r3, #51	; 0x33
 8003cae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8003cb0:	2336      	movs	r3, #54	; 0x36
 8003cb2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8003cb4:	2335      	movs	r3, #53	; 0x35
 8003cb6:	753b      	strb	r3, [r7, #20]
      break;
 8003cb8:	e009      	b.n	8003cce <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8003cba:	233a      	movs	r3, #58	; 0x3a
 8003cbc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8003cbe:	2339      	movs	r3, #57	; 0x39
 8003cc0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8003cc2:	233c      	movs	r3, #60	; 0x3c
 8003cc4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8003cc6:	233b      	movs	r3, #59	; 0x3b
 8003cc8:	753b      	strb	r3, [r7, #20]
      break;
 8003cca:	e000      	b.n	8003cce <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8003ccc:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003cce:	89fb      	ldrh	r3, [r7, #14]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	7dfa      	ldrb	r2, [r7, #23]
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fe62 	bl	80059a0 <TS_IO_Read>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <ft5336_TS_GetXY+0x1dc>)
 8003ce8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003cea:	89fb      	ldrh	r3, [r7, #14]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	7dba      	ldrb	r2, [r7, #22]
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 fe54 	bl	80059a0 <TS_IO_Read>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d06:	b21a      	sxth	r2, r3
 8003d08:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <ft5336_TS_GetXY+0x1dc>)
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b21b      	sxth	r3, r3
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	b21b      	sxth	r3, r3
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <ft5336_TS_GetXY+0x1dc>)
 8003d16:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8003d18:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <ft5336_TS_GetXY+0x1dc>)
 8003d1a:	881a      	ldrh	r2, [r3, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003d20:	89fb      	ldrh	r3, [r7, #14]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	7d7a      	ldrb	r2, [r7, #21]
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 fe39 	bl	80059a0 <TS_IO_Read>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003d32:	7cfb      	ldrb	r3, [r7, #19]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <ft5336_TS_GetXY+0x1dc>)
 8003d3a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003d3c:	89fb      	ldrh	r3, [r7, #14]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	7d3a      	ldrb	r2, [r7, #20]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 fe2b 	bl	80059a0 <TS_IO_Read>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003d4e:	7cfb      	ldrb	r3, [r7, #19]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d58:	b21a      	sxth	r2, r3
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <ft5336_TS_GetXY+0x1dc>)
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	b21b      	sxth	r3, r3
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b21b      	sxth	r3, r3
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <ft5336_TS_GetXY+0x1dc>)
 8003d68:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <ft5336_TS_GetXY+0x1dc>)
 8003d6c:	881a      	ldrh	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <ft5336_TS_GetXY+0x1d8>)
 8003d74:	789b      	ldrb	r3, [r3, #2]
 8003d76:	3301      	adds	r3, #1
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <ft5336_TS_GetXY+0x1d8>)
 8003d7c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8003d7e:	bf00      	nop
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000dac 	.word	0x20000dac
 8003d8c:	20000db0 	.word	0x20000db0

08003d90 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	7bfa      	ldrb	r2, [r7, #15]
 8003da8:	21a4      	movs	r1, #164	; 0xa4
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 fdde 	bl	800596c <TS_IO_Write>
}
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	21a4      	movs	r1, #164	; 0xa4
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 fdca 	bl	800596c <TS_IO_Write>
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	4603      	mov	r3, r0
 8003e16:	6039      	str	r1, [r7, #0]
 8003e18:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2101      	movs	r1, #1
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 fdbb 	bl	80059a0 <TS_IO_Read>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	601a      	str	r2, [r3, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8003e60:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <ft5336_TS_GetTouchInfo+0x158>)
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	f080 8090 	bcs.w	8003f8e <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b09      	cmp	r3, #9
 8003e72:	d85d      	bhi.n	8003f30 <ft5336_TS_GetTouchInfo+0xf0>
 8003e74:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <ft5336_TS_GetTouchInfo+0x3c>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	08003eb3 	.word	0x08003eb3
 8003e84:	08003ec1 	.word	0x08003ec1
 8003e88:	08003ecf 	.word	0x08003ecf
 8003e8c:	08003edd 	.word	0x08003edd
 8003e90:	08003eeb 	.word	0x08003eeb
 8003e94:	08003ef9 	.word	0x08003ef9
 8003e98:	08003f07 	.word	0x08003f07
 8003e9c:	08003f15 	.word	0x08003f15
 8003ea0:	08003f23 	.word	0x08003f23
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8003ea8:	2307      	movs	r3, #7
 8003eaa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8003eac:	2308      	movs	r3, #8
 8003eae:	757b      	strb	r3, [r7, #21]
      break;
 8003eb0:	e03f      	b.n	8003f32 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8003eb2:	2309      	movs	r3, #9
 8003eb4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8003eb6:	230d      	movs	r3, #13
 8003eb8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8003eba:	230e      	movs	r3, #14
 8003ebc:	757b      	strb	r3, [r7, #21]
      break;
 8003ebe:	e038      	b.n	8003f32 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8003ec0:	230f      	movs	r3, #15
 8003ec2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8003ec4:	2313      	movs	r3, #19
 8003ec6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8003ec8:	2314      	movs	r3, #20
 8003eca:	757b      	strb	r3, [r7, #21]
      break;
 8003ecc:	e031      	b.n	8003f32 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8003ece:	2315      	movs	r3, #21
 8003ed0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8003ed2:	2319      	movs	r3, #25
 8003ed4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8003ed6:	231a      	movs	r3, #26
 8003ed8:	757b      	strb	r3, [r7, #21]
      break;
 8003eda:	e02a      	b.n	8003f32 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8003edc:	231b      	movs	r3, #27
 8003ede:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8003ee0:	231f      	movs	r3, #31
 8003ee2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8003ee4:	2320      	movs	r3, #32
 8003ee6:	757b      	strb	r3, [r7, #21]
      break;
 8003ee8:	e023      	b.n	8003f32 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8003eea:	2321      	movs	r3, #33	; 0x21
 8003eec:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8003eee:	2325      	movs	r3, #37	; 0x25
 8003ef0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8003ef2:	2326      	movs	r3, #38	; 0x26
 8003ef4:	757b      	strb	r3, [r7, #21]
      break;
 8003ef6:	e01c      	b.n	8003f32 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8003ef8:	2327      	movs	r3, #39	; 0x27
 8003efa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8003efc:	232b      	movs	r3, #43	; 0x2b
 8003efe:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8003f00:	232c      	movs	r3, #44	; 0x2c
 8003f02:	757b      	strb	r3, [r7, #21]
      break;
 8003f04:	e015      	b.n	8003f32 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8003f06:	232d      	movs	r3, #45	; 0x2d
 8003f08:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8003f0a:	2331      	movs	r3, #49	; 0x31
 8003f0c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8003f0e:	2332      	movs	r3, #50	; 0x32
 8003f10:	757b      	strb	r3, [r7, #21]
      break;
 8003f12:	e00e      	b.n	8003f32 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8003f14:	2333      	movs	r3, #51	; 0x33
 8003f16:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8003f18:	2337      	movs	r3, #55	; 0x37
 8003f1a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8003f1c:	2338      	movs	r3, #56	; 0x38
 8003f1e:	757b      	strb	r3, [r7, #21]
      break;
 8003f20:	e007      	b.n	8003f32 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8003f22:	2339      	movs	r3, #57	; 0x39
 8003f24:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8003f26:	233d      	movs	r3, #61	; 0x3d
 8003f28:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8003f2a:	233e      	movs	r3, #62	; 0x3e
 8003f2c:	757b      	strb	r3, [r7, #21]
      break;
 8003f2e:	e000      	b.n	8003f32 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8003f30:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003f32:	89fb      	ldrh	r3, [r7, #14]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	7dfa      	ldrb	r2, [r7, #23]
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 fd30 	bl	80059a0 <TS_IO_Read>
 8003f40:	4603      	mov	r3, r0
 8003f42:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8003f44:	7d3b      	ldrb	r3, [r7, #20]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	119b      	asrs	r3, r3, #6
 8003f4a:	f003 0203 	and.w	r2, r3, #3
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	7dba      	ldrb	r2, [r7, #22]
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 fd20 	bl	80059a0 <TS_IO_Read>
 8003f60:	4603      	mov	r3, r0
 8003f62:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8003f64:	7d3b      	ldrb	r3, [r7, #20]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8003f6e:	89fb      	ldrh	r3, [r7, #14]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	7d7a      	ldrb	r2, [r7, #21]
 8003f74:	4611      	mov	r1, r2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fd12 	bl	80059a0 <TS_IO_Read>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8003f80:	7d3b      	ldrb	r3, [r7, #20]
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	111b      	asrs	r3, r3, #4
 8003f86:	f003 0204 	and.w	r2, r3, #4
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000dac 	.word	0x20000dac

08003f9c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000dac 	.word	0x20000dac

08003fb4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003fb8:	f7ff fff0 	bl	8003f9c <ft5336_Get_I2C_InitializedStatus>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8003fc2:	f001 fcc9 	bl	8005958 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003fc6:	4b02      	ldr	r3, [pc, #8]	; (8003fd0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
  }
}
 8003fcc:	bf00      	nop
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000dac 	.word	0x20000dac

08003fd4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	81fb      	strh	r3, [r7, #14]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	81bb      	strh	r3, [r7, #12]
 8004000:	4613      	mov	r3, r2
 8004002:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004008:	89bb      	ldrh	r3, [r7, #12]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800400e:	89bb      	ldrh	r3, [r7, #12]
 8004010:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004014:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800401a:	f001 fc29 	bl	8005870 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800401e:	89fb      	ldrh	r3, [r7, #14]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2203      	movs	r2, #3
 8004024:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004028:	4618      	mov	r0, r3
 800402a:	f001 fab3 	bl	8005594 <CODEC_IO_Write>
 800402e:	4603      	mov	r3, r0
 8004030:	461a      	mov	r2, r3
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8004038:	89fb      	ldrh	r3, [r7, #14]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2200      	movs	r2, #0
 800403e:	f640 0117 	movw	r1, #2071	; 0x817
 8004042:	4618      	mov	r0, r3
 8004044:	f001 faa6 	bl	8005594 <CODEC_IO_Write>
 8004048:	4603      	mov	r3, r0
 800404a:	461a      	mov	r2, r3
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8004052:	89fb      	ldrh	r3, [r7, #14]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2200      	movs	r2, #0
 8004058:	f44f 7181 	mov.w	r1, #258	; 0x102
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fa99 	bl	8005594 <CODEC_IO_Write>
 8004062:	4603      	mov	r3, r0
 8004064:	461a      	mov	r2, r3
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 800406c:	89fb      	ldrh	r3, [r7, #14]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	226c      	movs	r2, #108	; 0x6c
 8004072:	2139      	movs	r1, #57	; 0x39
 8004074:	4618      	mov	r0, r3
 8004076:	f001 fa8d 	bl	8005594 <CODEC_IO_Write>
 800407a:	4603      	mov	r3, r0
 800407c:	461a      	mov	r2, r3
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8004084:	8afb      	ldrh	r3, [r7, #22]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800408a:	89fb      	ldrh	r3, [r7, #14]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2213      	movs	r2, #19
 8004090:	2101      	movs	r1, #1
 8004092:	4618      	mov	r0, r3
 8004094:	f001 fa7e 	bl	8005594 <CODEC_IO_Write>
 8004098:	4603      	mov	r3, r0
 800409a:	461a      	mov	r2, r3
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	4413      	add	r3, r2
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	e00b      	b.n	80040bc <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80040a4:	89fb      	ldrh	r3, [r7, #14]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2203      	movs	r2, #3
 80040aa:	2101      	movs	r1, #1
 80040ac:	4618      	mov	r0, r3
 80040ae:	f001 fa71 	bl	8005594 <CODEC_IO_Write>
 80040b2:	4603      	mov	r3, r0
 80040b4:	461a      	mov	r2, r3
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80040bc:	2032      	movs	r0, #50	; 0x32
 80040be:	f001 fc3f 	bl	8005940 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80040c2:	8b3b      	ldrh	r3, [r7, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 815b 	beq.w	8004380 <wm8994_Init+0x390>
  {
    outputEnabled = 1;
 80040ca:	4bbc      	ldr	r3, [pc, #752]	; (80043bc <wm8994_Init+0x3cc>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80040d0:	8b3b      	ldrh	r3, [r7, #24]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d047      	beq.n	8004166 <wm8994_Init+0x176>
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	f000 8087 	beq.w	80041ea <wm8994_Init+0x1fa>
 80040dc:	2b01      	cmp	r3, #1
 80040de:	f040 810c 	bne.w	80042fa <wm8994_Init+0x30a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80040e2:	89fb      	ldrh	r3, [r7, #14]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f640 420c 	movw	r2, #3084	; 0xc0c
 80040ea:	2105      	movs	r1, #5
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 fa51 	bl	8005594 <CODEC_IO_Write>
 80040f2:	4603      	mov	r3, r0
 80040f4:	461a      	mov	r2, r3
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80040fc:	89fb      	ldrh	r3, [r7, #14]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2200      	movs	r2, #0
 8004102:	f240 6101 	movw	r1, #1537	; 0x601
 8004106:	4618      	mov	r0, r3
 8004108:	f001 fa44 	bl	8005594 <CODEC_IO_Write>
 800410c:	4603      	mov	r3, r0
 800410e:	461a      	mov	r2, r3
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004116:	89fb      	ldrh	r3, [r7, #14]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2200      	movs	r2, #0
 800411c:	f240 6102 	movw	r1, #1538	; 0x602
 8004120:	4618      	mov	r0, r3
 8004122:	f001 fa37 	bl	8005594 <CODEC_IO_Write>
 8004126:	4603      	mov	r3, r0
 8004128:	461a      	mov	r2, r3
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004130:	89fb      	ldrh	r3, [r7, #14]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2202      	movs	r2, #2
 8004136:	f240 6104 	movw	r1, #1540	; 0x604
 800413a:	4618      	mov	r0, r3
 800413c:	f001 fa2a 	bl	8005594 <CODEC_IO_Write>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	4413      	add	r3, r2
 8004148:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800414a:	89fb      	ldrh	r3, [r7, #14]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2202      	movs	r2, #2
 8004150:	f240 6105 	movw	r1, #1541	; 0x605
 8004154:	4618      	mov	r0, r3
 8004156:	f001 fa1d 	bl	8005594 <CODEC_IO_Write>
 800415a:	4603      	mov	r3, r0
 800415c:	461a      	mov	r2, r3
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	61fb      	str	r3, [r7, #28]
      break;
 8004164:	e10f      	b.n	8004386 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8004166:	89fb      	ldrh	r3, [r7, #14]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f240 3203 	movw	r2, #771	; 0x303
 800416e:	2105      	movs	r1, #5
 8004170:	4618      	mov	r0, r3
 8004172:	f001 fa0f 	bl	8005594 <CODEC_IO_Write>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004180:	89fb      	ldrh	r3, [r7, #14]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2201      	movs	r2, #1
 8004186:	f240 6101 	movw	r1, #1537	; 0x601
 800418a:	4618      	mov	r0, r3
 800418c:	f001 fa02 	bl	8005594 <CODEC_IO_Write>
 8004190:	4603      	mov	r3, r0
 8004192:	461a      	mov	r2, r3
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	4413      	add	r3, r2
 8004198:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800419a:	89fb      	ldrh	r3, [r7, #14]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2201      	movs	r2, #1
 80041a0:	f240 6102 	movw	r1, #1538	; 0x602
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 f9f5 	bl	8005594 <CODEC_IO_Write>
 80041aa:	4603      	mov	r3, r0
 80041ac:	461a      	mov	r2, r3
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80041b4:	89fb      	ldrh	r3, [r7, #14]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2200      	movs	r2, #0
 80041ba:	f240 6104 	movw	r1, #1540	; 0x604
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 f9e8 	bl	8005594 <CODEC_IO_Write>
 80041c4:	4603      	mov	r3, r0
 80041c6:	461a      	mov	r2, r3
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80041ce:	89fb      	ldrh	r3, [r7, #14]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2200      	movs	r2, #0
 80041d4:	f240 6105 	movw	r1, #1541	; 0x605
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 f9db 	bl	8005594 <CODEC_IO_Write>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	61fb      	str	r3, [r7, #28]
      break;
 80041e8:	e0cd      	b.n	8004386 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80041ea:	8afb      	ldrh	r3, [r7, #22]
 80041ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f0:	d141      	bne.n	8004276 <wm8994_Init+0x286>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80041f2:	89fb      	ldrh	r3, [r7, #14]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f640 720f 	movw	r2, #3855	; 0xf0f
 80041fa:	2105      	movs	r1, #5
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 f9c9 	bl	8005594 <CODEC_IO_Write>
 8004202:	4603      	mov	r3, r0
 8004204:	461a      	mov	r2, r3
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800420c:	89fb      	ldrh	r3, [r7, #14]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2203      	movs	r2, #3
 8004212:	f240 6101 	movw	r1, #1537	; 0x601
 8004216:	4618      	mov	r0, r3
 8004218:	f001 f9bc 	bl	8005594 <CODEC_IO_Write>
 800421c:	4603      	mov	r3, r0
 800421e:	461a      	mov	r2, r3
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8004226:	89fb      	ldrh	r3, [r7, #14]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2203      	movs	r2, #3
 800422c:	f240 6102 	movw	r1, #1538	; 0x602
 8004230:	4618      	mov	r0, r3
 8004232:	f001 f9af 	bl	8005594 <CODEC_IO_Write>
 8004236:	4603      	mov	r3, r0
 8004238:	461a      	mov	r2, r3
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2203      	movs	r2, #3
 8004246:	f240 6104 	movw	r1, #1540	; 0x604
 800424a:	4618      	mov	r0, r3
 800424c:	f001 f9a2 	bl	8005594 <CODEC_IO_Write>
 8004250:	4603      	mov	r3, r0
 8004252:	461a      	mov	r2, r3
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	4413      	add	r3, r2
 8004258:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800425a:	89fb      	ldrh	r3, [r7, #14]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2203      	movs	r2, #3
 8004260:	f240 6105 	movw	r1, #1541	; 0x605
 8004264:	4618      	mov	r0, r3
 8004266:	f001 f995 	bl	8005594 <CODEC_IO_Write>
 800426a:	4603      	mov	r3, r0
 800426c:	461a      	mov	r2, r3
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8004274:	e087      	b.n	8004386 <wm8994_Init+0x396>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004276:	89fb      	ldrh	r3, [r7, #14]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	f640 720f 	movw	r2, #3855	; 0xf0f
 800427e:	2105      	movs	r1, #5
 8004280:	4618      	mov	r0, r3
 8004282:	f001 f987 	bl	8005594 <CODEC_IO_Write>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004290:	89fb      	ldrh	r3, [r7, #14]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2201      	movs	r2, #1
 8004296:	f240 6101 	movw	r1, #1537	; 0x601
 800429a:	4618      	mov	r0, r3
 800429c:	f001 f97a 	bl	8005594 <CODEC_IO_Write>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	4413      	add	r3, r2
 80042a8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80042aa:	89fb      	ldrh	r3, [r7, #14]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2201      	movs	r2, #1
 80042b0:	f240 6102 	movw	r1, #1538	; 0x602
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 f96d 	bl	8005594 <CODEC_IO_Write>
 80042ba:	4603      	mov	r3, r0
 80042bc:	461a      	mov	r2, r3
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80042c4:	89fb      	ldrh	r3, [r7, #14]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2202      	movs	r2, #2
 80042ca:	f240 6104 	movw	r1, #1540	; 0x604
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 f960 	bl	8005594 <CODEC_IO_Write>
 80042d4:	4603      	mov	r3, r0
 80042d6:	461a      	mov	r2, r3
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80042de:	89fb      	ldrh	r3, [r7, #14]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2202      	movs	r2, #2
 80042e4:	f240 6105 	movw	r1, #1541	; 0x605
 80042e8:	4618      	mov	r0, r3
 80042ea:	f001 f953 	bl	8005594 <CODEC_IO_Write>
 80042ee:	4603      	mov	r3, r0
 80042f0:	461a      	mov	r2, r3
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	61fb      	str	r3, [r7, #28]
      break;
 80042f8:	e045      	b.n	8004386 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80042fa:	89fb      	ldrh	r3, [r7, #14]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f240 3203 	movw	r2, #771	; 0x303
 8004302:	2105      	movs	r1, #5
 8004304:	4618      	mov	r0, r3
 8004306:	f001 f945 	bl	8005594 <CODEC_IO_Write>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004314:	89fb      	ldrh	r3, [r7, #14]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2201      	movs	r2, #1
 800431a:	f240 6101 	movw	r1, #1537	; 0x601
 800431e:	4618      	mov	r0, r3
 8004320:	f001 f938 	bl	8005594 <CODEC_IO_Write>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	4413      	add	r3, r2
 800432c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800432e:	89fb      	ldrh	r3, [r7, #14]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2201      	movs	r2, #1
 8004334:	f240 6102 	movw	r1, #1538	; 0x602
 8004338:	4618      	mov	r0, r3
 800433a:	f001 f92b 	bl	8005594 <CODEC_IO_Write>
 800433e:	4603      	mov	r3, r0
 8004340:	461a      	mov	r2, r3
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004348:	89fb      	ldrh	r3, [r7, #14]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2200      	movs	r2, #0
 800434e:	f240 6104 	movw	r1, #1540	; 0x604
 8004352:	4618      	mov	r0, r3
 8004354:	f001 f91e 	bl	8005594 <CODEC_IO_Write>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004362:	89fb      	ldrh	r3, [r7, #14]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2200      	movs	r2, #0
 8004368:	f240 6105 	movw	r1, #1541	; 0x605
 800436c:	4618      	mov	r0, r3
 800436e:	f001 f911 	bl	8005594 <CODEC_IO_Write>
 8004372:	4603      	mov	r3, r0
 8004374:	461a      	mov	r2, r3
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	61fb      	str	r3, [r7, #28]
      break;
 800437c:	bf00      	nop
 800437e:	e002      	b.n	8004386 <wm8994_Init+0x396>
    }
  }
  else
  {
    outputEnabled = 0;
 8004380:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <wm8994_Init+0x3cc>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8004386:	8afb      	ldrh	r3, [r7, #22]
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 81a7 	beq.w	80046dc <wm8994_Init+0x6ec>
  {
    inputEnabled = 1;
 800438e:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <wm8994_Init+0x3d0>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8004394:	8afb      	ldrh	r3, [r7, #22]
 8004396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800439a:	d013      	beq.n	80043c4 <wm8994_Init+0x3d4>
 800439c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a0:	dc04      	bgt.n	80043ac <wm8994_Init+0x3bc>
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a6:	f000 80cf 	beq.w	8004548 <wm8994_Init+0x558>
 80043aa:	e192      	b.n	80046d2 <wm8994_Init+0x6e2>
 80043ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043b0:	d057      	beq.n	8004462 <wm8994_Init+0x472>
 80043b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b6:	f000 8116 	beq.w	80045e6 <wm8994_Init+0x5f6>
 80043ba:	e18a      	b.n	80046d2 <wm8994_Init+0x6e2>
 80043bc:	20000db4 	.word	0x20000db4
 80043c0:	20000db8 	.word	0x20000db8
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80043c4:	89fb      	ldrh	r3, [r7, #14]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80043cc:	2104      	movs	r1, #4
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 f8e0 	bl	8005594 <CODEC_IO_Write>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461a      	mov	r2, r3
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80043de:	89fb      	ldrh	r3, [r7, #14]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	22db      	movs	r2, #219	; 0xdb
 80043e4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80043e8:	4618      	mov	r0, r3
 80043ea:	f001 f8d3 	bl	8005594 <CODEC_IO_Write>
 80043ee:	4603      	mov	r3, r0
 80043f0:	461a      	mov	r2, r3
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80043f8:	89fb      	ldrh	r3, [r7, #14]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8004400:	2102      	movs	r1, #2
 8004402:	4618      	mov	r0, r3
 8004404:	f001 f8c6 	bl	8005594 <CODEC_IO_Write>
 8004408:	4603      	mov	r3, r0
 800440a:	461a      	mov	r2, r3
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	4413      	add	r3, r2
 8004410:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004412:	89fb      	ldrh	r3, [r7, #14]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2202      	movs	r2, #2
 8004418:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800441c:	4618      	mov	r0, r3
 800441e:	f001 f8b9 	bl	8005594 <CODEC_IO_Write>
 8004422:	4603      	mov	r3, r0
 8004424:	461a      	mov	r2, r3
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800442c:	89fb      	ldrh	r3, [r7, #14]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2202      	movs	r2, #2
 8004432:	f240 6109 	movw	r1, #1545	; 0x609
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f8ac 	bl	8005594 <CODEC_IO_Write>
 800443c:	4603      	mov	r3, r0
 800443e:	461a      	mov	r2, r3
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8004446:	89fb      	ldrh	r3, [r7, #14]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	220e      	movs	r2, #14
 800444c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004450:	4618      	mov	r0, r3
 8004452:	f001 f89f 	bl	8005594 <CODEC_IO_Write>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	61fb      	str	r3, [r7, #28]
      break;
 8004460:	e13f      	b.n	80046e2 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8004462:	89fb      	ldrh	r3, [r7, #14]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2211      	movs	r2, #17
 8004468:	2128      	movs	r1, #40	; 0x28
 800446a:	4618      	mov	r0, r3
 800446c:	f001 f892 	bl	8005594 <CODEC_IO_Write>
 8004470:	4603      	mov	r3, r0
 8004472:	461a      	mov	r2, r3
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800447a:	89fb      	ldrh	r3, [r7, #14]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2235      	movs	r2, #53	; 0x35
 8004480:	2129      	movs	r1, #41	; 0x29
 8004482:	4618      	mov	r0, r3
 8004484:	f001 f886 	bl	8005594 <CODEC_IO_Write>
 8004488:	4603      	mov	r3, r0
 800448a:	461a      	mov	r2, r3
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	4413      	add	r3, r2
 8004490:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8004492:	89fb      	ldrh	r3, [r7, #14]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2235      	movs	r2, #53	; 0x35
 8004498:	212a      	movs	r1, #42	; 0x2a
 800449a:	4618      	mov	r0, r3
 800449c:	f001 f87a 	bl	8005594 <CODEC_IO_Write>
 80044a0:	4603      	mov	r3, r0
 80044a2:	461a      	mov	r2, r3
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80044aa:	89fb      	ldrh	r3, [r7, #14]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f240 3203 	movw	r2, #771	; 0x303
 80044b2:	2104      	movs	r1, #4
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 f86d 	bl	8005594 <CODEC_IO_Write>
 80044ba:	4603      	mov	r3, r0
 80044bc:	461a      	mov	r2, r3
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80044c4:	89fb      	ldrh	r3, [r7, #14]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	22db      	movs	r2, #219	; 0xdb
 80044ca:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 f860 	bl	8005594 <CODEC_IO_Write>
 80044d4:	4603      	mov	r3, r0
 80044d6:	461a      	mov	r2, r3
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80044de:	89fb      	ldrh	r3, [r7, #14]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f246 3250 	movw	r2, #25424	; 0x6350
 80044e6:	2102      	movs	r1, #2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f001 f853 	bl	8005594 <CODEC_IO_Write>
 80044ee:	4603      	mov	r3, r0
 80044f0:	461a      	mov	r2, r3
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	4413      	add	r3, r2
 80044f6:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80044f8:	89fb      	ldrh	r3, [r7, #14]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2202      	movs	r2, #2
 80044fe:	f240 6106 	movw	r1, #1542	; 0x606
 8004502:	4618      	mov	r0, r3
 8004504:	f001 f846 	bl	8005594 <CODEC_IO_Write>
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004512:	89fb      	ldrh	r3, [r7, #14]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2202      	movs	r2, #2
 8004518:	f240 6107 	movw	r1, #1543	; 0x607
 800451c:	4618      	mov	r0, r3
 800451e:	f001 f839 	bl	8005594 <CODEC_IO_Write>
 8004522:	4603      	mov	r3, r0
 8004524:	461a      	mov	r2, r3
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800452c:	89fb      	ldrh	r3, [r7, #14]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	220d      	movs	r2, #13
 8004532:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004536:	4618      	mov	r0, r3
 8004538:	f001 f82c 	bl	8005594 <CODEC_IO_Write>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	4413      	add	r3, r2
 8004544:	61fb      	str	r3, [r7, #28]
      break;
 8004546:	e0cc      	b.n	80046e2 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8004548:	89fb      	ldrh	r3, [r7, #14]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8004550:	2104      	movs	r1, #4
 8004552:	4618      	mov	r0, r3
 8004554:	f001 f81e 	bl	8005594 <CODEC_IO_Write>
 8004558:	4603      	mov	r3, r0
 800455a:	461a      	mov	r2, r3
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	4413      	add	r3, r2
 8004560:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004562:	89fb      	ldrh	r3, [r7, #14]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	22db      	movs	r2, #219	; 0xdb
 8004568:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800456c:	4618      	mov	r0, r3
 800456e:	f001 f811 	bl	8005594 <CODEC_IO_Write>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	4413      	add	r3, r2
 800457a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800457c:	89fb      	ldrh	r3, [r7, #14]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f246 3250 	movw	r2, #25424	; 0x6350
 8004584:	2102      	movs	r1, #2
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f804 	bl	8005594 <CODEC_IO_Write>
 800458c:	4603      	mov	r3, r0
 800458e:	461a      	mov	r2, r3
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	4413      	add	r3, r2
 8004594:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004596:	89fb      	ldrh	r3, [r7, #14]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2202      	movs	r2, #2
 800459c:	f240 6106 	movw	r1, #1542	; 0x606
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fff7 	bl	8005594 <CODEC_IO_Write>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80045b0:	89fb      	ldrh	r3, [r7, #14]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2202      	movs	r2, #2
 80045b6:	f240 6107 	movw	r1, #1543	; 0x607
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 ffea 	bl	8005594 <CODEC_IO_Write>
 80045c0:	4603      	mov	r3, r0
 80045c2:	461a      	mov	r2, r3
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80045ca:	89fb      	ldrh	r3, [r7, #14]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	220d      	movs	r2, #13
 80045d0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 ffdd 	bl	8005594 <CODEC_IO_Write>
 80045da:	4603      	mov	r3, r0
 80045dc:	461a      	mov	r2, r3
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	61fb      	str	r3, [r7, #28]
      break; 
 80045e4:	e07d      	b.n	80046e2 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80045e6:	89fb      	ldrh	r3, [r7, #14]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	f640 723c 	movw	r2, #3900	; 0xf3c
 80045ee:	2104      	movs	r1, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 ffcf 	bl	8005594 <CODEC_IO_Write>
 80045f6:	4603      	mov	r3, r0
 80045f8:	461a      	mov	r2, r3
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4413      	add	r3, r2
 80045fe:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8004600:	89fb      	ldrh	r3, [r7, #14]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	22db      	movs	r2, #219	; 0xdb
 8004606:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800460a:	4618      	mov	r0, r3
 800460c:	f000 ffc2 	bl	8005594 <CODEC_IO_Write>
 8004610:	4603      	mov	r3, r0
 8004612:	461a      	mov	r2, r3
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800461a:	89fb      	ldrh	r3, [r7, #14]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	22db      	movs	r2, #219	; 0xdb
 8004620:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004624:	4618      	mov	r0, r3
 8004626:	f000 ffb5 	bl	8005594 <CODEC_IO_Write>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8004634:	89fb      	ldrh	r3, [r7, #14]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f246 32a0 	movw	r2, #25504	; 0x63a0
 800463c:	2102      	movs	r1, #2
 800463e:	4618      	mov	r0, r3
 8004640:	f000 ffa8 	bl	8005594 <CODEC_IO_Write>
 8004644:	4603      	mov	r3, r0
 8004646:	461a      	mov	r2, r3
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4413      	add	r3, r2
 800464c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800464e:	89fb      	ldrh	r3, [r7, #14]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2202      	movs	r2, #2
 8004654:	f240 6106 	movw	r1, #1542	; 0x606
 8004658:	4618      	mov	r0, r3
 800465a:	f000 ff9b 	bl	8005594 <CODEC_IO_Write>
 800465e:	4603      	mov	r3, r0
 8004660:	461a      	mov	r2, r3
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004668:	89fb      	ldrh	r3, [r7, #14]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2202      	movs	r2, #2
 800466e:	f240 6107 	movw	r1, #1543	; 0x607
 8004672:	4618      	mov	r0, r3
 8004674:	f000 ff8e 	bl	8005594 <CODEC_IO_Write>
 8004678:	4603      	mov	r3, r0
 800467a:	461a      	mov	r2, r3
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	4413      	add	r3, r2
 8004680:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004682:	89fb      	ldrh	r3, [r7, #14]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2202      	movs	r2, #2
 8004688:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800468c:	4618      	mov	r0, r3
 800468e:	f000 ff81 	bl	8005594 <CODEC_IO_Write>
 8004692:	4603      	mov	r3, r0
 8004694:	461a      	mov	r2, r3
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	4413      	add	r3, r2
 800469a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800469c:	89fb      	ldrh	r3, [r7, #14]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2202      	movs	r2, #2
 80046a2:	f240 6109 	movw	r1, #1545	; 0x609
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 ff74 	bl	8005594 <CODEC_IO_Write>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80046b6:	89fb      	ldrh	r3, [r7, #14]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	220d      	movs	r2, #13
 80046bc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 ff67 	bl	8005594 <CODEC_IO_Write>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	4413      	add	r3, r2
 80046ce:	61fb      	str	r3, [r7, #28]
      break;    
 80046d0:	e007      	b.n	80046e2 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3301      	adds	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
      break;
 80046d8:	bf00      	nop
 80046da:	e002      	b.n	80046e2 <wm8994_Init+0x6f2>
    }
  }
  else
  {
    inputEnabled = 0;
 80046dc:	4b95      	ldr	r3, [pc, #596]	; (8004934 <wm8994_Init+0x944>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f245 6222 	movw	r2, #22050	; 0x5622
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d076      	beq.n	80047da <wm8994_Init+0x7ea>
 80046ec:	f245 6222 	movw	r2, #22050	; 0x5622
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d80a      	bhi.n	800470a <wm8994_Init+0x71a>
 80046f4:	f642 3211 	movw	r2, #11025	; 0x2b11
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d060      	beq.n	80047be <wm8994_Init+0x7ce>
 80046fc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004700:	d025      	beq.n	800474e <wm8994_Init+0x75e>
 8004702:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004706:	d014      	beq.n	8004732 <wm8994_Init+0x742>
 8004708:	e083      	b.n	8004812 <wm8994_Init+0x822>
 800470a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800470e:	4293      	cmp	r3, r2
 8004710:	d071      	beq.n	80047f6 <wm8994_Init+0x806>
 8004712:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004716:	4293      	cmp	r3, r2
 8004718:	d803      	bhi.n	8004722 <wm8994_Init+0x732>
 800471a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800471e:	d024      	beq.n	800476a <wm8994_Init+0x77a>
 8004720:	e077      	b.n	8004812 <wm8994_Init+0x822>
 8004722:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004726:	4293      	cmp	r3, r2
 8004728:	d02d      	beq.n	8004786 <wm8994_Init+0x796>
 800472a:	4a83      	ldr	r2, [pc, #524]	; (8004938 <wm8994_Init+0x948>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d038      	beq.n	80047a2 <wm8994_Init+0x7b2>
 8004730:	e06f      	b.n	8004812 <wm8994_Init+0x822>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8004732:	89fb      	ldrh	r3, [r7, #14]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2203      	movs	r2, #3
 8004738:	f44f 7104 	mov.w	r1, #528	; 0x210
 800473c:	4618      	mov	r0, r3
 800473e:	f000 ff29 	bl	8005594 <CODEC_IO_Write>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	4413      	add	r3, r2
 800474a:	61fb      	str	r3, [r7, #28]
    break;
 800474c:	e06f      	b.n	800482e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800474e:	89fb      	ldrh	r3, [r7, #14]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2233      	movs	r2, #51	; 0x33
 8004754:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004758:	4618      	mov	r0, r3
 800475a:	f000 ff1b 	bl	8005594 <CODEC_IO_Write>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	61fb      	str	r3, [r7, #28]
    break;
 8004768:	e061      	b.n	800482e <wm8994_Init+0x83e>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800476a:	89fb      	ldrh	r3, [r7, #14]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2263      	movs	r2, #99	; 0x63
 8004770:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004774:	4618      	mov	r0, r3
 8004776:	f000 ff0d 	bl	8005594 <CODEC_IO_Write>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	61fb      	str	r3, [r7, #28]
    break;
 8004784:	e053      	b.n	800482e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004786:	89fb      	ldrh	r3, [r7, #14]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2283      	movs	r2, #131	; 0x83
 800478c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004790:	4618      	mov	r0, r3
 8004792:	f000 feff 	bl	8005594 <CODEC_IO_Write>
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	61fb      	str	r3, [r7, #28]
    break;
 80047a0:	e045      	b.n	800482e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80047a2:	89fb      	ldrh	r3, [r7, #14]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	22a3      	movs	r2, #163	; 0xa3
 80047a8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fef1 	bl	8005594 <CODEC_IO_Write>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	61fb      	str	r3, [r7, #28]
    break;
 80047bc:	e037      	b.n	800482e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80047be:	89fb      	ldrh	r3, [r7, #14]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2213      	movs	r2, #19
 80047c4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fee3 	bl	8005594 <CODEC_IO_Write>
 80047ce:	4603      	mov	r3, r0
 80047d0:	461a      	mov	r2, r3
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	4413      	add	r3, r2
 80047d6:	61fb      	str	r3, [r7, #28]
    break;
 80047d8:	e029      	b.n	800482e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80047da:	89fb      	ldrh	r3, [r7, #14]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2243      	movs	r2, #67	; 0x43
 80047e0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fed5 	bl	8005594 <CODEC_IO_Write>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	61fb      	str	r3, [r7, #28]
    break;
 80047f4:	e01b      	b.n	800482e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80047f6:	89fb      	ldrh	r3, [r7, #14]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2273      	movs	r2, #115	; 0x73
 80047fc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fec7 	bl	8005594 <CODEC_IO_Write>
 8004806:	4603      	mov	r3, r0
 8004808:	461a      	mov	r2, r3
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	61fb      	str	r3, [r7, #28]
    break; 
 8004810:	e00d      	b.n	800482e <wm8994_Init+0x83e>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004812:	89fb      	ldrh	r3, [r7, #14]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2283      	movs	r2, #131	; 0x83
 8004818:	f44f 7104 	mov.w	r1, #528	; 0x210
 800481c:	4618      	mov	r0, r3
 800481e:	f000 feb9 	bl	8005594 <CODEC_IO_Write>
 8004822:	4603      	mov	r3, r0
 8004824:	461a      	mov	r2, r3
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	61fb      	str	r3, [r7, #28]
    break; 
 800482c:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800482e:	8afb      	ldrh	r3, [r7, #22]
 8004830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004834:	d10e      	bne.n	8004854 <wm8994_Init+0x864>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8004836:	89fb      	ldrh	r3, [r7, #14]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f244 0218 	movw	r2, #16408	; 0x4018
 800483e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fea6 	bl	8005594 <CODEC_IO_Write>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e00d      	b.n	8004870 <wm8994_Init+0x880>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8004854:	89fb      	ldrh	r3, [r7, #14]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f244 0210 	movw	r2, #16400	; 0x4010
 800485c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fe97 	bl	8005594 <CODEC_IO_Write>
 8004866:	4603      	mov	r3, r0
 8004868:	461a      	mov	r2, r3
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4413      	add	r3, r2
 800486e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8004870:	89fb      	ldrh	r3, [r7, #14]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2200      	movs	r2, #0
 8004876:	f240 3102 	movw	r1, #770	; 0x302
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fe8a 	bl	8005594 <CODEC_IO_Write>
 8004880:	4603      	mov	r3, r0
 8004882:	461a      	mov	r2, r3
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	4413      	add	r3, r2
 8004888:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800488a:	89fb      	ldrh	r3, [r7, #14]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	220a      	movs	r2, #10
 8004890:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fe7d 	bl	8005594 <CODEC_IO_Write>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	4413      	add	r3, r2
 80048a2:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80048a4:	89fb      	ldrh	r3, [r7, #14]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2201      	movs	r2, #1
 80048aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fe70 	bl	8005594 <CODEC_IO_Write>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80048be:	8b3b      	ldrh	r3, [r7, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 817b 	beq.w	8004bbc <wm8994_Init+0xbcc>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80048c6:	8b3b      	ldrh	r3, [r7, #24]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d157      	bne.n	800497c <wm8994_Init+0x98c>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80048cc:	89fb      	ldrh	r3, [r7, #14]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048d4:	212d      	movs	r1, #45	; 0x2d
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fe5c 	bl	8005594 <CODEC_IO_Write>
 80048dc:	4603      	mov	r3, r0
 80048de:	461a      	mov	r2, r3
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80048e6:	89fb      	ldrh	r3, [r7, #14]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ee:	212e      	movs	r1, #46	; 0x2e
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fe4f 	bl	8005594 <CODEC_IO_Write>
 80048f6:	4603      	mov	r3, r0
 80048f8:	461a      	mov	r2, r3
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8004900:	4b0e      	ldr	r3, [pc, #56]	; (800493c <wm8994_Init+0x94c>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01b      	beq.n	8004940 <wm8994_Init+0x950>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8004908:	89fb      	ldrh	r3, [r7, #14]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8004910:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fe3d 	bl	8005594 <CODEC_IO_Write>
 800491a:	4603      	mov	r3, r0
 800491c:	461a      	mov	r2, r3
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <wm8994_Init+0x94c>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800492a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800492e:	f001 f807 	bl	8005940 <AUDIO_IO_Delay>
 8004932:	e016      	b.n	8004962 <wm8994_Init+0x972>
 8004934:	20000db8 	.word	0x20000db8
 8004938:	00017700 	.word	0x00017700
 800493c:	2000005c 	.word	0x2000005c
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8004940:	89fb      	ldrh	r3, [r7, #14]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f248 1208 	movw	r2, #33032	; 0x8108
 8004948:	f44f 7188 	mov.w	r1, #272	; 0x110
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fe21 	bl	8005594 <CODEC_IO_Write>
 8004952:	4603      	mov	r3, r0
 8004954:	461a      	mov	r2, r3
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 800495c:	2032      	movs	r0, #50	; 0x32
 800495e:	f000 ffef 	bl	8005940 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2200      	movs	r2, #0
 8004968:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fe11 	bl	8005594 <CODEC_IO_Write>
 8004972:	4603      	mov	r3, r0
 8004974:	461a      	mov	r2, r3
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800497c:	89fb      	ldrh	r3, [r7, #14]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004984:	2103      	movs	r1, #3
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fe04 	bl	8005594 <CODEC_IO_Write>
 800498c:	4603      	mov	r3, r0
 800498e:	461a      	mov	r2, r3
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8004996:	89fb      	ldrh	r3, [r7, #14]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2200      	movs	r2, #0
 800499c:	2122      	movs	r1, #34	; 0x22
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fdf8 	bl	8005594 <CODEC_IO_Write>
 80049a4:	4603      	mov	r3, r0
 80049a6:	461a      	mov	r2, r3
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	4413      	add	r3, r2
 80049ac:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80049ae:	89fb      	ldrh	r3, [r7, #14]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2200      	movs	r2, #0
 80049b4:	2123      	movs	r1, #35	; 0x23
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fdec 	bl	8005594 <CODEC_IO_Write>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80049c6:	89fb      	ldrh	r3, [r7, #14]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80049ce:	2136      	movs	r1, #54	; 0x36
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fddf 	bl	8005594 <CODEC_IO_Write>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80049e0:	89fb      	ldrh	r3, [r7, #14]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f243 0203 	movw	r2, #12291	; 0x3003
 80049e8:	2101      	movs	r1, #1
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fdd2 	bl	8005594 <CODEC_IO_Write>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80049fa:	8afb      	ldrh	r3, [r7, #22]
 80049fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a00:	d10d      	bne.n	8004a1e <wm8994_Init+0xa2e>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8004a02:	89fb      	ldrh	r3, [r7, #14]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f240 2205 	movw	r2, #517	; 0x205
 8004a0a:	2151      	movs	r1, #81	; 0x51
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fdc1 	bl	8005594 <CODEC_IO_Write>
 8004a12:	4603      	mov	r3, r0
 8004a14:	461a      	mov	r2, r3
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	e00b      	b.n	8004a36 <wm8994_Init+0xa46>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8004a1e:	89fb      	ldrh	r3, [r7, #14]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2205      	movs	r2, #5
 8004a24:	2151      	movs	r1, #81	; 0x51
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fdb4 	bl	8005594 <CODEC_IO_Write>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	461a      	mov	r2, r3
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8004a36:	8b7b      	ldrh	r3, [r7, #26]
 8004a38:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8004a3c:	f043 0303 	orr.w	r3, r3, #3
 8004a40:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004a42:	89fb      	ldrh	r3, [r7, #14]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	8b7a      	ldrh	r2, [r7, #26]
 8004a48:	2101      	movs	r1, #1
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fda2 	bl	8005594 <CODEC_IO_Write>
 8004a50:	4603      	mov	r3, r0
 8004a52:	461a      	mov	r2, r3
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8004a5a:	89fb      	ldrh	r3, [r7, #14]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2222      	movs	r2, #34	; 0x22
 8004a60:	2160      	movs	r1, #96	; 0x60
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fd96 	bl	8005594 <CODEC_IO_Write>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8004a72:	89fb      	ldrh	r3, [r7, #14]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f649 7225 	movw	r2, #40741	; 0x9f25
 8004a7a:	214c      	movs	r1, #76	; 0x4c
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fd89 	bl	8005594 <CODEC_IO_Write>
 8004a82:	4603      	mov	r3, r0
 8004a84:	461a      	mov	r2, r3
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8004a8c:	200f      	movs	r0, #15
 8004a8e:	f000 ff57 	bl	8005940 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8004a92:	89fb      	ldrh	r3, [r7, #14]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2201      	movs	r2, #1
 8004a98:	212d      	movs	r1, #45	; 0x2d
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fd7a 	bl	8005594 <CODEC_IO_Write>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8004aaa:	89fb      	ldrh	r3, [r7, #14]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2201      	movs	r2, #1
 8004ab0:	212e      	movs	r1, #46	; 0x2e
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fd6e 	bl	8005594 <CODEC_IO_Write>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	4413      	add	r3, r2
 8004ac0:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8004ac2:	89fb      	ldrh	r3, [r7, #14]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004aca:	2103      	movs	r1, #3
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fd61 	bl	8005594 <CODEC_IO_Write>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8004adc:	89fb      	ldrh	r3, [r7, #14]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2233      	movs	r2, #51	; 0x33
 8004ae2:	2154      	movs	r1, #84	; 0x54
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fd55 	bl	8005594 <CODEC_IO_Write>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461a      	mov	r2, r3
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4413      	add	r3, r2
 8004af2:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8004af4:	f240 1001 	movw	r0, #257	; 0x101
 8004af8:	f000 ff22 	bl	8005940 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8004afc:	89fb      	ldrh	r3, [r7, #14]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	22ee      	movs	r2, #238	; 0xee
 8004b02:	2160      	movs	r1, #96	; 0x60
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fd45 	bl	8005594 <CODEC_IO_Write>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	4413      	add	r3, r2
 8004b12:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8004b14:	89fb      	ldrh	r3, [r7, #14]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	22c0      	movs	r2, #192	; 0xc0
 8004b1a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fd38 	bl	8005594 <CODEC_IO_Write>
 8004b24:	4603      	mov	r3, r0
 8004b26:	461a      	mov	r2, r3
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8004b2e:	89fb      	ldrh	r3, [r7, #14]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	22c0      	movs	r2, #192	; 0xc0
 8004b34:	f240 6111 	movw	r1, #1553	; 0x611
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fd2b 	bl	8005594 <CODEC_IO_Write>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	461a      	mov	r2, r3
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8004b48:	89fb      	ldrh	r3, [r7, #14]
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2210      	movs	r2, #16
 8004b4e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fd1e 	bl	8005594 <CODEC_IO_Write>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4413      	add	r3, r2
 8004b60:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8004b62:	89fb      	ldrh	r3, [r7, #14]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	22c0      	movs	r2, #192	; 0xc0
 8004b68:	f240 6112 	movw	r1, #1554	; 0x612
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fd11 	bl	8005594 <CODEC_IO_Write>
 8004b72:	4603      	mov	r3, r0
 8004b74:	461a      	mov	r2, r3
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8004b7c:	89fb      	ldrh	r3, [r7, #14]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	22c0      	movs	r2, #192	; 0xc0
 8004b82:	f240 6113 	movw	r1, #1555	; 0x613
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fd04 	bl	8005594 <CODEC_IO_Write>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	4413      	add	r3, r2
 8004b94:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8004b96:	89fb      	ldrh	r3, [r7, #14]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	f240 4122 	movw	r1, #1058	; 0x422
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fcf7 	bl	8005594 <CODEC_IO_Write>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	461a      	mov	r2, r3
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004bb0:	7afa      	ldrb	r2, [r7, #11]
 8004bb2:	89fb      	ldrh	r3, [r7, #14]
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f984 	bl	8004ec4 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8004bbc:	8afb      	ldrh	r3, [r7, #22]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80a6 	beq.w	8004d10 <wm8994_Init+0xd20>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8004bc4:	8afb      	ldrh	r3, [r7, #22]
 8004bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bca:	d003      	beq.n	8004bd4 <wm8994_Init+0xbe4>
 8004bcc:	8afb      	ldrh	r3, [r7, #22]
 8004bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd2:	d12b      	bne.n	8004c2c <wm8994_Init+0xc3c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004bd4:	8b7b      	ldrh	r3, [r7, #26]
 8004bd6:	f043 0313 	orr.w	r3, r3, #19
 8004bda:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	8b7a      	ldrh	r2, [r7, #26]
 8004be2:	2101      	movs	r1, #1
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fcd5 	bl	8005594 <CODEC_IO_Write>
 8004bea:	4603      	mov	r3, r0
 8004bec:	461a      	mov	r2, r3
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004bf4:	89fb      	ldrh	r3, [r7, #14]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fcc8 	bl	8005594 <CODEC_IO_Write>
 8004c04:	4603      	mov	r3, r0
 8004c06:	461a      	mov	r2, r3
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004c16:	f240 4111 	movw	r1, #1041	; 0x411
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fcba 	bl	8005594 <CODEC_IO_Write>
 8004c20:	4603      	mov	r3, r0
 8004c22:	461a      	mov	r2, r3
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e06b      	b.n	8004d04 <wm8994_Init+0xd14>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004c2c:	8afb      	ldrh	r3, [r7, #22]
 8004c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c32:	d139      	bne.n	8004ca8 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8004c34:	8b7b      	ldrh	r3, [r7, #26]
 8004c36:	f043 0313 	orr.w	r3, r3, #19
 8004c3a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004c3c:	89fb      	ldrh	r3, [r7, #14]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	8b7a      	ldrh	r2, [r7, #26]
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fca5 	bl	8005594 <CODEC_IO_Write>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	4413      	add	r3, r2
 8004c52:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8004c54:	89fb      	ldrh	r3, [r7, #14]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2202      	movs	r2, #2
 8004c5a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fc98 	bl	8005594 <CODEC_IO_Write>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004c6e:	89fb      	ldrh	r3, [r7, #14]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004c76:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fc8a 	bl	8005594 <CODEC_IO_Write>
 8004c80:	4603      	mov	r3, r0
 8004c82:	461a      	mov	r2, r3
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8004c8a:	89fb      	ldrh	r3, [r7, #14]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004c92:	f240 4111 	movw	r1, #1041	; 0x411
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fc7c 	bl	8005594 <CODEC_IO_Write>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	e02d      	b.n	8004d04 <wm8994_Init+0xd14>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8004ca8:	8afb      	ldrh	r3, [r7, #22]
 8004caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cae:	d003      	beq.n	8004cb8 <wm8994_Init+0xcc8>
 8004cb0:	8afb      	ldrh	r3, [r7, #22]
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb6:	d125      	bne.n	8004d04 <wm8994_Init+0xd14>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8004cb8:	89fb      	ldrh	r3, [r7, #14]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	220b      	movs	r2, #11
 8004cbe:	2118      	movs	r1, #24
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fc67 	bl	8005594 <CODEC_IO_Write>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	461a      	mov	r2, r3
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	220b      	movs	r2, #11
 8004cd6:	211a      	movs	r1, #26
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fc5b 	bl	8005594 <CODEC_IO_Write>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8004ce8:	89fb      	ldrh	r3, [r7, #14]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8004cf0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fc4d 	bl	8005594 <CODEC_IO_Write>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8004d04:	7afa      	ldrb	r2, [r7, #11]
 8004d06:	89fb      	ldrh	r3, [r7, #14]
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f8da 	bl	8004ec4 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8004d10:	69fb      	ldr	r3, [r7, #28]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop

08004d1c <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8004d20:	f000 fdb0 	bl	8005884 <AUDIO_IO_DeInit>
}
 8004d24:	bf00      	nop
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8004d32:	f000 fd9d 	bl	8005870 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fdd3 	bl	80058e8 <AUDIO_IO_Read>
 8004d42:	4603      	mov	r3, r0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	6039      	str	r1, [r7, #0]
 8004d56:	80fb      	strh	r3, [r7, #6]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f9d1 	bl	800510c <wm8994_SetMute>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f9bc 	bl	800510c <wm8994_SetMute>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2201      	movs	r2, #1
 8004da2:	2102      	movs	r1, #2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fbf5 	bl	8005594 <CODEC_IO_Write>
 8004daa:	4603      	mov	r3, r0
 8004dac:	461a      	mov	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8004db4:	68fb      	ldr	r3, [r7, #12]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004dcc:	88fb      	ldrh	r3, [r7, #6]
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 f99b 	bl	800510c <wm8994_SetMute>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	6039      	str	r1, [r7, #0]
 8004df2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8004df8:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <wm8994_Stop+0xd8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d05a      	beq.n	8004eb6 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	2101      	movs	r1, #1
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 f981 	bl	800510c <wm8994_SetMute>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d04e      	beq.n	8004eb6 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e20:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fbb5 	bl	8005594 <CODEC_IO_Write>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e3c:	f240 4122 	movw	r1, #1058	; 0x422
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fba7 	bl	8005594 <CODEC_IO_Write>
 8004e46:	4603      	mov	r3, r0
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2200      	movs	r2, #0
 8004e56:	212d      	movs	r1, #45	; 0x2d
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fb9b 	bl	8005594 <CODEC_IO_Write>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	461a      	mov	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	212e      	movs	r1, #46	; 0x2e
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fb8f 	bl	8005594 <CODEC_IO_Write>
 8004e76:	4603      	mov	r3, r0
 8004e78:	461a      	mov	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2200      	movs	r2, #0
 8004e86:	2105      	movs	r1, #5
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fb83 	bl	8005594 <CODEC_IO_Write>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	461a      	mov	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fb77 	bl	8005594 <CODEC_IO_Write>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <wm8994_Stop+0xd8>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000db4 	.word	0x20000db4

08004ec4 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	460a      	mov	r2, r1
 8004ece:	80fb      	strh	r3, [r7, #6]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8004ed8:	797b      	ldrb	r3, [r7, #5]
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d80b      	bhi.n	8004ef6 <wm8994_SetVolume+0x32>
 8004ede:	797a      	ldrb	r2, [r7, #5]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	019b      	lsls	r3, r3, #6
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	4a86      	ldr	r2, [pc, #536]	; (8005100 <wm8994_SetVolume+0x23c>)
 8004ee8:	fb82 1203 	smull	r1, r2, r2, r3
 8004eec:	1152      	asrs	r2, r2, #5
 8004eee:	17db      	asrs	r3, r3, #31
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	e000      	b.n	8004ef8 <wm8994_SetVolume+0x34>
 8004ef6:	2364      	movs	r3, #100	; 0x64
 8004ef8:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8004efa:	4b82      	ldr	r3, [pc, #520]	; (8005104 <wm8994_SetVolume+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 809b 	beq.w	800503a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8004f04:	7afb      	ldrb	r3, [r7, #11]
 8004f06:	2b3e      	cmp	r3, #62	; 0x3e
 8004f08:	d93d      	bls.n	8004f86 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f8fc 	bl	800510c <wm8994_SetMute>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f240 127f 	movw	r2, #383	; 0x17f
 8004f24:	211c      	movs	r1, #28
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fb34 	bl	8005594 <CODEC_IO_Write>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	f240 127f 	movw	r2, #383	; 0x17f
 8004f3e:	211d      	movs	r1, #29
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fb27 	bl	8005594 <CODEC_IO_Write>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	f240 127f 	movw	r2, #383	; 0x17f
 8004f58:	2126      	movs	r1, #38	; 0x26
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fb1a 	bl	8005594 <CODEC_IO_Write>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461a      	mov	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f240 127f 	movw	r2, #383	; 0x17f
 8004f72:	2127      	movs	r1, #39	; 0x27
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fb0d 	bl	8005594 <CODEC_IO_Write>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4413      	add	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	e059      	b.n	800503a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8004f86:	797b      	ldrb	r3, [r7, #5]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8004f8c:	88fb      	ldrh	r3, [r7, #6]
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f8bb 	bl	800510c <wm8994_SetMute>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	e04c      	b.n	800503a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 f8b1 	bl	800510c <wm8994_SetMute>
 8004faa:	4602      	mov	r2, r0
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	b2d8      	uxtb	r0, r3
 8004fb6:	7afb      	ldrb	r3, [r7, #11]
 8004fb8:	b21b      	sxth	r3, r3
 8004fba:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004fbe:	b21b      	sxth	r3, r3
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	211c      	movs	r1, #28
 8004fc6:	f000 fae5 	bl	8005594 <CODEC_IO_Write>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	461a      	mov	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	b2d8      	uxtb	r0, r3
 8004fd8:	7afb      	ldrb	r3, [r7, #11]
 8004fda:	b21b      	sxth	r3, r3
 8004fdc:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8004fe0:	b21b      	sxth	r3, r3
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	211d      	movs	r1, #29
 8004fe8:	f000 fad4 	bl	8005594 <CODEC_IO_Write>
 8004fec:	4603      	mov	r3, r0
 8004fee:	461a      	mov	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8004ff6:	88fb      	ldrh	r3, [r7, #6]
 8004ff8:	b2d8      	uxtb	r0, r3
 8004ffa:	7afb      	ldrb	r3, [r7, #11]
 8004ffc:	b21b      	sxth	r3, r3
 8004ffe:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005002:	b21b      	sxth	r3, r3
 8005004:	b29b      	uxth	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	2126      	movs	r1, #38	; 0x26
 800500a:	f000 fac3 	bl	8005594 <CODEC_IO_Write>
 800500e:	4603      	mov	r3, r0
 8005010:	461a      	mov	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4413      	add	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	b2d8      	uxtb	r0, r3
 800501c:	7afb      	ldrb	r3, [r7, #11]
 800501e:	b21b      	sxth	r3, r3
 8005020:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005024:	b21b      	sxth	r3, r3
 8005026:	b29b      	uxth	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	2127      	movs	r1, #39	; 0x27
 800502c:	f000 fab2 	bl	8005594 <CODEC_IO_Write>
 8005030:	4603      	mov	r3, r0
 8005032:	461a      	mov	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800503a:	4b33      	ldr	r3, [pc, #204]	; (8005108 <wm8994_SetVolume+0x244>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d059      	beq.n	80050f6 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8005042:	797b      	ldrb	r3, [r7, #5]
 8005044:	2b63      	cmp	r3, #99	; 0x63
 8005046:	d80c      	bhi.n	8005062 <wm8994_SetVolume+0x19e>
 8005048:	797a      	ldrb	r2, [r7, #5]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	4a2b      	ldr	r2, [pc, #172]	; (8005100 <wm8994_SetVolume+0x23c>)
 8005054:	fb82 1203 	smull	r1, r2, r2, r3
 8005058:	1152      	asrs	r2, r2, #5
 800505a:	17db      	asrs	r3, r3, #31
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	b2db      	uxtb	r3, r3
 8005060:	e000      	b.n	8005064 <wm8994_SetVolume+0x1a0>
 8005062:	23ef      	movs	r3, #239	; 0xef
 8005064:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	b2d8      	uxtb	r0, r3
 800506a:	7afb      	ldrb	r3, [r7, #11]
 800506c:	b21b      	sxth	r3, r3
 800506e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005072:	b21b      	sxth	r3, r3
 8005074:	b29b      	uxth	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800507c:	f000 fa8a 	bl	8005594 <CODEC_IO_Write>
 8005080:	4603      	mov	r3, r0
 8005082:	461a      	mov	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	b2d8      	uxtb	r0, r3
 800508e:	7afb      	ldrb	r3, [r7, #11]
 8005090:	b21b      	sxth	r3, r3
 8005092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005096:	b21b      	sxth	r3, r3
 8005098:	b29b      	uxth	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	f240 4101 	movw	r1, #1025	; 0x401
 80050a0:	f000 fa78 	bl	8005594 <CODEC_IO_Write>
 80050a4:	4603      	mov	r3, r0
 80050a6:	461a      	mov	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	b2d8      	uxtb	r0, r3
 80050b2:	7afb      	ldrb	r3, [r7, #11]
 80050b4:	b21b      	sxth	r3, r3
 80050b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ba:	b21b      	sxth	r3, r3
 80050bc:	b29b      	uxth	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	f240 4104 	movw	r1, #1028	; 0x404
 80050c4:	f000 fa66 	bl	8005594 <CODEC_IO_Write>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	b2d8      	uxtb	r0, r3
 80050d6:	7afb      	ldrb	r3, [r7, #11]
 80050d8:	b21b      	sxth	r3, r3
 80050da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050de:	b21b      	sxth	r3, r3
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	f240 4105 	movw	r1, #1029	; 0x405
 80050e8:	f000 fa54 	bl	8005594 <CODEC_IO_Write>
 80050ec:	4603      	mov	r3, r0
 80050ee:	461a      	mov	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80050f6:	68fb      	ldr	r3, [r7, #12]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	51eb851f 	.word	0x51eb851f
 8005104:	20000db4 	.word	0x20000db4
 8005108:	20000db8 	.word	0x20000db8

0800510c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	6039      	str	r1, [r7, #0]
 8005116:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 800511c:	4b21      	ldr	r3, [pc, #132]	; (80051a4 <wm8994_SetMute+0x98>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d039      	beq.n	8005198 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d11c      	bne.n	8005164 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005132:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fa2c 	bl	8005594 <CODEC_IO_Write>
 800513c:	4603      	mov	r3, r0
 800513e:	461a      	mov	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514e:	f240 4122 	movw	r1, #1058	; 0x422
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fa1e 	bl	8005594 <CODEC_IO_Write>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e019      	b.n	8005198 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2210      	movs	r2, #16
 800516a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fa10 	bl	8005594 <CODEC_IO_Write>
 8005174:	4603      	mov	r3, r0
 8005176:	461a      	mov	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2210      	movs	r2, #16
 8005184:	f240 4122 	movw	r1, #1058	; 0x422
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fa03 	bl	8005594 <CODEC_IO_Write>
 800518e:	4603      	mov	r3, r0
 8005190:	461a      	mov	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005198:	68fb      	ldr	r3, [r7, #12]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000db4 	.word	0x20000db4

080051a8 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	460a      	mov	r2, r1
 80051b2:	80fb      	strh	r3, [r7, #6]
 80051b4:	4613      	mov	r3, r2
 80051b6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80051bc:	797b      	ldrb	r3, [r7, #5]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d047      	beq.n	8005252 <wm8994_SetOutputMode+0xaa>
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	f000 8087 	beq.w	80052d6 <wm8994_SetOutputMode+0x12e>
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	f040 80c6 	bne.w	800535a <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f640 420c 	movw	r2, #3084	; 0xc0c
 80051d6:	2105      	movs	r1, #5
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 f9db 	bl	8005594 <CODEC_IO_Write>
 80051de:	4603      	mov	r3, r0
 80051e0:	461a      	mov	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2200      	movs	r2, #0
 80051ee:	f240 6101 	movw	r1, #1537	; 0x601
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f9ce 	bl	8005594 <CODEC_IO_Write>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2200      	movs	r2, #0
 8005208:	f240 6102 	movw	r1, #1538	; 0x602
 800520c:	4618      	mov	r0, r3
 800520e:	f000 f9c1 	bl	8005594 <CODEC_IO_Write>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2202      	movs	r2, #2
 8005222:	f240 6104 	movw	r1, #1540	; 0x604
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f9b4 	bl	8005594 <CODEC_IO_Write>
 800522c:	4603      	mov	r3, r0
 800522e:	461a      	mov	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2202      	movs	r2, #2
 800523c:	f240 6105 	movw	r1, #1541	; 0x605
 8005240:	4618      	mov	r0, r3
 8005242:	f000 f9a7 	bl	8005594 <CODEC_IO_Write>
 8005246:	4603      	mov	r3, r0
 8005248:	461a      	mov	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
    break;
 8005250:	e0c5      	b.n	80053de <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f240 3203 	movw	r2, #771	; 0x303
 800525a:	2105      	movs	r1, #5
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f999 	bl	8005594 <CODEC_IO_Write>
 8005262:	4603      	mov	r3, r0
 8005264:	461a      	mov	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2201      	movs	r2, #1
 8005272:	f240 6101 	movw	r1, #1537	; 0x601
 8005276:	4618      	mov	r0, r3
 8005278:	f000 f98c 	bl	8005594 <CODEC_IO_Write>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2201      	movs	r2, #1
 800528c:	f240 6102 	movw	r1, #1538	; 0x602
 8005290:	4618      	mov	r0, r3
 8005292:	f000 f97f 	bl	8005594 <CODEC_IO_Write>
 8005296:	4603      	mov	r3, r0
 8005298:	461a      	mov	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2200      	movs	r2, #0
 80052a6:	f240 6104 	movw	r1, #1540	; 0x604
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f972 	bl	8005594 <CODEC_IO_Write>
 80052b0:	4603      	mov	r3, r0
 80052b2:	461a      	mov	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2200      	movs	r2, #0
 80052c0:	f240 6105 	movw	r1, #1541	; 0x605
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 f965 	bl	8005594 <CODEC_IO_Write>
 80052ca:	4603      	mov	r3, r0
 80052cc:	461a      	mov	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4413      	add	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
    break;
 80052d4:	e083      	b.n	80053de <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f640 720f 	movw	r2, #3855	; 0xf0f
 80052de:	2105      	movs	r1, #5
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f957 	bl	8005594 <CODEC_IO_Write>
 80052e6:	4603      	mov	r3, r0
 80052e8:	461a      	mov	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2201      	movs	r2, #1
 80052f6:	f240 6101 	movw	r1, #1537	; 0x601
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f94a 	bl	8005594 <CODEC_IO_Write>
 8005300:	4603      	mov	r3, r0
 8005302:	461a      	mov	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2201      	movs	r2, #1
 8005310:	f240 6102 	movw	r1, #1538	; 0x602
 8005314:	4618      	mov	r0, r3
 8005316:	f000 f93d 	bl	8005594 <CODEC_IO_Write>
 800531a:	4603      	mov	r3, r0
 800531c:	461a      	mov	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005324:	88fb      	ldrh	r3, [r7, #6]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2202      	movs	r2, #2
 800532a:	f240 6104 	movw	r1, #1540	; 0x604
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f930 	bl	8005594 <CODEC_IO_Write>
 8005334:	4603      	mov	r3, r0
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2202      	movs	r2, #2
 8005344:	f240 6105 	movw	r1, #1541	; 0x605
 8005348:	4618      	mov	r0, r3
 800534a:	f000 f923 	bl	8005594 <CODEC_IO_Write>
 800534e:	4603      	mov	r3, r0
 8005350:	461a      	mov	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
    break;
 8005358:	e041      	b.n	80053de <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800535a:	88fb      	ldrh	r3, [r7, #6]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f240 3203 	movw	r2, #771	; 0x303
 8005362:	2105      	movs	r1, #5
 8005364:	4618      	mov	r0, r3
 8005366:	f000 f915 	bl	8005594 <CODEC_IO_Write>
 800536a:	4603      	mov	r3, r0
 800536c:	461a      	mov	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2201      	movs	r2, #1
 800537a:	f240 6101 	movw	r1, #1537	; 0x601
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f908 	bl	8005594 <CODEC_IO_Write>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2201      	movs	r2, #1
 8005394:	f240 6102 	movw	r1, #1538	; 0x602
 8005398:	4618      	mov	r0, r3
 800539a:	f000 f8fb 	bl	8005594 <CODEC_IO_Write>
 800539e:	4603      	mov	r3, r0
 80053a0:	461a      	mov	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80053a8:	88fb      	ldrh	r3, [r7, #6]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2200      	movs	r2, #0
 80053ae:	f240 6104 	movw	r1, #1540	; 0x604
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f8ee 	bl	8005594 <CODEC_IO_Write>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2200      	movs	r2, #0
 80053c8:	f240 6105 	movw	r1, #1541	; 0x605
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 f8e1 	bl	8005594 <CODEC_IO_Write>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
    break;    
 80053dc:	bf00      	nop
  }  
  return counter;
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	6039      	str	r1, [r7, #0]
 80053f2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	f245 6222 	movw	r2, #22050	; 0x5622
 80053fe:	4293      	cmp	r3, r2
 8005400:	d076      	beq.n	80054f0 <wm8994_SetFrequency+0x108>
 8005402:	f245 6222 	movw	r2, #22050	; 0x5622
 8005406:	4293      	cmp	r3, r2
 8005408:	d80a      	bhi.n	8005420 <wm8994_SetFrequency+0x38>
 800540a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800540e:	4293      	cmp	r3, r2
 8005410:	d060      	beq.n	80054d4 <wm8994_SetFrequency+0xec>
 8005412:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005416:	d025      	beq.n	8005464 <wm8994_SetFrequency+0x7c>
 8005418:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800541c:	d014      	beq.n	8005448 <wm8994_SetFrequency+0x60>
 800541e:	e083      	b.n	8005528 <wm8994_SetFrequency+0x140>
 8005420:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005424:	4293      	cmp	r3, r2
 8005426:	d071      	beq.n	800550c <wm8994_SetFrequency+0x124>
 8005428:	f64a 4244 	movw	r2, #44100	; 0xac44
 800542c:	4293      	cmp	r3, r2
 800542e:	d803      	bhi.n	8005438 <wm8994_SetFrequency+0x50>
 8005430:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005434:	d024      	beq.n	8005480 <wm8994_SetFrequency+0x98>
 8005436:	e077      	b.n	8005528 <wm8994_SetFrequency+0x140>
 8005438:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800543c:	4293      	cmp	r3, r2
 800543e:	d02d      	beq.n	800549c <wm8994_SetFrequency+0xb4>
 8005440:	4a43      	ldr	r2, [pc, #268]	; (8005550 <wm8994_SetFrequency+0x168>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d038      	beq.n	80054b8 <wm8994_SetFrequency+0xd0>
 8005446:	e06f      	b.n	8005528 <wm8994_SetFrequency+0x140>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2203      	movs	r2, #3
 800544e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005452:	4618      	mov	r0, r3
 8005454:	f000 f89e 	bl	8005594 <CODEC_IO_Write>
 8005458:	4603      	mov	r3, r0
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
    break;
 8005462:	e06f      	b.n	8005544 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2233      	movs	r2, #51	; 0x33
 800546a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800546e:	4618      	mov	r0, r3
 8005470:	f000 f890 	bl	8005594 <CODEC_IO_Write>
 8005474:	4603      	mov	r3, r0
 8005476:	461a      	mov	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
    break;
 800547e:	e061      	b.n	8005544 <wm8994_SetFrequency+0x15c>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2263      	movs	r2, #99	; 0x63
 8005486:	f44f 7104 	mov.w	r1, #528	; 0x210
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f882 	bl	8005594 <CODEC_IO_Write>
 8005490:	4603      	mov	r3, r0
 8005492:	461a      	mov	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
    break;
 800549a:	e053      	b.n	8005544 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2283      	movs	r2, #131	; 0x83
 80054a2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f874 	bl	8005594 <CODEC_IO_Write>
 80054ac:	4603      	mov	r3, r0
 80054ae:	461a      	mov	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
    break;
 80054b6:	e045      	b.n	8005544 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	22a3      	movs	r2, #163	; 0xa3
 80054be:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 f866 	bl	8005594 <CODEC_IO_Write>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461a      	mov	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
    break;
 80054d2:	e037      	b.n	8005544 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2213      	movs	r2, #19
 80054da:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f858 	bl	8005594 <CODEC_IO_Write>
 80054e4:	4603      	mov	r3, r0
 80054e6:	461a      	mov	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
    break;
 80054ee:	e029      	b.n	8005544 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2243      	movs	r2, #67	; 0x43
 80054f6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f84a 	bl	8005594 <CODEC_IO_Write>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
    break;
 800550a:	e01b      	b.n	8005544 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2273      	movs	r2, #115	; 0x73
 8005512:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f83c 	bl	8005594 <CODEC_IO_Write>
 800551c:	4603      	mov	r3, r0
 800551e:	461a      	mov	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
    break; 
 8005526:	e00d      	b.n	8005544 <wm8994_SetFrequency+0x15c>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2283      	movs	r2, #131	; 0x83
 800552e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f82e 	bl	8005594 <CODEC_IO_Write>
 8005538:	4603      	mov	r3, r0
 800553a:	461a      	mov	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
    break; 
 8005542:	bf00      	nop
  }
  return counter;
 8005544:	68fb      	ldr	r3, [r7, #12]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	00017700 	.word	0x00017700

08005554 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2200      	movs	r2, #0
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f812 	bl	8005594 <CODEC_IO_Write>
 8005570:	4603      	mov	r3, r0
 8005572:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <wm8994_Reset+0x38>)
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800557a:	4b05      	ldr	r3, [pc, #20]	; (8005590 <wm8994_Reset+0x3c>)
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]

  return counter;
 8005580:	68fb      	ldr	r3, [r7, #12]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000db4 	.word	0x20000db4
 8005590:	20000db8 	.word	0x20000db8

08005594 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
 800559e:	460b      	mov	r3, r1
 80055a0:	80bb      	strh	r3, [r7, #4]
 80055a2:	4613      	mov	r3, r2
 80055a4:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80055aa:	887a      	ldrh	r2, [r7, #2]
 80055ac:	88b9      	ldrh	r1, [r7, #4]
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 f96f 	bl	8005894 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	b2db      	uxtb	r3, r3
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08c      	sub	sp, #48	; 0x30
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a51      	ldr	r2, [pc, #324]	; (8005714 <I2Cx_MspInit+0x150>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d14d      	bne.n	8005670 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80055d4:	4b50      	ldr	r3, [pc, #320]	; (8005718 <I2Cx_MspInit+0x154>)
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	4a4f      	ldr	r2, [pc, #316]	; (8005718 <I2Cx_MspInit+0x154>)
 80055da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055de:	6313      	str	r3, [r2, #48]	; 0x30
 80055e0:	4b4d      	ldr	r3, [pc, #308]	; (8005718 <I2Cx_MspInit+0x154>)
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80055f0:	2312      	movs	r3, #18
 80055f2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80055f8:	2302      	movs	r3, #2
 80055fa:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80055fc:	2304      	movs	r3, #4
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005600:	f107 031c 	add.w	r3, r7, #28
 8005604:	4619      	mov	r1, r3
 8005606:	4845      	ldr	r0, [pc, #276]	; (800571c <I2Cx_MspInit+0x158>)
 8005608:	f003 fd0e 	bl	8009028 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800560c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005612:	f107 031c 	add.w	r3, r7, #28
 8005616:	4619      	mov	r1, r3
 8005618:	4840      	ldr	r0, [pc, #256]	; (800571c <I2Cx_MspInit+0x158>)
 800561a:	f003 fd05 	bl	8009028 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800561e:	4b3e      	ldr	r3, [pc, #248]	; (8005718 <I2Cx_MspInit+0x154>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	4a3d      	ldr	r2, [pc, #244]	; (8005718 <I2Cx_MspInit+0x154>)
 8005624:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005628:	6413      	str	r3, [r2, #64]	; 0x40
 800562a:	4b3b      	ldr	r3, [pc, #236]	; (8005718 <I2Cx_MspInit+0x154>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8005636:	4b38      	ldr	r3, [pc, #224]	; (8005718 <I2Cx_MspInit+0x154>)
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	4a37      	ldr	r2, [pc, #220]	; (8005718 <I2Cx_MspInit+0x154>)
 800563c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005640:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8005642:	4b35      	ldr	r3, [pc, #212]	; (8005718 <I2Cx_MspInit+0x154>)
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	4a34      	ldr	r2, [pc, #208]	; (8005718 <I2Cx_MspInit+0x154>)
 8005648:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800564c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800564e:	2200      	movs	r2, #0
 8005650:	210f      	movs	r1, #15
 8005652:	2048      	movs	r0, #72	; 0x48
 8005654:	f002 fbea 	bl	8007e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8005658:	2048      	movs	r0, #72	; 0x48
 800565a:	f002 fc03 	bl	8007e64 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800565e:	2200      	movs	r2, #0
 8005660:	210f      	movs	r1, #15
 8005662:	2049      	movs	r0, #73	; 0x49
 8005664:	f002 fbe2 	bl	8007e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8005668:	2049      	movs	r0, #73	; 0x49
 800566a:	f002 fbfb 	bl	8007e64 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800566e:	e04d      	b.n	800570c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005670:	4b29      	ldr	r3, [pc, #164]	; (8005718 <I2Cx_MspInit+0x154>)
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	4a28      	ldr	r2, [pc, #160]	; (8005718 <I2Cx_MspInit+0x154>)
 8005676:	f043 0302 	orr.w	r3, r3, #2
 800567a:	6313      	str	r3, [r2, #48]	; 0x30
 800567c:	4b26      	ldr	r3, [pc, #152]	; (8005718 <I2Cx_MspInit+0x154>)
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8005688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800568c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800568e:	2312      	movs	r3, #18
 8005690:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005692:	2300      	movs	r3, #0
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005696:	2302      	movs	r3, #2
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800569a:	2304      	movs	r3, #4
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800569e:	f107 031c 	add.w	r3, r7, #28
 80056a2:	4619      	mov	r1, r3
 80056a4:	481e      	ldr	r0, [pc, #120]	; (8005720 <I2Cx_MspInit+0x15c>)
 80056a6:	f003 fcbf 	bl	8009028 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80056aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80056b0:	f107 031c 	add.w	r3, r7, #28
 80056b4:	4619      	mov	r1, r3
 80056b6:	481a      	ldr	r0, [pc, #104]	; (8005720 <I2Cx_MspInit+0x15c>)
 80056b8:	f003 fcb6 	bl	8009028 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80056bc:	4b16      	ldr	r3, [pc, #88]	; (8005718 <I2Cx_MspInit+0x154>)
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	4a15      	ldr	r2, [pc, #84]	; (8005718 <I2Cx_MspInit+0x154>)
 80056c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056c6:	6413      	str	r3, [r2, #64]	; 0x40
 80056c8:	4b13      	ldr	r3, [pc, #76]	; (8005718 <I2Cx_MspInit+0x154>)
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80056d4:	4b10      	ldr	r3, [pc, #64]	; (8005718 <I2Cx_MspInit+0x154>)
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	4a0f      	ldr	r2, [pc, #60]	; (8005718 <I2Cx_MspInit+0x154>)
 80056da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056de:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80056e0:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <I2Cx_MspInit+0x154>)
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	4a0c      	ldr	r2, [pc, #48]	; (8005718 <I2Cx_MspInit+0x154>)
 80056e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056ea:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80056ec:	2200      	movs	r2, #0
 80056ee:	210f      	movs	r1, #15
 80056f0:	201f      	movs	r0, #31
 80056f2:	f002 fb9b 	bl	8007e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80056f6:	201f      	movs	r0, #31
 80056f8:	f002 fbb4 	bl	8007e64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80056fc:	2200      	movs	r2, #0
 80056fe:	210f      	movs	r1, #15
 8005700:	2020      	movs	r0, #32
 8005702:	f002 fb93 	bl	8007e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8005706:	2020      	movs	r0, #32
 8005708:	f002 fbac 	bl	8007e64 <HAL_NVIC_EnableIRQ>
}
 800570c:	bf00      	nop
 800570e:	3730      	adds	r7, #48	; 0x30
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000dbc 	.word	0x20000dbc
 8005718:	40023800 	.word	0x40023800
 800571c:	40021c00 	.word	0x40021c00
 8005720:	40020400 	.word	0x40020400

08005724 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f005 ff41 	bl	800b5b4 <HAL_I2C_GetState>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d125      	bne.n	8005784 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a14      	ldr	r2, [pc, #80]	; (800578c <I2Cx_Init+0x68>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d103      	bne.n	8005748 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a13      	ldr	r2, [pc, #76]	; (8005790 <I2Cx_Init+0x6c>)
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	e002      	b.n	800574e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a12      	ldr	r2, [pc, #72]	; (8005794 <I2Cx_Init+0x70>)
 800574c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a11      	ldr	r2, [pc, #68]	; (8005798 <I2Cx_Init+0x74>)
 8005752:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff ff23 	bl	80055c4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f005 fc2a 	bl	800afd8 <HAL_I2C_Init>
  }
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000dbc 	.word	0x20000dbc
 8005790:	40005c00 	.word	0x40005c00
 8005794:	40005400 	.word	0x40005400
 8005798:	40912732 	.word	0x40912732

0800579c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af04      	add	r7, sp, #16
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	4608      	mov	r0, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	72fb      	strb	r3, [r7, #11]
 80057ae:	460b      	mov	r3, r1
 80057b0:	813b      	strh	r3, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80057ba:	7afb      	ldrb	r3, [r7, #11]
 80057bc:	b299      	uxth	r1, r3
 80057be:	88f8      	ldrh	r0, [r7, #6]
 80057c0:	893a      	ldrh	r2, [r7, #8]
 80057c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057c6:	9302      	str	r3, [sp, #8]
 80057c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4603      	mov	r3, r0
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f005 fdd4 	bl	800b380 <HAL_I2C_Mem_Read>
 80057d8:	4603      	mov	r3, r0
 80057da:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80057e2:	7afb      	ldrb	r3, [r7, #11]
 80057e4:	4619      	mov	r1, r3
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f832 	bl	8005850 <I2Cx_Error>
  }
  return status;    
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b08a      	sub	sp, #40	; 0x28
 80057fa:	af04      	add	r7, sp, #16
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	4608      	mov	r0, r1
 8005800:	4611      	mov	r1, r2
 8005802:	461a      	mov	r2, r3
 8005804:	4603      	mov	r3, r0
 8005806:	72fb      	strb	r3, [r7, #11]
 8005808:	460b      	mov	r3, r1
 800580a:	813b      	strh	r3, [r7, #8]
 800580c:	4613      	mov	r3, r2
 800580e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005814:	7afb      	ldrb	r3, [r7, #11]
 8005816:	b299      	uxth	r1, r3
 8005818:	88f8      	ldrh	r0, [r7, #6]
 800581a:	893a      	ldrh	r2, [r7, #8]
 800581c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005820:	9302      	str	r3, [sp, #8]
 8005822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	4603      	mov	r3, r0
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f005 fc93 	bl	800b158 <HAL_I2C_Mem_Write>
 8005832:	4603      	mov	r3, r0
 8005834:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005836:	7dfb      	ldrb	r3, [r7, #23]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d004      	beq.n	8005846 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800583c:	7afb      	ldrb	r3, [r7, #11]
 800583e:	4619      	mov	r1, r3
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f805 	bl	8005850 <I2Cx_Error>
  }
  return status;
 8005846:	7dfb      	ldrb	r3, [r7, #23]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f005 fc4b 	bl	800b0f8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff ff5e 	bl	8005724 <I2Cx_Init>
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8005874:	4802      	ldr	r0, [pc, #8]	; (8005880 <AUDIO_IO_Init+0x10>)
 8005876:	f7ff ff55 	bl	8005724 <I2Cx_Init>
}
 800587a:	bf00      	nop
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000dbc 	.word	0x20000dbc

08005884 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af02      	add	r7, sp, #8
 800589a:	4603      	mov	r3, r0
 800589c:	71fb      	strb	r3, [r7, #7]
 800589e:	460b      	mov	r3, r1
 80058a0:	80bb      	strh	r3, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80058a6:	887b      	ldrh	r3, [r7, #2]
 80058a8:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80058aa:	89fb      	ldrh	r3, [r7, #14]
 80058ac:	0a1b      	lsrs	r3, r3, #8
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80058b2:	89fb      	ldrh	r3, [r7, #14]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	b21a      	sxth	r2, r3
 80058ba:	887b      	ldrh	r3, [r7, #2]
 80058bc:	b21b      	sxth	r3, r3
 80058be:	4313      	orrs	r3, r2
 80058c0:	b21b      	sxth	r3, r3
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80058c6:	88ba      	ldrh	r2, [r7, #4]
 80058c8:	79f9      	ldrb	r1, [r7, #7]
 80058ca:	2302      	movs	r3, #2
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	1cbb      	adds	r3, r7, #2
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	2302      	movs	r3, #2
 80058d4:	4803      	ldr	r0, [pc, #12]	; (80058e4 <AUDIO_IO_Write+0x50>)
 80058d6:	f7ff ff8e 	bl	80057f6 <I2Cx_WriteMultiple>
}
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000dbc 	.word	0x20000dbc

080058e8 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	4603      	mov	r3, r0
 80058f0:	460a      	mov	r2, r1
 80058f2:	71fb      	strb	r3, [r7, #7]
 80058f4:	4613      	mov	r3, r2
 80058f6:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	81bb      	strh	r3, [r7, #12]
 80058fc:	2300      	movs	r3, #0
 80058fe:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8005900:	88ba      	ldrh	r2, [r7, #4]
 8005902:	79f9      	ldrb	r1, [r7, #7]
 8005904:	2302      	movs	r3, #2
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	f107 030c 	add.w	r3, r7, #12
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	2302      	movs	r3, #2
 8005910:	480a      	ldr	r0, [pc, #40]	; (800593c <AUDIO_IO_Read+0x54>)
 8005912:	f7ff ff43 	bl	800579c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8005916:	89bb      	ldrh	r3, [r7, #12]
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800591c:	89bb      	ldrh	r3, [r7, #12]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	b29b      	uxth	r3, r3
 8005922:	b21a      	sxth	r2, r3
 8005924:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005928:	4313      	orrs	r3, r2
 800592a:	b21b      	sxth	r3, r3
 800592c:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800592e:	89fb      	ldrh	r3, [r7, #14]
 8005930:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8005932:	89bb      	ldrh	r3, [r7, #12]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000dbc 	.word	0x20000dbc

08005940 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f001 ff0d 	bl	8007768 <HAL_Delay>
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800595c:	4802      	ldr	r0, [pc, #8]	; (8005968 <TS_IO_Init+0x10>)
 800595e:	f7ff fee1 	bl	8005724 <I2Cx_Init>
}
 8005962:	bf00      	nop
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20000dbc 	.word	0x20000dbc

0800596c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af02      	add	r7, sp, #8
 8005972:	4603      	mov	r3, r0
 8005974:	71fb      	strb	r3, [r7, #7]
 8005976:	460b      	mov	r3, r1
 8005978:	71bb      	strb	r3, [r7, #6]
 800597a:	4613      	mov	r3, r2
 800597c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800597e:	79bb      	ldrb	r3, [r7, #6]
 8005980:	b29a      	uxth	r2, r3
 8005982:	79f9      	ldrb	r1, [r7, #7]
 8005984:	2301      	movs	r3, #1
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	1d7b      	adds	r3, r7, #5
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	2301      	movs	r3, #1
 800598e:	4803      	ldr	r0, [pc, #12]	; (800599c <TS_IO_Write+0x30>)
 8005990:	f7ff ff31 	bl	80057f6 <I2Cx_WriteMultiple>
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20000dbc 	.word	0x20000dbc

080059a0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	4603      	mov	r3, r0
 80059a8:	460a      	mov	r2, r1
 80059aa:	71fb      	strb	r3, [r7, #7]
 80059ac:	4613      	mov	r3, r2
 80059ae:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80059b4:	79bb      	ldrb	r3, [r7, #6]
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	79f9      	ldrb	r1, [r7, #7]
 80059ba:	2301      	movs	r3, #1
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	f107 030f 	add.w	r3, r7, #15
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	2301      	movs	r3, #1
 80059c6:	4804      	ldr	r0, [pc, #16]	; (80059d8 <TS_IO_Read+0x38>)
 80059c8:	f7ff fee8 	bl	800579c <I2Cx_ReadMultiple>

  return read_value;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000dbc 	.word	0x20000dbc

080059dc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 febf 	bl	8007768 <HAL_Delay>
}
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80059fc:	480e      	ldr	r0, [pc, #56]	; (8005a38 <HAL_SAI_ErrorCallback+0x44>)
 80059fe:	f008 fe59 	bl	800e6b4 <HAL_SAI_GetState>
 8005a02:	4603      	mov	r3, r0
 8005a04:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8005a06:	480d      	ldr	r0, [pc, #52]	; (8005a3c <HAL_SAI_ErrorCallback+0x48>)
 8005a08:	f008 fe54 	bl	800e6b4 <HAL_SAI_GetState>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d002      	beq.n	8005a1c <HAL_SAI_ErrorCallback+0x28>
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	2b12      	cmp	r3, #18
 8005a1a:	d101      	bne.n	8005a20 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8005a1c:	f000 f810 	bl	8005a40 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d002      	beq.n	8005a2c <HAL_SAI_ErrorCallback+0x38>
 8005a26:	7bbb      	ldrb	r3, [r7, #14]
 8005a28:	2b22      	cmp	r3, #34	; 0x22
 8005a2a:	d101      	bne.n	8005a30 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8005a2c:	f7fb fb52 	bl	80010d4 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8005a30:	bf00      	nop
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20000e08 	.word	0x20000e08
 8005a3c:	20000e8c 	.word	0x20000e8c

08005a40 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08c      	sub	sp, #48	; 0x30
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8005a5a:	4b63      	ldr	r3, [pc, #396]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	4a62      	ldr	r2, [pc, #392]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a64:	6453      	str	r3, [r2, #68]	; 0x44
 8005a66:	4b60      	ldr	r3, [pc, #384]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8005a72:	4b5d      	ldr	r3, [pc, #372]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	4a5c      	ldr	r2, [pc, #368]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a7e:	4b5a      	ldr	r3, [pc, #360]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8005a8a:	4b57      	ldr	r3, [pc, #348]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	4a56      	ldr	r2, [pc, #344]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a94:	6313      	str	r3, [r2, #48]	; 0x30
 8005a96:	4b54      	ldr	r3, [pc, #336]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8005aa2:	4b51      	ldr	r3, [pc, #324]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	4a50      	ldr	r2, [pc, #320]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aac:	6313      	str	r3, [r2, #48]	; 0x30
 8005aae:	4b4e      	ldr	r3, [pc, #312]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8005aba:	2380      	movs	r3, #128	; 0x80
 8005abc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005aca:	230a      	movs	r3, #10
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8005ace:	f107 031c 	add.w	r3, r7, #28
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	4845      	ldr	r0, [pc, #276]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005ad6:	f003 faa7 	bl	8009028 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8005ada:	2320      	movs	r3, #32
 8005adc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8005aea:	230a      	movs	r3, #10
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8005aee:	f107 031c 	add.w	r3, r7, #28
 8005af2:	4619      	mov	r1, r3
 8005af4:	483d      	ldr	r0, [pc, #244]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005af6:	f003 fa97 	bl	8009028 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8005afa:	2340      	movs	r3, #64	; 0x40
 8005afc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005afe:	2302      	movs	r3, #2
 8005b00:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005b06:	2303      	movs	r3, #3
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005b0a:	230a      	movs	r3, #10
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8005b0e:	f107 031c 	add.w	r3, r7, #28
 8005b12:	4619      	mov	r1, r3
 8005b14:	4835      	ldr	r0, [pc, #212]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005b16:	f003 fa87 	bl	8009028 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8005b1a:	2310      	movs	r3, #16
 8005b1c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005b26:	2303      	movs	r3, #3
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8005b2a:	230a      	movs	r3, #10
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8005b2e:	f107 031c 	add.w	r3, r7, #28
 8005b32:	4619      	mov	r1, r3
 8005b34:	482d      	ldr	r0, [pc, #180]	; (8005bec <BSP_AUDIO_OUT_MspInit+0x19c>)
 8005b36:	f003 fa77 	bl	8009028 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8005b3a:	4b2b      	ldr	r3, [pc, #172]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	4a2a      	ldr	r2, [pc, #168]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005b40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b44:	6313      	str	r3, [r2, #48]	; 0x30
 8005b46:	4b28      	ldr	r3, [pc, #160]	; (8005be8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4e:	60bb      	str	r3, [r7, #8]
 8005b50:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a26      	ldr	r2, [pc, #152]	; (8005bf0 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d138      	bne.n	8005bce <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8005b5c:	4b25      	ldr	r3, [pc, #148]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b5e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005b62:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005b64:	4b23      	ldr	r3, [pc, #140]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b66:	2240      	movs	r2, #64	; 0x40
 8005b68:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005b6a:	4b22      	ldr	r3, [pc, #136]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8005b70:	4b20      	ldr	r3, [pc, #128]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b76:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005b78:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b7e:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8005b80:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b86:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8005b88:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b8e:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005b90:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b96:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8005b98:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005b9e:	4b15      	ldr	r3, [pc, #84]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005ba4:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005baa:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8005bb0:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bb2:	4a11      	ldr	r2, [pc, #68]	; (8005bf8 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8005bb4:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a0e      	ldr	r2, [pc, #56]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bba:	66da      	str	r2, [r3, #108]	; 0x6c
 8005bbc:	4a0d      	ldr	r2, [pc, #52]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8005bc2:	480c      	ldr	r0, [pc, #48]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bc4:	f002 fb6e 	bl	80082a4 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8005bc8:	480a      	ldr	r0, [pc, #40]	; (8005bf4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8005bca:	f002 fabd 	bl	8008148 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8005bce:	2200      	movs	r2, #0
 8005bd0:	210e      	movs	r1, #14
 8005bd2:	203c      	movs	r0, #60	; 0x3c
 8005bd4:	f002 f92a 	bl	8007e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8005bd8:	203c      	movs	r0, #60	; 0x3c
 8005bda:	f002 f943 	bl	8007e64 <HAL_NVIC_EnableIRQ>
}
 8005bde:	bf00      	nop
 8005be0:	3730      	adds	r7, #48	; 0x30
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40023800 	.word	0x40023800
 8005bec:	40022000 	.word	0x40022000
 8005bf0:	40015c04 	.word	0x40015c04
 8005bf4:	20000f10 	.word	0x20000f10
 8005bf8:	40026470 	.word	0x40026470

08005bfc <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b0a6      	sub	sp, #152	; 0x98
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005c08:	f107 0314 	add.w	r3, r7, #20
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f007 fd19 	bl	800d644 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d009      	beq.n	8005c30 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f245 6222 	movw	r2, #22050	; 0x5622
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d112      	bne.n	8005c56 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8005c30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c34:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8005c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c3a:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8005c3c:	f240 13ad 	movw	r3, #429	; 0x1ad
 8005c40:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8005c42:	2302      	movs	r3, #2
 8005c44:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8005c46:	2313      	movs	r3, #19
 8005c48:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005c4a:	f107 0314 	add.w	r3, r7, #20
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f007 f90a 	bl	800ce68 <HAL_RCCEx_PeriphCLKConfig>
 8005c54:	e011      	b.n	8005c7a <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8005c56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c5a:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8005c5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c60:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8005c62:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8005c66:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8005c68:	2307      	movs	r3, #7
 8005c6a:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005c70:	f107 0314 	add.w	r3, r7, #20
 8005c74:	4618      	mov	r0, r3
 8005c76:	f007 f8f7 	bl	800ce68 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8005c7a:	bf00      	nop
 8005c7c:	3798      	adds	r7, #152	; 0x98
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005c98:	f000 f806 	bl	8005ca8 <BSP_AUDIO_IN_InitEx>
 8005c9c:	4603      	mov	r3, r0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b089      	sub	sp, #36	; 0x24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8005cc0:	89fb      	ldrh	r3, [r7, #14]
 8005cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc6:	d006      	beq.n	8005cd6 <BSP_AUDIO_IN_InitEx+0x2e>
 8005cc8:	89fb      	ldrh	r3, [r7, #14]
 8005cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cce:	d002      	beq.n	8005cd6 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	77fb      	strb	r3, [r7, #31]
 8005cd4:	e046      	b.n	8005d64 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8005cd6:	f000 f9e7 	bl	80060a8 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8005cda:	2200      	movs	r2, #0
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	4824      	ldr	r0, [pc, #144]	; (8005d70 <BSP_AUDIO_IN_InitEx+0xc8>)
 8005ce0:	f7ff ff8c 	bl	8005bfc <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005ce4:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <BSP_AUDIO_IN_InitEx+0xc8>)
 8005ce6:	4a23      	ldr	r2, [pc, #140]	; (8005d74 <BSP_AUDIO_IN_InitEx+0xcc>)
 8005ce8:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8005cea:	4821      	ldr	r0, [pc, #132]	; (8005d70 <BSP_AUDIO_IN_InitEx+0xc8>)
 8005cec:	f008 fce2 	bl	800e6b4 <HAL_SAI_GetState>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d107      	bne.n	8005d06 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	481d      	ldr	r0, [pc, #116]	; (8005d70 <BSP_AUDIO_IN_InitEx+0xc8>)
 8005cfa:	f7ff fea9 	bl	8005a50 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8005cfe:	2100      	movs	r1, #0
 8005d00:	481b      	ldr	r0, [pc, #108]	; (8005d70 <BSP_AUDIO_IN_InitEx+0xc8>)
 8005d02:	f000 f869 	bl	8005dd8 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8005d06:	89fb      	ldrh	r3, [r7, #14]
 8005d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d0c:	d102      	bne.n	8005d14 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8005d0e:	230a      	movs	r3, #10
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	e001      	b.n	8005d18 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8005d14:	2305      	movs	r3, #5
 8005d16:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	69b9      	ldr	r1, [r7, #24]
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	f000 f90d 	bl	8005f3c <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2034      	movs	r0, #52	; 0x34
 8005d28:	4798      	blx	r3
 8005d2a:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f648 1294 	movw	r2, #35220	; 0x8994
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d109      	bne.n	8005d4a <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8005d36:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	2034      	movs	r0, #52	; 0x34
 8005d3c:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8005d3e:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <BSP_AUDIO_IN_InitEx+0xd4>)
 8005d40:	4a0d      	ldr	r2, [pc, #52]	; (8005d78 <BSP_AUDIO_IN_InitEx+0xd0>)
 8005d42:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	e001      	b.n	8005d4e <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8005d4e:	7ffb      	ldrb	r3, [r7, #31]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d107      	bne.n	8005d64 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <BSP_AUDIO_IN_InitEx+0xd4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681c      	ldr	r4, [r3, #0]
 8005d5a:	89f9      	ldrh	r1, [r7, #14]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2264      	movs	r2, #100	; 0x64
 8005d60:	2034      	movs	r0, #52	; 0x34
 8005d62:	47a0      	blx	r4
    }
  }
  return ret;
 8005d64:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3724      	adds	r7, #36	; 0x24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd90      	pop	{r4, r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000e8c 	.word	0x20000e8c
 8005d74:	40015c24 	.word	0x40015c24
 8005d78:	2000002c 	.word	0x2000002c
 8005d7c:	2001b93c 	.word	0x2001b93c

08005d80 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	4805      	ldr	r0, [pc, #20]	; (8005dac <BSP_AUDIO_IN_Record+0x2c>)
 8005d98:	f008 fbfe 	bl	800e598 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	b2db      	uxtb	r3, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20000e8c 	.word	0x20000e8c

08005db0 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8005db8:	f7fb f970 	bl	800109c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8005dbc:	bf00      	nop
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8005dcc:	f7fb f94a 	bl	8001064 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8005dd0:	bf00      	nop
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08c      	sub	sp, #48	; 0x30
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8005de2:	4b50      	ldr	r3, [pc, #320]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de6:	4a4f      	ldr	r2, [pc, #316]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005de8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005dec:	6453      	str	r3, [r2, #68]	; 0x44
 8005dee:	4b4d      	ldr	r3, [pc, #308]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8005dfa:	4b4a      	ldr	r3, [pc, #296]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	4a49      	ldr	r2, [pc, #292]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e04:	6313      	str	r3, [r2, #48]	; 0x30
 8005e06:	4b47      	ldr	r3, [pc, #284]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8005e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e16:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005e20:	2302      	movs	r3, #2
 8005e22:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8005e24:	230a      	movs	r3, #10
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8005e28:	f107 031c 	add.w	r3, r7, #28
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	483e      	ldr	r0, [pc, #248]	; (8005f28 <BSP_AUDIO_IN_MspInit+0x150>)
 8005e30:	f003 f8fa 	bl	8009028 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8005e34:	4b3b      	ldr	r3, [pc, #236]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	4a3a      	ldr	r2, [pc, #232]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e40:	4b38      	ldr	r3, [pc, #224]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8005e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e50:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8005e52:	2300      	movs	r3, #0
 8005e54:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8005e5e:	f107 031c 	add.w	r3, r7, #28
 8005e62:	4619      	mov	r1, r3
 8005e64:	4831      	ldr	r0, [pc, #196]	; (8005f2c <BSP_AUDIO_IN_MspInit+0x154>)
 8005e66:	f003 f8df 	bl	8009028 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8005e6a:	4b2e      	ldr	r3, [pc, #184]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	4a2d      	ldr	r2, [pc, #180]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e74:	6313      	str	r3, [r2, #48]	; 0x30
 8005e76:	4b2b      	ldr	r3, [pc, #172]	; (8005f24 <BSP_AUDIO_IN_MspInit+0x14c>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2a      	ldr	r2, [pc, #168]	; (8005f30 <BSP_AUDIO_IN_MspInit+0x158>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d137      	bne.n	8005efc <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8005e8c:	4b29      	ldr	r3, [pc, #164]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8005e92:	4b28      	ldr	r3, [pc, #160]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005e98:	4b26      	ldr	r3, [pc, #152]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8005e9e:	4b25      	ldr	r3, [pc, #148]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ea4:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005ea6:	4b23      	ldr	r3, [pc, #140]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eac:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8005eae:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005eb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005eb4:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8005eb6:	4b1f      	ldr	r3, [pc, #124]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ebc:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005ebe:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ec0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ec4:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8005ec6:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ece:	2203      	movs	r2, #3
 8005ed0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005ed2:	4b18      	ldr	r3, [pc, #96]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8005ed8:	4b16      	ldr	r3, [pc, #88]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8005ede:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ee0:	4a15      	ldr	r2, [pc, #84]	; (8005f38 <BSP_AUDIO_IN_MspInit+0x160>)
 8005ee2:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ee8:	671a      	str	r2, [r3, #112]	; 0x70
 8005eea:	4a12      	ldr	r2, [pc, #72]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8005ef0:	4810      	ldr	r0, [pc, #64]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ef2:	f002 f9d7 	bl	80082a4 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8005ef6:	480f      	ldr	r0, [pc, #60]	; (8005f34 <BSP_AUDIO_IN_MspInit+0x15c>)
 8005ef8:	f002 f926 	bl	8008148 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8005efc:	2200      	movs	r2, #0
 8005efe:	210f      	movs	r1, #15
 8005f00:	2046      	movs	r0, #70	; 0x46
 8005f02:	f001 ff93 	bl	8007e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8005f06:	2046      	movs	r0, #70	; 0x46
 8005f08:	f001 ffac 	bl	8007e64 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	210f      	movs	r1, #15
 8005f10:	2028      	movs	r0, #40	; 0x28
 8005f12:	f001 ff8b 	bl	8007e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8005f16:	2028      	movs	r0, #40	; 0x28
 8005f18:	f001 ffa4 	bl	8007e64 <HAL_NVIC_EnableIRQ>
}
 8005f1c:	bf00      	nop
 8005f1e:	3730      	adds	r7, #48	; 0x30
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40023800 	.word	0x40023800
 8005f28:	40021800 	.word	0x40021800
 8005f2c:	40021c00 	.word	0x40021c00
 8005f30:	40015c24 	.word	0x40015c24
 8005f34:	20000f70 	.word	0x20000f70
 8005f38:	400264b8 	.word	0x400264b8

08005f3c <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005f48:	4b53      	ldr	r3, [pc, #332]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f4a:	4a54      	ldr	r2, [pc, #336]	; (800609c <SAIx_In_Init+0x160>)
 8005f4c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8005f4e:	4b52      	ldr	r3, [pc, #328]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b50      	ldr	r3, [pc, #320]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f5c:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8005f5e:	4a4e      	ldr	r2, [pc, #312]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8005f64:	4a4c      	ldr	r2, [pc, #304]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8005f6a:	4b4b      	ldr	r3, [pc, #300]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8005f70:	4b49      	ldr	r3, [pc, #292]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8005f76:	4b48      	ldr	r3, [pc, #288]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f78:	2280      	movs	r2, #128	; 0x80
 8005f7a:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005f7c:	4b46      	ldr	r3, [pc, #280]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8005f82:	4b45      	ldr	r3, [pc, #276]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8005f88:	4b43      	ldr	r3, [pc, #268]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8005f8e:	4b42      	ldr	r3, [pc, #264]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f94:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8005f96:	4b40      	ldr	r3, [pc, #256]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8005f9c:	4b3e      	ldr	r3, [pc, #248]	; (8006098 <SAIx_In_Init+0x15c>)
 8005f9e:	2240      	movs	r2, #64	; 0x40
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8005fa2:	4b3d      	ldr	r3, [pc, #244]	; (8006098 <SAIx_In_Init+0x15c>)
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005fa8:	4b3b      	ldr	r3, [pc, #236]	; (8006098 <SAIx_In_Init+0x15c>)
 8005faa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005fae:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005fb0:	4b39      	ldr	r3, [pc, #228]	; (8006098 <SAIx_In_Init+0x15c>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8005fb6:	4b38      	ldr	r3, [pc, #224]	; (8006098 <SAIx_In_Init+0x15c>)
 8005fb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005fbc:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8005fbe:	4b36      	ldr	r3, [pc, #216]	; (8006098 <SAIx_In_Init+0x15c>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005fc4:	4b34      	ldr	r3, [pc, #208]	; (8006098 <SAIx_In_Init+0x15c>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8005fca:	4b33      	ldr	r3, [pc, #204]	; (8006098 <SAIx_In_Init+0x15c>)
 8005fcc:	2204      	movs	r2, #4
 8005fce:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8005fd0:	4a31      	ldr	r2, [pc, #196]	; (8006098 <SAIx_In_Init+0x15c>)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8005fd6:	4830      	ldr	r0, [pc, #192]	; (8006098 <SAIx_In_Init+0x15c>)
 8005fd8:	f008 f936 	bl	800e248 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005fdc:	4b30      	ldr	r3, [pc, #192]	; (80060a0 <SAIx_In_Init+0x164>)
 8005fde:	4a31      	ldr	r2, [pc, #196]	; (80060a4 <SAIx_In_Init+0x168>)
 8005fe0:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8005fe2:	4b2f      	ldr	r3, [pc, #188]	; (80060a0 <SAIx_In_Init+0x164>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b2d      	ldr	r3, [pc, #180]	; (80060a0 <SAIx_In_Init+0x164>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ff0:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8005ff2:	4a2b      	ldr	r2, [pc, #172]	; (80060a0 <SAIx_In_Init+0x164>)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8005ff8:	4b29      	ldr	r3, [pc, #164]	; (80060a0 <SAIx_In_Init+0x164>)
 8005ffa:	2203      	movs	r2, #3
 8005ffc:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8005ffe:	4b28      	ldr	r3, [pc, #160]	; (80060a0 <SAIx_In_Init+0x164>)
 8006000:	2200      	movs	r2, #0
 8006002:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8006004:	4b26      	ldr	r3, [pc, #152]	; (80060a0 <SAIx_In_Init+0x164>)
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800600a:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <SAIx_In_Init+0x164>)
 800600c:	2280      	movs	r2, #128	; 0x80
 800600e:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8006010:	4b23      	ldr	r3, [pc, #140]	; (80060a0 <SAIx_In_Init+0x164>)
 8006012:	2200      	movs	r2, #0
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8006016:	4b22      	ldr	r3, [pc, #136]	; (80060a0 <SAIx_In_Init+0x164>)
 8006018:	2201      	movs	r2, #1
 800601a:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 800601c:	4b20      	ldr	r3, [pc, #128]	; (80060a0 <SAIx_In_Init+0x164>)
 800601e:	2201      	movs	r2, #1
 8006020:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8006022:	4b1f      	ldr	r3, [pc, #124]	; (80060a0 <SAIx_In_Init+0x164>)
 8006024:	2200      	movs	r2, #0
 8006026:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006028:	4b1d      	ldr	r3, [pc, #116]	; (80060a0 <SAIx_In_Init+0x164>)
 800602a:	2201      	movs	r2, #1
 800602c:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 800602e:	4b1c      	ldr	r3, [pc, #112]	; (80060a0 <SAIx_In_Init+0x164>)
 8006030:	2240      	movs	r2, #64	; 0x40
 8006032:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8006034:	4b1a      	ldr	r3, [pc, #104]	; (80060a0 <SAIx_In_Init+0x164>)
 8006036:	2220      	movs	r2, #32
 8006038:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800603a:	4b19      	ldr	r3, [pc, #100]	; (80060a0 <SAIx_In_Init+0x164>)
 800603c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006040:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006042:	4b17      	ldr	r3, [pc, #92]	; (80060a0 <SAIx_In_Init+0x164>)
 8006044:	2200      	movs	r2, #0
 8006046:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8006048:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <SAIx_In_Init+0x164>)
 800604a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800604e:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8006050:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <SAIx_In_Init+0x164>)
 8006052:	2200      	movs	r2, #0
 8006054:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8006056:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <SAIx_In_Init+0x164>)
 8006058:	2200      	movs	r2, #0
 800605a:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 800605c:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <SAIx_In_Init+0x164>)
 800605e:	2204      	movs	r2, #4
 8006060:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8006062:	4a0f      	ldr	r2, [pc, #60]	; (80060a0 <SAIx_In_Init+0x164>)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8006068:	480d      	ldr	r0, [pc, #52]	; (80060a0 <SAIx_In_Init+0x164>)
 800606a:	f008 f8ed 	bl	800e248 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800606e:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <SAIx_In_Init+0x15c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	4b08      	ldr	r3, [pc, #32]	; (8006098 <SAIx_In_Init+0x15c>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800607c:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800607e:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <SAIx_In_Init+0x164>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <SAIx_In_Init+0x164>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800608c:	601a      	str	r2, [r3, #0]
}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000e08 	.word	0x20000e08
 800609c:	40015c04 	.word	0x40015c04
 80060a0:	20000e8c 	.word	0x20000e8c
 80060a4:	40015c24 	.word	0x40015c24

080060a8 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80060ac:	4b07      	ldr	r3, [pc, #28]	; (80060cc <SAIx_In_DeInit+0x24>)
 80060ae:	4a08      	ldr	r2, [pc, #32]	; (80060d0 <SAIx_In_DeInit+0x28>)
 80060b0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80060b2:	4b06      	ldr	r3, [pc, #24]	; (80060cc <SAIx_In_DeInit+0x24>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b04      	ldr	r3, [pc, #16]	; (80060cc <SAIx_In_DeInit+0x24>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060c0:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 80060c2:	4802      	ldr	r0, [pc, #8]	; (80060cc <SAIx_In_DeInit+0x24>)
 80060c4:	f008 fa32 	bl	800e52c <HAL_SAI_DeInit>
}
 80060c8:	bf00      	nop
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20000e8c 	.word	0x20000e8c
 80060d0:	40015c24 	.word	0x40015c24

080060d4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80060d8:	4b31      	ldr	r3, [pc, #196]	; (80061a0 <BSP_LCD_Init+0xcc>)
 80060da:	2228      	movs	r2, #40	; 0x28
 80060dc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80060de:	4b30      	ldr	r3, [pc, #192]	; (80061a0 <BSP_LCD_Init+0xcc>)
 80060e0:	2209      	movs	r2, #9
 80060e2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80060e4:	4b2e      	ldr	r3, [pc, #184]	; (80061a0 <BSP_LCD_Init+0xcc>)
 80060e6:	2235      	movs	r2, #53	; 0x35
 80060e8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80060ea:	4b2d      	ldr	r3, [pc, #180]	; (80061a0 <BSP_LCD_Init+0xcc>)
 80060ec:	220b      	movs	r2, #11
 80060ee:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80060f0:	4b2b      	ldr	r3, [pc, #172]	; (80061a0 <BSP_LCD_Init+0xcc>)
 80060f2:	f240 121b 	movw	r2, #283	; 0x11b
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80060f8:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <BSP_LCD_Init+0xcc>)
 80060fa:	f240 2215 	movw	r2, #533	; 0x215
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006100:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <BSP_LCD_Init+0xcc>)
 8006102:	f240 121d 	movw	r2, #285	; 0x11d
 8006106:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006108:	4b25      	ldr	r3, [pc, #148]	; (80061a0 <BSP_LCD_Init+0xcc>)
 800610a:	f240 2235 	movw	r2, #565	; 0x235
 800610e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006110:	2100      	movs	r1, #0
 8006112:	4823      	ldr	r0, [pc, #140]	; (80061a0 <BSP_LCD_Init+0xcc>)
 8006114:	f000 fdc4 	bl	8006ca0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006118:	4b21      	ldr	r3, [pc, #132]	; (80061a0 <BSP_LCD_Init+0xcc>)
 800611a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800611e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006120:	4b1f      	ldr	r3, [pc, #124]	; (80061a0 <BSP_LCD_Init+0xcc>)
 8006122:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006126:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006128:	4b1d      	ldr	r3, [pc, #116]	; (80061a0 <BSP_LCD_Init+0xcc>)
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006130:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <BSP_LCD_Init+0xcc>)
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8006138:	4b19      	ldr	r3, [pc, #100]	; (80061a0 <BSP_LCD_Init+0xcc>)
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8006140:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <BSP_LCD_Init+0xcc>)
 8006142:	2200      	movs	r2, #0
 8006144:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8006146:	4b16      	ldr	r3, [pc, #88]	; (80061a0 <BSP_LCD_Init+0xcc>)
 8006148:	2200      	movs	r2, #0
 800614a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800614c:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <BSP_LCD_Init+0xcc>)
 800614e:	2200      	movs	r2, #0
 8006150:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006152:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <BSP_LCD_Init+0xcc>)
 8006154:	2200      	movs	r2, #0
 8006156:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8006158:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <BSP_LCD_Init+0xcc>)
 800615a:	4a12      	ldr	r2, [pc, #72]	; (80061a4 <BSP_LCD_Init+0xd0>)
 800615c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800615e:	4810      	ldr	r0, [pc, #64]	; (80061a0 <BSP_LCD_Init+0xcc>)
 8006160:	f005 ff10 	bl	800bf84 <HAL_LTDC_GetState>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800616a:	2100      	movs	r1, #0
 800616c:	480c      	ldr	r0, [pc, #48]	; (80061a0 <BSP_LCD_Init+0xcc>)
 800616e:	f000 fcbd 	bl	8006aec <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8006172:	480b      	ldr	r0, [pc, #44]	; (80061a0 <BSP_LCD_Init+0xcc>)
 8006174:	f005 fd36 	bl	800bbe4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8006178:	2201      	movs	r2, #1
 800617a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800617e:	480a      	ldr	r0, [pc, #40]	; (80061a8 <BSP_LCD_Init+0xd4>)
 8006180:	f003 fa06 	bl	8009590 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8006184:	2201      	movs	r2, #1
 8006186:	2108      	movs	r1, #8
 8006188:	4808      	ldr	r0, [pc, #32]	; (80061ac <BSP_LCD_Init+0xd8>)
 800618a:	f003 fa01 	bl	8009590 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800618e:	f000 fea7 	bl	8006ee0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006192:	4807      	ldr	r0, [pc, #28]	; (80061b0 <BSP_LCD_Init+0xdc>)
 8006194:	f000 f8c8 	bl	8006328 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	2001b940 	.word	0x2001b940
 80061a4:	40016800 	.word	0x40016800
 80061a8:	40022000 	.word	0x40022000
 80061ac:	40022800 	.word	0x40022800
 80061b0:	20000060 	.word	0x20000060

080061b4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <BSP_LCD_GetXSize+0x20>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a06      	ldr	r2, [pc, #24]	; (80061d8 <BSP_LCD_GetXSize+0x24>)
 80061be:	2134      	movs	r1, #52	; 0x34
 80061c0:	fb01 f303 	mul.w	r3, r1, r3
 80061c4:	4413      	add	r3, r2
 80061c6:	3360      	adds	r3, #96	; 0x60
 80061c8:	681b      	ldr	r3, [r3, #0]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	20001010 	.word	0x20001010
 80061d8:	2001b940 	.word	0x2001b940

080061dc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <BSP_LCD_GetYSize+0x20>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a06      	ldr	r2, [pc, #24]	; (8006200 <BSP_LCD_GetYSize+0x24>)
 80061e6:	2134      	movs	r1, #52	; 0x34
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	4413      	add	r3, r2
 80061ee:	3364      	adds	r3, #100	; 0x64
 80061f0:	681b      	ldr	r3, [r3, #0]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	20001010 	.word	0x20001010
 8006200:	2001b940 	.word	0x2001b940

08006204 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8006204:	b580      	push	{r7, lr}
 8006206:	b090      	sub	sp, #64	; 0x40
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	6039      	str	r1, [r7, #0]
 800620e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8006214:	f7ff ffce 	bl	80061b4 <BSP_LCD_GetXSize>
 8006218:	4603      	mov	r3, r0
 800621a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8006220:	f7ff ffdc 	bl	80061dc <BSP_LCD_GetYSize>
 8006224:	4603      	mov	r3, r0
 8006226:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006228:	2300      	movs	r3, #0
 800622a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8006230:	23ff      	movs	r3, #255	; 0xff
 8006232:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8006238:	2300      	movs	r3, #0
 800623a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8006244:	2300      	movs	r3, #0
 8006246:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800624a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006250:	2307      	movs	r3, #7
 8006252:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8006254:	f7ff ffae 	bl	80061b4 <BSP_LCD_GetXSize>
 8006258:	4603      	mov	r3, r0
 800625a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800625c:	f7ff ffbe 	bl	80061dc <BSP_LCD_GetYSize>
 8006260:	4603      	mov	r3, r0
 8006262:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8006264:	88fa      	ldrh	r2, [r7, #6]
 8006266:	f107 030c 	add.w	r3, r7, #12
 800626a:	4619      	mov	r1, r3
 800626c:	4812      	ldr	r0, [pc, #72]	; (80062b8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800626e:	f005 fe4b 	bl	800bf08 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8006272:	88fa      	ldrh	r2, [r7, #6]
 8006274:	4911      	ldr	r1, [pc, #68]	; (80062bc <BSP_LCD_LayerDefaultInit+0xb8>)
 8006276:	4613      	mov	r3, r2
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	440b      	add	r3, r1
 8006280:	3304      	adds	r3, #4
 8006282:	f04f 32ff 	mov.w	r2, #4294967295
 8006286:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	490c      	ldr	r1, [pc, #48]	; (80062bc <BSP_LCD_LayerDefaultInit+0xb8>)
 800628c:	4613      	mov	r3, r2
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	3308      	adds	r3, #8
 8006298:	4a09      	ldr	r2, [pc, #36]	; (80062c0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800629a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800629c:	88fa      	ldrh	r2, [r7, #6]
 800629e:	4907      	ldr	r1, [pc, #28]	; (80062bc <BSP_LCD_LayerDefaultInit+0xb8>)
 80062a0:	4613      	mov	r3, r2
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80062ae:	601a      	str	r2, [r3, #0]
}
 80062b0:	bf00      	nop
 80062b2:	3740      	adds	r7, #64	; 0x40
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	2001b940 	.word	0x2001b940
 80062bc:	20001014 	.word	0x20001014
 80062c0:	20000060 	.word	0x20000060

080062c4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80062cc:	4b07      	ldr	r3, [pc, #28]	; (80062ec <BSP_LCD_SetTextColor+0x28>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	4907      	ldr	r1, [pc, #28]	; (80062f0 <BSP_LCD_SetTextColor+0x2c>)
 80062d2:	4613      	mov	r3, r2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	601a      	str	r2, [r3, #0]
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	20001010 	.word	0x20001010
 80062f0:	20001014 	.word	0x20001014

080062f4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80062fc:	4b08      	ldr	r3, [pc, #32]	; (8006320 <BSP_LCD_SetBackColor+0x2c>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4908      	ldr	r1, [pc, #32]	; (8006324 <BSP_LCD_SetBackColor+0x30>)
 8006302:	4613      	mov	r3, r2
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	3304      	adds	r3, #4
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20001010 	.word	0x20001010
 8006324:	20001014 	.word	0x20001014

08006328 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8006330:	4b08      	ldr	r3, [pc, #32]	; (8006354 <BSP_LCD_SetFont+0x2c>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4908      	ldr	r1, [pc, #32]	; (8006358 <BSP_LCD_SetFont+0x30>)
 8006336:	4613      	mov	r3, r2
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	3308      	adds	r3, #8
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20001010 	.word	0x20001010
 8006358:	20001014 	.word	0x20001014

0800635c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800635c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800635e:	b085      	sub	sp, #20
 8006360:	af02      	add	r7, sp, #8
 8006362:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <BSP_LCD_Clear+0x48>)
 8006366:	681c      	ldr	r4, [r3, #0]
 8006368:	4b0e      	ldr	r3, [pc, #56]	; (80063a4 <BSP_LCD_Clear+0x48>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a0e      	ldr	r2, [pc, #56]	; (80063a8 <BSP_LCD_Clear+0x4c>)
 800636e:	2134      	movs	r1, #52	; 0x34
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	4413      	add	r3, r2
 8006376:	335c      	adds	r3, #92	; 0x5c
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461d      	mov	r5, r3
 800637c:	f7ff ff1a 	bl	80061b4 <BSP_LCD_GetXSize>
 8006380:	4606      	mov	r6, r0
 8006382:	f7ff ff2b 	bl	80061dc <BSP_LCD_GetYSize>
 8006386:	4602      	mov	r2, r0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	9301      	str	r3, [sp, #4]
 800638c:	2300      	movs	r3, #0
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	4613      	mov	r3, r2
 8006392:	4632      	mov	r2, r6
 8006394:	4629      	mov	r1, r5
 8006396:	4620      	mov	r0, r4
 8006398:	f000 fd56 	bl	8006e48 <LL_FillBuffer>
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a4:	20001010 	.word	0x20001010
 80063a8:	2001b940 	.word	0x2001b940

080063ac <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	4603      	mov	r3, r0
 80063b4:	80fb      	strh	r3, [r7, #6]
 80063b6:	460b      	mov	r3, r1
 80063b8:	80bb      	strh	r3, [r7, #4]
 80063ba:	4613      	mov	r3, r2
 80063bc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80063be:	4b1b      	ldr	r3, [pc, #108]	; (800642c <BSP_LCD_DisplayChar+0x80>)
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	491b      	ldr	r1, [pc, #108]	; (8006430 <BSP_LCD_DisplayChar+0x84>)
 80063c4:	4613      	mov	r3, r2
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	3308      	adds	r3, #8
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6819      	ldr	r1, [r3, #0]
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80063da:	4b14      	ldr	r3, [pc, #80]	; (800642c <BSP_LCD_DisplayChar+0x80>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4c14      	ldr	r4, [pc, #80]	; (8006430 <BSP_LCD_DisplayChar+0x84>)
 80063e0:	4613      	mov	r3, r2
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4423      	add	r3, r4
 80063ea:	3308      	adds	r3, #8
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80063f0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80063f4:	4b0d      	ldr	r3, [pc, #52]	; (800642c <BSP_LCD_DisplayChar+0x80>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4c0d      	ldr	r4, [pc, #52]	; (8006430 <BSP_LCD_DisplayChar+0x84>)
 80063fa:	4613      	mov	r3, r2
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4423      	add	r3, r4
 8006404:	3308      	adds	r3, #8
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	889b      	ldrh	r3, [r3, #4]
 800640a:	3307      	adds	r3, #7
 800640c:	2b00      	cmp	r3, #0
 800640e:	da00      	bge.n	8006412 <BSP_LCD_DisplayChar+0x66>
 8006410:	3307      	adds	r3, #7
 8006412:	10db      	asrs	r3, r3, #3
 8006414:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006418:	18ca      	adds	r2, r1, r3
 800641a:	88b9      	ldrh	r1, [r7, #4]
 800641c:	88fb      	ldrh	r3, [r7, #6]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fc5a 	bl	8006cd8 <DrawChar>
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bd90      	pop	{r4, r7, pc}
 800642c:	20001010 	.word	0x20001010
 8006430:	20001014 	.word	0x20001014

08006434 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8006434:	b5b0      	push	{r4, r5, r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	60ba      	str	r2, [r7, #8]
 800643c:	461a      	mov	r2, r3
 800643e:	4603      	mov	r3, r0
 8006440:	81fb      	strh	r3, [r7, #14]
 8006442:	460b      	mov	r3, r1
 8006444:	81bb      	strh	r3, [r7, #12]
 8006446:	4613      	mov	r3, r2
 8006448:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800644a:	2301      	movs	r3, #1
 800644c:	83fb      	strh	r3, [r7, #30]
 800644e:	2300      	movs	r3, #0
 8006450:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800645e:	e002      	b.n	8006466 <BSP_LCD_DisplayStringAt+0x32>
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	3301      	adds	r3, #1
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	617a      	str	r2, [r7, #20]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f6      	bne.n	8006460 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006472:	f7ff fe9f 	bl	80061b4 <BSP_LCD_GetXSize>
 8006476:	4b4f      	ldr	r3, [pc, #316]	; (80065b4 <BSP_LCD_DisplayStringAt+0x180>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	494f      	ldr	r1, [pc, #316]	; (80065b8 <BSP_LCD_DisplayStringAt+0x184>)
 800647c:	4613      	mov	r3, r2
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	4413      	add	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	3308      	adds	r3, #8
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	889b      	ldrh	r3, [r3, #4]
 800648c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006490:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	2b02      	cmp	r3, #2
 8006496:	d01c      	beq.n	80064d2 <BSP_LCD_DisplayStringAt+0x9e>
 8006498:	2b03      	cmp	r3, #3
 800649a:	d017      	beq.n	80064cc <BSP_LCD_DisplayStringAt+0x98>
 800649c:	2b01      	cmp	r3, #1
 800649e:	d12e      	bne.n	80064fe <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	1ad1      	subs	r1, r2, r3
 80064a6:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <BSP_LCD_DisplayStringAt+0x180>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4843      	ldr	r0, [pc, #268]	; (80065b8 <BSP_LCD_DisplayStringAt+0x184>)
 80064ac:	4613      	mov	r3, r2
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4403      	add	r3, r0
 80064b6:	3308      	adds	r3, #8
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	889b      	ldrh	r3, [r3, #4]
 80064bc:	fb03 f301 	mul.w	r3, r3, r1
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	89fb      	ldrh	r3, [r7, #14]
 80064c6:	4413      	add	r3, r2
 80064c8:	83fb      	strh	r3, [r7, #30]
      break;
 80064ca:	e01b      	b.n	8006504 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80064cc:	89fb      	ldrh	r3, [r7, #14]
 80064ce:	83fb      	strh	r3, [r7, #30]
      break;
 80064d0:	e018      	b.n	8006504 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	b299      	uxth	r1, r3
 80064da:	4b36      	ldr	r3, [pc, #216]	; (80065b4 <BSP_LCD_DisplayStringAt+0x180>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4836      	ldr	r0, [pc, #216]	; (80065b8 <BSP_LCD_DisplayStringAt+0x184>)
 80064e0:	4613      	mov	r3, r2
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4403      	add	r3, r0
 80064ea:	3308      	adds	r3, #8
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	889b      	ldrh	r3, [r3, #4]
 80064f0:	fb11 f303 	smulbb	r3, r1, r3
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	89fb      	ldrh	r3, [r7, #14]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	83fb      	strh	r3, [r7, #30]
      break;
 80064fc:	e002      	b.n	8006504 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80064fe:	89fb      	ldrh	r3, [r7, #14]
 8006500:	83fb      	strh	r3, [r7, #30]
      break;
 8006502:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8006504:	8bfb      	ldrh	r3, [r7, #30]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <BSP_LCD_DisplayStringAt+0xde>
 800650a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800650e:	2b00      	cmp	r3, #0
 8006510:	da1d      	bge.n	800654e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8006512:	2301      	movs	r3, #1
 8006514:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006516:	e01a      	b.n	800654e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	781a      	ldrb	r2, [r3, #0]
 800651c:	89b9      	ldrh	r1, [r7, #12]
 800651e:	8bfb      	ldrh	r3, [r7, #30]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ff43 	bl	80063ac <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8006526:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <BSP_LCD_DisplayStringAt+0x180>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4923      	ldr	r1, [pc, #140]	; (80065b8 <BSP_LCD_DisplayStringAt+0x184>)
 800652c:	4613      	mov	r3, r2
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	3308      	adds	r3, #8
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	889a      	ldrh	r2, [r3, #4]
 800653c:	8bfb      	ldrh	r3, [r7, #30]
 800653e:	4413      	add	r3, r2
 8006540:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	3301      	adds	r3, #1
 8006546:	60bb      	str	r3, [r7, #8]
    i++;
 8006548:	8bbb      	ldrh	r3, [r7, #28]
 800654a:	3301      	adds	r3, #1
 800654c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	bf14      	ite	ne
 8006556:	2301      	movne	r3, #1
 8006558:	2300      	moveq	r3, #0
 800655a:	b2dc      	uxtb	r4, r3
 800655c:	f7ff fe2a 	bl	80061b4 <BSP_LCD_GetXSize>
 8006560:	4605      	mov	r5, r0
 8006562:	8bb9      	ldrh	r1, [r7, #28]
 8006564:	4b13      	ldr	r3, [pc, #76]	; (80065b4 <BSP_LCD_DisplayStringAt+0x180>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	4813      	ldr	r0, [pc, #76]	; (80065b8 <BSP_LCD_DisplayStringAt+0x184>)
 800656a:	4613      	mov	r3, r2
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4403      	add	r3, r0
 8006574:	3308      	adds	r3, #8
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	889b      	ldrh	r3, [r3, #4]
 800657a:	fb03 f301 	mul.w	r3, r3, r1
 800657e:	1aeb      	subs	r3, r5, r3
 8006580:	b299      	uxth	r1, r3
 8006582:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <BSP_LCD_DisplayStringAt+0x180>)
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	480c      	ldr	r0, [pc, #48]	; (80065b8 <BSP_LCD_DisplayStringAt+0x184>)
 8006588:	4613      	mov	r3, r2
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4403      	add	r3, r0
 8006592:	3308      	adds	r3, #8
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	889b      	ldrh	r3, [r3, #4]
 8006598:	4299      	cmp	r1, r3
 800659a:	bf2c      	ite	cs
 800659c:	2301      	movcs	r3, #1
 800659e:	2300      	movcc	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	4023      	ands	r3, r4
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1b6      	bne.n	8006518 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 80065aa:	bf00      	nop
 80065ac:	3720      	adds	r7, #32
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bdb0      	pop	{r4, r5, r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20001010 	.word	0x20001010
 80065b8:	20001014 	.word	0x20001014

080065bc <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80065bc:	b5b0      	push	{r4, r5, r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	4603      	mov	r3, r0
 80065c4:	80fb      	strh	r3, [r7, #6]
 80065c6:	460b      	mov	r3, r1
 80065c8:	80bb      	strh	r3, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80065d2:	4b26      	ldr	r3, [pc, #152]	; (800666c <BSP_LCD_DrawHLine+0xb0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a26      	ldr	r2, [pc, #152]	; (8006670 <BSP_LCD_DrawHLine+0xb4>)
 80065d8:	2134      	movs	r1, #52	; 0x34
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	4413      	add	r3, r2
 80065e0:	3348      	adds	r3, #72	; 0x48
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d114      	bne.n	8006612 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80065e8:	4b20      	ldr	r3, [pc, #128]	; (800666c <BSP_LCD_DrawHLine+0xb0>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a20      	ldr	r2, [pc, #128]	; (8006670 <BSP_LCD_DrawHLine+0xb4>)
 80065ee:	2134      	movs	r1, #52	; 0x34
 80065f0:	fb01 f303 	mul.w	r3, r1, r3
 80065f4:	4413      	add	r3, r2
 80065f6:	335c      	adds	r3, #92	; 0x5c
 80065f8:	681c      	ldr	r4, [r3, #0]
 80065fa:	f7ff fddb 	bl	80061b4 <BSP_LCD_GetXSize>
 80065fe:	4602      	mov	r2, r0
 8006600:	88bb      	ldrh	r3, [r7, #4]
 8006602:	fb03 f202 	mul.w	r2, r3, r2
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	4413      	add	r3, r2
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	4423      	add	r3, r4
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e013      	b.n	800663a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006612:	4b16      	ldr	r3, [pc, #88]	; (800666c <BSP_LCD_DrawHLine+0xb0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a16      	ldr	r2, [pc, #88]	; (8006670 <BSP_LCD_DrawHLine+0xb4>)
 8006618:	2134      	movs	r1, #52	; 0x34
 800661a:	fb01 f303 	mul.w	r3, r1, r3
 800661e:	4413      	add	r3, r2
 8006620:	335c      	adds	r3, #92	; 0x5c
 8006622:	681c      	ldr	r4, [r3, #0]
 8006624:	f7ff fdc6 	bl	80061b4 <BSP_LCD_GetXSize>
 8006628:	4602      	mov	r2, r0
 800662a:	88bb      	ldrh	r3, [r7, #4]
 800662c:	fb03 f202 	mul.w	r2, r3, r2
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4423      	add	r3, r4
 8006638:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800663a:	4b0c      	ldr	r3, [pc, #48]	; (800666c <BSP_LCD_DrawHLine+0xb0>)
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	68fc      	ldr	r4, [r7, #12]
 8006640:	887d      	ldrh	r5, [r7, #2]
 8006642:	4b0a      	ldr	r3, [pc, #40]	; (800666c <BSP_LCD_DrawHLine+0xb0>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	490b      	ldr	r1, [pc, #44]	; (8006674 <BSP_LCD_DrawHLine+0xb8>)
 8006648:	4613      	mov	r3, r2
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	440b      	add	r3, r1
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	2300      	movs	r3, #0
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	2301      	movs	r3, #1
 800665c:	462a      	mov	r2, r5
 800665e:	4621      	mov	r1, r4
 8006660:	f000 fbf2 	bl	8006e48 <LL_FillBuffer>
}
 8006664:	bf00      	nop
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bdb0      	pop	{r4, r5, r7, pc}
 800666c:	20001010 	.word	0x20001010
 8006670:	2001b940 	.word	0x2001b940
 8006674:	20001014 	.word	0x20001014

08006678 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800667a:	b087      	sub	sp, #28
 800667c:	af02      	add	r7, sp, #8
 800667e:	4603      	mov	r3, r0
 8006680:	80fb      	strh	r3, [r7, #6]
 8006682:	460b      	mov	r3, r1
 8006684:	80bb      	strh	r3, [r7, #4]
 8006686:	4613      	mov	r3, r2
 8006688:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800668e:	4b28      	ldr	r3, [pc, #160]	; (8006730 <BSP_LCD_DrawVLine+0xb8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a28      	ldr	r2, [pc, #160]	; (8006734 <BSP_LCD_DrawVLine+0xbc>)
 8006694:	2134      	movs	r1, #52	; 0x34
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	4413      	add	r3, r2
 800669c:	3348      	adds	r3, #72	; 0x48
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d114      	bne.n	80066ce <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80066a4:	4b22      	ldr	r3, [pc, #136]	; (8006730 <BSP_LCD_DrawVLine+0xb8>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a22      	ldr	r2, [pc, #136]	; (8006734 <BSP_LCD_DrawVLine+0xbc>)
 80066aa:	2134      	movs	r1, #52	; 0x34
 80066ac:	fb01 f303 	mul.w	r3, r1, r3
 80066b0:	4413      	add	r3, r2
 80066b2:	335c      	adds	r3, #92	; 0x5c
 80066b4:	681c      	ldr	r4, [r3, #0]
 80066b6:	f7ff fd7d 	bl	80061b4 <BSP_LCD_GetXSize>
 80066ba:	4602      	mov	r2, r0
 80066bc:	88bb      	ldrh	r3, [r7, #4]
 80066be:	fb03 f202 	mul.w	r2, r3, r2
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	4413      	add	r3, r2
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	4423      	add	r3, r4
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	e013      	b.n	80066f6 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80066ce:	4b18      	ldr	r3, [pc, #96]	; (8006730 <BSP_LCD_DrawVLine+0xb8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a18      	ldr	r2, [pc, #96]	; (8006734 <BSP_LCD_DrawVLine+0xbc>)
 80066d4:	2134      	movs	r1, #52	; 0x34
 80066d6:	fb01 f303 	mul.w	r3, r1, r3
 80066da:	4413      	add	r3, r2
 80066dc:	335c      	adds	r3, #92	; 0x5c
 80066de:	681c      	ldr	r4, [r3, #0]
 80066e0:	f7ff fd68 	bl	80061b4 <BSP_LCD_GetXSize>
 80066e4:	4602      	mov	r2, r0
 80066e6:	88bb      	ldrh	r3, [r7, #4]
 80066e8:	fb03 f202 	mul.w	r2, r3, r2
 80066ec:	88fb      	ldrh	r3, [r7, #6]
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4423      	add	r3, r4
 80066f4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80066f6:	4b0e      	ldr	r3, [pc, #56]	; (8006730 <BSP_LCD_DrawVLine+0xb8>)
 80066f8:	681c      	ldr	r4, [r3, #0]
 80066fa:	68fd      	ldr	r5, [r7, #12]
 80066fc:	887e      	ldrh	r6, [r7, #2]
 80066fe:	f7ff fd59 	bl	80061b4 <BSP_LCD_GetXSize>
 8006702:	4603      	mov	r3, r0
 8006704:	1e59      	subs	r1, r3, #1
 8006706:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <BSP_LCD_DrawVLine+0xb8>)
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	480b      	ldr	r0, [pc, #44]	; (8006738 <BSP_LCD_DrawVLine+0xc0>)
 800670c:	4613      	mov	r3, r2
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4403      	add	r3, r0
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	9301      	str	r3, [sp, #4]
 800671a:	9100      	str	r1, [sp, #0]
 800671c:	4633      	mov	r3, r6
 800671e:	2201      	movs	r2, #1
 8006720:	4629      	mov	r1, r5
 8006722:	4620      	mov	r0, r4
 8006724:	f000 fb90 	bl	8006e48 <LL_FillBuffer>
}
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006730:	20001010 	.word	0x20001010
 8006734:	2001b940 	.word	0x2001b940
 8006738:	20001014 	.word	0x20001014

0800673c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800673c:	b590      	push	{r4, r7, lr}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	80fb      	strh	r3, [r7, #6]
 8006746:	460b      	mov	r3, r1
 8006748:	80bb      	strh	r3, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800674e:	887b      	ldrh	r3, [r7, #2]
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	f1c3 0303 	rsb	r3, r3, #3
 8006756:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800675c:	887b      	ldrh	r3, [r7, #2]
 800675e:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8006760:	e0cf      	b.n	8006902 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	b29a      	uxth	r2, r3
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	4413      	add	r3, r2
 800676a:	b298      	uxth	r0, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	b29b      	uxth	r3, r3
 8006770:	88ba      	ldrh	r2, [r7, #4]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	b29c      	uxth	r4, r3
 8006776:	4b67      	ldr	r3, [pc, #412]	; (8006914 <BSP_LCD_DrawCircle+0x1d8>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4967      	ldr	r1, [pc, #412]	; (8006918 <BSP_LCD_DrawCircle+0x1dc>)
 800677c:	4613      	mov	r3, r2
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	4621      	mov	r1, r4
 800678c:	f000 f8c6 	bl	800691c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	b29b      	uxth	r3, r3
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	b298      	uxth	r0, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	b29b      	uxth	r3, r3
 800679e:	88ba      	ldrh	r2, [r7, #4]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	b29c      	uxth	r4, r3
 80067a4:	4b5b      	ldr	r3, [pc, #364]	; (8006914 <BSP_LCD_DrawCircle+0x1d8>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	495b      	ldr	r1, [pc, #364]	; (8006918 <BSP_LCD_DrawCircle+0x1dc>)
 80067aa:	4613      	mov	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	4621      	mov	r1, r4
 80067ba:	f000 f8af 	bl	800691c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	88fb      	ldrh	r3, [r7, #6]
 80067c4:	4413      	add	r3, r2
 80067c6:	b298      	uxth	r0, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	88ba      	ldrh	r2, [r7, #4]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	b29c      	uxth	r4, r3
 80067d2:	4b50      	ldr	r3, [pc, #320]	; (8006914 <BSP_LCD_DrawCircle+0x1d8>)
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	4950      	ldr	r1, [pc, #320]	; (8006918 <BSP_LCD_DrawCircle+0x1dc>)
 80067d8:	4613      	mov	r3, r2
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	440b      	add	r3, r1
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	4621      	mov	r1, r4
 80067e8:	f000 f898 	bl	800691c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	88fa      	ldrh	r2, [r7, #6]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	b298      	uxth	r0, r3
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	88ba      	ldrh	r2, [r7, #4]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	b29c      	uxth	r4, r3
 8006800:	4b44      	ldr	r3, [pc, #272]	; (8006914 <BSP_LCD_DrawCircle+0x1d8>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	4944      	ldr	r1, [pc, #272]	; (8006918 <BSP_LCD_DrawCircle+0x1dc>)
 8006806:	4613      	mov	r3, r2
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	4621      	mov	r1, r4
 8006816:	f000 f881 	bl	800691c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	b29a      	uxth	r2, r3
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	4413      	add	r3, r2
 8006822:	b298      	uxth	r0, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	b29a      	uxth	r2, r3
 8006828:	88bb      	ldrh	r3, [r7, #4]
 800682a:	4413      	add	r3, r2
 800682c:	b29c      	uxth	r4, r3
 800682e:	4b39      	ldr	r3, [pc, #228]	; (8006914 <BSP_LCD_DrawCircle+0x1d8>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4939      	ldr	r1, [pc, #228]	; (8006918 <BSP_LCD_DrawCircle+0x1dc>)
 8006834:	4613      	mov	r3, r2
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	4413      	add	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	461a      	mov	r2, r3
 8006842:	4621      	mov	r1, r4
 8006844:	f000 f86a 	bl	800691c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	b29b      	uxth	r3, r3
 800684c:	88fa      	ldrh	r2, [r7, #6]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	b298      	uxth	r0, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	b29a      	uxth	r2, r3
 8006856:	88bb      	ldrh	r3, [r7, #4]
 8006858:	4413      	add	r3, r2
 800685a:	b29c      	uxth	r4, r3
 800685c:	4b2d      	ldr	r3, [pc, #180]	; (8006914 <BSP_LCD_DrawCircle+0x1d8>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	492d      	ldr	r1, [pc, #180]	; (8006918 <BSP_LCD_DrawCircle+0x1dc>)
 8006862:	4613      	mov	r3, r2
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	4621      	mov	r1, r4
 8006872:	f000 f853 	bl	800691c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	b29a      	uxth	r2, r3
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	4413      	add	r3, r2
 800687e:	b298      	uxth	r0, r3
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	b29a      	uxth	r2, r3
 8006884:	88bb      	ldrh	r3, [r7, #4]
 8006886:	4413      	add	r3, r2
 8006888:	b29c      	uxth	r4, r3
 800688a:	4b22      	ldr	r3, [pc, #136]	; (8006914 <BSP_LCD_DrawCircle+0x1d8>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	4922      	ldr	r1, [pc, #136]	; (8006918 <BSP_LCD_DrawCircle+0x1dc>)
 8006890:	4613      	mov	r3, r2
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	4621      	mov	r1, r4
 80068a0:	f000 f83c 	bl	800691c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	88fa      	ldrh	r2, [r7, #6]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	b298      	uxth	r0, r3
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	88bb      	ldrh	r3, [r7, #4]
 80068b4:	4413      	add	r3, r2
 80068b6:	b29c      	uxth	r4, r3
 80068b8:	4b16      	ldr	r3, [pc, #88]	; (8006914 <BSP_LCD_DrawCircle+0x1d8>)
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	4916      	ldr	r1, [pc, #88]	; (8006918 <BSP_LCD_DrawCircle+0x1dc>)
 80068be:	4613      	mov	r3, r2
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	4621      	mov	r1, r4
 80068ce:	f000 f825 	bl	800691c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	da06      	bge.n	80068e6 <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	009a      	lsls	r2, r3, #2
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	4413      	add	r3, r2
 80068e0:	3306      	adds	r3, #6
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	e00a      	b.n	80068fc <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	009a      	lsls	r2, r3, #2
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	4413      	add	r3, r2
 80068f2:	330a      	adds	r3, #10
 80068f4:	617b      	str	r3, [r7, #20]
      current_y--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	3301      	adds	r3, #1
 8006900:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	429a      	cmp	r2, r3
 8006908:	f67f af2b 	bls.w	8006762 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800690c:	bf00      	nop
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	bd90      	pop	{r4, r7, pc}
 8006914:	20001010 	.word	0x20001010
 8006918:	20001014 	.word	0x20001014

0800691c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800691c:	b5b0      	push	{r4, r5, r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	603a      	str	r2, [r7, #0]
 8006926:	80fb      	strh	r3, [r7, #6]
 8006928:	460b      	mov	r3, r1
 800692a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800692c:	4b1d      	ldr	r3, [pc, #116]	; (80069a4 <BSP_LCD_DrawPixel+0x88>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1d      	ldr	r2, [pc, #116]	; (80069a8 <BSP_LCD_DrawPixel+0x8c>)
 8006932:	2134      	movs	r1, #52	; 0x34
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	4413      	add	r3, r2
 800693a:	3348      	adds	r3, #72	; 0x48
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b02      	cmp	r3, #2
 8006940:	d116      	bne.n	8006970 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8006942:	4b18      	ldr	r3, [pc, #96]	; (80069a4 <BSP_LCD_DrawPixel+0x88>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a18      	ldr	r2, [pc, #96]	; (80069a8 <BSP_LCD_DrawPixel+0x8c>)
 8006948:	2134      	movs	r1, #52	; 0x34
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	4413      	add	r3, r2
 8006950:	335c      	adds	r3, #92	; 0x5c
 8006952:	681c      	ldr	r4, [r3, #0]
 8006954:	88bd      	ldrh	r5, [r7, #4]
 8006956:	f7ff fc2d 	bl	80061b4 <BSP_LCD_GetXSize>
 800695a:	4603      	mov	r3, r0
 800695c:	fb03 f205 	mul.w	r2, r3, r5
 8006960:	88fb      	ldrh	r3, [r7, #6]
 8006962:	4413      	add	r3, r2
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	4423      	add	r3, r4
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	b292      	uxth	r2, r2
 800696c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800696e:	e015      	b.n	800699c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006970:	4b0c      	ldr	r3, [pc, #48]	; (80069a4 <BSP_LCD_DrawPixel+0x88>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <BSP_LCD_DrawPixel+0x8c>)
 8006976:	2134      	movs	r1, #52	; 0x34
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	4413      	add	r3, r2
 800697e:	335c      	adds	r3, #92	; 0x5c
 8006980:	681c      	ldr	r4, [r3, #0]
 8006982:	88bd      	ldrh	r5, [r7, #4]
 8006984:	f7ff fc16 	bl	80061b4 <BSP_LCD_GetXSize>
 8006988:	4603      	mov	r3, r0
 800698a:	fb03 f205 	mul.w	r2, r3, r5
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4423      	add	r3, r4
 8006996:	461a      	mov	r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	6013      	str	r3, [r2, #0]
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bdb0      	pop	{r4, r5, r7, pc}
 80069a4:	20001010 	.word	0x20001010
 80069a8:	2001b940 	.word	0x2001b940

080069ac <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	4603      	mov	r3, r0
 80069b4:	80fb      	strh	r3, [r7, #6]
 80069b6:	460b      	mov	r3, r1
 80069b8:	80bb      	strh	r3, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80069be:	887b      	ldrh	r3, [r7, #2]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	f1c3 0303 	rsb	r3, r3, #3
 80069c6:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80069cc:	887b      	ldrh	r3, [r7, #2]
 80069ce:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80069d0:	4b44      	ldr	r3, [pc, #272]	; (8006ae4 <BSP_LCD_FillCircle+0x138>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4944      	ldr	r1, [pc, #272]	; (8006ae8 <BSP_LCD_FillCircle+0x13c>)
 80069d6:	4613      	mov	r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff fc6e 	bl	80062c4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 80069e8:	e061      	b.n	8006aae <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d021      	beq.n	8006a34 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	88fa      	ldrh	r2, [r7, #6]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	b298      	uxth	r0, r3
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	88bb      	ldrh	r3, [r7, #4]
 8006a00:	4413      	add	r3, r2
 8006a02:	b299      	uxth	r1, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	f7ff fdd5 	bl	80065bc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	88fa      	ldrh	r2, [r7, #6]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	b298      	uxth	r0, r3
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	88ba      	ldrh	r2, [r7, #4]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	b299      	uxth	r1, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f7ff fdc4 	bl	80065bc <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d021      	beq.n	8006a7e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	88fa      	ldrh	r2, [r7, #6]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	b298      	uxth	r0, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	88ba      	ldrh	r2, [r7, #4]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	b299      	uxth	r1, r3
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	461a      	mov	r2, r3
 8006a58:	f7ff fdb0 	bl	80065bc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	88fa      	ldrh	r2, [r7, #6]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	b298      	uxth	r0, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	88bb      	ldrh	r3, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	b299      	uxth	r1, r3
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	f7ff fd9f 	bl	80065bc <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	da06      	bge.n	8006a92 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	009a      	lsls	r2, r3, #2
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3306      	adds	r3, #6
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e00a      	b.n	8006aa8 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	009a      	lsls	r2, r3, #2
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	330a      	adds	r3, #10
 8006aa0:	617b      	str	r3, [r7, #20]
      current_y--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d999      	bls.n	80069ea <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <BSP_LCD_FillCircle+0x138>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	490b      	ldr	r1, [pc, #44]	; (8006ae8 <BSP_LCD_FillCircle+0x13c>)
 8006abc:	4613      	mov	r3, r2
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff fbfb 	bl	80062c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8006ace:	887a      	ldrh	r2, [r7, #2]
 8006ad0:	88b9      	ldrh	r1, [r7, #4]
 8006ad2:	88fb      	ldrh	r3, [r7, #6]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff fe31 	bl	800673c <BSP_LCD_DrawCircle>
}
 8006ada:	bf00      	nop
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20001010 	.word	0x20001010
 8006ae8:	20001014 	.word	0x20001014

08006aec <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b090      	sub	sp, #64	; 0x40
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006af6:	4b64      	ldr	r3, [pc, #400]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afa:	4a63      	ldr	r2, [pc, #396]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b00:	6453      	str	r3, [r2, #68]	; 0x44
 8006b02:	4b61      	ldr	r3, [pc, #388]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8006b0e:	4b5e      	ldr	r3, [pc, #376]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b12:	4a5d      	ldr	r2, [pc, #372]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b18:	6313      	str	r3, [r2, #48]	; 0x30
 8006b1a:	4b5b      	ldr	r3, [pc, #364]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b26:	4b58      	ldr	r3, [pc, #352]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	4a57      	ldr	r2, [pc, #348]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b2c:	f043 0310 	orr.w	r3, r3, #16
 8006b30:	6313      	str	r3, [r2, #48]	; 0x30
 8006b32:	4b55      	ldr	r3, [pc, #340]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	623b      	str	r3, [r7, #32]
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b3e:	4b52      	ldr	r3, [pc, #328]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	4a51      	ldr	r2, [pc, #324]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b48:	6313      	str	r3, [r2, #48]	; 0x30
 8006b4a:	4b4f      	ldr	r3, [pc, #316]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006b56:	4b4c      	ldr	r3, [pc, #304]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	4a4b      	ldr	r2, [pc, #300]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b60:	6313      	str	r3, [r2, #48]	; 0x30
 8006b62:	4b49      	ldr	r3, [pc, #292]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006b6e:	4b46      	ldr	r3, [pc, #280]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	4a45      	ldr	r2, [pc, #276]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b78:	6313      	str	r3, [r2, #48]	; 0x30
 8006b7a:	4b43      	ldr	r3, [pc, #268]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006b86:	4b40      	ldr	r3, [pc, #256]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8a:	4a3f      	ldr	r2, [pc, #252]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b90:	6313      	str	r3, [r2, #48]	; 0x30
 8006b92:	4b3d      	ldr	r3, [pc, #244]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8006b9e:	4b3a      	ldr	r3, [pc, #232]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	4a39      	ldr	r2, [pc, #228]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8006baa:	4b37      	ldr	r3, [pc, #220]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006bb6:	4b34      	ldr	r3, [pc, #208]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	4a33      	ldr	r2, [pc, #204]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006bbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bc2:	4b31      	ldr	r3, [pc, #196]	; (8006c88 <BSP_LCD_MspInit+0x19c>)
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bca:	60bb      	str	r3, [r7, #8]
 8006bcc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8006bce:	2310      	movs	r3, #16
 8006bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8006bde:	230e      	movs	r3, #14
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006be6:	4619      	mov	r1, r3
 8006be8:	4828      	ldr	r0, [pc, #160]	; (8006c8c <BSP_LCD_MspInit+0x1a0>)
 8006bea:	f002 fa1d 	bl	8009028 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8006bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006bf8:	2309      	movs	r3, #9
 8006bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c00:	4619      	mov	r1, r3
 8006c02:	4823      	ldr	r0, [pc, #140]	; (8006c90 <BSP_LCD_MspInit+0x1a4>)
 8006c04:	f002 fa10 	bl	8009028 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8006c08:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8006c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006c12:	230e      	movs	r3, #14
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	481d      	ldr	r0, [pc, #116]	; (8006c94 <BSP_LCD_MspInit+0x1a8>)
 8006c1e:	f002 fa03 	bl	8009028 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8006c22:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006c2c:	230e      	movs	r3, #14
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8006c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c34:	4619      	mov	r1, r3
 8006c36:	4818      	ldr	r0, [pc, #96]	; (8006c98 <BSP_LCD_MspInit+0x1ac>)
 8006c38:	f002 f9f6 	bl	8009028 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006c3c:	23f7      	movs	r3, #247	; 0xf7
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006c40:	2302      	movs	r3, #2
 8006c42:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006c44:	230e      	movs	r3, #14
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006c48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4813      	ldr	r0, [pc, #76]	; (8006c9c <BSP_LCD_MspInit+0x1b0>)
 8006c50:	f002 f9ea 	bl	8009028 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c62:	4619      	mov	r1, r3
 8006c64:	480b      	ldr	r0, [pc, #44]	; (8006c94 <BSP_LCD_MspInit+0x1a8>)
 8006c66:	f002 f9df 	bl	8009028 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c76:	4619      	mov	r1, r3
 8006c78:	4808      	ldr	r0, [pc, #32]	; (8006c9c <BSP_LCD_MspInit+0x1b0>)
 8006c7a:	f002 f9d5 	bl	8009028 <HAL_GPIO_Init>
}
 8006c7e:	bf00      	nop
 8006c80:	3740      	adds	r7, #64	; 0x40
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	40021800 	.word	0x40021800
 8006c94:	40022000 	.word	0x40022000
 8006c98:	40022400 	.word	0x40022400
 8006c9c:	40022800 	.word	0x40022800

08006ca0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006caa:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <BSP_LCD_ClockConfig+0x34>)
 8006cac:	2208      	movs	r2, #8
 8006cae:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8006cb0:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <BSP_LCD_ClockConfig+0x34>)
 8006cb2:	22c0      	movs	r2, #192	; 0xc0
 8006cb4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8006cb6:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <BSP_LCD_ClockConfig+0x34>)
 8006cb8:	2205      	movs	r2, #5
 8006cba:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006cbc:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <BSP_LCD_ClockConfig+0x34>)
 8006cbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006cc4:	4803      	ldr	r0, [pc, #12]	; (8006cd4 <BSP_LCD_ClockConfig+0x34>)
 8006cc6:	f006 f8cf 	bl	800ce68 <HAL_RCCEx_PeriphCLKConfig>
}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	2000102c 	.word	0x2000102c

08006cd8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	603a      	str	r2, [r7, #0]
 8006ce2:	80fb      	strh	r3, [r7, #6]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61fb      	str	r3, [r7, #28]
 8006cec:	2300      	movs	r3, #0
 8006cee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8006cf0:	4b53      	ldr	r3, [pc, #332]	; (8006e40 <DrawChar+0x168>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4953      	ldr	r1, [pc, #332]	; (8006e44 <DrawChar+0x16c>)
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	3308      	adds	r3, #8
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	88db      	ldrh	r3, [r3, #6]
 8006d06:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8006d08:	4b4d      	ldr	r3, [pc, #308]	; (8006e40 <DrawChar+0x168>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	494d      	ldr	r1, [pc, #308]	; (8006e44 <DrawChar+0x16c>)
 8006d0e:	4613      	mov	r3, r2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	440b      	add	r3, r1
 8006d18:	3308      	adds	r3, #8
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	889b      	ldrh	r3, [r3, #4]
 8006d1e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8006d20:	8a3b      	ldrh	r3, [r7, #16]
 8006d22:	3307      	adds	r3, #7
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	da00      	bge.n	8006d2a <DrawChar+0x52>
 8006d28:	3307      	adds	r3, #7
 8006d2a:	10db      	asrs	r3, r3, #3
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	8a3b      	ldrh	r3, [r7, #16]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	e076      	b.n	8006e2e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8006d40:	8a3b      	ldrh	r3, [r7, #16]
 8006d42:	3307      	adds	r3, #7
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	da00      	bge.n	8006d4a <DrawChar+0x72>
 8006d48:	3307      	adds	r3, #7
 8006d4a:	10db      	asrs	r3, r3, #3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	fb03 f302 	mul.w	r3, r3, r2
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	4413      	add	r3, r2
 8006d58:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8006d5a:	8a3b      	ldrh	r3, [r7, #16]
 8006d5c:	3307      	adds	r3, #7
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	da00      	bge.n	8006d64 <DrawChar+0x8c>
 8006d62:	3307      	adds	r3, #7
 8006d64:	10db      	asrs	r3, r3, #3
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d002      	beq.n	8006d70 <DrawChar+0x98>
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d004      	beq.n	8006d78 <DrawChar+0xa0>
 8006d6e:	e00c      	b.n	8006d8a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	617b      	str	r3, [r7, #20]
      break;
 8006d76:	e016      	b.n	8006da6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	3201      	adds	r2, #1
 8006d82:	7812      	ldrb	r2, [r2, #0]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	617b      	str	r3, [r7, #20]
      break;
 8006d88:	e00d      	b.n	8006da6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	041a      	lsls	r2, r3, #16
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	3301      	adds	r3, #1
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	3202      	adds	r2, #2
 8006d9e:	7812      	ldrb	r2, [r2, #0]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]
      break;
 8006da4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	e036      	b.n	8006e1a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8006dac:	8a3a      	ldrh	r2, [r7, #16]
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	1ad2      	subs	r2, r2, r3
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	4413      	add	r3, r2
 8006db6:	3b01      	subs	r3, #1
 8006db8:	2201      	movs	r2, #1
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d012      	beq.n	8006dee <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	4413      	add	r3, r2
 8006dd0:	b298      	uxth	r0, r3
 8006dd2:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <DrawChar+0x168>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	491b      	ldr	r1, [pc, #108]	; (8006e44 <DrawChar+0x16c>)
 8006dd8:	4613      	mov	r3, r2
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	88bb      	ldrh	r3, [r7, #4]
 8006de6:	4619      	mov	r1, r3
 8006de8:	f7ff fd98 	bl	800691c <BSP_LCD_DrawPixel>
 8006dec:	e012      	b.n	8006e14 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	88fb      	ldrh	r3, [r7, #6]
 8006df4:	4413      	add	r3, r2
 8006df6:	b298      	uxth	r0, r3
 8006df8:	4b11      	ldr	r3, [pc, #68]	; (8006e40 <DrawChar+0x168>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	4911      	ldr	r1, [pc, #68]	; (8006e44 <DrawChar+0x16c>)
 8006dfe:	4613      	mov	r3, r2
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	440b      	add	r3, r1
 8006e08:	3304      	adds	r3, #4
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	88bb      	ldrh	r3, [r7, #4]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	f7ff fd84 	bl	800691c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	3301      	adds	r3, #1
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	8a3b      	ldrh	r3, [r7, #16]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d3c4      	bcc.n	8006dac <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8006e22:	88bb      	ldrh	r3, [r7, #4]
 8006e24:	3301      	adds	r3, #1
 8006e26:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	8a7b      	ldrh	r3, [r7, #18]
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d384      	bcc.n	8006d40 <DrawChar+0x68>
  }
}
 8006e36:	bf00      	nop
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20001010 	.word	0x20001010
 8006e44:	20001014 	.word	0x20001014

08006e48 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af02      	add	r7, sp, #8
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8006e56:	4b1e      	ldr	r3, [pc, #120]	; (8006ed0 <LL_FillBuffer+0x88>)
 8006e58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e5c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	; (8006ed4 <LL_FillBuffer+0x8c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1d      	ldr	r2, [pc, #116]	; (8006ed8 <LL_FillBuffer+0x90>)
 8006e64:	2134      	movs	r1, #52	; 0x34
 8006e66:	fb01 f303 	mul.w	r3, r1, r3
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3348      	adds	r3, #72	; 0x48
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d103      	bne.n	8006e7c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8006e74:	4b16      	ldr	r3, [pc, #88]	; (8006ed0 <LL_FillBuffer+0x88>)
 8006e76:	2202      	movs	r2, #2
 8006e78:	609a      	str	r2, [r3, #8]
 8006e7a:	e002      	b.n	8006e82 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8006e7c:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <LL_FillBuffer+0x88>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8006e82:	4a13      	ldr	r2, [pc, #76]	; (8006ed0 <LL_FillBuffer+0x88>)
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8006e88:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <LL_FillBuffer+0x88>)
 8006e8a:	4a14      	ldr	r2, [pc, #80]	; (8006edc <LL_FillBuffer+0x94>)
 8006e8c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8006e8e:	4810      	ldr	r0, [pc, #64]	; (8006ed0 <LL_FillBuffer+0x88>)
 8006e90:	f001 fd2e 	bl	80088f0 <HAL_DMA2D_Init>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d115      	bne.n	8006ec6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8006e9a:	68f9      	ldr	r1, [r7, #12]
 8006e9c:	480c      	ldr	r0, [pc, #48]	; (8006ed0 <LL_FillBuffer+0x88>)
 8006e9e:	f001 ff95 	bl	8008dcc <HAL_DMA2D_ConfigLayer>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10e      	bne.n	8006ec6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69f9      	ldr	r1, [r7, #28]
 8006eb2:	4807      	ldr	r0, [pc, #28]	; (8006ed0 <LL_FillBuffer+0x88>)
 8006eb4:	f001 fd66 	bl	8008984 <HAL_DMA2D_Start>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d103      	bne.n	8006ec6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8006ebe:	210a      	movs	r1, #10
 8006ec0:	4803      	ldr	r0, [pc, #12]	; (8006ed0 <LL_FillBuffer+0x88>)
 8006ec2:	f001 fd8a 	bl	80089da <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000fd0 	.word	0x20000fd0
 8006ed4:	20001010 	.word	0x20001010
 8006ed8:	2001b940 	.word	0x2001b940
 8006edc:	4002b000 	.word	0x4002b000

08006ee0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006ee4:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006ee6:	4a2a      	ldr	r2, [pc, #168]	; (8006f90 <BSP_SDRAM_Init+0xb0>)
 8006ee8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8006eea:	4b2a      	ldr	r3, [pc, #168]	; (8006f94 <BSP_SDRAM_Init+0xb4>)
 8006eec:	2202      	movs	r2, #2
 8006eee:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8006ef0:	4b28      	ldr	r3, [pc, #160]	; (8006f94 <BSP_SDRAM_Init+0xb4>)
 8006ef2:	2207      	movs	r2, #7
 8006ef4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8006ef6:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <BSP_SDRAM_Init+0xb4>)
 8006ef8:	2204      	movs	r2, #4
 8006efa:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8006efc:	4b25      	ldr	r3, [pc, #148]	; (8006f94 <BSP_SDRAM_Init+0xb4>)
 8006efe:	2207      	movs	r2, #7
 8006f00:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8006f02:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <BSP_SDRAM_Init+0xb4>)
 8006f04:	2202      	movs	r2, #2
 8006f06:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8006f08:	4b22      	ldr	r3, [pc, #136]	; (8006f94 <BSP_SDRAM_Init+0xb4>)
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8006f0e:	4b21      	ldr	r3, [pc, #132]	; (8006f94 <BSP_SDRAM_Init+0xb4>)
 8006f10:	2202      	movs	r2, #2
 8006f12:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006f14:	4b1d      	ldr	r3, [pc, #116]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006f1a:	4b1c      	ldr	r3, [pc, #112]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006f20:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f22:	2204      	movs	r2, #4
 8006f24:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006f26:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f28:	2210      	movs	r2, #16
 8006f2a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f2e:	2240      	movs	r2, #64	; 0x40
 8006f30:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8006f32:	4b16      	ldr	r3, [pc, #88]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f38:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006f3a:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006f40:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f46:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006f48:	4b10      	ldr	r3, [pc, #64]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f4e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006f50:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006f56:	2100      	movs	r1, #0
 8006f58:	480c      	ldr	r0, [pc, #48]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f5a:	f000 f87f 	bl	800705c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006f5e:	490d      	ldr	r1, [pc, #52]	; (8006f94 <BSP_SDRAM_Init+0xb4>)
 8006f60:	480a      	ldr	r0, [pc, #40]	; (8006f8c <BSP_SDRAM_Init+0xac>)
 8006f62:	f007 fc92 	bl	800e88a <HAL_SDRAM_Init>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <BSP_SDRAM_Init+0xb8>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	e002      	b.n	8006f7a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006f74:	4b08      	ldr	r3, [pc, #32]	; (8006f98 <BSP_SDRAM_Init+0xb8>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006f7a:	f240 6003 	movw	r0, #1539	; 0x603
 8006f7e:	f000 f80d 	bl	8006f9c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8006f82:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <BSP_SDRAM_Init+0xb8>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	2001b9e8 	.word	0x2001b9e8
 8006f90:	a0000140 	.word	0xa0000140
 8006f94:	200010b0 	.word	0x200010b0
 8006f98:	20000068 	.word	0x20000068

08006f9c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006fa8:	4b2a      	ldr	r3, [pc, #168]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006fae:	4b29      	ldr	r3, [pc, #164]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fb0:	2210      	movs	r2, #16
 8006fb2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006fb4:	4b27      	ldr	r3, [pc, #156]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006fba:	4b26      	ldr	r3, [pc, #152]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fc4:	4923      	ldr	r1, [pc, #140]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fc6:	4824      	ldr	r0, [pc, #144]	; (8007058 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006fc8:	f007 fc93 	bl	800e8f2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006fcc:	2001      	movs	r0, #1
 8006fce:	f000 fbcb 	bl	8007768 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006fd2:	4b20      	ldr	r3, [pc, #128]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006fd8:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fda:	2210      	movs	r2, #16
 8006fdc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006fde:	4b1d      	ldr	r3, [pc, #116]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006fe4:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fee:	4919      	ldr	r1, [pc, #100]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ff0:	4819      	ldr	r0, [pc, #100]	; (8007058 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006ff2:	f007 fc7e 	bl	800e8f2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006ff6:	4b17      	ldr	r3, [pc, #92]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ff8:	2203      	movs	r2, #3
 8006ffa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006ffc:	4b15      	ldr	r3, [pc, #84]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ffe:	2210      	movs	r2, #16
 8007000:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8007002:	4b14      	ldr	r3, [pc, #80]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007004:	2208      	movs	r2, #8
 8007006:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007008:	4b12      	ldr	r3, [pc, #72]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800700a:	2200      	movs	r2, #0
 800700c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800700e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007012:	4910      	ldr	r1, [pc, #64]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007014:	4810      	ldr	r0, [pc, #64]	; (8007058 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007016:	f007 fc6c 	bl	800e8f2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800701a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800701e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8007020:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007022:	2204      	movs	r2, #4
 8007024:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007026:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007028:	2210      	movs	r2, #16
 800702a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800702c:	4b09      	ldr	r3, [pc, #36]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800702e:	2201      	movs	r2, #1
 8007030:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4a07      	ldr	r2, [pc, #28]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007036:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800703c:	4905      	ldr	r1, [pc, #20]	; (8007054 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800703e:	4806      	ldr	r0, [pc, #24]	; (8007058 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007040:	f007 fc57 	bl	800e8f2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	4804      	ldr	r0, [pc, #16]	; (8007058 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007048:	f007 fc7e 	bl	800e948 <HAL_SDRAM_ProgramRefreshRate>
}
 800704c:	bf00      	nop
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	200010cc 	.word	0x200010cc
 8007058:	2001b9e8 	.word	0x2001b9e8

0800705c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800705c:	b580      	push	{r7, lr}
 800705e:	b090      	sub	sp, #64	; 0x40
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007066:	4b70      	ldr	r3, [pc, #448]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	4a6f      	ldr	r2, [pc, #444]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 800706c:	f043 0301 	orr.w	r3, r3, #1
 8007070:	6393      	str	r3, [r2, #56]	; 0x38
 8007072:	4b6d      	ldr	r3, [pc, #436]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800707e:	4b6a      	ldr	r3, [pc, #424]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	4a69      	ldr	r2, [pc, #420]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 8007084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007088:	6313      	str	r3, [r2, #48]	; 0x30
 800708a:	4b67      	ldr	r3, [pc, #412]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007096:	4b64      	ldr	r3, [pc, #400]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	4a63      	ldr	r2, [pc, #396]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 800709c:	f043 0304 	orr.w	r3, r3, #4
 80070a0:	6313      	str	r3, [r2, #48]	; 0x30
 80070a2:	4b61      	ldr	r3, [pc, #388]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	f003 0304 	and.w	r3, r3, #4
 80070aa:	623b      	str	r3, [r7, #32]
 80070ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80070ae:	4b5e      	ldr	r3, [pc, #376]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b2:	4a5d      	ldr	r2, [pc, #372]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070b4:	f043 0308 	orr.w	r3, r3, #8
 80070b8:	6313      	str	r3, [r2, #48]	; 0x30
 80070ba:	4b5b      	ldr	r3, [pc, #364]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	61fb      	str	r3, [r7, #28]
 80070c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80070c6:	4b58      	ldr	r3, [pc, #352]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	4a57      	ldr	r2, [pc, #348]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070cc:	f043 0310 	orr.w	r3, r3, #16
 80070d0:	6313      	str	r3, [r2, #48]	; 0x30
 80070d2:	4b55      	ldr	r3, [pc, #340]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	f003 0310 	and.w	r3, r3, #16
 80070da:	61bb      	str	r3, [r7, #24]
 80070dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80070de:	4b52      	ldr	r3, [pc, #328]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	4a51      	ldr	r2, [pc, #324]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070e4:	f043 0320 	orr.w	r3, r3, #32
 80070e8:	6313      	str	r3, [r2, #48]	; 0x30
 80070ea:	4b4f      	ldr	r3, [pc, #316]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80070f6:	4b4c      	ldr	r3, [pc, #304]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	4a4b      	ldr	r2, [pc, #300]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 80070fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007100:	6313      	str	r3, [r2, #48]	; 0x30
 8007102:	4b49      	ldr	r3, [pc, #292]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800710e:	4b46      	ldr	r3, [pc, #280]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 8007110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007112:	4a45      	ldr	r2, [pc, #276]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 8007114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007118:	6313      	str	r3, [r2, #48]	; 0x30
 800711a:	4b43      	ldr	r3, [pc, #268]	; (8007228 <BSP_SDRAM_MspInit+0x1cc>)
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007126:	2302      	movs	r3, #2
 8007128:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800712a:	2301      	movs	r3, #1
 800712c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800712e:	2302      	movs	r3, #2
 8007130:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007132:	230c      	movs	r3, #12
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8007136:	2308      	movs	r3, #8
 8007138:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800713a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800713e:	4619      	mov	r1, r3
 8007140:	483a      	ldr	r0, [pc, #232]	; (800722c <BSP_SDRAM_MspInit+0x1d0>)
 8007142:	f001 ff71 	bl	8009028 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8007146:	f24c 7303 	movw	r3, #50947	; 0xc703
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800714c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007150:	4619      	mov	r1, r3
 8007152:	4837      	ldr	r0, [pc, #220]	; (8007230 <BSP_SDRAM_MspInit+0x1d4>)
 8007154:	f001 ff68 	bl	8009028 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007158:	f64f 7383 	movw	r3, #65411	; 0xff83
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800715e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007162:	4619      	mov	r1, r3
 8007164:	4833      	ldr	r0, [pc, #204]	; (8007234 <BSP_SDRAM_MspInit+0x1d8>)
 8007166:	f001 ff5f 	bl	8009028 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800716a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800716e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007174:	4619      	mov	r1, r3
 8007176:	4830      	ldr	r0, [pc, #192]	; (8007238 <BSP_SDRAM_MspInit+0x1dc>)
 8007178:	f001 ff56 	bl	8009028 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800717c:	f248 1333 	movw	r3, #33075	; 0x8133
 8007180:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007186:	4619      	mov	r1, r3
 8007188:	482c      	ldr	r0, [pc, #176]	; (800723c <BSP_SDRAM_MspInit+0x1e0>)
 800718a:	f001 ff4d 	bl	8009028 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800718e:	2328      	movs	r3, #40	; 0x28
 8007190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8007192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007196:	4619      	mov	r1, r3
 8007198:	4829      	ldr	r0, [pc, #164]	; (8007240 <BSP_SDRAM_MspInit+0x1e4>)
 800719a:	f001 ff45 	bl	8009028 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800719e:	4b29      	ldr	r3, [pc, #164]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80071a4:	4b27      	ldr	r3, [pc, #156]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071a6:	2280      	movs	r2, #128	; 0x80
 80071a8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80071aa:	4b26      	ldr	r3, [pc, #152]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071b0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80071b2:	4b24      	ldr	r3, [pc, #144]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071b8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80071ba:	4b22      	ldr	r3, [pc, #136]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071c0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80071c2:	4b20      	ldr	r3, [pc, #128]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80071c8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80071ca:	4b1e      	ldr	r3, [pc, #120]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80071d0:	4b1c      	ldr	r3, [pc, #112]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071d6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80071d8:	4b1a      	ldr	r3, [pc, #104]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071da:	2200      	movs	r2, #0
 80071dc:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80071de:	4b19      	ldr	r3, [pc, #100]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071e0:	2203      	movs	r2, #3
 80071e2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80071e4:	4b17      	ldr	r3, [pc, #92]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80071ea:	4b16      	ldr	r3, [pc, #88]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80071f0:	4b14      	ldr	r3, [pc, #80]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071f2:	4a15      	ldr	r2, [pc, #84]	; (8007248 <BSP_SDRAM_MspInit+0x1ec>)
 80071f4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a12      	ldr	r2, [pc, #72]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071fa:	631a      	str	r2, [r3, #48]	; 0x30
 80071fc:	4a11      	ldr	r2, [pc, #68]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8007202:	4810      	ldr	r0, [pc, #64]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 8007204:	f001 f84e 	bl	80082a4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8007208:	480e      	ldr	r0, [pc, #56]	; (8007244 <BSP_SDRAM_MspInit+0x1e8>)
 800720a:	f000 ff9d 	bl	8008148 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800720e:	2200      	movs	r2, #0
 8007210:	210f      	movs	r1, #15
 8007212:	2038      	movs	r0, #56	; 0x38
 8007214:	f000 fe0a 	bl	8007e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007218:	2038      	movs	r0, #56	; 0x38
 800721a:	f000 fe23 	bl	8007e64 <HAL_NVIC_EnableIRQ>
}
 800721e:	bf00      	nop
 8007220:	3740      	adds	r7, #64	; 0x40
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	40023800 	.word	0x40023800
 800722c:	40020800 	.word	0x40020800
 8007230:	40020c00 	.word	0x40020c00
 8007234:	40021000 	.word	0x40021000
 8007238:	40021400 	.word	0x40021400
 800723c:	40021800 	.word	0x40021800
 8007240:	40021c00 	.word	0x40021c00
 8007244:	200010dc 	.word	0x200010dc
 8007248:	40026410 	.word	0x40026410

0800724c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	460a      	mov	r2, r1
 8007256:	80fb      	strh	r3, [r7, #6]
 8007258:	4613      	mov	r3, r2
 800725a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8007260:	4a14      	ldr	r2, [pc, #80]	; (80072b4 <BSP_TS_Init+0x68>)
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8007266:	4a14      	ldr	r2, [pc, #80]	; (80072b8 <BSP_TS_Init+0x6c>)
 8007268:	88bb      	ldrh	r3, [r7, #4]
 800726a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800726c:	4b13      	ldr	r3, [pc, #76]	; (80072bc <BSP_TS_Init+0x70>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2070      	movs	r0, #112	; 0x70
 8007272:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007274:	4b11      	ldr	r3, [pc, #68]	; (80072bc <BSP_TS_Init+0x70>)
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	2070      	movs	r0, #112	; 0x70
 800727a:	4798      	blx	r3
 800727c:	4603      	mov	r3, r0
 800727e:	2b51      	cmp	r3, #81	; 0x51
 8007280:	d111      	bne.n	80072a6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <BSP_TS_Init+0x74>)
 8007284:	4a0d      	ldr	r2, [pc, #52]	; (80072bc <BSP_TS_Init+0x70>)
 8007286:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8007288:	4b0e      	ldr	r3, [pc, #56]	; (80072c4 <BSP_TS_Init+0x78>)
 800728a:	2270      	movs	r2, #112	; 0x70
 800728c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800728e:	4b0e      	ldr	r3, [pc, #56]	; (80072c8 <BSP_TS_Init+0x7c>)
 8007290:	2208      	movs	r2, #8
 8007292:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007294:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <BSP_TS_Init+0x74>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	4a0a      	ldr	r2, [pc, #40]	; (80072c4 <BSP_TS_Init+0x78>)
 800729c:	7812      	ldrb	r2, [r2, #0]
 800729e:	b292      	uxth	r2, r2
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	e001      	b.n	80072aa <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80072a6:	2303      	movs	r3, #3
 80072a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20001140 	.word	0x20001140
 80072b8:	20001142 	.word	0x20001142
 80072bc:	20000004 	.word	0x20000004
 80072c0:	2000113c 	.word	0x2000113c
 80072c4:	20001145 	.word	0x20001145
 80072c8:	20001144 	.word	0x20001144

080072cc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80072cc:	b590      	push	{r4, r7, lr}
 80072ce:	b097      	sub	sp, #92	; 0x5c
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80072e6:	4b97      	ldr	r3, [pc, #604]	; (8007544 <BSP_TS_GetState+0x278>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	4a96      	ldr	r2, [pc, #600]	; (8007548 <BSP_TS_GetState+0x27c>)
 80072ee:	7812      	ldrb	r2, [r2, #0]
 80072f0:	b292      	uxth	r2, r2
 80072f2:	4610      	mov	r0, r2
 80072f4:	4798      	blx	r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	461a      	mov	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 81a8 	beq.w	8007658 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8007308:	2300      	movs	r3, #0
 800730a:	64bb      	str	r3, [r7, #72]	; 0x48
 800730c:	e197      	b.n	800763e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800730e:	4b8d      	ldr	r3, [pc, #564]	; (8007544 <BSP_TS_GetState+0x278>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	4a8c      	ldr	r2, [pc, #560]	; (8007548 <BSP_TS_GetState+0x27c>)
 8007316:	7812      	ldrb	r2, [r2, #0]
 8007318:	b290      	uxth	r0, r2
 800731a:	f107 0120 	add.w	r1, r7, #32
 800731e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007320:	0052      	lsls	r2, r2, #1
 8007322:	188c      	adds	r4, r1, r2
 8007324:	f107 0114 	add.w	r1, r7, #20
 8007328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800732a:	0052      	lsls	r2, r2, #1
 800732c:	440a      	add	r2, r1
 800732e:	4621      	mov	r1, r4
 8007330:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8007332:	4b86      	ldr	r3, [pc, #536]	; (800754c <BSP_TS_GetState+0x280>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d11b      	bne.n	8007372 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800733a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007342:	4413      	add	r3, r2
 8007344:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007350:	440b      	add	r3, r1
 8007352:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8007356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800735e:	4413      	add	r3, r2
 8007360:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800736c:	440b      	add	r3, r1
 800736e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8007372:	4b76      	ldr	r3, [pc, #472]	; (800754c <BSP_TS_GetState+0x280>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d010      	beq.n	80073a0 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800737e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007386:	4413      	add	r3, r2
 8007388:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800738c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8007390:	b29a      	uxth	r2, r3
 8007392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800739a:	440b      	add	r3, r1
 800739c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80073a0:	4b6a      	ldr	r3, [pc, #424]	; (800754c <BSP_TS_GetState+0x280>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d010      	beq.n	80073ce <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 80073ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80073b4:	4413      	add	r3, r2
 80073b6:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80073ba:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80073be:	b29a      	uxth	r2, r3
 80073c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80073c8:	440b      	add	r3, r1
 80073ca:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80073ce:	4b5f      	ldr	r3, [pc, #380]	; (800754c <BSP_TS_GetState+0x280>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01b      	beq.n	8007412 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 80073da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80073e2:	4413      	add	r3, r2
 80073e4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80073e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80073f0:	440b      	add	r3, r1
 80073f2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80073f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80073fe:	4413      	add	r3, r2
 8007400:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800740c:	440b      	add	r3, r1
 800740e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8007412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800741a:	4413      	add	r3, r2
 800741c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007420:	4619      	mov	r1, r3
 8007422:	4a4b      	ldr	r2, [pc, #300]	; (8007550 <BSP_TS_GetState+0x284>)
 8007424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742a:	4299      	cmp	r1, r3
 800742c:	d90e      	bls.n	800744c <BSP_TS_GetState+0x180>
 800742e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007436:	4413      	add	r3, r2
 8007438:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800743c:	4944      	ldr	r1, [pc, #272]	; (8007550 <BSP_TS_GetState+0x284>)
 800743e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007440:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007444:	b29b      	uxth	r3, r3
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	b29b      	uxth	r3, r3
 800744a:	e00d      	b.n	8007468 <BSP_TS_GetState+0x19c>
 800744c:	4a40      	ldr	r2, [pc, #256]	; (8007550 <BSP_TS_GetState+0x284>)
 800744e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007454:	b29a      	uxth	r2, r3
 8007456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800745e:	440b      	add	r3, r1
 8007460:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	b29b      	uxth	r3, r3
 8007468:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800746c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007474:	4413      	add	r3, r2
 8007476:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800747a:	4619      	mov	r1, r3
 800747c:	4a35      	ldr	r2, [pc, #212]	; (8007554 <BSP_TS_GetState+0x288>)
 800747e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007484:	4299      	cmp	r1, r3
 8007486:	d90e      	bls.n	80074a6 <BSP_TS_GetState+0x1da>
 8007488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007490:	4413      	add	r3, r2
 8007492:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8007496:	492f      	ldr	r1, [pc, #188]	; (8007554 <BSP_TS_GetState+0x288>)
 8007498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800749a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	e00d      	b.n	80074c2 <BSP_TS_GetState+0x1f6>
 80074a6:	4a2b      	ldr	r2, [pc, #172]	; (8007554 <BSP_TS_GetState+0x288>)
 80074a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80074b8:	440b      	add	r3, r1
 80074ba:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80074c6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80074ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80074ce:	4413      	add	r3, r2
 80074d0:	2b05      	cmp	r3, #5
 80074d2:	dd17      	ble.n	8007504 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 80074d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80074dc:	4413      	add	r3, r2
 80074de:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80074e2:	4619      	mov	r1, r3
 80074e4:	4a1a      	ldr	r2, [pc, #104]	; (8007550 <BSP_TS_GetState+0x284>)
 80074e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80074ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80074f4:	4413      	add	r3, r2
 80074f6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80074fa:	4619      	mov	r1, r3
 80074fc:	4a15      	ldr	r2, [pc, #84]	; (8007554 <BSP_TS_GetState+0x288>)
 80074fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007500:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8007504:	4b10      	ldr	r3, [pc, #64]	; (8007548 <BSP_TS_GetState+0x27c>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b70      	cmp	r3, #112	; 0x70
 800750a:	d125      	bne.n	8007558 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800750c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007514:	4413      	add	r3, r2
 8007516:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	4413      	add	r3, r2
 8007522:	460a      	mov	r2, r1
 8007524:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8007526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800752e:	4413      	add	r3, r2
 8007530:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007538:	3304      	adds	r3, #4
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	4413      	add	r3, r2
 800753e:	460a      	mov	r2, r1
 8007540:	809a      	strh	r2, [r3, #4]
 8007542:	e02c      	b.n	800759e <BSP_TS_GetState+0x2d2>
 8007544:	2000113c 	.word	0x2000113c
 8007548:	20001145 	.word	0x20001145
 800754c:	20001144 	.word	0x20001144
 8007550:	20001148 	.word	0x20001148
 8007554:	2000115c 	.word	0x2000115c
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8007558:	4b42      	ldr	r3, [pc, #264]	; (8007664 <BSP_TS_GetState+0x398>)
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	4619      	mov	r1, r3
 800755e:	4a42      	ldr	r2, [pc, #264]	; (8007668 <BSP_TS_GetState+0x39c>)
 8007560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007566:	fb03 f301 	mul.w	r3, r3, r1
 800756a:	0b1b      	lsrs	r3, r3, #12
 800756c:	b299      	uxth	r1, r3
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	4413      	add	r3, r2
 8007576:	460a      	mov	r2, r1
 8007578:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800757a:	4b3c      	ldr	r3, [pc, #240]	; (800766c <BSP_TS_GetState+0x3a0>)
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	4619      	mov	r1, r3
 8007580:	4a3b      	ldr	r2, [pc, #236]	; (8007670 <BSP_TS_GetState+0x3a4>)
 8007582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007588:	fb03 f301 	mul.w	r3, r3, r1
 800758c:	0b1b      	lsrs	r3, r3, #12
 800758e:	b299      	uxth	r1, r3
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007594:	3304      	adds	r3, #4
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	4413      	add	r3, r2
 800759a:	460a      	mov	r2, r1
 800759c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800759e:	4b35      	ldr	r3, [pc, #212]	; (8007674 <BSP_TS_GetState+0x3a8>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b298      	uxth	r0, r3
 80075a4:	f107 010c 	add.w	r1, r7, #12
 80075a8:	f107 0210 	add.w	r2, r7, #16
 80075ac:	f107 0308 	add.w	r3, r7, #8
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	460b      	mov	r3, r1
 80075b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80075b6:	f7fc fc43 	bl	8003e40 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	b2d9      	uxtb	r1, r3
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c2:	4413      	add	r3, r2
 80075c4:	3316      	adds	r3, #22
 80075c6:	460a      	mov	r2, r1
 80075c8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	b2d9      	uxtb	r1, r3
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d2:	4413      	add	r3, r2
 80075d4:	3320      	adds	r3, #32
 80075d6:	460a      	mov	r2, r1
 80075d8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d827      	bhi.n	8007630 <BSP_TS_GetState+0x364>
 80075e0:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <BSP_TS_GetState+0x31c>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	080075f9 	.word	0x080075f9
 80075ec:	08007607 	.word	0x08007607
 80075f0:	08007615 	.word	0x08007615
 80075f4:	08007623 	.word	0x08007623
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fc:	4413      	add	r3, r2
 80075fe:	331b      	adds	r3, #27
 8007600:	2201      	movs	r2, #1
 8007602:	701a      	strb	r2, [r3, #0]
          break;
 8007604:	e018      	b.n	8007638 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800760a:	4413      	add	r3, r2
 800760c:	331b      	adds	r3, #27
 800760e:	2202      	movs	r2, #2
 8007610:	701a      	strb	r2, [r3, #0]
          break;
 8007612:	e011      	b.n	8007638 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007618:	4413      	add	r3, r2
 800761a:	331b      	adds	r3, #27
 800761c:	2203      	movs	r2, #3
 800761e:	701a      	strb	r2, [r3, #0]
          break;
 8007620:	e00a      	b.n	8007638 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007626:	4413      	add	r3, r2
 8007628:	331b      	adds	r3, #27
 800762a:	2200      	movs	r2, #0
 800762c:	701a      	strb	r2, [r3, #0]
          break;
 800762e:	e003      	b.n	8007638 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8007636:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8007638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800763a:	3301      	adds	r3, #1
 800763c:	64bb      	str	r3, [r7, #72]	; 0x48
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007646:	4293      	cmp	r3, r2
 8007648:	f4ff ae61 	bcc.w	800730e <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f813 	bl	8007678 <BSP_TS_Get_GestureId>
 8007652:	4603      	mov	r3, r0
 8007654:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8007658:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800765c:	4618      	mov	r0, r3
 800765e:	3754      	adds	r7, #84	; 0x54
 8007660:	46bd      	mov	sp, r7
 8007662:	bd90      	pop	{r4, r7, pc}
 8007664:	20001140 	.word	0x20001140
 8007668:	20001148 	.word	0x20001148
 800766c:	20001142 	.word	0x20001142
 8007670:	2000115c 	.word	0x2000115c
 8007674:	20001145 	.word	0x20001145

08007678 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8007688:	4b1f      	ldr	r3, [pc, #124]	; (8007708 <BSP_TS_Get_GestureId+0x90>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	f107 0208 	add.w	r2, r7, #8
 8007692:	4611      	mov	r1, r2
 8007694:	4618      	mov	r0, r3
 8007696:	f7fc fbba 	bl	8003e0e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2b18      	cmp	r3, #24
 800769e:	d01b      	beq.n	80076d8 <BSP_TS_Get_GestureId+0x60>
 80076a0:	2b18      	cmp	r3, #24
 80076a2:	d806      	bhi.n	80076b2 <BSP_TS_Get_GestureId+0x3a>
 80076a4:	2b10      	cmp	r3, #16
 80076a6:	d00f      	beq.n	80076c8 <BSP_TS_Get_GestureId+0x50>
 80076a8:	2b14      	cmp	r3, #20
 80076aa:	d011      	beq.n	80076d0 <BSP_TS_Get_GestureId+0x58>
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <BSP_TS_Get_GestureId+0x48>
 80076b0:	e022      	b.n	80076f8 <BSP_TS_Get_GestureId+0x80>
 80076b2:	2b40      	cmp	r3, #64	; 0x40
 80076b4:	d018      	beq.n	80076e8 <BSP_TS_Get_GestureId+0x70>
 80076b6:	2b49      	cmp	r3, #73	; 0x49
 80076b8:	d01a      	beq.n	80076f0 <BSP_TS_Get_GestureId+0x78>
 80076ba:	2b1c      	cmp	r3, #28
 80076bc:	d010      	beq.n	80076e0 <BSP_TS_Get_GestureId+0x68>
 80076be:	e01b      	b.n	80076f8 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80076c6:	e01a      	b.n	80076fe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80076ce:	e016      	b.n	80076fe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80076d6:	e012      	b.n	80076fe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2203      	movs	r2, #3
 80076dc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80076de:	e00e      	b.n	80076fe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2204      	movs	r2, #4
 80076e4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80076e6:	e00a      	b.n	80076fe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2205      	movs	r2, #5
 80076ec:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80076ee:	e006      	b.n	80076fe <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2206      	movs	r2, #6
 80076f4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80076f6:	e002      	b.n	80076fe <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	73fb      	strb	r3, [r7, #15]
      break;
 80076fc:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20001145 	.word	0x20001145

0800770c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007710:	2003      	movs	r0, #3
 8007712:	f000 fb80 	bl	8007e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007716:	2000      	movs	r0, #0
 8007718:	f7fc f8a4 	bl	8003864 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800771c:	f7fb f97a 	bl	8002a14 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <HAL_IncTick+0x20>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	4b06      	ldr	r3, [pc, #24]	; (800774c <HAL_IncTick+0x24>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4413      	add	r3, r2
 8007738:	4a04      	ldr	r2, [pc, #16]	; (800774c <HAL_IncTick+0x24>)
 800773a:	6013      	str	r3, [r2, #0]
}
 800773c:	bf00      	nop
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	20000070 	.word	0x20000070
 800774c:	2001ba1c 	.word	0x2001ba1c

08007750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  return uwTick;
 8007754:	4b03      	ldr	r3, [pc, #12]	; (8007764 <HAL_GetTick+0x14>)
 8007756:	681b      	ldr	r3, [r3, #0]
}
 8007758:	4618      	mov	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	2001ba1c 	.word	0x2001ba1c

08007768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007770:	f7ff ffee 	bl	8007750 <HAL_GetTick>
 8007774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d005      	beq.n	800778e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007782:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <HAL_Delay+0x40>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4413      	add	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800778e:	bf00      	nop
 8007790:	f7ff ffde 	bl	8007750 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	429a      	cmp	r2, r3
 800779e:	d8f7      	bhi.n	8007790 <HAL_Delay+0x28>
  {
  }
}
 80077a0:	bf00      	nop
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000070 	.word	0x20000070

080077ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e031      	b.n	8007826 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d109      	bne.n	80077de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fb f94a 	bl	8002a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	f003 0310 	and.w	r3, r3, #16
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d116      	bne.n	8007818 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ee:	4b10      	ldr	r3, [pc, #64]	; (8007830 <HAL_ADC_Init+0x84>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	f043 0202 	orr.w	r2, r3, #2
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f964 	bl	8007ac8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	f043 0201 	orr.w	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	641a      	str	r2, [r3, #64]	; 0x40
 8007816:	e001      	b.n	800781c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	ffffeefd 	.word	0xffffeefd

08007834 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_ADC_ConfigChannel+0x1c>
 800784c:	2302      	movs	r3, #2
 800784e:	e12a      	b.n	8007aa6 <HAL_ADC_ConfigChannel+0x272>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b09      	cmp	r3, #9
 800785e:	d93a      	bls.n	80078d6 <HAL_ADC_ConfigChannel+0xa2>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007868:	d035      	beq.n	80078d6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68d9      	ldr	r1, [r3, #12]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	4613      	mov	r3, r2
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	4413      	add	r3, r2
 800787e:	3b1e      	subs	r3, #30
 8007880:	2207      	movs	r2, #7
 8007882:	fa02 f303 	lsl.w	r3, r2, r3
 8007886:	43da      	mvns	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	400a      	ands	r2, r1
 800788e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a87      	ldr	r2, [pc, #540]	; (8007ab4 <HAL_ADC_ConfigChannel+0x280>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d10a      	bne.n	80078b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68d9      	ldr	r1, [r3, #12]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	061a      	lsls	r2, r3, #24
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80078ae:	e035      	b.n	800791c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68d9      	ldr	r1, [r3, #12]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	4618      	mov	r0, r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	4403      	add	r3, r0
 80078c8:	3b1e      	subs	r3, #30
 80078ca:	409a      	lsls	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80078d4:	e022      	b.n	800791c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6919      	ldr	r1, [r3, #16]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	4613      	mov	r3, r2
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	4413      	add	r3, r2
 80078ea:	2207      	movs	r2, #7
 80078ec:	fa02 f303 	lsl.w	r3, r2, r3
 80078f0:	43da      	mvns	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	400a      	ands	r2, r1
 80078f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6919      	ldr	r1, [r3, #16]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	b29b      	uxth	r3, r3
 800790a:	4618      	mov	r0, r3
 800790c:	4603      	mov	r3, r0
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	4403      	add	r3, r0
 8007912:	409a      	lsls	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2b06      	cmp	r3, #6
 8007922:	d824      	bhi.n	800796e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	3b05      	subs	r3, #5
 8007936:	221f      	movs	r2, #31
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	43da      	mvns	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	400a      	ands	r2, r1
 8007944:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	4618      	mov	r0, r3
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	3b05      	subs	r3, #5
 8007960:	fa00 f203 	lsl.w	r2, r0, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	635a      	str	r2, [r3, #52]	; 0x34
 800796c:	e04c      	b.n	8007a08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b0c      	cmp	r3, #12
 8007974:	d824      	bhi.n	80079c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	4613      	mov	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	3b23      	subs	r3, #35	; 0x23
 8007988:	221f      	movs	r2, #31
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	43da      	mvns	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	400a      	ands	r2, r1
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	4618      	mov	r0, r3
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	3b23      	subs	r3, #35	; 0x23
 80079b2:	fa00 f203 	lsl.w	r2, r0, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	631a      	str	r2, [r3, #48]	; 0x30
 80079be:	e023      	b.n	8007a08 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	3b41      	subs	r3, #65	; 0x41
 80079d2:	221f      	movs	r2, #31
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	43da      	mvns	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	400a      	ands	r2, r1
 80079e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	4618      	mov	r0, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	3b41      	subs	r3, #65	; 0x41
 80079fc:	fa00 f203 	lsl.w	r2, r0, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a2a      	ldr	r2, [pc, #168]	; (8007ab8 <HAL_ADC_ConfigChannel+0x284>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d10a      	bne.n	8007a28 <HAL_ADC_ConfigChannel+0x1f4>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a1a:	d105      	bne.n	8007a28 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007a1c:	4b27      	ldr	r3, [pc, #156]	; (8007abc <HAL_ADC_ConfigChannel+0x288>)
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4a26      	ldr	r2, [pc, #152]	; (8007abc <HAL_ADC_ConfigChannel+0x288>)
 8007a22:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007a26:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a22      	ldr	r2, [pc, #136]	; (8007ab8 <HAL_ADC_ConfigChannel+0x284>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d109      	bne.n	8007a46 <HAL_ADC_ConfigChannel+0x212>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b12      	cmp	r3, #18
 8007a38:	d105      	bne.n	8007a46 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007a3a:	4b20      	ldr	r3, [pc, #128]	; (8007abc <HAL_ADC_ConfigChannel+0x288>)
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	4a1f      	ldr	r2, [pc, #124]	; (8007abc <HAL_ADC_ConfigChannel+0x288>)
 8007a40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1b      	ldr	r2, [pc, #108]	; (8007ab8 <HAL_ADC_ConfigChannel+0x284>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d125      	bne.n	8007a9c <HAL_ADC_ConfigChannel+0x268>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a17      	ldr	r2, [pc, #92]	; (8007ab4 <HAL_ADC_ConfigChannel+0x280>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d003      	beq.n	8007a62 <HAL_ADC_ConfigChannel+0x22e>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b11      	cmp	r3, #17
 8007a60:	d11c      	bne.n	8007a9c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007a62:	4b16      	ldr	r3, [pc, #88]	; (8007abc <HAL_ADC_ConfigChannel+0x288>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	4a15      	ldr	r2, [pc, #84]	; (8007abc <HAL_ADC_ConfigChannel+0x288>)
 8007a68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a10      	ldr	r2, [pc, #64]	; (8007ab4 <HAL_ADC_ConfigChannel+0x280>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d111      	bne.n	8007a9c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007a78:	4b11      	ldr	r3, [pc, #68]	; (8007ac0 <HAL_ADC_ConfigChannel+0x28c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <HAL_ADC_ConfigChannel+0x290>)
 8007a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a82:	0c9a      	lsrs	r2, r3, #18
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007a8e:	e002      	b.n	8007a96 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1f9      	bne.n	8007a90 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	10000012 	.word	0x10000012
 8007ab8:	40012000 	.word	0x40012000
 8007abc:	40012300 	.word	0x40012300
 8007ac0:	20000000 	.word	0x20000000
 8007ac4:	431bde83 	.word	0x431bde83

08007ac8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007ad0:	4b78      	ldr	r3, [pc, #480]	; (8007cb4 <ADC_Init+0x1ec>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	4a77      	ldr	r2, [pc, #476]	; (8007cb4 <ADC_Init+0x1ec>)
 8007ad6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007ada:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007adc:	4b75      	ldr	r3, [pc, #468]	; (8007cb4 <ADC_Init+0x1ec>)
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	4973      	ldr	r1, [pc, #460]	; (8007cb4 <ADC_Init+0x1ec>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6859      	ldr	r1, [r3, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	021a      	lsls	r2, r3, #8
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6859      	ldr	r1, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689a      	ldr	r2, [r3, #8]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6899      	ldr	r1, [r3, #8]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b56:	4a58      	ldr	r2, [pc, #352]	; (8007cb8 <ADC_Init+0x1f0>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d022      	beq.n	8007ba2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6899      	ldr	r1, [r3, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6899      	ldr	r1, [r3, #8]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	609a      	str	r2, [r3, #8]
 8007ba0:	e00f      	b.n	8007bc2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0202 	bic.w	r2, r2, #2
 8007bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6899      	ldr	r1, [r3, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	005a      	lsls	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01b      	beq.n	8007c28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6859      	ldr	r1, [r3, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	035a      	lsls	r2, r3, #13
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
 8007c26:	e007      	b.n	8007c38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	051a      	lsls	r2, r3, #20
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6899      	ldr	r1, [r3, #8]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c7a:	025a      	lsls	r2, r3, #9
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6899      	ldr	r1, [r3, #8]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	029a      	lsls	r2, r3, #10
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	609a      	str	r2, [r3, #8]
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	40012300 	.word	0x40012300
 8007cb8:	0f000001 	.word	0x0f000001

08007cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ccc:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <__NVIC_SetPriorityGrouping+0x40>)
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007cd8:	4013      	ands	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007ce4:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <__NVIC_SetPriorityGrouping+0x44>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007cea:	4a04      	ldr	r2, [pc, #16]	; (8007cfc <__NVIC_SetPriorityGrouping+0x40>)
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	60d3      	str	r3, [r2, #12]
}
 8007cf0:	bf00      	nop
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	e000ed00 	.word	0xe000ed00
 8007d00:	05fa0000 	.word	0x05fa0000

08007d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d08:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <__NVIC_GetPriorityGrouping+0x18>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	0a1b      	lsrs	r3, r3, #8
 8007d0e:	f003 0307 	and.w	r3, r3, #7
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	e000ed00 	.word	0xe000ed00

08007d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	db0b      	blt.n	8007d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	f003 021f 	and.w	r2, r3, #31
 8007d38:	4907      	ldr	r1, [pc, #28]	; (8007d58 <__NVIC_EnableIRQ+0x38>)
 8007d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	2001      	movs	r0, #1
 8007d42:	fa00 f202 	lsl.w	r2, r0, r2
 8007d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	e000e100 	.word	0xe000e100

08007d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	6039      	str	r1, [r7, #0]
 8007d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	db0a      	blt.n	8007d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	490c      	ldr	r1, [pc, #48]	; (8007da8 <__NVIC_SetPriority+0x4c>)
 8007d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d7a:	0112      	lsls	r2, r2, #4
 8007d7c:	b2d2      	uxtb	r2, r2
 8007d7e:	440b      	add	r3, r1
 8007d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d84:	e00a      	b.n	8007d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	4908      	ldr	r1, [pc, #32]	; (8007dac <__NVIC_SetPriority+0x50>)
 8007d8c:	79fb      	ldrb	r3, [r7, #7]
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	3b04      	subs	r3, #4
 8007d94:	0112      	lsls	r2, r2, #4
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	440b      	add	r3, r1
 8007d9a:	761a      	strb	r2, [r3, #24]
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	e000e100 	.word	0xe000e100
 8007dac:	e000ed00 	.word	0xe000ed00

08007db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b089      	sub	sp, #36	; 0x24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f003 0307 	and.w	r3, r3, #7
 8007dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	f1c3 0307 	rsb	r3, r3, #7
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	bf28      	it	cs
 8007dce:	2304      	movcs	r3, #4
 8007dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	2b06      	cmp	r3, #6
 8007dd8:	d902      	bls.n	8007de0 <NVIC_EncodePriority+0x30>
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	3b03      	subs	r3, #3
 8007dde:	e000      	b.n	8007de2 <NVIC_EncodePriority+0x32>
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007de4:	f04f 32ff 	mov.w	r2, #4294967295
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	fa02 f303 	lsl.w	r3, r2, r3
 8007dee:	43da      	mvns	r2, r3
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	401a      	ands	r2, r3
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007df8:	f04f 31ff 	mov.w	r1, #4294967295
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007e02:	43d9      	mvns	r1, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e08:	4313      	orrs	r3, r2
         );
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3724      	adds	r7, #36	; 0x24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff ff4c 	bl	8007cbc <__NVIC_SetPriorityGrouping>
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007e3e:	f7ff ff61 	bl	8007d04 <__NVIC_GetPriorityGrouping>
 8007e42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	6978      	ldr	r0, [r7, #20]
 8007e4a:	f7ff ffb1 	bl	8007db0 <NVIC_EncodePriority>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e54:	4611      	mov	r1, r2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7ff ff80 	bl	8007d5c <__NVIC_SetPriority>
}
 8007e5c:	bf00      	nop
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff ff54 	bl	8007d20 <__NVIC_EnableIRQ>
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e054      	b.n	8007f3c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7f5b      	ldrb	r3, [r3, #29]
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d105      	bne.n	8007ea8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fa fe38 	bl	8002b18 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	791b      	ldrb	r3, [r3, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10c      	bne.n	8007ed0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a22      	ldr	r2, [pc, #136]	; (8007f44 <HAL_CRC_Init+0xc4>)
 8007ebc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0218 	bic.w	r2, r2, #24
 8007ecc:	609a      	str	r2, [r3, #8]
 8007ece:	e00c      	b.n	8007eea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6899      	ldr	r1, [r3, #8]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f834 	bl	8007f48 <HAL_CRCEx_Polynomial_Set>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e028      	b.n	8007f3c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	795b      	ldrb	r3, [r3, #5]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d105      	bne.n	8007efe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8007efa:	611a      	str	r2, [r3, #16]
 8007efc:	e004      	b.n	8007f08 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	6912      	ldr	r2, [r2, #16]
 8007f06:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695a      	ldr	r2, [r3, #20]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699a      	ldr	r2, [r3, #24]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	04c11db7 	.word	0x04c11db7

08007f48 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007f58:	231f      	movs	r3, #31
 8007f5a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007f5c:	bf00      	nop
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	1e5a      	subs	r2, r3, #1
 8007f62:	613a      	str	r2, [r7, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d009      	beq.n	8007f7c <HAL_CRCEx_Polynomial_Set+0x34>
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	f003 031f 	and.w	r3, r3, #31
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	fa22 f303 	lsr.w	r3, r2, r3
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0f0      	beq.n	8007f5e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b18      	cmp	r3, #24
 8007f80:	d846      	bhi.n	8008010 <HAL_CRCEx_Polynomial_Set+0xc8>
 8007f82:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <HAL_CRCEx_Polynomial_Set+0x40>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08008017 	.word	0x08008017
 8007f8c:	08008011 	.word	0x08008011
 8007f90:	08008011 	.word	0x08008011
 8007f94:	08008011 	.word	0x08008011
 8007f98:	08008011 	.word	0x08008011
 8007f9c:	08008011 	.word	0x08008011
 8007fa0:	08008011 	.word	0x08008011
 8007fa4:	08008011 	.word	0x08008011
 8007fa8:	08008005 	.word	0x08008005
 8007fac:	08008011 	.word	0x08008011
 8007fb0:	08008011 	.word	0x08008011
 8007fb4:	08008011 	.word	0x08008011
 8007fb8:	08008011 	.word	0x08008011
 8007fbc:	08008011 	.word	0x08008011
 8007fc0:	08008011 	.word	0x08008011
 8007fc4:	08008011 	.word	0x08008011
 8007fc8:	08007ff9 	.word	0x08007ff9
 8007fcc:	08008011 	.word	0x08008011
 8007fd0:	08008011 	.word	0x08008011
 8007fd4:	08008011 	.word	0x08008011
 8007fd8:	08008011 	.word	0x08008011
 8007fdc:	08008011 	.word	0x08008011
 8007fe0:	08008011 	.word	0x08008011
 8007fe4:	08008011 	.word	0x08008011
 8007fe8:	08007fed 	.word	0x08007fed
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	2b06      	cmp	r3, #6
 8007ff0:	d913      	bls.n	800801a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007ff6:	e010      	b.n	800801a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b07      	cmp	r3, #7
 8007ffc:	d90f      	bls.n	800801e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008002:	e00c      	b.n	800801e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2b0f      	cmp	r3, #15
 8008008:	d90b      	bls.n	8008022 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800800e:	e008      	b.n	8008022 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	75fb      	strb	r3, [r7, #23]
      break;
 8008014:	e006      	b.n	8008024 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008016:	bf00      	nop
 8008018:	e004      	b.n	8008024 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800801a:	bf00      	nop
 800801c:	e002      	b.n	8008024 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800801e:	bf00      	nop
 8008020:	e000      	b.n	8008024 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008022:	bf00      	nop
  }
  if (status == HAL_OK)
 8008024:	7dfb      	ldrb	r3, [r7, #23]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10d      	bne.n	8008046 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f023 0118 	bic.w	r1, r3, #24
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	430a      	orrs	r2, r1
 8008044:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008046:	7dfb      	ldrb	r3, [r7, #23]
}
 8008048:	4618      	mov	r0, r3
 800804a:	371c      	adds	r7, #28
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e069      	b.n	800813a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d102      	bne.n	8008078 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fa fd70 	bl	8002b58 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6819      	ldr	r1, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	4b2a      	ldr	r3, [pc, #168]	; (8008144 <HAL_DCMI_Init+0xf0>)
 800809a:	400b      	ands	r3, r1
 800809c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6819      	ldr	r1, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80080b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80080be:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80080ca:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80080d6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80080e2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2b10      	cmp	r3, #16
 80080f2:	d112      	bne.n	800811a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	7f1b      	ldrb	r3, [r3, #28]
 80080f8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	7f5b      	ldrb	r3, [r3, #29]
 80080fe:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8008100:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	7f9b      	ldrb	r3, [r3, #30]
 8008106:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8008108:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	7fdb      	ldrb	r3, [r3, #31]
 8008110:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8008116:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8008118:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 021e 	orr.w	r2, r2, #30
 8008128:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	ffe0f007 	.word	0xffe0f007

08008148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008154:	f7ff fafc 	bl	8007750 <HAL_GetTick>
 8008158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e099      	b.n	8008298 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 0201 	bic.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008184:	e00f      	b.n	80081a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008186:	f7ff fae3 	bl	8007750 <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	2b05      	cmp	r3, #5
 8008192:	d908      	bls.n	80081a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2203      	movs	r2, #3
 800819e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e078      	b.n	8008298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e8      	bne.n	8008186 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	4b38      	ldr	r3, [pc, #224]	; (80082a0 <HAL_DMA_Init+0x158>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d107      	bne.n	8008210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	4313      	orrs	r3, r2
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	4313      	orrs	r3, r2
 800820e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f023 0307 	bic.w	r3, r3, #7
 8008226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	4313      	orrs	r3, r2
 8008230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	2b04      	cmp	r3, #4
 8008238:	d117      	bne.n	800826a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00e      	beq.n	800826a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fad5 	bl	80087fc <DMA_CheckFifoParam>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d008      	beq.n	800826a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2240      	movs	r2, #64	; 0x40
 800825c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008266:	2301      	movs	r3, #1
 8008268:	e016      	b.n	8008298 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa8c 	bl	8008790 <DMA_CalcBaseAndBitshift>
 8008278:	4603      	mov	r3, r0
 800827a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008280:	223f      	movs	r2, #63	; 0x3f
 8008282:	409a      	lsls	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	f010803f 	.word	0xf010803f

080082a4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e050      	b.n	8008358 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d101      	bne.n	80082c6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80082c2:	2302      	movs	r3, #2
 80082c4:	e048      	b.n	8008358 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 0201 	bic.w	r2, r2, #1
 80082d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2200      	movs	r2, #0
 80082e4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2200      	movs	r2, #0
 80082ec:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2200      	movs	r2, #0
 80082f4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2221      	movs	r2, #33	; 0x21
 8008304:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa42 	bl	8008790 <DMA_CalcBaseAndBitshift>
 800830c:	4603      	mov	r3, r0
 800830e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008314:	223f      	movs	r2, #63	; 0x3f
 8008316:	409a      	lsls	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008376:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800837e:	2b01      	cmp	r3, #1
 8008380:	d101      	bne.n	8008386 <HAL_DMA_Start_IT+0x26>
 8008382:	2302      	movs	r3, #2
 8008384:	e048      	b.n	8008418 <HAL_DMA_Start_IT+0xb8>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b01      	cmp	r3, #1
 8008398:	d137      	bne.n	800840a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2202      	movs	r2, #2
 800839e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 f9c0 	bl	8008734 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b8:	223f      	movs	r2, #63	; 0x3f
 80083ba:	409a      	lsls	r2, r3
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0216 	orr.w	r2, r2, #22
 80083ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	695a      	ldr	r2, [r3, #20]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083de:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d007      	beq.n	80083f8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0208 	orr.w	r2, r2, #8
 80083f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	e005      	b.n	8008416 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008412:	2302      	movs	r3, #2
 8008414:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800842c:	4b92      	ldr	r3, [pc, #584]	; (8008678 <HAL_DMA_IRQHandler+0x258>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a92      	ldr	r2, [pc, #584]	; (800867c <HAL_DMA_IRQHandler+0x25c>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	0a9b      	lsrs	r3, r3, #10
 8008438:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800844a:	2208      	movs	r2, #8
 800844c:	409a      	lsls	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4013      	ands	r3, r2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01a      	beq.n	800848c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0304 	and.w	r3, r3, #4
 8008460:	2b00      	cmp	r3, #0
 8008462:	d013      	beq.n	800848c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0204 	bic.w	r2, r2, #4
 8008472:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008478:	2208      	movs	r2, #8
 800847a:	409a      	lsls	r2, r3
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008484:	f043 0201 	orr.w	r2, r3, #1
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008490:	2201      	movs	r2, #1
 8008492:	409a      	lsls	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4013      	ands	r3, r2
 8008498:	2b00      	cmp	r3, #0
 800849a:	d012      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00b      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ae:	2201      	movs	r2, #1
 80084b0:	409a      	lsls	r2, r3
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ba:	f043 0202 	orr.w	r2, r3, #2
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c6:	2204      	movs	r2, #4
 80084c8:	409a      	lsls	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4013      	ands	r3, r2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d012      	beq.n	80084f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e4:	2204      	movs	r2, #4
 80084e6:	409a      	lsls	r2, r3
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f0:	f043 0204 	orr.w	r2, r3, #4
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fc:	2210      	movs	r2, #16
 80084fe:	409a      	lsls	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4013      	ands	r3, r2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d043      	beq.n	8008590 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d03c      	beq.n	8008590 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800851a:	2210      	movs	r2, #16
 800851c:	409a      	lsls	r2, r3
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d018      	beq.n	8008562 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d108      	bne.n	8008550 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d024      	beq.n	8008590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	4798      	blx	r3
 800854e:	e01f      	b.n	8008590 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008554:	2b00      	cmp	r3, #0
 8008556:	d01b      	beq.n	8008590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	4798      	blx	r3
 8008560:	e016      	b.n	8008590 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856c:	2b00      	cmp	r3, #0
 800856e:	d107      	bne.n	8008580 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0208 	bic.w	r2, r2, #8
 800857e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008594:	2220      	movs	r2, #32
 8008596:	409a      	lsls	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	4013      	ands	r3, r2
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 808e 	beq.w	80086be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8086 	beq.w	80086be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b6:	2220      	movs	r2, #32
 80085b8:	409a      	lsls	r2, r3
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	d136      	bne.n	8008638 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 0216 	bic.w	r2, r2, #22
 80085d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	695a      	ldr	r2, [r3, #20]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d103      	bne.n	80085fa <HAL_DMA_IRQHandler+0x1da>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d007      	beq.n	800860a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0208 	bic.w	r2, r2, #8
 8008608:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800860e:	223f      	movs	r2, #63	; 0x3f
 8008610:	409a      	lsls	r2, r3
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800862a:	2b00      	cmp	r3, #0
 800862c:	d07d      	beq.n	800872a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	4798      	blx	r3
        }
        return;
 8008636:	e078      	b.n	800872a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d01c      	beq.n	8008680 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d108      	bne.n	8008666 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008658:	2b00      	cmp	r3, #0
 800865a:	d030      	beq.n	80086be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	4798      	blx	r3
 8008664:	e02b      	b.n	80086be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866a:	2b00      	cmp	r3, #0
 800866c:	d027      	beq.n	80086be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
 8008676:	e022      	b.n	80086be <HAL_DMA_IRQHandler+0x29e>
 8008678:	20000000 	.word	0x20000000
 800867c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10f      	bne.n	80086ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0210 	bic.w	r2, r2, #16
 800869c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d032      	beq.n	800872c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d022      	beq.n	8008718 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2205      	movs	r2, #5
 80086d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0201 	bic.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	3301      	adds	r3, #1
 80086ee:	60bb      	str	r3, [r7, #8]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d307      	bcc.n	8008706 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1f2      	bne.n	80086ea <HAL_DMA_IRQHandler+0x2ca>
 8008704:	e000      	b.n	8008708 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008706:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800871c:	2b00      	cmp	r3, #0
 800871e:	d005      	beq.n	800872c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	4798      	blx	r3
 8008728:	e000      	b.n	800872c <HAL_DMA_IRQHandler+0x30c>
        return;
 800872a:	bf00      	nop
    }
  }
}
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop

08008734 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008750:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	2b40      	cmp	r3, #64	; 0x40
 8008760:	d108      	bne.n	8008774 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008772:	e007      	b.n	8008784 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	60da      	str	r2, [r3, #12]
}
 8008784:	bf00      	nop
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	3b10      	subs	r3, #16
 80087a0:	4a13      	ldr	r2, [pc, #76]	; (80087f0 <DMA_CalcBaseAndBitshift+0x60>)
 80087a2:	fba2 2303 	umull	r2, r3, r2, r3
 80087a6:	091b      	lsrs	r3, r3, #4
 80087a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80087aa:	4a12      	ldr	r2, [pc, #72]	; (80087f4 <DMA_CalcBaseAndBitshift+0x64>)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4413      	add	r3, r2
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d908      	bls.n	80087d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <DMA_CalcBaseAndBitshift+0x68>)
 80087c6:	4013      	ands	r3, r2
 80087c8:	1d1a      	adds	r2, r3, #4
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	659a      	str	r2, [r3, #88]	; 0x58
 80087ce:	e006      	b.n	80087de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	461a      	mov	r2, r3
 80087d6:	4b08      	ldr	r3, [pc, #32]	; (80087f8 <DMA_CalcBaseAndBitshift+0x68>)
 80087d8:	4013      	ands	r3, r2
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	aaaaaaab 	.word	0xaaaaaaab
 80087f4:	0801a1e4 	.word	0x0801a1e4
 80087f8:	fffffc00 	.word	0xfffffc00

080087fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d11f      	bne.n	8008856 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2b03      	cmp	r3, #3
 800881a:	d855      	bhi.n	80088c8 <DMA_CheckFifoParam+0xcc>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <DMA_CheckFifoParam+0x28>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008835 	.word	0x08008835
 8008828:	08008847 	.word	0x08008847
 800882c:	08008835 	.word	0x08008835
 8008830:	080088c9 	.word	0x080088c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d045      	beq.n	80088cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008844:	e042      	b.n	80088cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800884e:	d13f      	bne.n	80088d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008854:	e03c      	b.n	80088d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800885e:	d121      	bne.n	80088a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	2b03      	cmp	r3, #3
 8008864:	d836      	bhi.n	80088d4 <DMA_CheckFifoParam+0xd8>
 8008866:	a201      	add	r2, pc, #4	; (adr r2, 800886c <DMA_CheckFifoParam+0x70>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	0800887d 	.word	0x0800887d
 8008870:	08008883 	.word	0x08008883
 8008874:	0800887d 	.word	0x0800887d
 8008878:	08008895 	.word	0x08008895
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	73fb      	strb	r3, [r7, #15]
      break;
 8008880:	e02f      	b.n	80088e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d024      	beq.n	80088d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008892:	e021      	b.n	80088d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008898:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800889c:	d11e      	bne.n	80088dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80088a2:	e01b      	b.n	80088dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d902      	bls.n	80088b0 <DMA_CheckFifoParam+0xb4>
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d003      	beq.n	80088b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80088ae:	e018      	b.n	80088e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
      break;
 80088b4:	e015      	b.n	80088e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00e      	beq.n	80088e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	73fb      	strb	r3, [r7, #15]
      break;
 80088c6:	e00b      	b.n	80088e0 <DMA_CheckFifoParam+0xe4>
      break;
 80088c8:	bf00      	nop
 80088ca:	e00a      	b.n	80088e2 <DMA_CheckFifoParam+0xe6>
      break;
 80088cc:	bf00      	nop
 80088ce:	e008      	b.n	80088e2 <DMA_CheckFifoParam+0xe6>
      break;
 80088d0:	bf00      	nop
 80088d2:	e006      	b.n	80088e2 <DMA_CheckFifoParam+0xe6>
      break;
 80088d4:	bf00      	nop
 80088d6:	e004      	b.n	80088e2 <DMA_CheckFifoParam+0xe6>
      break;
 80088d8:	bf00      	nop
 80088da:	e002      	b.n	80088e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80088dc:	bf00      	nop
 80088de:	e000      	b.n	80088e2 <DMA_CheckFifoParam+0xe6>
      break;
 80088e0:	bf00      	nop
    }
  } 
  
  return status; 
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e039      	b.n	8008976 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7fa f9dc 	bl	8002cd4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008940:	f023 0107 	bic.w	r1, r3, #7
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008956:	4b0a      	ldr	r3, [pc, #40]	; (8008980 <HAL_DMA2D_Init+0x90>)
 8008958:	4013      	ands	r3, r2
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	68d1      	ldr	r1, [r2, #12]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	6812      	ldr	r2, [r2, #0]
 8008962:	430b      	orrs	r3, r1
 8008964:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	ffffc000 	.word	0xffffc000

08008984 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af02      	add	r7, sp, #8
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_DMA2D_Start+0x1c>
 800899c:	2302      	movs	r3, #2
 800899e:	e018      	b.n	80089d2 <HAL_DMA2D_Start+0x4e>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fa98 	bl	8008ef0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0201 	orr.w	r2, r2, #1
 80089ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b086      	sub	sp, #24
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d056      	beq.n	8008aa4 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80089f6:	f7fe feab 	bl	8007750 <HAL_GetTick>
 80089fa:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80089fc:	e04b      	b.n	8008a96 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d023      	beq.n	8008a58 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1e:	f043 0202 	orr.w	r2, r3, #2
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a34:	f043 0201 	orr.w	r2, r3, #1
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2221      	movs	r2, #33	; 0x21
 8008a42:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2204      	movs	r2, #4
 8008a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e0a5      	b.n	8008ba4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5e:	d01a      	beq.n	8008a96 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8008a60:	f7fe fe76 	bl	8007750 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d302      	bcc.n	8008a76 <HAL_DMA2D_PollForTransfer+0x9c>
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10f      	bne.n	8008a96 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7a:	f043 0220 	orr.w	r2, r3, #32
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2203      	movs	r2, #3
 8008a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e086      	b.n	8008ba4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d0ac      	beq.n	80089fe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d061      	beq.n	8008b8a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ac6:	f7fe fe43 	bl	8007750 <HAL_GetTick>
 8008aca:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008acc:	e056      	b.n	8008b7c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d02e      	beq.n	8008b3e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f003 0308 	and.w	r3, r3, #8
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d005      	beq.n	8008af6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aee:	f043 0204 	orr.w	r2, r3, #4
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f003 0320 	and.w	r3, r3, #32
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d005      	beq.n	8008b0c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b04:	f043 0202 	orr.w	r2, r3, #2
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1a:	f043 0201 	orr.w	r2, r3, #1
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2229      	movs	r2, #41	; 0x29
 8008b28:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2204      	movs	r2, #4
 8008b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e032      	b.n	8008ba4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b44:	d01a      	beq.n	8008b7c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8008b46:	f7fe fe03 	bl	8007750 <HAL_GetTick>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d302      	bcc.n	8008b5c <HAL_DMA2D_PollForTransfer+0x182>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10f      	bne.n	8008b7c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b60:	f043 0220 	orr.w	r2, r3, #32
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e013      	b.n	8008ba4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f003 0310 	and.w	r3, r3, #16
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0a1      	beq.n	8008ace <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2212      	movs	r2, #18
 8008b90:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d026      	beq.n	8008c1c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d021      	beq.n	8008c1c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008be6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bec:	f043 0201 	orr.w	r2, r3, #1
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2204      	movs	r2, #4
 8008c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d026      	beq.n	8008c74 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d021      	beq.n	8008c74 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c3e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2220      	movs	r2, #32
 8008c46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4c:	f043 0202 	orr.w	r2, r3, #2
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2204      	movs	r2, #4
 8008c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d026      	beq.n	8008ccc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d021      	beq.n	8008ccc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c96:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2208      	movs	r2, #8
 8008c9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca4:	f043 0204 	orr.w	r2, r3, #4
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2204      	movs	r2, #4
 8008cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d003      	beq.n	8008ccc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d013      	beq.n	8008cfe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00e      	beq.n	8008cfe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cee:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2204      	movs	r2, #4
 8008cf6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f853 	bl	8008da4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d024      	beq.n	8008d52 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01f      	beq.n	8008d52 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008d20:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2202      	movs	r2, #2
 8008d28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f003 0310 	and.w	r3, r3, #16
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01f      	beq.n	8008d9c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d01a      	beq.n	8008d9c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d74:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2210      	movs	r2, #16
 8008d7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f80e 	bl	8008db8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008d9c:	bf00      	nop
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d101      	bne.n	8008dec <HAL_DMA2D_ConfigLayer+0x20>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e079      	b.n	8008ee0 <HAL_DMA2D_ConfigLayer+0x114>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	011b      	lsls	r3, r3, #4
 8008e00:	3318      	adds	r3, #24
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4413      	add	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	041b      	lsls	r3, r3, #16
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8008e16:	4b35      	ldr	r3, [pc, #212]	; (8008eec <HAL_DMA2D_ConfigLayer+0x120>)
 8008e18:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	2b0a      	cmp	r3, #10
 8008e20:	d003      	beq.n	8008e2a <HAL_DMA2D_ConfigLayer+0x5e>
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	2b09      	cmp	r3, #9
 8008e28:	d107      	bne.n	8008e3a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	e005      	b.n	8008e46 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	061b      	lsls	r3, r3, #24
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d120      	bne.n	8008e8e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	43db      	mvns	r3, r3
 8008e56:	ea02 0103 	and.w	r1, r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	6812      	ldr	r2, [r2, #0]
 8008e6c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	2b0a      	cmp	r3, #10
 8008e74:	d003      	beq.n	8008e7e <HAL_DMA2D_ConfigLayer+0xb2>
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2b09      	cmp	r3, #9
 8008e7c:	d127      	bne.n	8008ece <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e8c:	e01f      	b.n	8008ece <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	69da      	ldr	r2, [r3, #28]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	43db      	mvns	r3, r3
 8008e98:	ea02 0103 	and.w	r1, r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	6812      	ldr	r2, [r2, #0]
 8008eae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	2b0a      	cmp	r3, #10
 8008eb6:	d003      	beq.n	8008ec0 <HAL_DMA2D_ConfigLayer+0xf4>
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b09      	cmp	r3, #9
 8008ebe:	d106      	bne.n	8008ece <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008ecc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	ff03000f 	.word	0xff03000f

08008ef0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b08b      	sub	sp, #44	; 0x2c
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f04:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	041a      	lsls	r2, r3, #16
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f28:	d174      	bne.n	8009014 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008f30:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f38:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008f40:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d108      	bne.n	8008f62 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8008f50:	69ba      	ldr	r2, [r7, #24]
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	431a      	orrs	r2, r3
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f60:	e053      	b.n	800900a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d106      	bne.n	8008f78 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24
 8008f76:	e048      	b.n	800900a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d111      	bne.n	8008fa4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	0cdb      	lsrs	r3, r3, #19
 8008f84:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	0a9b      	lsrs	r3, r3, #10
 8008f8a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	08db      	lsrs	r3, r3, #3
 8008f90:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	02db      	lsls	r3, r3, #11
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa2:	e032      	b.n	800900a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d117      	bne.n	8008fdc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	0fdb      	lsrs	r3, r3, #31
 8008fb0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	0cdb      	lsrs	r3, r3, #19
 8008fb6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	0adb      	lsrs	r3, r3, #11
 8008fbc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	08db      	lsrs	r3, r3, #3
 8008fc2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	029b      	lsls	r3, r3, #10
 8008fcc:	431a      	orrs	r2, r3
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	03db      	lsls	r3, r3, #15
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008fda:	e016      	b.n	800900a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	0f1b      	lsrs	r3, r3, #28
 8008fe0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	0d1b      	lsrs	r3, r3, #20
 8008fe6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	0b1b      	lsrs	r3, r3, #12
 8008fec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	091b      	lsrs	r3, r3, #4
 8008ff2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	011a      	lsls	r2, r3, #4
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	021b      	lsls	r3, r3, #8
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	031b      	lsls	r3, r3, #12
 8009002:	4313      	orrs	r3, r2
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	4313      	orrs	r3, r2
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009010:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8009012:	e003      	b.n	800901c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	60da      	str	r2, [r3, #12]
}
 800901c:	bf00      	nop
 800901e:	372c      	adds	r7, #44	; 0x2c
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009028:	b480      	push	{r7}
 800902a:	b089      	sub	sp, #36	; 0x24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8009032:	2300      	movs	r3, #0
 8009034:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8009036:	2300      	movs	r3, #0
 8009038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800903a:	2300      	movs	r3, #0
 800903c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800903e:	2300      	movs	r3, #0
 8009040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009042:	2300      	movs	r3, #0
 8009044:	61fb      	str	r3, [r7, #28]
 8009046:	e175      	b.n	8009334 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009048:	2201      	movs	r2, #1
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	fa02 f303 	lsl.w	r3, r2, r3
 8009050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	4013      	ands	r3, r2
 800905a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	429a      	cmp	r2, r3
 8009062:	f040 8164 	bne.w	800932e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d00b      	beq.n	8009086 <HAL_GPIO_Init+0x5e>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	2b02      	cmp	r3, #2
 8009074:	d007      	beq.n	8009086 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800907a:	2b11      	cmp	r3, #17
 800907c:	d003      	beq.n	8009086 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	2b12      	cmp	r3, #18
 8009084:	d130      	bne.n	80090e8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	005b      	lsls	r3, r3, #1
 8009090:	2203      	movs	r2, #3
 8009092:	fa02 f303 	lsl.w	r3, r2, r3
 8009096:	43db      	mvns	r3, r3
 8009098:	69ba      	ldr	r2, [r7, #24]
 800909a:	4013      	ands	r3, r2
 800909c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	fa02 f303 	lsl.w	r3, r2, r3
 80090aa:	69ba      	ldr	r2, [r7, #24]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80090bc:	2201      	movs	r2, #1
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	fa02 f303 	lsl.w	r3, r2, r3
 80090c4:	43db      	mvns	r3, r3
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	4013      	ands	r3, r2
 80090ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	091b      	lsrs	r3, r3, #4
 80090d2:	f003 0201 	and.w	r2, r3, #1
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	fa02 f303 	lsl.w	r3, r2, r3
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	4313      	orrs	r3, r2
 80090e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	69ba      	ldr	r2, [r7, #24]
 80090e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	005b      	lsls	r3, r3, #1
 80090f2:	2203      	movs	r2, #3
 80090f4:	fa02 f303 	lsl.w	r3, r2, r3
 80090f8:	43db      	mvns	r3, r3
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	4013      	ands	r3, r2
 80090fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	fa02 f303 	lsl.w	r3, r2, r3
 800910c:	69ba      	ldr	r2, [r7, #24]
 800910e:	4313      	orrs	r3, r2
 8009110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	2b02      	cmp	r3, #2
 800911e:	d003      	beq.n	8009128 <HAL_GPIO_Init+0x100>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	2b12      	cmp	r3, #18
 8009126:	d123      	bne.n	8009170 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	08da      	lsrs	r2, r3, #3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3208      	adds	r2, #8
 8009130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	220f      	movs	r2, #15
 8009140:	fa02 f303 	lsl.w	r3, r2, r3
 8009144:	43db      	mvns	r3, r3
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	4013      	ands	r3, r2
 800914a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	691a      	ldr	r2, [r3, #16]
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	fa02 f303 	lsl.w	r3, r2, r3
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	4313      	orrs	r3, r2
 8009160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	08da      	lsrs	r2, r3, #3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3208      	adds	r2, #8
 800916a:	69b9      	ldr	r1, [r7, #24]
 800916c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	2203      	movs	r2, #3
 800917c:	fa02 f303 	lsl.w	r3, r2, r3
 8009180:	43db      	mvns	r3, r3
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	4013      	ands	r3, r2
 8009186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f003 0203 	and.w	r2, r3, #3
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	fa02 f303 	lsl.w	r3, r2, r3
 8009198:	69ba      	ldr	r2, [r7, #24]
 800919a:	4313      	orrs	r3, r2
 800919c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	69ba      	ldr	r2, [r7, #24]
 80091a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 80be 	beq.w	800932e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091b2:	4b65      	ldr	r3, [pc, #404]	; (8009348 <HAL_GPIO_Init+0x320>)
 80091b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b6:	4a64      	ldr	r2, [pc, #400]	; (8009348 <HAL_GPIO_Init+0x320>)
 80091b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091bc:	6453      	str	r3, [r2, #68]	; 0x44
 80091be:	4b62      	ldr	r3, [pc, #392]	; (8009348 <HAL_GPIO_Init+0x320>)
 80091c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80091ca:	4a60      	ldr	r2, [pc, #384]	; (800934c <HAL_GPIO_Init+0x324>)
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	089b      	lsrs	r3, r3, #2
 80091d0:	3302      	adds	r3, #2
 80091d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	f003 0303 	and.w	r3, r3, #3
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	220f      	movs	r2, #15
 80091e2:	fa02 f303 	lsl.w	r3, r2, r3
 80091e6:	43db      	mvns	r3, r3
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	4013      	ands	r3, r2
 80091ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a57      	ldr	r2, [pc, #348]	; (8009350 <HAL_GPIO_Init+0x328>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d037      	beq.n	8009266 <HAL_GPIO_Init+0x23e>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a56      	ldr	r2, [pc, #344]	; (8009354 <HAL_GPIO_Init+0x32c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d031      	beq.n	8009262 <HAL_GPIO_Init+0x23a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a55      	ldr	r2, [pc, #340]	; (8009358 <HAL_GPIO_Init+0x330>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d02b      	beq.n	800925e <HAL_GPIO_Init+0x236>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a54      	ldr	r2, [pc, #336]	; (800935c <HAL_GPIO_Init+0x334>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d025      	beq.n	800925a <HAL_GPIO_Init+0x232>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a53      	ldr	r2, [pc, #332]	; (8009360 <HAL_GPIO_Init+0x338>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d01f      	beq.n	8009256 <HAL_GPIO_Init+0x22e>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a52      	ldr	r2, [pc, #328]	; (8009364 <HAL_GPIO_Init+0x33c>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d019      	beq.n	8009252 <HAL_GPIO_Init+0x22a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a51      	ldr	r2, [pc, #324]	; (8009368 <HAL_GPIO_Init+0x340>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d013      	beq.n	800924e <HAL_GPIO_Init+0x226>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a50      	ldr	r2, [pc, #320]	; (800936c <HAL_GPIO_Init+0x344>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d00d      	beq.n	800924a <HAL_GPIO_Init+0x222>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a4f      	ldr	r2, [pc, #316]	; (8009370 <HAL_GPIO_Init+0x348>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d007      	beq.n	8009246 <HAL_GPIO_Init+0x21e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a4e      	ldr	r2, [pc, #312]	; (8009374 <HAL_GPIO_Init+0x34c>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d101      	bne.n	8009242 <HAL_GPIO_Init+0x21a>
 800923e:	2309      	movs	r3, #9
 8009240:	e012      	b.n	8009268 <HAL_GPIO_Init+0x240>
 8009242:	230a      	movs	r3, #10
 8009244:	e010      	b.n	8009268 <HAL_GPIO_Init+0x240>
 8009246:	2308      	movs	r3, #8
 8009248:	e00e      	b.n	8009268 <HAL_GPIO_Init+0x240>
 800924a:	2307      	movs	r3, #7
 800924c:	e00c      	b.n	8009268 <HAL_GPIO_Init+0x240>
 800924e:	2306      	movs	r3, #6
 8009250:	e00a      	b.n	8009268 <HAL_GPIO_Init+0x240>
 8009252:	2305      	movs	r3, #5
 8009254:	e008      	b.n	8009268 <HAL_GPIO_Init+0x240>
 8009256:	2304      	movs	r3, #4
 8009258:	e006      	b.n	8009268 <HAL_GPIO_Init+0x240>
 800925a:	2303      	movs	r3, #3
 800925c:	e004      	b.n	8009268 <HAL_GPIO_Init+0x240>
 800925e:	2302      	movs	r3, #2
 8009260:	e002      	b.n	8009268 <HAL_GPIO_Init+0x240>
 8009262:	2301      	movs	r3, #1
 8009264:	e000      	b.n	8009268 <HAL_GPIO_Init+0x240>
 8009266:	2300      	movs	r3, #0
 8009268:	69fa      	ldr	r2, [r7, #28]
 800926a:	f002 0203 	and.w	r2, r2, #3
 800926e:	0092      	lsls	r2, r2, #2
 8009270:	4093      	lsls	r3, r2
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	4313      	orrs	r3, r2
 8009276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009278:	4934      	ldr	r1, [pc, #208]	; (800934c <HAL_GPIO_Init+0x324>)
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	089b      	lsrs	r3, r3, #2
 800927e:	3302      	adds	r3, #2
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009286:	4b3c      	ldr	r3, [pc, #240]	; (8009378 <HAL_GPIO_Init+0x350>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	43db      	mvns	r3, r3
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	4013      	ands	r3, r2
 8009294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80092aa:	4a33      	ldr	r2, [pc, #204]	; (8009378 <HAL_GPIO_Init+0x350>)
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80092b0:	4b31      	ldr	r3, [pc, #196]	; (8009378 <HAL_GPIO_Init+0x350>)
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	43db      	mvns	r3, r3
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	4013      	ands	r3, r2
 80092be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80092d4:	4a28      	ldr	r2, [pc, #160]	; (8009378 <HAL_GPIO_Init+0x350>)
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80092da:	4b27      	ldr	r3, [pc, #156]	; (8009378 <HAL_GPIO_Init+0x350>)
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	43db      	mvns	r3, r3
 80092e4:	69ba      	ldr	r2, [r7, #24]
 80092e6:	4013      	ands	r3, r2
 80092e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d003      	beq.n	80092fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80092fe:	4a1e      	ldr	r2, [pc, #120]	; (8009378 <HAL_GPIO_Init+0x350>)
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009304:	4b1c      	ldr	r3, [pc, #112]	; (8009378 <HAL_GPIO_Init+0x350>)
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	43db      	mvns	r3, r3
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	4013      	ands	r3, r2
 8009312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d003      	beq.n	8009328 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	4313      	orrs	r3, r2
 8009326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009328:	4a13      	ldr	r2, [pc, #76]	; (8009378 <HAL_GPIO_Init+0x350>)
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	3301      	adds	r3, #1
 8009332:	61fb      	str	r3, [r7, #28]
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	2b0f      	cmp	r3, #15
 8009338:	f67f ae86 	bls.w	8009048 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800933c:	bf00      	nop
 800933e:	3724      	adds	r7, #36	; 0x24
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	40023800 	.word	0x40023800
 800934c:	40013800 	.word	0x40013800
 8009350:	40020000 	.word	0x40020000
 8009354:	40020400 	.word	0x40020400
 8009358:	40020800 	.word	0x40020800
 800935c:	40020c00 	.word	0x40020c00
 8009360:	40021000 	.word	0x40021000
 8009364:	40021400 	.word	0x40021400
 8009368:	40021800 	.word	0x40021800
 800936c:	40021c00 	.word	0x40021c00
 8009370:	40022000 	.word	0x40022000
 8009374:	40022400 	.word	0x40022400
 8009378:	40013c00 	.word	0x40013c00

0800937c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800937c:	b480      	push	{r7}
 800937e:	b087      	sub	sp, #28
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8009386:	2300      	movs	r3, #0
 8009388:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800938a:	2300      	movs	r3, #0
 800938c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800938e:	2300      	movs	r3, #0
 8009390:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009392:	2300      	movs	r3, #0
 8009394:	617b      	str	r3, [r7, #20]
 8009396:	e0d9      	b.n	800954c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009398:	2201      	movs	r2, #1
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	4013      	ands	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	f040 80c9 	bne.w	8009546 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80093b4:	4a6a      	ldr	r2, [pc, #424]	; (8009560 <HAL_GPIO_DeInit+0x1e4>)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	089b      	lsrs	r3, r3, #2
 80093ba:	3302      	adds	r3, #2
 80093bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093c0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f003 0303 	and.w	r3, r3, #3
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	220f      	movs	r2, #15
 80093cc:	fa02 f303 	lsl.w	r3, r2, r3
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	4013      	ands	r3, r2
 80093d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a62      	ldr	r2, [pc, #392]	; (8009564 <HAL_GPIO_DeInit+0x1e8>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d037      	beq.n	800944e <HAL_GPIO_DeInit+0xd2>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a61      	ldr	r2, [pc, #388]	; (8009568 <HAL_GPIO_DeInit+0x1ec>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d031      	beq.n	800944a <HAL_GPIO_DeInit+0xce>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a60      	ldr	r2, [pc, #384]	; (800956c <HAL_GPIO_DeInit+0x1f0>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d02b      	beq.n	8009446 <HAL_GPIO_DeInit+0xca>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a5f      	ldr	r2, [pc, #380]	; (8009570 <HAL_GPIO_DeInit+0x1f4>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d025      	beq.n	8009442 <HAL_GPIO_DeInit+0xc6>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a5e      	ldr	r2, [pc, #376]	; (8009574 <HAL_GPIO_DeInit+0x1f8>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d01f      	beq.n	800943e <HAL_GPIO_DeInit+0xc2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a5d      	ldr	r2, [pc, #372]	; (8009578 <HAL_GPIO_DeInit+0x1fc>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d019      	beq.n	800943a <HAL_GPIO_DeInit+0xbe>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a5c      	ldr	r2, [pc, #368]	; (800957c <HAL_GPIO_DeInit+0x200>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d013      	beq.n	8009436 <HAL_GPIO_DeInit+0xba>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a5b      	ldr	r2, [pc, #364]	; (8009580 <HAL_GPIO_DeInit+0x204>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d00d      	beq.n	8009432 <HAL_GPIO_DeInit+0xb6>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a5a      	ldr	r2, [pc, #360]	; (8009584 <HAL_GPIO_DeInit+0x208>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d007      	beq.n	800942e <HAL_GPIO_DeInit+0xb2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a59      	ldr	r2, [pc, #356]	; (8009588 <HAL_GPIO_DeInit+0x20c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d101      	bne.n	800942a <HAL_GPIO_DeInit+0xae>
 8009426:	2309      	movs	r3, #9
 8009428:	e012      	b.n	8009450 <HAL_GPIO_DeInit+0xd4>
 800942a:	230a      	movs	r3, #10
 800942c:	e010      	b.n	8009450 <HAL_GPIO_DeInit+0xd4>
 800942e:	2308      	movs	r3, #8
 8009430:	e00e      	b.n	8009450 <HAL_GPIO_DeInit+0xd4>
 8009432:	2307      	movs	r3, #7
 8009434:	e00c      	b.n	8009450 <HAL_GPIO_DeInit+0xd4>
 8009436:	2306      	movs	r3, #6
 8009438:	e00a      	b.n	8009450 <HAL_GPIO_DeInit+0xd4>
 800943a:	2305      	movs	r3, #5
 800943c:	e008      	b.n	8009450 <HAL_GPIO_DeInit+0xd4>
 800943e:	2304      	movs	r3, #4
 8009440:	e006      	b.n	8009450 <HAL_GPIO_DeInit+0xd4>
 8009442:	2303      	movs	r3, #3
 8009444:	e004      	b.n	8009450 <HAL_GPIO_DeInit+0xd4>
 8009446:	2302      	movs	r3, #2
 8009448:	e002      	b.n	8009450 <HAL_GPIO_DeInit+0xd4>
 800944a:	2301      	movs	r3, #1
 800944c:	e000      	b.n	8009450 <HAL_GPIO_DeInit+0xd4>
 800944e:	2300      	movs	r3, #0
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	f002 0203 	and.w	r2, r2, #3
 8009456:	0092      	lsls	r2, r2, #2
 8009458:	4093      	lsls	r3, r2
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	429a      	cmp	r2, r3
 800945e:	d132      	bne.n	80094c6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009460:	4b4a      	ldr	r3, [pc, #296]	; (800958c <HAL_GPIO_DeInit+0x210>)
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	43db      	mvns	r3, r3
 8009468:	4948      	ldr	r1, [pc, #288]	; (800958c <HAL_GPIO_DeInit+0x210>)
 800946a:	4013      	ands	r3, r2
 800946c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800946e:	4b47      	ldr	r3, [pc, #284]	; (800958c <HAL_GPIO_DeInit+0x210>)
 8009470:	685a      	ldr	r2, [r3, #4]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	43db      	mvns	r3, r3
 8009476:	4945      	ldr	r1, [pc, #276]	; (800958c <HAL_GPIO_DeInit+0x210>)
 8009478:	4013      	ands	r3, r2
 800947a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800947c:	4b43      	ldr	r3, [pc, #268]	; (800958c <HAL_GPIO_DeInit+0x210>)
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	43db      	mvns	r3, r3
 8009484:	4941      	ldr	r1, [pc, #260]	; (800958c <HAL_GPIO_DeInit+0x210>)
 8009486:	4013      	ands	r3, r2
 8009488:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800948a:	4b40      	ldr	r3, [pc, #256]	; (800958c <HAL_GPIO_DeInit+0x210>)
 800948c:	68da      	ldr	r2, [r3, #12]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	43db      	mvns	r3, r3
 8009492:	493e      	ldr	r1, [pc, #248]	; (800958c <HAL_GPIO_DeInit+0x210>)
 8009494:	4013      	ands	r3, r2
 8009496:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f003 0303 	and.w	r3, r3, #3
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	220f      	movs	r2, #15
 80094a2:	fa02 f303 	lsl.w	r3, r2, r3
 80094a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80094a8:	4a2d      	ldr	r2, [pc, #180]	; (8009560 <HAL_GPIO_DeInit+0x1e4>)
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	089b      	lsrs	r3, r3, #2
 80094ae:	3302      	adds	r3, #2
 80094b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	43da      	mvns	r2, r3
 80094b8:	4829      	ldr	r0, [pc, #164]	; (8009560 <HAL_GPIO_DeInit+0x1e4>)
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	089b      	lsrs	r3, r3, #2
 80094be:	400a      	ands	r2, r1
 80094c0:	3302      	adds	r3, #2
 80094c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	2103      	movs	r1, #3
 80094d0:	fa01 f303 	lsl.w	r3, r1, r3
 80094d4:	43db      	mvns	r3, r3
 80094d6:	401a      	ands	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	08da      	lsrs	r2, r3, #3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	3208      	adds	r2, #8
 80094e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	f003 0307 	and.w	r3, r3, #7
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	220f      	movs	r2, #15
 80094f2:	fa02 f303 	lsl.w	r3, r2, r3
 80094f6:	43db      	mvns	r3, r3
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	08d2      	lsrs	r2, r2, #3
 80094fc:	4019      	ands	r1, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	3208      	adds	r2, #8
 8009502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68da      	ldr	r2, [r3, #12]
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	2103      	movs	r1, #3
 8009510:	fa01 f303 	lsl.w	r3, r1, r3
 8009514:	43db      	mvns	r3, r3
 8009516:	401a      	ands	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	2101      	movs	r1, #1
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	fa01 f303 	lsl.w	r3, r1, r3
 8009528:	43db      	mvns	r3, r3
 800952a:	401a      	ands	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	2103      	movs	r1, #3
 800953a:	fa01 f303 	lsl.w	r3, r1, r3
 800953e:	43db      	mvns	r3, r3
 8009540:	401a      	ands	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	3301      	adds	r3, #1
 800954a:	617b      	str	r3, [r7, #20]
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2b0f      	cmp	r3, #15
 8009550:	f67f af22 	bls.w	8009398 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009554:	bf00      	nop
 8009556:	371c      	adds	r7, #28
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	40013800 	.word	0x40013800
 8009564:	40020000 	.word	0x40020000
 8009568:	40020400 	.word	0x40020400
 800956c:	40020800 	.word	0x40020800
 8009570:	40020c00 	.word	0x40020c00
 8009574:	40021000 	.word	0x40021000
 8009578:	40021400 	.word	0x40021400
 800957c:	40021800 	.word	0x40021800
 8009580:	40021c00 	.word	0x40021c00
 8009584:	40022000 	.word	0x40022000
 8009588:	40022400 	.word	0x40022400
 800958c:	40013c00 	.word	0x40013c00

08009590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	807b      	strh	r3, [r7, #2]
 800959c:	4613      	mov	r3, r2
 800959e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80095a0:	787b      	ldrb	r3, [r7, #1]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095a6:	887a      	ldrh	r2, [r7, #2]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80095ac:	e003      	b.n	80095b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80095ae:	887b      	ldrh	r3, [r7, #2]
 80095b0:	041a      	lsls	r2, r3, #16
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	619a      	str	r2, [r3, #24]
}
 80095b6:	bf00      	nop
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
	...

080095c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80095ce:	4b08      	ldr	r3, [pc, #32]	; (80095f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095d0:	695a      	ldr	r2, [r3, #20]
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	4013      	ands	r3, r2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d006      	beq.n	80095e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80095da:	4a05      	ldr	r2, [pc, #20]	; (80095f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095dc:	88fb      	ldrh	r3, [r7, #6]
 80095de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80095e0:	88fb      	ldrh	r3, [r7, #6]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7f7 ff0c 	bl	8001400 <HAL_GPIO_EXTI_Callback>
  }
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	40013c00 	.word	0x40013c00

080095f4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80095f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095f6:	b08f      	sub	sp, #60	; 0x3c
 80095f8:	af0a      	add	r7, sp, #40	; 0x28
 80095fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e054      	b.n	80096b0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	d106      	bne.n	8009626 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f00d fe63 	bl	80172ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2203      	movs	r2, #3
 800962a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4618      	mov	r0, r3
 8009646:	f007 f8bc 	bl	80107c2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	603b      	str	r3, [r7, #0]
 8009650:	687e      	ldr	r6, [r7, #4]
 8009652:	466d      	mov	r5, sp
 8009654:	f106 0410 	add.w	r4, r6, #16
 8009658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800965a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800965c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800965e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009660:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009664:	e885 0003 	stmia.w	r5, {r0, r1}
 8009668:	1d33      	adds	r3, r6, #4
 800966a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800966c:	6838      	ldr	r0, [r7, #0]
 800966e:	f007 f83f 	bl	80106f0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2101      	movs	r1, #1
 8009678:	4618      	mov	r0, r3
 800967a:	f007 f8b3 	bl	80107e4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	603b      	str	r3, [r7, #0]
 8009684:	687e      	ldr	r6, [r7, #4]
 8009686:	466d      	mov	r5, sp
 8009688:	f106 0410 	add.w	r4, r6, #16
 800968c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800968e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009694:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009698:	e885 0003 	stmia.w	r5, {r0, r1}
 800969c:	1d33      	adds	r3, r6, #4
 800969e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096a0:	6838      	ldr	r0, [r7, #0]
 80096a2:	f007 f9c5 	bl	8010a30 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096b8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80096b8:	b590      	push	{r4, r7, lr}
 80096ba:	b089      	sub	sp, #36	; 0x24
 80096bc:	af04      	add	r7, sp, #16
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	4608      	mov	r0, r1
 80096c2:	4611      	mov	r1, r2
 80096c4:	461a      	mov	r2, r3
 80096c6:	4603      	mov	r3, r0
 80096c8:	70fb      	strb	r3, [r7, #3]
 80096ca:	460b      	mov	r3, r1
 80096cc:	70bb      	strb	r3, [r7, #2]
 80096ce:	4613      	mov	r3, r2
 80096d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <HAL_HCD_HC_Init+0x28>
 80096dc:	2302      	movs	r3, #2
 80096de:	e07f      	b.n	80097e0 <HAL_HCD_HC_Init+0x128>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80096e8:	78fa      	ldrb	r2, [r7, #3]
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	440b      	add	r3, r1
 80096f6:	333d      	adds	r3, #61	; 0x3d
 80096f8:	2200      	movs	r2, #0
 80096fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80096fc:	78fa      	ldrb	r2, [r7, #3]
 80096fe:	6879      	ldr	r1, [r7, #4]
 8009700:	4613      	mov	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	00db      	lsls	r3, r3, #3
 8009708:	440b      	add	r3, r1
 800970a:	3338      	adds	r3, #56	; 0x38
 800970c:	787a      	ldrb	r2, [r7, #1]
 800970e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8009710:	78fa      	ldrb	r2, [r7, #3]
 8009712:	6879      	ldr	r1, [r7, #4]
 8009714:	4613      	mov	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	440b      	add	r3, r1
 800971e:	3340      	adds	r3, #64	; 0x40
 8009720:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009722:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009724:	78fa      	ldrb	r2, [r7, #3]
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	440b      	add	r3, r1
 8009732:	3339      	adds	r3, #57	; 0x39
 8009734:	78fa      	ldrb	r2, [r7, #3]
 8009736:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8009738:	78fa      	ldrb	r2, [r7, #3]
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	00db      	lsls	r3, r3, #3
 8009744:	440b      	add	r3, r1
 8009746:	333f      	adds	r3, #63	; 0x3f
 8009748:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800974c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800974e:	78fa      	ldrb	r2, [r7, #3]
 8009750:	78bb      	ldrb	r3, [r7, #2]
 8009752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009756:	b2d8      	uxtb	r0, r3
 8009758:	6879      	ldr	r1, [r7, #4]
 800975a:	4613      	mov	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	00db      	lsls	r3, r3, #3
 8009762:	440b      	add	r3, r1
 8009764:	333a      	adds	r3, #58	; 0x3a
 8009766:	4602      	mov	r2, r0
 8009768:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800976a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800976e:	2b00      	cmp	r3, #0
 8009770:	da0a      	bge.n	8009788 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009772:	78fa      	ldrb	r2, [r7, #3]
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	00db      	lsls	r3, r3, #3
 800977e:	440b      	add	r3, r1
 8009780:	333b      	adds	r3, #59	; 0x3b
 8009782:	2201      	movs	r2, #1
 8009784:	701a      	strb	r2, [r3, #0]
 8009786:	e009      	b.n	800979c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8009788:	78fa      	ldrb	r2, [r7, #3]
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	00db      	lsls	r3, r3, #3
 8009794:	440b      	add	r3, r1
 8009796:	333b      	adds	r3, #59	; 0x3b
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800979c:	78fa      	ldrb	r2, [r7, #3]
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	4613      	mov	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	440b      	add	r3, r1
 80097aa:	333c      	adds	r3, #60	; 0x3c
 80097ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80097b0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6818      	ldr	r0, [r3, #0]
 80097b6:	787c      	ldrb	r4, [r7, #1]
 80097b8:	78ba      	ldrb	r2, [r7, #2]
 80097ba:	78f9      	ldrb	r1, [r7, #3]
 80097bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	4623      	mov	r3, r4
 80097ce:	f007 faa5 	bl	8010d1c <USB_HC_Init>
 80097d2:	4603      	mov	r3, r0
 80097d4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80097de:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd90      	pop	{r4, r7, pc}

080097e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d101      	bne.n	8009806 <HAL_HCD_HC_Halt+0x1e>
 8009802:	2302      	movs	r3, #2
 8009804:	e00f      	b.n	8009826 <HAL_HCD_HC_Halt+0x3e>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	78fa      	ldrb	r2, [r7, #3]
 8009814:	4611      	mov	r1, r2
 8009816:	4618      	mov	r0, r3
 8009818:	f007 fcdf 	bl	80111da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8009824:	7bfb      	ldrb	r3, [r7, #15]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	4608      	mov	r0, r1
 800983a:	4611      	mov	r1, r2
 800983c:	461a      	mov	r2, r3
 800983e:	4603      	mov	r3, r0
 8009840:	70fb      	strb	r3, [r7, #3]
 8009842:	460b      	mov	r3, r1
 8009844:	70bb      	strb	r3, [r7, #2]
 8009846:	4613      	mov	r3, r2
 8009848:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800984a:	78fa      	ldrb	r2, [r7, #3]
 800984c:	6879      	ldr	r1, [r7, #4]
 800984e:	4613      	mov	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	00db      	lsls	r3, r3, #3
 8009856:	440b      	add	r3, r1
 8009858:	333b      	adds	r3, #59	; 0x3b
 800985a:	78ba      	ldrb	r2, [r7, #2]
 800985c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800985e:	78fa      	ldrb	r2, [r7, #3]
 8009860:	6879      	ldr	r1, [r7, #4]
 8009862:	4613      	mov	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	440b      	add	r3, r1
 800986c:	333f      	adds	r3, #63	; 0x3f
 800986e:	787a      	ldrb	r2, [r7, #1]
 8009870:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8009872:	7c3b      	ldrb	r3, [r7, #16]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d114      	bne.n	80098a2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009878:	78fa      	ldrb	r2, [r7, #3]
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	440b      	add	r3, r1
 8009886:	3342      	adds	r3, #66	; 0x42
 8009888:	2203      	movs	r2, #3
 800988a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800988c:	78fa      	ldrb	r2, [r7, #3]
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	00db      	lsls	r3, r3, #3
 8009898:	440b      	add	r3, r1
 800989a:	333d      	adds	r3, #61	; 0x3d
 800989c:	7f3a      	ldrb	r2, [r7, #28]
 800989e:	701a      	strb	r2, [r3, #0]
 80098a0:	e009      	b.n	80098b6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80098a2:	78fa      	ldrb	r2, [r7, #3]
 80098a4:	6879      	ldr	r1, [r7, #4]
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	00db      	lsls	r3, r3, #3
 80098ae:	440b      	add	r3, r1
 80098b0:	3342      	adds	r3, #66	; 0x42
 80098b2:	2202      	movs	r2, #2
 80098b4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80098b6:	787b      	ldrb	r3, [r7, #1]
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	f200 80d6 	bhi.w	8009a6a <HAL_HCD_HC_SubmitRequest+0x23a>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098d5 	.word	0x080098d5
 80098c8:	08009a55 	.word	0x08009a55
 80098cc:	08009941 	.word	0x08009941
 80098d0:	080099cb 	.word	0x080099cb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80098d4:	7c3b      	ldrb	r3, [r7, #16]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	f040 80c9 	bne.w	8009a6e <HAL_HCD_HC_SubmitRequest+0x23e>
 80098dc:	78bb      	ldrb	r3, [r7, #2]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f040 80c5 	bne.w	8009a6e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80098e4:	8b3b      	ldrh	r3, [r7, #24]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d109      	bne.n	80098fe <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80098ea:	78fa      	ldrb	r2, [r7, #3]
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	4613      	mov	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	440b      	add	r3, r1
 80098f8:	3351      	adds	r3, #81	; 0x51
 80098fa:	2201      	movs	r2, #1
 80098fc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80098fe:	78fa      	ldrb	r2, [r7, #3]
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	00db      	lsls	r3, r3, #3
 800990a:	440b      	add	r3, r1
 800990c:	3351      	adds	r3, #81	; 0x51
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009914:	78fa      	ldrb	r2, [r7, #3]
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	440b      	add	r3, r1
 8009922:	3342      	adds	r3, #66	; 0x42
 8009924:	2200      	movs	r2, #0
 8009926:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8009928:	e0a1      	b.n	8009a6e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800992a:	78fa      	ldrb	r2, [r7, #3]
 800992c:	6879      	ldr	r1, [r7, #4]
 800992e:	4613      	mov	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	440b      	add	r3, r1
 8009938:	3342      	adds	r3, #66	; 0x42
 800993a:	2202      	movs	r2, #2
 800993c:	701a      	strb	r2, [r3, #0]
      break;
 800993e:	e096      	b.n	8009a6e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009940:	78bb      	ldrb	r3, [r7, #2]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d120      	bne.n	8009988 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009946:	78fa      	ldrb	r2, [r7, #3]
 8009948:	6879      	ldr	r1, [r7, #4]
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	00db      	lsls	r3, r3, #3
 8009952:	440b      	add	r3, r1
 8009954:	3351      	adds	r3, #81	; 0x51
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800995c:	78fa      	ldrb	r2, [r7, #3]
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	4613      	mov	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	00db      	lsls	r3, r3, #3
 8009968:	440b      	add	r3, r1
 800996a:	3342      	adds	r3, #66	; 0x42
 800996c:	2200      	movs	r2, #0
 800996e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8009970:	e07e      	b.n	8009a70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009972:	78fa      	ldrb	r2, [r7, #3]
 8009974:	6879      	ldr	r1, [r7, #4]
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	00db      	lsls	r3, r3, #3
 800997e:	440b      	add	r3, r1
 8009980:	3342      	adds	r3, #66	; 0x42
 8009982:	2202      	movs	r2, #2
 8009984:	701a      	strb	r2, [r3, #0]
      break;
 8009986:	e073      	b.n	8009a70 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009988:	78fa      	ldrb	r2, [r7, #3]
 800998a:	6879      	ldr	r1, [r7, #4]
 800998c:	4613      	mov	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	00db      	lsls	r3, r3, #3
 8009994:	440b      	add	r3, r1
 8009996:	3350      	adds	r3, #80	; 0x50
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10a      	bne.n	80099b4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800999e:	78fa      	ldrb	r2, [r7, #3]
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	00db      	lsls	r3, r3, #3
 80099aa:	440b      	add	r3, r1
 80099ac:	3342      	adds	r3, #66	; 0x42
 80099ae:	2200      	movs	r2, #0
 80099b0:	701a      	strb	r2, [r3, #0]
      break;
 80099b2:	e05d      	b.n	8009a70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099b4:	78fa      	ldrb	r2, [r7, #3]
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	4613      	mov	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	440b      	add	r3, r1
 80099c2:	3342      	adds	r3, #66	; 0x42
 80099c4:	2202      	movs	r2, #2
 80099c6:	701a      	strb	r2, [r3, #0]
      break;
 80099c8:	e052      	b.n	8009a70 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80099ca:	78bb      	ldrb	r3, [r7, #2]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d120      	bne.n	8009a12 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80099d0:	78fa      	ldrb	r2, [r7, #3]
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	4613      	mov	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	440b      	add	r3, r1
 80099de:	3351      	adds	r3, #81	; 0x51
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10a      	bne.n	80099fc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80099e6:	78fa      	ldrb	r2, [r7, #3]
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	00db      	lsls	r3, r3, #3
 80099f2:	440b      	add	r3, r1
 80099f4:	3342      	adds	r3, #66	; 0x42
 80099f6:	2200      	movs	r2, #0
 80099f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80099fa:	e039      	b.n	8009a70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80099fc:	78fa      	ldrb	r2, [r7, #3]
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	440b      	add	r3, r1
 8009a0a:	3342      	adds	r3, #66	; 0x42
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	701a      	strb	r2, [r3, #0]
      break;
 8009a10:	e02e      	b.n	8009a70 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009a12:	78fa      	ldrb	r2, [r7, #3]
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	4613      	mov	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	440b      	add	r3, r1
 8009a20:	3350      	adds	r3, #80	; 0x50
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10a      	bne.n	8009a3e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009a28:	78fa      	ldrb	r2, [r7, #3]
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	00db      	lsls	r3, r3, #3
 8009a34:	440b      	add	r3, r1
 8009a36:	3342      	adds	r3, #66	; 0x42
 8009a38:	2200      	movs	r2, #0
 8009a3a:	701a      	strb	r2, [r3, #0]
      break;
 8009a3c:	e018      	b.n	8009a70 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009a3e:	78fa      	ldrb	r2, [r7, #3]
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	00db      	lsls	r3, r3, #3
 8009a4a:	440b      	add	r3, r1
 8009a4c:	3342      	adds	r3, #66	; 0x42
 8009a4e:	2202      	movs	r2, #2
 8009a50:	701a      	strb	r2, [r3, #0]
      break;
 8009a52:	e00d      	b.n	8009a70 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009a54:	78fa      	ldrb	r2, [r7, #3]
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	00db      	lsls	r3, r3, #3
 8009a60:	440b      	add	r3, r1
 8009a62:	3342      	adds	r3, #66	; 0x42
 8009a64:	2200      	movs	r2, #0
 8009a66:	701a      	strb	r2, [r3, #0]
      break;
 8009a68:	e002      	b.n	8009a70 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8009a6a:	bf00      	nop
 8009a6c:	e000      	b.n	8009a70 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8009a6e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8009a70:	78fa      	ldrb	r2, [r7, #3]
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	00db      	lsls	r3, r3, #3
 8009a7c:	440b      	add	r3, r1
 8009a7e:	3344      	adds	r3, #68	; 0x44
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8009a84:	78fa      	ldrb	r2, [r7, #3]
 8009a86:	8b39      	ldrh	r1, [r7, #24]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	4403      	add	r3, r0
 8009a94:	3348      	adds	r3, #72	; 0x48
 8009a96:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8009a98:	78fa      	ldrb	r2, [r7, #3]
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	440b      	add	r3, r1
 8009aa6:	335c      	adds	r3, #92	; 0x5c
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8009aac:	78fa      	ldrb	r2, [r7, #3]
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	00db      	lsls	r3, r3, #3
 8009ab8:	440b      	add	r3, r1
 8009aba:	334c      	adds	r3, #76	; 0x4c
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009ac0:	78fa      	ldrb	r2, [r7, #3]
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	00db      	lsls	r3, r3, #3
 8009acc:	440b      	add	r3, r1
 8009ace:	3339      	adds	r3, #57	; 0x39
 8009ad0:	78fa      	ldrb	r2, [r7, #3]
 8009ad2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	440b      	add	r3, r1
 8009ae2:	335d      	adds	r3, #93	; 0x5d
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6818      	ldr	r0, [r3, #0]
 8009aec:	78fa      	ldrb	r2, [r7, #3]
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	00db      	lsls	r3, r3, #3
 8009af6:	3338      	adds	r3, #56	; 0x38
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	18d1      	adds	r1, r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	461a      	mov	r2, r3
 8009b04:	f007 fa14 	bl	8010f30 <USB_HC_StartXfer>
 8009b08:	4603      	mov	r3, r0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop

08009b14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f006 ff3d 	bl	80109aa <USB_GetMode>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	f040 80ef 	bne.w	8009d16 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f006 ff21 	bl	8010984 <USB_ReadInterrupts>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 80e5 	beq.w	8009d14 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f006 ff18 	bl	8010984 <USB_ReadInterrupts>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b5e:	d104      	bne.n	8009b6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009b68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f006 ff08 	bl	8010984 <USB_ReadInterrupts>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b7e:	d104      	bne.n	8009b8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f006 fef8 	bl	8010984 <USB_ReadInterrupts>
 8009b94:	4603      	mov	r3, r0
 8009b96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b9e:	d104      	bne.n	8009baa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009ba8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f006 fee8 	bl	8010984 <USB_ReadInterrupts>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	f003 0302 	and.w	r3, r3, #2
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d103      	bne.n	8009bc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f006 feda 	bl	8010984 <USB_ReadInterrupts>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bda:	d115      	bne.n	8009c08 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009be4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d108      	bne.n	8009c08 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f00d fbea 	bl	80173d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2101      	movs	r1, #1
 8009c02:	4618      	mov	r0, r3
 8009c04:	f006 ffc4 	bl	8010b90 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f006 feb9 	bl	8010984 <USB_ReadInterrupts>
 8009c12:	4603      	mov	r3, r0
 8009c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c1c:	d102      	bne.n	8009c24 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f001 f966 	bl	800aef0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f006 feab 	bl	8010984 <USB_ReadInterrupts>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f003 0308 	and.w	r3, r3, #8
 8009c34:	2b08      	cmp	r3, #8
 8009c36:	d106      	bne.n	8009c46 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f00d fbad 	bl	8017398 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2208      	movs	r2, #8
 8009c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f006 fe9a 	bl	8010984 <USB_ReadInterrupts>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c5a:	d138      	bne.n	8009cce <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f007 faa9 	bl	80111b8 <USB_HC_ReadInterrupt>
 8009c66:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009c68:	2300      	movs	r3, #0
 8009c6a:	617b      	str	r3, [r7, #20]
 8009c6c:	e025      	b.n	8009cba <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f003 030f 	and.w	r3, r3, #15
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d018      	beq.n	8009cb4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c98:	d106      	bne.n	8009ca8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f8cf 	bl	8009e44 <HCD_HC_IN_IRQHandler>
 8009ca6:	e005      	b.n	8009cb4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fcfd 	bl	800a6ae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	617b      	str	r3, [r7, #20]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d3d4      	bcc.n	8009c6e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f006 fe56 	bl	8010984 <USB_ReadInterrupts>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	f003 0310 	and.w	r3, r3, #16
 8009cde:	2b10      	cmp	r3, #16
 8009ce0:	d101      	bne.n	8009ce6 <HAL_HCD_IRQHandler+0x1d2>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e000      	b.n	8009ce8 <HAL_HCD_IRQHandler+0x1d4>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d014      	beq.n	8009d16 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f022 0210 	bic.w	r2, r2, #16
 8009cfa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f001 f84b 	bl	800ad98 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	699a      	ldr	r2, [r3, #24]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f042 0210 	orr.w	r2, r2, #16
 8009d10:	619a      	str	r2, [r3, #24]
 8009d12:	e000      	b.n	8009d16 <HAL_HCD_IRQHandler+0x202>
      return;
 8009d14:	bf00      	nop
    }
  }
}
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d101      	bne.n	8009d32 <HAL_HCD_Start+0x16>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e013      	b.n	8009d5a <HAL_HCD_Start+0x3e>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f006 fd2e 	bl	80107a0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2101      	movs	r1, #1
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f006 ff84 	bl	8010c58 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d101      	bne.n	8009d78 <HAL_HCD_Stop+0x16>
 8009d74:	2302      	movs	r3, #2
 8009d76:	e00d      	b.n	8009d94 <HAL_HCD_Stop+0x32>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f007 fb63 	bl	8011450 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f006 ff2b 	bl	8010c04 <USB_ResetPort>
 8009dae:	4603      	mov	r3, r0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8009dc4:	78fa      	ldrb	r2, [r7, #3]
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	00db      	lsls	r3, r3, #3
 8009dd0:	440b      	add	r3, r1
 8009dd2:	335c      	adds	r3, #92	; 0x5c
 8009dd4:	781b      	ldrb	r3, [r3, #0]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b083      	sub	sp, #12
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	460b      	mov	r3, r1
 8009dec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009dee:	78fa      	ldrb	r2, [r7, #3]
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	4613      	mov	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	00db      	lsls	r3, r3, #3
 8009dfa:	440b      	add	r3, r1
 8009dfc:	334c      	adds	r3, #76	; 0x4c
 8009dfe:	681b      	ldr	r3, [r3, #0]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f006 ff6d 	bl	8010cf8 <USB_GetCurrentFrame>
 8009e1e:	4603      	mov	r3, r0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f006 ff48 	bl	8010cca <USB_GetHostSpeed>
 8009e3a:	4603      	mov	r3, r0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	f003 0304 	and.w	r3, r3, #4
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d119      	bne.n	8009ea8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e80:	461a      	mov	r2, r3
 8009e82:	2304      	movs	r3, #4
 8009e84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	015a      	lsls	r2, r3, #5
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	0151      	lsls	r1, r2, #5
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	440a      	add	r2, r1
 8009e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ea0:	f043 0302 	orr.w	r3, r3, #2
 8009ea4:	60d3      	str	r3, [r2, #12]
 8009ea6:	e0ce      	b.n	800a046 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ebe:	d12c      	bne.n	8009f1a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	015a      	lsls	r2, r3, #5
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ecc:	461a      	mov	r2, r3
 8009ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ed2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8009ed4:	6879      	ldr	r1, [r7, #4]
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	440b      	add	r3, r1
 8009ee2:	335d      	adds	r3, #93	; 0x5d
 8009ee4:	2207      	movs	r2, #7
 8009ee6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	0151      	lsls	r1, r2, #5
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	440a      	add	r2, r1
 8009efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f02:	f043 0302 	orr.w	r3, r3, #2
 8009f06:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	b2d2      	uxtb	r2, r2
 8009f10:	4611      	mov	r1, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f007 f961 	bl	80111da <USB_HC_Halt>
 8009f18:	e095      	b.n	800a046 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f003 0320 	and.w	r3, r3, #32
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	d109      	bne.n	8009f44 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	2320      	movs	r3, #32
 8009f40:	6093      	str	r3, [r2, #8]
 8009f42:	e080      	b.n	800a046 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f003 0308 	and.w	r3, r3, #8
 8009f56:	2b08      	cmp	r3, #8
 8009f58:	d134      	bne.n	8009fc4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	015a      	lsls	r2, r3, #5
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	4413      	add	r3, r2
 8009f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	0151      	lsls	r1, r2, #5
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	440a      	add	r2, r1
 8009f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f74:	f043 0302 	orr.w	r3, r3, #2
 8009f78:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	440b      	add	r3, r1
 8009f88:	335d      	adds	r3, #93	; 0x5d
 8009f8a:	2205      	movs	r2, #5
 8009f8c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fac:	461a      	mov	r2, r3
 8009fae:	2308      	movs	r3, #8
 8009fb0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	b2d2      	uxtb	r2, r2
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f007 f90c 	bl	80111da <USB_HC_Halt>
 8009fc2:	e040      	b.n	800a046 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fda:	d134      	bne.n	800a046 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	015a      	lsls	r2, r3, #5
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	0151      	lsls	r1, r2, #5
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	440a      	add	r2, r1
 8009ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ff6:	f043 0302 	orr.w	r3, r3, #2
 8009ffa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	4611      	mov	r1, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f007 f8e7 	bl	80111da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	4413      	add	r3, r2
 800a014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a018:	461a      	mov	r2, r3
 800a01a:	2310      	movs	r3, #16
 800a01c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	440b      	add	r3, r1
 800a02c:	335d      	adds	r3, #93	; 0x5d
 800a02e:	2208      	movs	r2, #8
 800a030:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a03e:	461a      	mov	r2, r3
 800a040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a044:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a05c:	d122      	bne.n	800a0a4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	015a      	lsls	r2, r3, #5
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	4413      	add	r3, r2
 800a066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	0151      	lsls	r1, r2, #5
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	440a      	add	r2, r1
 800a074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a078:	f043 0302 	orr.w	r3, r3, #2
 800a07c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	b2d2      	uxtb	r2, r2
 800a086:	4611      	mov	r1, r2
 800a088:	4618      	mov	r0, r3
 800a08a:	f007 f8a6 	bl	80111da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	4413      	add	r3, r2
 800a096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a09a:	461a      	mov	r2, r3
 800a09c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0a0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800a0a2:	e300      	b.n	800a6a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	f040 80fd 	bne.w	800a2b6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d01b      	beq.n	800a0fc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a0c4:	6879      	ldr	r1, [r7, #4]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	00db      	lsls	r3, r3, #3
 800a0d0:	440b      	add	r3, r1
 800a0d2:	3348      	adds	r3, #72	; 0x48
 800a0d4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	0159      	lsls	r1, r3, #5
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	440b      	add	r3, r1
 800a0de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a0e8:	1ad1      	subs	r1, r2, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	00db      	lsls	r3, r3, #3
 800a0f6:	4403      	add	r3, r0
 800a0f8:	334c      	adds	r3, #76	; 0x4c
 800a0fa:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	4613      	mov	r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	440b      	add	r3, r1
 800a10a:	335d      	adds	r3, #93	; 0x5d
 800a10c:	2201      	movs	r2, #1
 800a10e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a110:	6879      	ldr	r1, [r7, #4]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	440b      	add	r3, r1
 800a11e:	3358      	adds	r3, #88	; 0x58
 800a120:	2200      	movs	r2, #0
 800a122:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a130:	461a      	mov	r2, r3
 800a132:	2301      	movs	r3, #1
 800a134:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	4613      	mov	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	440b      	add	r3, r1
 800a144:	333f      	adds	r3, #63	; 0x3f
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00a      	beq.n	800a162 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a14c:	6879      	ldr	r1, [r7, #4]
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	00db      	lsls	r3, r3, #3
 800a158:	440b      	add	r3, r1
 800a15a:	333f      	adds	r3, #63	; 0x3f
 800a15c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d121      	bne.n	800a1a6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	440a      	add	r2, r1
 800a178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a17c:	f043 0302 	orr.w	r3, r3, #2
 800a180:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	b2d2      	uxtb	r2, r2
 800a18a:	4611      	mov	r1, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f007 f824 	bl	80111da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a19e:	461a      	mov	r2, r3
 800a1a0:	2310      	movs	r3, #16
 800a1a2:	6093      	str	r3, [r2, #8]
 800a1a4:	e070      	b.n	800a288 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a1a6:	6879      	ldr	r1, [r7, #4]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	00db      	lsls	r3, r3, #3
 800a1b2:	440b      	add	r3, r1
 800a1b4:	333f      	adds	r3, #63	; 0x3f
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d12a      	bne.n	800a212 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	015a      	lsls	r2, r3, #5
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	0151      	lsls	r1, r2, #5
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	440a      	add	r2, r1
 800a1d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1da:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a1dc:	6879      	ldr	r1, [r7, #4]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	00db      	lsls	r3, r3, #3
 800a1e8:	440b      	add	r3, r1
 800a1ea:	335c      	adds	r3, #92	; 0x5c
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	b2d8      	uxtb	r0, r3
 800a1f4:	6879      	ldr	r1, [r7, #4]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	440b      	add	r3, r1
 800a202:	335c      	adds	r3, #92	; 0x5c
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	4601      	mov	r1, r0
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f00d f8ee 	bl	80173ec <HAL_HCD_HC_NotifyURBChange_Callback>
 800a210:	e03a      	b.n	800a288 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	4613      	mov	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	00db      	lsls	r3, r3, #3
 800a21e:	440b      	add	r3, r1
 800a220:	333f      	adds	r3, #63	; 0x3f
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d12f      	bne.n	800a288 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	4613      	mov	r3, r2
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	00db      	lsls	r3, r3, #3
 800a234:	440b      	add	r3, r1
 800a236:	335c      	adds	r3, #92	; 0x5c
 800a238:	2201      	movs	r2, #1
 800a23a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	4613      	mov	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	440b      	add	r3, r1
 800a24a:	3350      	adds	r3, #80	; 0x50
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	f083 0301 	eor.w	r3, r3, #1
 800a252:	b2d8      	uxtb	r0, r3
 800a254:	6879      	ldr	r1, [r7, #4]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	4613      	mov	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	00db      	lsls	r3, r3, #3
 800a260:	440b      	add	r3, r1
 800a262:	3350      	adds	r3, #80	; 0x50
 800a264:	4602      	mov	r2, r0
 800a266:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	b2d8      	uxtb	r0, r3
 800a26c:	6879      	ldr	r1, [r7, #4]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	4613      	mov	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4413      	add	r3, r2
 800a276:	00db      	lsls	r3, r3, #3
 800a278:	440b      	add	r3, r1
 800a27a:	335c      	adds	r3, #92	; 0x5c
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	4601      	mov	r1, r0
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f00d f8b2 	bl	80173ec <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	4613      	mov	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	440b      	add	r3, r1
 800a296:	3350      	adds	r3, #80	; 0x50
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	f083 0301 	eor.w	r3, r3, #1
 800a29e:	b2d8      	uxtb	r0, r3
 800a2a0:	6879      	ldr	r1, [r7, #4]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	00db      	lsls	r3, r3, #3
 800a2ac:	440b      	add	r3, r1
 800a2ae:	3350      	adds	r3, #80	; 0x50
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	701a      	strb	r2, [r3, #0]
}
 800a2b4:	e1f7      	b.n	800a6a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	015a      	lsls	r2, r3, #5
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f003 0302 	and.w	r3, r3, #2
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	f040 811a 	bne.w	800a502 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	015a      	lsls	r2, r3, #5
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	0151      	lsls	r1, r2, #5
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	440a      	add	r2, r1
 800a2e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2e8:	f023 0302 	bic.w	r3, r3, #2
 800a2ec:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4413      	add	r3, r2
 800a2f8:	00db      	lsls	r3, r3, #3
 800a2fa:	440b      	add	r3, r1
 800a2fc:	335d      	adds	r3, #93	; 0x5d
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d10a      	bne.n	800a31a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a304:	6879      	ldr	r1, [r7, #4]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	4613      	mov	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	440b      	add	r3, r1
 800a312:	335c      	adds	r3, #92	; 0x5c
 800a314:	2201      	movs	r2, #1
 800a316:	701a      	strb	r2, [r3, #0]
 800a318:	e0d9      	b.n	800a4ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a31a:	6879      	ldr	r1, [r7, #4]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	00db      	lsls	r3, r3, #3
 800a326:	440b      	add	r3, r1
 800a328:	335d      	adds	r3, #93	; 0x5d
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b05      	cmp	r3, #5
 800a32e:	d10a      	bne.n	800a346 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a330:	6879      	ldr	r1, [r7, #4]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	4613      	mov	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	00db      	lsls	r3, r3, #3
 800a33c:	440b      	add	r3, r1
 800a33e:	335c      	adds	r3, #92	; 0x5c
 800a340:	2205      	movs	r2, #5
 800a342:	701a      	strb	r2, [r3, #0]
 800a344:	e0c3      	b.n	800a4ce <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	4613      	mov	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	00db      	lsls	r3, r3, #3
 800a352:	440b      	add	r3, r1
 800a354:	335d      	adds	r3, #93	; 0x5d
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b06      	cmp	r3, #6
 800a35a:	d00a      	beq.n	800a372 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a35c:	6879      	ldr	r1, [r7, #4]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	440b      	add	r3, r1
 800a36a:	335d      	adds	r3, #93	; 0x5d
 800a36c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a36e:	2b08      	cmp	r3, #8
 800a370:	d156      	bne.n	800a420 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	4613      	mov	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	4413      	add	r3, r2
 800a37c:	00db      	lsls	r3, r3, #3
 800a37e:	440b      	add	r3, r1
 800a380:	3358      	adds	r3, #88	; 0x58
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	1c59      	adds	r1, r3, #1
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	00db      	lsls	r3, r3, #3
 800a392:	4403      	add	r3, r0
 800a394:	3358      	adds	r3, #88	; 0x58
 800a396:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800a398:	6879      	ldr	r1, [r7, #4]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4613      	mov	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	440b      	add	r3, r1
 800a3a6:	3358      	adds	r3, #88	; 0x58
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d914      	bls.n	800a3d8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a3ae:	6879      	ldr	r1, [r7, #4]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	00db      	lsls	r3, r3, #3
 800a3ba:	440b      	add	r3, r1
 800a3bc:	3358      	adds	r3, #88	; 0x58
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	4413      	add	r3, r2
 800a3cc:	00db      	lsls	r3, r3, #3
 800a3ce:	440b      	add	r3, r1
 800a3d0:	335c      	adds	r3, #92	; 0x5c
 800a3d2:	2204      	movs	r2, #4
 800a3d4:	701a      	strb	r2, [r3, #0]
 800a3d6:	e009      	b.n	800a3ec <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a3d8:	6879      	ldr	r1, [r7, #4]
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	00db      	lsls	r3, r3, #3
 800a3e4:	440b      	add	r3, r1
 800a3e6:	335c      	adds	r3, #92	; 0x5c
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a402:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a40a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	4413      	add	r3, r2
 800a414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a418:	461a      	mov	r2, r3
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	e056      	b.n	800a4ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a420:	6879      	ldr	r1, [r7, #4]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	4613      	mov	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	440b      	add	r3, r1
 800a42e:	335d      	adds	r3, #93	; 0x5d
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2b03      	cmp	r3, #3
 800a434:	d123      	bne.n	800a47e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	4613      	mov	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4413      	add	r3, r2
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	440b      	add	r3, r1
 800a444:	335c      	adds	r3, #92	; 0x5c
 800a446:	2202      	movs	r2, #2
 800a448:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	4413      	add	r3, r2
 800a452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a460:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a468:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	4413      	add	r3, r2
 800a472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a476:	461a      	mov	r2, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	e027      	b.n	800a4ce <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a47e:	6879      	ldr	r1, [r7, #4]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	4613      	mov	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4413      	add	r3, r2
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	440b      	add	r3, r1
 800a48c:	335d      	adds	r3, #93	; 0x5d
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2b07      	cmp	r3, #7
 800a492:	d11c      	bne.n	800a4ce <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800a494:	6879      	ldr	r1, [r7, #4]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	4613      	mov	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	440b      	add	r3, r1
 800a4a2:	3358      	adds	r3, #88	; 0x58
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	1c59      	adds	r1, r3, #1
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	00db      	lsls	r3, r3, #3
 800a4b4:	4403      	add	r3, r0
 800a4b6:	3358      	adds	r3, #88	; 0x58
 800a4b8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	440b      	add	r3, r1
 800a4c8:	335c      	adds	r3, #92	; 0x5c
 800a4ca:	2204      	movs	r2, #4
 800a4cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4da:	461a      	mov	r2, r3
 800a4dc:	2302      	movs	r3, #2
 800a4de:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	b2d8      	uxtb	r0, r3
 800a4e4:	6879      	ldr	r1, [r7, #4]
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4413      	add	r3, r2
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	440b      	add	r3, r1
 800a4f2:	335c      	adds	r3, #92	; 0x5c
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	4601      	mov	r1, r0
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f00c ff76 	bl	80173ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a500:	e0d1      	b.n	800a6a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	015a      	lsls	r2, r3, #5
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a514:	2b80      	cmp	r3, #128	; 0x80
 800a516:	d13e      	bne.n	800a596 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	0151      	lsls	r1, r2, #5
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	440a      	add	r2, r1
 800a52e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a532:	f043 0302 	orr.w	r3, r3, #2
 800a536:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	4613      	mov	r3, r2
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	00db      	lsls	r3, r3, #3
 800a544:	440b      	add	r3, r1
 800a546:	3358      	adds	r3, #88	; 0x58
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	1c59      	adds	r1, r3, #1
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	4613      	mov	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	4403      	add	r3, r0
 800a55a:	3358      	adds	r3, #88	; 0x58
 800a55c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a55e:	6879      	ldr	r1, [r7, #4]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4613      	mov	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	00db      	lsls	r3, r3, #3
 800a56a:	440b      	add	r3, r1
 800a56c:	335d      	adds	r3, #93	; 0x5d
 800a56e:	2206      	movs	r2, #6
 800a570:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	b2d2      	uxtb	r2, r2
 800a57a:	4611      	mov	r1, r2
 800a57c:	4618      	mov	r0, r3
 800a57e:	f006 fe2c 	bl	80111da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a58e:	461a      	mov	r2, r3
 800a590:	2380      	movs	r3, #128	; 0x80
 800a592:	6093      	str	r3, [r2, #8]
}
 800a594:	e087      	b.n	800a6a6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	015a      	lsls	r2, r3, #5
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	4413      	add	r3, r2
 800a59e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f003 0310 	and.w	r3, r3, #16
 800a5a8:	2b10      	cmp	r3, #16
 800a5aa:	d17c      	bne.n	800a6a6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	440b      	add	r3, r1
 800a5ba:	333f      	adds	r3, #63	; 0x3f
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d122      	bne.n	800a608 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a5c2:	6879      	ldr	r1, [r7, #4]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4413      	add	r3, r2
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	440b      	add	r3, r1
 800a5d0:	3358      	adds	r3, #88	; 0x58
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	0151      	lsls	r1, r2, #5
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	440a      	add	r2, r1
 800a5ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5f0:	f043 0302 	orr.w	r3, r3, #2
 800a5f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	b2d2      	uxtb	r2, r2
 800a5fe:	4611      	mov	r1, r2
 800a600:	4618      	mov	r0, r3
 800a602:	f006 fdea 	bl	80111da <USB_HC_Halt>
 800a606:	e045      	b.n	800a694 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a608:	6879      	ldr	r1, [r7, #4]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4613      	mov	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	440b      	add	r3, r1
 800a616:	333f      	adds	r3, #63	; 0x3f
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00a      	beq.n	800a634 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a61e:	6879      	ldr	r1, [r7, #4]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	4613      	mov	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	440b      	add	r3, r1
 800a62c:	333f      	adds	r3, #63	; 0x3f
 800a62e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a630:	2b02      	cmp	r3, #2
 800a632:	d12f      	bne.n	800a694 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a634:	6879      	ldr	r1, [r7, #4]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	4613      	mov	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	00db      	lsls	r3, r3, #3
 800a640:	440b      	add	r3, r1
 800a642:	3358      	adds	r3, #88	; 0x58
 800a644:	2200      	movs	r2, #0
 800a646:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d121      	bne.n	800a694 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800a650:	6879      	ldr	r1, [r7, #4]
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	4613      	mov	r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	440b      	add	r3, r1
 800a65e:	335d      	adds	r3, #93	; 0x5d
 800a660:	2203      	movs	r2, #3
 800a662:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	0151      	lsls	r1, r2, #5
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	440a      	add	r2, r1
 800a67a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a67e:	f043 0302 	orr.w	r3, r3, #2
 800a682:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	b2d2      	uxtb	r2, r2
 800a68c:	4611      	mov	r1, r2
 800a68e:	4618      	mov	r0, r3
 800a690:	f006 fda3 	bl	80111da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	2310      	movs	r3, #16
 800a6a4:	6093      	str	r3, [r2, #8]
}
 800a6a6:	bf00      	nop
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b086      	sub	sp, #24
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	f003 0304 	and.w	r3, r3, #4
 800a6da:	2b04      	cmp	r3, #4
 800a6dc:	d119      	bne.n	800a712 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	015a      	lsls	r2, r3, #5
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	2304      	movs	r3, #4
 800a6ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	015a      	lsls	r2, r3, #5
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	0151      	lsls	r1, r2, #5
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	440a      	add	r2, r1
 800a706:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a70a:	f043 0302 	orr.w	r3, r3, #2
 800a70e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800a710:	e33e      	b.n	800ad90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	f003 0320 	and.w	r3, r3, #32
 800a724:	2b20      	cmp	r3, #32
 800a726:	d141      	bne.n	800a7ac <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a734:	461a      	mov	r2, r3
 800a736:	2320      	movs	r3, #32
 800a738:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800a73a:	6879      	ldr	r1, [r7, #4]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	4613      	mov	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	00db      	lsls	r3, r3, #3
 800a746:	440b      	add	r3, r1
 800a748:	333d      	adds	r3, #61	; 0x3d
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	f040 831f 	bne.w	800ad90 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800a752:	6879      	ldr	r1, [r7, #4]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	00db      	lsls	r3, r3, #3
 800a75e:	440b      	add	r3, r1
 800a760:	333d      	adds	r3, #61	; 0x3d
 800a762:	2200      	movs	r2, #0
 800a764:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	4613      	mov	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	00db      	lsls	r3, r3, #3
 800a772:	440b      	add	r3, r1
 800a774:	335c      	adds	r3, #92	; 0x5c
 800a776:	2202      	movs	r2, #2
 800a778:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	4413      	add	r3, r2
 800a782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	0151      	lsls	r1, r2, #5
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	440a      	add	r2, r1
 800a790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a794:	f043 0302 	orr.w	r3, r3, #2
 800a798:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	b2d2      	uxtb	r2, r2
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f006 fd18 	bl	80111da <USB_HC_Halt>
}
 800a7aa:	e2f1      	b.n	800ad90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	015a      	lsls	r2, r3, #5
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7be:	2b40      	cmp	r3, #64	; 0x40
 800a7c0:	d13f      	bne.n	800a842 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800a7c2:	6879      	ldr	r1, [r7, #4]
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	440b      	add	r3, r1
 800a7d0:	335d      	adds	r3, #93	; 0x5d
 800a7d2:	2204      	movs	r2, #4
 800a7d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	00db      	lsls	r3, r3, #3
 800a7e2:	440b      	add	r3, r1
 800a7e4:	333d      	adds	r3, #61	; 0x3d
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	00db      	lsls	r3, r3, #3
 800a7f6:	440b      	add	r3, r1
 800a7f8:	3358      	adds	r3, #88	; 0x58
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	4413      	add	r3, r2
 800a806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	0151      	lsls	r1, r2, #5
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	440a      	add	r2, r1
 800a814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a818:	f043 0302 	orr.w	r3, r3, #2
 800a81c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	b2d2      	uxtb	r2, r2
 800a826:	4611      	mov	r1, r2
 800a828:	4618      	mov	r0, r3
 800a82a:	f006 fcd6 	bl	80111da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	015a      	lsls	r2, r3, #5
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	4413      	add	r3, r2
 800a836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a83a:	461a      	mov	r2, r3
 800a83c:	2340      	movs	r3, #64	; 0x40
 800a83e:	6093      	str	r3, [r2, #8]
}
 800a840:	e2a6      	b.n	800ad90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a858:	d122      	bne.n	800a8a0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	4413      	add	r3, r2
 800a862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	0151      	lsls	r1, r2, #5
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	440a      	add	r2, r1
 800a870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a874:	f043 0302 	orr.w	r3, r3, #2
 800a878:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	b2d2      	uxtb	r2, r2
 800a882:	4611      	mov	r1, r2
 800a884:	4618      	mov	r0, r3
 800a886:	f006 fca8 	bl	80111da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	015a      	lsls	r2, r3, #5
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	4413      	add	r3, r2
 800a892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a896:	461a      	mov	r2, r3
 800a898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a89c:	6093      	str	r3, [r2, #8]
}
 800a89e:	e277      	b.n	800ad90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	015a      	lsls	r2, r3, #5
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d135      	bne.n	800a922 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a8b6:	6879      	ldr	r1, [r7, #4]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	00db      	lsls	r3, r3, #3
 800a8c2:	440b      	add	r3, r1
 800a8c4:	3358      	adds	r3, #88	; 0x58
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	015a      	lsls	r2, r3, #5
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	0151      	lsls	r1, r2, #5
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	440a      	add	r2, r1
 800a8e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8e4:	f043 0302 	orr.w	r3, r3, #2
 800a8e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	b2d2      	uxtb	r2, r2
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f006 fc70 	bl	80111da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	015a      	lsls	r2, r3, #5
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	4413      	add	r3, r2
 800a902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a906:	461a      	mov	r2, r3
 800a908:	2301      	movs	r3, #1
 800a90a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	440b      	add	r3, r1
 800a91a:	335d      	adds	r3, #93	; 0x5d
 800a91c:	2201      	movs	r2, #1
 800a91e:	701a      	strb	r2, [r3, #0]
}
 800a920:	e236      	b.n	800ad90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	015a      	lsls	r2, r3, #5
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	4413      	add	r3, r2
 800a92a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	f003 0308 	and.w	r3, r3, #8
 800a934:	2b08      	cmp	r3, #8
 800a936:	d12b      	bne.n	800a990 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a944:	461a      	mov	r2, r3
 800a946:	2308      	movs	r3, #8
 800a948:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	4413      	add	r3, r2
 800a952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	0151      	lsls	r1, r2, #5
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	440a      	add	r2, r1
 800a960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a964:	f043 0302 	orr.w	r3, r3, #2
 800a968:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	b2d2      	uxtb	r2, r2
 800a972:	4611      	mov	r1, r2
 800a974:	4618      	mov	r0, r3
 800a976:	f006 fc30 	bl	80111da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800a97a:	6879      	ldr	r1, [r7, #4]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	4613      	mov	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4413      	add	r3, r2
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	440b      	add	r3, r1
 800a988:	335d      	adds	r3, #93	; 0x5d
 800a98a:	2205      	movs	r2, #5
 800a98c:	701a      	strb	r2, [r3, #0]
}
 800a98e:	e1ff      	b.n	800ad90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	4413      	add	r3, r2
 800a998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	f003 0310 	and.w	r3, r3, #16
 800a9a2:	2b10      	cmp	r3, #16
 800a9a4:	d155      	bne.n	800aa52 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a9a6:	6879      	ldr	r1, [r7, #4]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	440b      	add	r3, r1
 800a9b4:	3358      	adds	r3, #88	; 0x58
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800a9ba:	6879      	ldr	r1, [r7, #4]
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4413      	add	r3, r2
 800a9c4:	00db      	lsls	r3, r3, #3
 800a9c6:	440b      	add	r3, r1
 800a9c8:	335d      	adds	r3, #93	; 0x5d
 800a9ca:	2203      	movs	r2, #3
 800a9cc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	00db      	lsls	r3, r3, #3
 800a9da:	440b      	add	r3, r1
 800a9dc:	333d      	adds	r3, #61	; 0x3d
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d114      	bne.n	800aa0e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	440b      	add	r3, r1
 800a9f2:	333c      	adds	r3, #60	; 0x3c
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d109      	bne.n	800aa0e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800a9fa:	6879      	ldr	r1, [r7, #4]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	440b      	add	r3, r1
 800aa08:	333d      	adds	r3, #61	; 0x3d
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	015a      	lsls	r2, r3, #5
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	4413      	add	r3, r2
 800aa16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	0151      	lsls	r1, r2, #5
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	440a      	add	r2, r1
 800aa24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa28:	f043 0302 	orr.w	r3, r3, #2
 800aa2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	b2d2      	uxtb	r2, r2
 800aa36:	4611      	mov	r1, r2
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f006 fbce 	bl	80111da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	2310      	movs	r3, #16
 800aa4e:	6093      	str	r3, [r2, #8]
}
 800aa50:	e19e      	b.n	800ad90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	015a      	lsls	r2, r3, #5
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	4413      	add	r3, r2
 800aa5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa64:	2b80      	cmp	r3, #128	; 0x80
 800aa66:	d12b      	bne.n	800aac0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	0151      	lsls	r1, r2, #5
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	440a      	add	r2, r1
 800aa7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa82:	f043 0302 	orr.w	r3, r3, #2
 800aa86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	b2d2      	uxtb	r2, r2
 800aa90:	4611      	mov	r1, r2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f006 fba1 	bl	80111da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800aa98:	6879      	ldr	r1, [r7, #4]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	440b      	add	r3, r1
 800aaa6:	335d      	adds	r3, #93	; 0x5d
 800aaa8:	2206      	movs	r2, #6
 800aaaa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aab8:	461a      	mov	r2, r3
 800aaba:	2380      	movs	r3, #128	; 0x80
 800aabc:	6093      	str	r3, [r2, #8]
}
 800aabe:	e167      	b.n	800ad90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	015a      	lsls	r2, r3, #5
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aad6:	d135      	bne.n	800ab44 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	0151      	lsls	r1, r2, #5
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	440a      	add	r2, r1
 800aaee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aaf2:	f043 0302 	orr.w	r3, r3, #2
 800aaf6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	b2d2      	uxtb	r2, r2
 800ab00:	4611      	mov	r1, r2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f006 fb69 	bl	80111da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab14:	461a      	mov	r2, r3
 800ab16:	2310      	movs	r3, #16
 800ab18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	015a      	lsls	r2, r3, #5
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab26:	461a      	mov	r2, r3
 800ab28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800ab2e:	6879      	ldr	r1, [r7, #4]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	4613      	mov	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	00db      	lsls	r3, r3, #3
 800ab3a:	440b      	add	r3, r1
 800ab3c:	335d      	adds	r3, #93	; 0x5d
 800ab3e:	2208      	movs	r2, #8
 800ab40:	701a      	strb	r2, [r3, #0]
}
 800ab42:	e125      	b.n	800ad90 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f003 0302 	and.w	r3, r3, #2
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	f040 811a 	bne.w	800ad90 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	0151      	lsls	r1, r2, #5
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	440a      	add	r2, r1
 800ab72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab76:	f023 0302 	bic.w	r3, r3, #2
 800ab7a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4613      	mov	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	440b      	add	r3, r1
 800ab8a:	335d      	adds	r3, #93	; 0x5d
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d137      	bne.n	800ac02 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800ab92:	6879      	ldr	r1, [r7, #4]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	4613      	mov	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4413      	add	r3, r2
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	440b      	add	r3, r1
 800aba0:	335c      	adds	r3, #92	; 0x5c
 800aba2:	2201      	movs	r2, #1
 800aba4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	00db      	lsls	r3, r3, #3
 800abb2:	440b      	add	r3, r1
 800abb4:	333f      	adds	r3, #63	; 0x3f
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d00b      	beq.n	800abd4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	00db      	lsls	r3, r3, #3
 800abc8:	440b      	add	r3, r1
 800abca:	333f      	adds	r3, #63	; 0x3f
 800abcc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800abce:	2b03      	cmp	r3, #3
 800abd0:	f040 80c5 	bne.w	800ad5e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4613      	mov	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	440b      	add	r3, r1
 800abe2:	3351      	adds	r3, #81	; 0x51
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	f083 0301 	eor.w	r3, r3, #1
 800abea:	b2d8      	uxtb	r0, r3
 800abec:	6879      	ldr	r1, [r7, #4]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	440b      	add	r3, r1
 800abfa:	3351      	adds	r3, #81	; 0x51
 800abfc:	4602      	mov	r2, r0
 800abfe:	701a      	strb	r2, [r3, #0]
 800ac00:	e0ad      	b.n	800ad5e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800ac02:	6879      	ldr	r1, [r7, #4]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	4613      	mov	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	00db      	lsls	r3, r3, #3
 800ac0e:	440b      	add	r3, r1
 800ac10:	335d      	adds	r3, #93	; 0x5d
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	2b03      	cmp	r3, #3
 800ac16:	d10a      	bne.n	800ac2e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ac18:	6879      	ldr	r1, [r7, #4]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	00db      	lsls	r3, r3, #3
 800ac24:	440b      	add	r3, r1
 800ac26:	335c      	adds	r3, #92	; 0x5c
 800ac28:	2202      	movs	r2, #2
 800ac2a:	701a      	strb	r2, [r3, #0]
 800ac2c:	e097      	b.n	800ad5e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800ac2e:	6879      	ldr	r1, [r7, #4]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4613      	mov	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	00db      	lsls	r3, r3, #3
 800ac3a:	440b      	add	r3, r1
 800ac3c:	335d      	adds	r3, #93	; 0x5d
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	2b04      	cmp	r3, #4
 800ac42:	d10a      	bne.n	800ac5a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800ac44:	6879      	ldr	r1, [r7, #4]
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	00db      	lsls	r3, r3, #3
 800ac50:	440b      	add	r3, r1
 800ac52:	335c      	adds	r3, #92	; 0x5c
 800ac54:	2202      	movs	r2, #2
 800ac56:	701a      	strb	r2, [r3, #0]
 800ac58:	e081      	b.n	800ad5e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	00db      	lsls	r3, r3, #3
 800ac66:	440b      	add	r3, r1
 800ac68:	335d      	adds	r3, #93	; 0x5d
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2b05      	cmp	r3, #5
 800ac6e:	d10a      	bne.n	800ac86 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800ac70:	6879      	ldr	r1, [r7, #4]
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	00db      	lsls	r3, r3, #3
 800ac7c:	440b      	add	r3, r1
 800ac7e:	335c      	adds	r3, #92	; 0x5c
 800ac80:	2205      	movs	r2, #5
 800ac82:	701a      	strb	r2, [r3, #0]
 800ac84:	e06b      	b.n	800ad5e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	00db      	lsls	r3, r3, #3
 800ac92:	440b      	add	r3, r1
 800ac94:	335d      	adds	r3, #93	; 0x5d
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b06      	cmp	r3, #6
 800ac9a:	d00a      	beq.n	800acb2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800ac9c:	6879      	ldr	r1, [r7, #4]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	4613      	mov	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	00db      	lsls	r3, r3, #3
 800aca8:	440b      	add	r3, r1
 800acaa:	335d      	adds	r3, #93	; 0x5d
 800acac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800acae:	2b08      	cmp	r3, #8
 800acb0:	d155      	bne.n	800ad5e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	440b      	add	r3, r1
 800acc0:	3358      	adds	r3, #88	; 0x58
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	1c59      	adds	r1, r3, #1
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	4613      	mov	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4413      	add	r3, r2
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	4403      	add	r3, r0
 800acd4:	3358      	adds	r3, #88	; 0x58
 800acd6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800acd8:	6879      	ldr	r1, [r7, #4]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	440b      	add	r3, r1
 800ace6:	3358      	adds	r3, #88	; 0x58
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b03      	cmp	r3, #3
 800acec:	d914      	bls.n	800ad18 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	4613      	mov	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	00db      	lsls	r3, r3, #3
 800acfa:	440b      	add	r3, r1
 800acfc:	3358      	adds	r3, #88	; 0x58
 800acfe:	2200      	movs	r2, #0
 800ad00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800ad02:	6879      	ldr	r1, [r7, #4]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	4613      	mov	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	440b      	add	r3, r1
 800ad10:	335c      	adds	r3, #92	; 0x5c
 800ad12:	2204      	movs	r2, #4
 800ad14:	701a      	strb	r2, [r3, #0]
 800ad16:	e009      	b.n	800ad2c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800ad18:	6879      	ldr	r1, [r7, #4]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	440b      	add	r3, r1
 800ad26:	335c      	adds	r3, #92	; 0x5c
 800ad28:	2202      	movs	r2, #2
 800ad2a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	015a      	lsls	r2, r3, #5
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad42:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad4a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad58:	461a      	mov	r2, r3
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	015a      	lsls	r2, r3, #5
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	4413      	add	r3, r2
 800ad66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	2302      	movs	r3, #2
 800ad6e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	b2d8      	uxtb	r0, r3
 800ad74:	6879      	ldr	r1, [r7, #4]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	440b      	add	r3, r1
 800ad82:	335c      	adds	r3, #92	; 0x5c
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	461a      	mov	r2, r3
 800ad88:	4601      	mov	r1, r0
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f00c fb2e 	bl	80173ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800ad90:	bf00      	nop
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b08a      	sub	sp, #40	; 0x28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	f003 030f 	and.w	r3, r3, #15
 800adb8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	0c5b      	lsrs	r3, r3, #17
 800adbe:	f003 030f 	and.w	r3, r3, #15
 800adc2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	091b      	lsrs	r3, r3, #4
 800adc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800adcc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b02      	cmp	r3, #2
 800add2:	d003      	beq.n	800addc <HCD_RXQLVL_IRQHandler+0x44>
 800add4:	2b05      	cmp	r3, #5
 800add6:	f000 8082 	beq.w	800aede <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800adda:	e083      	b.n	800aee4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d07f      	beq.n	800aee2 <HCD_RXQLVL_IRQHandler+0x14a>
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	4613      	mov	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	00db      	lsls	r3, r3, #3
 800adee:	440b      	add	r3, r1
 800adf0:	3344      	adds	r3, #68	; 0x44
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d074      	beq.n	800aee2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6818      	ldr	r0, [r3, #0]
 800adfc:	6879      	ldr	r1, [r7, #4]
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	4613      	mov	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4413      	add	r3, r2
 800ae06:	00db      	lsls	r3, r3, #3
 800ae08:	440b      	add	r3, r1
 800ae0a:	3344      	adds	r3, #68	; 0x44
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	b292      	uxth	r2, r2
 800ae12:	4619      	mov	r1, r3
 800ae14:	f005 fd8d 	bl	8010932 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800ae18:	6879      	ldr	r1, [r7, #4]
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	00db      	lsls	r3, r3, #3
 800ae24:	440b      	add	r3, r1
 800ae26:	3344      	adds	r3, #68	; 0x44
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	18d1      	adds	r1, r2, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	69ba      	ldr	r2, [r7, #24]
 800ae32:	4613      	mov	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	4403      	add	r3, r0
 800ae3c:	3344      	adds	r3, #68	; 0x44
 800ae3e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800ae40:	6879      	ldr	r1, [r7, #4]
 800ae42:	69ba      	ldr	r2, [r7, #24]
 800ae44:	4613      	mov	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	440b      	add	r3, r1
 800ae4e:	334c      	adds	r3, #76	; 0x4c
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	18d1      	adds	r1, r2, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4413      	add	r3, r2
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	4403      	add	r3, r0
 800ae64:	334c      	adds	r3, #76	; 0x4c
 800ae66:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	015a      	lsls	r2, r3, #5
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	4413      	add	r3, r2
 800ae70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae74:	691a      	ldr	r2, [r3, #16]
 800ae76:	4b1d      	ldr	r3, [pc, #116]	; (800aeec <HCD_RXQLVL_IRQHandler+0x154>)
 800ae78:	4013      	ands	r3, r2
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d031      	beq.n	800aee2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	6a3b      	ldr	r3, [r7, #32]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae94:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae9c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	6a3b      	ldr	r3, [r7, #32]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeaa:	461a      	mov	r2, r3
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	69ba      	ldr	r2, [r7, #24]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	440b      	add	r3, r1
 800aebe:	3350      	adds	r3, #80	; 0x50
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	f083 0301 	eor.w	r3, r3, #1
 800aec6:	b2d8      	uxtb	r0, r3
 800aec8:	6879      	ldr	r1, [r7, #4]
 800aeca:	69ba      	ldr	r2, [r7, #24]
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	00db      	lsls	r3, r3, #3
 800aed4:	440b      	add	r3, r1
 800aed6:	3350      	adds	r3, #80	; 0x50
 800aed8:	4602      	mov	r2, r0
 800aeda:	701a      	strb	r2, [r3, #0]
      break;
 800aedc:	e001      	b.n	800aee2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800aede:	bf00      	nop
 800aee0:	e000      	b.n	800aee4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800aee2:	bf00      	nop
  }
}
 800aee4:	bf00      	nop
 800aee6:	3728      	adds	r7, #40	; 0x28
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	1ff80000 	.word	0x1ff80000

0800aef0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800af1c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f003 0302 	and.w	r3, r3, #2
 800af24:	2b02      	cmp	r3, #2
 800af26:	d10b      	bne.n	800af40 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f003 0301 	and.w	r3, r3, #1
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d102      	bne.n	800af38 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f00c fa3e 	bl	80173b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	f043 0302 	orr.w	r3, r3, #2
 800af3e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f003 0308 	and.w	r3, r3, #8
 800af46:	2b08      	cmp	r3, #8
 800af48:	d132      	bne.n	800afb0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f043 0308 	orr.w	r3, r3, #8
 800af50:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f003 0304 	and.w	r3, r3, #4
 800af58:	2b04      	cmp	r3, #4
 800af5a:	d126      	bne.n	800afaa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	2b02      	cmp	r3, #2
 800af62:	d113      	bne.n	800af8c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800af6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af6e:	d106      	bne.n	800af7e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2102      	movs	r1, #2
 800af76:	4618      	mov	r0, r3
 800af78:	f005 fe0a 	bl	8010b90 <USB_InitFSLSPClkSel>
 800af7c:	e011      	b.n	800afa2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2101      	movs	r1, #1
 800af84:	4618      	mov	r0, r3
 800af86:	f005 fe03 	bl	8010b90 <USB_InitFSLSPClkSel>
 800af8a:	e00a      	b.n	800afa2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d106      	bne.n	800afa2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af9a:	461a      	mov	r2, r3
 800af9c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800afa0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f00c fa34 	bl	8017410 <HAL_HCD_PortEnabled_Callback>
 800afa8:	e002      	b.n	800afb0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f00c fa3e 	bl	801742c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f003 0320 	and.w	r3, r3, #32
 800afb6:	2b20      	cmp	r3, #32
 800afb8:	d103      	bne.n	800afc2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	f043 0320 	orr.w	r3, r3, #32
 800afc0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800afc8:	461a      	mov	r2, r3
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	6013      	str	r3, [r2, #0]
}
 800afce:	bf00      	nop
 800afd0:	3718      	adds	r7, #24
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e07f      	b.n	800b0ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d106      	bne.n	800b004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7f7 fe8e 	bl	8002d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2224      	movs	r2, #36	; 0x24
 800b008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f022 0201 	bic.w	r2, r2, #1
 800b01a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b028:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	689a      	ldr	r2, [r3, #8]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b038:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d107      	bne.n	800b052 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	689a      	ldr	r2, [r3, #8]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b04e:	609a      	str	r2, [r3, #8]
 800b050:	e006      	b.n	800b060 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	689a      	ldr	r2, [r3, #8]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b05e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	2b02      	cmp	r3, #2
 800b066:	d104      	bne.n	800b072 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b070:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	6859      	ldr	r1, [r3, #4]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	4b1d      	ldr	r3, [pc, #116]	; (800b0f4 <HAL_I2C_Init+0x11c>)
 800b07e:	430b      	orrs	r3, r1
 800b080:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b090:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	691a      	ldr	r2, [r3, #16]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	ea42 0103 	orr.w	r1, r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	699b      	ldr	r3, [r3, #24]
 800b0a2:	021a      	lsls	r2, r3, #8
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	430a      	orrs	r2, r1
 800b0aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	69d9      	ldr	r1, [r3, #28]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a1a      	ldr	r2, [r3, #32]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	430a      	orrs	r2, r1
 800b0ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f042 0201 	orr.w	r2, r2, #1
 800b0ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	02008000 	.word	0x02008000

0800b0f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e021      	b.n	800b14e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2224      	movs	r2, #36	; 0x24
 800b10e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f022 0201 	bic.w	r2, r2, #1
 800b120:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f7f7 fe74 	bl	8002e10 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b088      	sub	sp, #32
 800b15c:	af02      	add	r7, sp, #8
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	4608      	mov	r0, r1
 800b162:	4611      	mov	r1, r2
 800b164:	461a      	mov	r2, r3
 800b166:	4603      	mov	r3, r0
 800b168:	817b      	strh	r3, [r7, #10]
 800b16a:	460b      	mov	r3, r1
 800b16c:	813b      	strh	r3, [r7, #8]
 800b16e:	4613      	mov	r3, r2
 800b170:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b20      	cmp	r3, #32
 800b17c:	f040 80f9 	bne.w	800b372 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b180:	6a3b      	ldr	r3, [r7, #32]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <HAL_I2C_Mem_Write+0x34>
 800b186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d105      	bne.n	800b198 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b192:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	e0ed      	b.n	800b374 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d101      	bne.n	800b1a6 <HAL_I2C_Mem_Write+0x4e>
 800b1a2:	2302      	movs	r3, #2
 800b1a4:	e0e6      	b.n	800b374 <HAL_I2C_Mem_Write+0x21c>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b1ae:	f7fc facf 	bl	8007750 <HAL_GetTick>
 800b1b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	2319      	movs	r3, #25
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 fad1 	bl	800b768 <I2C_WaitOnFlagUntilTimeout>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e0d1      	b.n	800b374 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2221      	movs	r2, #33	; 0x21
 800b1d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2240      	movs	r2, #64	; 0x40
 800b1dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6a3a      	ldr	r2, [r7, #32]
 800b1ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b1f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b1f8:	88f8      	ldrh	r0, [r7, #6]
 800b1fa:	893a      	ldrh	r2, [r7, #8]
 800b1fc:	8979      	ldrh	r1, [r7, #10]
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b204:	9300      	str	r3, [sp, #0]
 800b206:	4603      	mov	r3, r0
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 f9e1 	bl	800b5d0 <I2C_RequestMemoryWrite>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e0a9      	b.n	800b374 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b224:	b29b      	uxth	r3, r3
 800b226:	2bff      	cmp	r3, #255	; 0xff
 800b228:	d90e      	bls.n	800b248 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	22ff      	movs	r2, #255	; 0xff
 800b22e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b234:	b2da      	uxtb	r2, r3
 800b236:	8979      	ldrh	r1, [r7, #10]
 800b238:	2300      	movs	r3, #0
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f000 fbb3 	bl	800b9ac <I2C_TransferConfig>
 800b246:	e00f      	b.n	800b268 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b256:	b2da      	uxtb	r2, r3
 800b258:	8979      	ldrh	r1, [r7, #10]
 800b25a:	2300      	movs	r3, #0
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f000 fba2 	bl	800b9ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b268:	697a      	ldr	r2, [r7, #20]
 800b26a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f000 fabb 	bl	800b7e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	e07b      	b.n	800b374 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b280:	781a      	ldrb	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	1c5a      	adds	r2, r3, #1
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b296:	b29b      	uxth	r3, r3
 800b298:	3b01      	subs	r3, #1
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d034      	beq.n	800b320 <HAL_I2C_Mem_Write+0x1c8>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d130      	bne.n	800b320 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2180      	movs	r1, #128	; 0x80
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f000 fa4d 	bl	800b768 <I2C_WaitOnFlagUntilTimeout>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e04d      	b.n	800b374 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	2bff      	cmp	r3, #255	; 0xff
 800b2e0:	d90e      	bls.n	800b300 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	22ff      	movs	r2, #255	; 0xff
 800b2e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	8979      	ldrh	r1, [r7, #10]
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f000 fb57 	bl	800b9ac <I2C_TransferConfig>
 800b2fe:	e00f      	b.n	800b320 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b304:	b29a      	uxth	r2, r3
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b30e:	b2da      	uxtb	r2, r3
 800b310:	8979      	ldrh	r1, [r7, #10]
 800b312:	2300      	movs	r3, #0
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 fb46 	bl	800b9ac <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b324:	b29b      	uxth	r3, r3
 800b326:	2b00      	cmp	r3, #0
 800b328:	d19e      	bne.n	800b268 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b32a:	697a      	ldr	r2, [r7, #20]
 800b32c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f000 fa9a 	bl	800b868 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e01a      	b.n	800b374 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2220      	movs	r2, #32
 800b344:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	6859      	ldr	r1, [r3, #4]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	4b0a      	ldr	r3, [pc, #40]	; (800b37c <HAL_I2C_Mem_Write+0x224>)
 800b352:	400b      	ands	r3, r1
 800b354:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2220      	movs	r2, #32
 800b35a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b36e:	2300      	movs	r3, #0
 800b370:	e000      	b.n	800b374 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b372:	2302      	movs	r3, #2
  }
}
 800b374:	4618      	mov	r0, r3
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	fe00e800 	.word	0xfe00e800

0800b380 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b088      	sub	sp, #32
 800b384:	af02      	add	r7, sp, #8
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	4608      	mov	r0, r1
 800b38a:	4611      	mov	r1, r2
 800b38c:	461a      	mov	r2, r3
 800b38e:	4603      	mov	r3, r0
 800b390:	817b      	strh	r3, [r7, #10]
 800b392:	460b      	mov	r3, r1
 800b394:	813b      	strh	r3, [r7, #8]
 800b396:	4613      	mov	r3, r2
 800b398:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b20      	cmp	r3, #32
 800b3a4:	f040 80fd 	bne.w	800b5a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <HAL_I2C_Mem_Read+0x34>
 800b3ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d105      	bne.n	800b3c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e0f1      	b.n	800b5a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d101      	bne.n	800b3ce <HAL_I2C_Mem_Read+0x4e>
 800b3ca:	2302      	movs	r3, #2
 800b3cc:	e0ea      	b.n	800b5a4 <HAL_I2C_Mem_Read+0x224>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b3d6:	f7fc f9bb 	bl	8007750 <HAL_GetTick>
 800b3da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	2319      	movs	r3, #25
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 f9bd 	bl	800b768 <I2C_WaitOnFlagUntilTimeout>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e0d5      	b.n	800b5a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2222      	movs	r2, #34	; 0x22
 800b3fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2240      	movs	r2, #64	; 0x40
 800b404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6a3a      	ldr	r2, [r7, #32]
 800b412:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b418:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b420:	88f8      	ldrh	r0, [r7, #6]
 800b422:	893a      	ldrh	r2, [r7, #8]
 800b424:	8979      	ldrh	r1, [r7, #10]
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	9301      	str	r3, [sp, #4]
 800b42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	4603      	mov	r3, r0
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f000 f921 	bl	800b678 <I2C_RequestMemoryRead>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d005      	beq.n	800b448 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e0ad      	b.n	800b5a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	2bff      	cmp	r3, #255	; 0xff
 800b450:	d90e      	bls.n	800b470 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	22ff      	movs	r2, #255	; 0xff
 800b456:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	8979      	ldrh	r1, [r7, #10]
 800b460:	4b52      	ldr	r3, [pc, #328]	; (800b5ac <HAL_I2C_Mem_Read+0x22c>)
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 fa9f 	bl	800b9ac <I2C_TransferConfig>
 800b46e:	e00f      	b.n	800b490 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b474:	b29a      	uxth	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b47e:	b2da      	uxtb	r2, r3
 800b480:	8979      	ldrh	r1, [r7, #10]
 800b482:	4b4a      	ldr	r3, [pc, #296]	; (800b5ac <HAL_I2C_Mem_Read+0x22c>)
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f000 fa8e 	bl	800b9ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b496:	2200      	movs	r2, #0
 800b498:	2104      	movs	r1, #4
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f000 f964 	bl	800b768 <I2C_WaitOnFlagUntilTimeout>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e07c      	b.n	800b5a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b4:	b2d2      	uxtb	r2, r2
 800b4b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4bc:	1c5a      	adds	r2, r3, #1
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d034      	beq.n	800b550 <HAL_I2C_Mem_Read+0x1d0>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d130      	bne.n	800b550 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	2180      	movs	r1, #128	; 0x80
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f000 f935 	bl	800b768 <I2C_WaitOnFlagUntilTimeout>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d001      	beq.n	800b508 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	e04d      	b.n	800b5a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	2bff      	cmp	r3, #255	; 0xff
 800b510:	d90e      	bls.n	800b530 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	22ff      	movs	r2, #255	; 0xff
 800b516:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	8979      	ldrh	r1, [r7, #10]
 800b520:	2300      	movs	r3, #0
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f000 fa3f 	bl	800b9ac <I2C_TransferConfig>
 800b52e:	e00f      	b.n	800b550 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b534:	b29a      	uxth	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	8979      	ldrh	r1, [r7, #10]
 800b542:	2300      	movs	r3, #0
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f000 fa2e 	bl	800b9ac <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b554:	b29b      	uxth	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d19a      	bne.n	800b490 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 f982 	bl	800b868 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d001      	beq.n	800b56e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e01a      	b.n	800b5a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2220      	movs	r2, #32
 800b574:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6859      	ldr	r1, [r3, #4]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <HAL_I2C_Mem_Read+0x230>)
 800b582:	400b      	ands	r3, r1
 800b584:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2220      	movs	r2, #32
 800b58a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e000      	b.n	800b5a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b5a2:	2302      	movs	r3, #2
  }
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3718      	adds	r7, #24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	80002400 	.word	0x80002400
 800b5b0:	fe00e800 	.word	0xfe00e800

0800b5b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5c2:	b2db      	uxtb	r3, r3
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b086      	sub	sp, #24
 800b5d4:	af02      	add	r7, sp, #8
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	4608      	mov	r0, r1
 800b5da:	4611      	mov	r1, r2
 800b5dc:	461a      	mov	r2, r3
 800b5de:	4603      	mov	r3, r0
 800b5e0:	817b      	strh	r3, [r7, #10]
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	813b      	strh	r3, [r7, #8]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b5ea:	88fb      	ldrh	r3, [r7, #6]
 800b5ec:	b2da      	uxtb	r2, r3
 800b5ee:	8979      	ldrh	r1, [r7, #10]
 800b5f0:	4b20      	ldr	r3, [pc, #128]	; (800b674 <I2C_RequestMemoryWrite+0xa4>)
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f000 f9d7 	bl	800b9ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5fe:	69fa      	ldr	r2, [r7, #28]
 800b600:	69b9      	ldr	r1, [r7, #24]
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f000 f8f0 	bl	800b7e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e02c      	b.n	800b66c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b612:	88fb      	ldrh	r3, [r7, #6]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d105      	bne.n	800b624 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b618:	893b      	ldrh	r3, [r7, #8]
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	629a      	str	r2, [r3, #40]	; 0x28
 800b622:	e015      	b.n	800b650 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b624:	893b      	ldrh	r3, [r7, #8]
 800b626:	0a1b      	lsrs	r3, r3, #8
 800b628:	b29b      	uxth	r3, r3
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b632:	69fa      	ldr	r2, [r7, #28]
 800b634:	69b9      	ldr	r1, [r7, #24]
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 f8d6 	bl	800b7e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	e012      	b.n	800b66c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b646:	893b      	ldrh	r3, [r7, #8]
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	2200      	movs	r2, #0
 800b658:	2180      	movs	r1, #128	; 0x80
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f000 f884 	bl	800b768 <I2C_WaitOnFlagUntilTimeout>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e000      	b.n	800b66c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	80002000 	.word	0x80002000

0800b678 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af02      	add	r7, sp, #8
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	4608      	mov	r0, r1
 800b682:	4611      	mov	r1, r2
 800b684:	461a      	mov	r2, r3
 800b686:	4603      	mov	r3, r0
 800b688:	817b      	strh	r3, [r7, #10]
 800b68a:	460b      	mov	r3, r1
 800b68c:	813b      	strh	r3, [r7, #8]
 800b68e:	4613      	mov	r3, r2
 800b690:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b692:	88fb      	ldrh	r3, [r7, #6]
 800b694:	b2da      	uxtb	r2, r3
 800b696:	8979      	ldrh	r1, [r7, #10]
 800b698:	4b20      	ldr	r3, [pc, #128]	; (800b71c <I2C_RequestMemoryRead+0xa4>)
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	2300      	movs	r3, #0
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f000 f984 	bl	800b9ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6a4:	69fa      	ldr	r2, [r7, #28]
 800b6a6:	69b9      	ldr	r1, [r7, #24]
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f000 f89d 	bl	800b7e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e02c      	b.n	800b712 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6b8:	88fb      	ldrh	r3, [r7, #6]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d105      	bne.n	800b6ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b6be:	893b      	ldrh	r3, [r7, #8]
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	629a      	str	r2, [r3, #40]	; 0x28
 800b6c8:	e015      	b.n	800b6f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b6ca:	893b      	ldrh	r3, [r7, #8]
 800b6cc:	0a1b      	lsrs	r3, r3, #8
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6d8:	69fa      	ldr	r2, [r7, #28]
 800b6da:	69b9      	ldr	r1, [r7, #24]
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f000 f883 	bl	800b7e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d001      	beq.n	800b6ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e012      	b.n	800b712 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b6ec:	893b      	ldrh	r3, [r7, #8]
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2140      	movs	r1, #64	; 0x40
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 f831 	bl	800b768 <I2C_WaitOnFlagUntilTimeout>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	e000      	b.n	800b712 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	80002000 	.word	0x80002000

0800b720 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	f003 0302 	and.w	r3, r3, #2
 800b732:	2b02      	cmp	r3, #2
 800b734:	d103      	bne.n	800b73e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2200      	movs	r2, #0
 800b73c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	f003 0301 	and.w	r3, r3, #1
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d007      	beq.n	800b75c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	699a      	ldr	r2, [r3, #24]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f042 0201 	orr.w	r2, r2, #1
 800b75a:	619a      	str	r2, [r3, #24]
  }
}
 800b75c:	bf00      	nop
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	603b      	str	r3, [r7, #0]
 800b774:	4613      	mov	r3, r2
 800b776:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b778:	e022      	b.n	800b7c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b780:	d01e      	beq.n	800b7c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b782:	f7fb ffe5 	bl	8007750 <HAL_GetTick>
 800b786:	4602      	mov	r2, r0
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	1ad3      	subs	r3, r2, r3
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d302      	bcc.n	800b798 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d113      	bne.n	800b7c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b79c:	f043 0220 	orr.w	r2, r3, #32
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2220      	movs	r2, #32
 800b7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e00f      	b.n	800b7e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	bf0c      	ite	eq
 800b7d0:	2301      	moveq	r3, #1
 800b7d2:	2300      	movne	r3, #0
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	79fb      	ldrb	r3, [r7, #7]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d0cd      	beq.n	800b77a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b7f4:	e02c      	b.n	800b850 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	68b9      	ldr	r1, [r7, #8]
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 f870 	bl	800b8e0 <I2C_IsAcknowledgeFailed>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d001      	beq.n	800b80a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e02a      	b.n	800b860 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b810:	d01e      	beq.n	800b850 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b812:	f7fb ff9d 	bl	8007750 <HAL_GetTick>
 800b816:	4602      	mov	r2, r0
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d302      	bcc.n	800b828 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d113      	bne.n	800b850 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b82c:	f043 0220 	orr.w	r2, r3, #32
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2220      	movs	r2, #32
 800b838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e007      	b.n	800b860 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	699b      	ldr	r3, [r3, #24]
 800b856:	f003 0302 	and.w	r3, r3, #2
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d1cb      	bne.n	800b7f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b874:	e028      	b.n	800b8c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	68b9      	ldr	r1, [r7, #8]
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 f830 	bl	800b8e0 <I2C_IsAcknowledgeFailed>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	e026      	b.n	800b8d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b88a:	f7fb ff61 	bl	8007750 <HAL_GetTick>
 800b88e:	4602      	mov	r2, r0
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	1ad3      	subs	r3, r2, r3
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	429a      	cmp	r2, r3
 800b898:	d302      	bcc.n	800b8a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d113      	bne.n	800b8c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a4:	f043 0220 	orr.w	r2, r3, #32
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2220      	movs	r2, #32
 800b8b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e007      	b.n	800b8d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	699b      	ldr	r3, [r3, #24]
 800b8ce:	f003 0320 	and.w	r3, r3, #32
 800b8d2:	2b20      	cmp	r3, #32
 800b8d4:	d1cf      	bne.n	800b876 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	699b      	ldr	r3, [r3, #24]
 800b8f2:	f003 0310 	and.w	r3, r3, #16
 800b8f6:	2b10      	cmp	r3, #16
 800b8f8:	d151      	bne.n	800b99e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8fa:	e022      	b.n	800b942 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b902:	d01e      	beq.n	800b942 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b904:	f7fb ff24 	bl	8007750 <HAL_GetTick>
 800b908:	4602      	mov	r2, r0
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	1ad3      	subs	r3, r2, r3
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	429a      	cmp	r2, r3
 800b912:	d302      	bcc.n	800b91a <I2C_IsAcknowledgeFailed+0x3a>
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d113      	bne.n	800b942 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b91e:	f043 0220 	orr.w	r2, r3, #32
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2220      	movs	r2, #32
 800b92a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e02e      	b.n	800b9a0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	699b      	ldr	r3, [r3, #24]
 800b948:	f003 0320 	and.w	r3, r3, #32
 800b94c:	2b20      	cmp	r3, #32
 800b94e:	d1d5      	bne.n	800b8fc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2210      	movs	r2, #16
 800b956:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2220      	movs	r2, #32
 800b95e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f7ff fedd 	bl	800b720 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	6859      	ldr	r1, [r3, #4]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	4b0d      	ldr	r3, [pc, #52]	; (800b9a8 <I2C_IsAcknowledgeFailed+0xc8>)
 800b972:	400b      	ands	r3, r1
 800b974:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97a:	f043 0204 	orr.w	r2, r3, #4
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2220      	movs	r2, #32
 800b986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2200      	movs	r2, #0
 800b996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	e000      	b.n	800b9a0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	fe00e800 	.word	0xfe00e800

0800b9ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	607b      	str	r3, [r7, #4]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	817b      	strh	r3, [r7, #10]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	0d5b      	lsrs	r3, r3, #21
 800b9c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b9cc:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <I2C_TransferConfig+0x58>)
 800b9ce:	430b      	orrs	r3, r1
 800b9d0:	43db      	mvns	r3, r3
 800b9d2:	ea02 0103 	and.w	r1, r2, r3
 800b9d6:	897b      	ldrh	r3, [r7, #10]
 800b9d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b9dc:	7a7b      	ldrb	r3, [r7, #9]
 800b9de:	041b      	lsls	r3, r3, #16
 800b9e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b9e4:	431a      	orrs	r2, r3
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	431a      	orrs	r2, r3
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	431a      	orrs	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	430a      	orrs	r2, r1
 800b9f4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b9f6:	bf00      	nop
 800b9f8:	3714      	adds	r7, #20
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	03ff63ff 	.word	0x03ff63ff

0800ba08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	2b20      	cmp	r3, #32
 800ba1c:	d138      	bne.n	800ba90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d101      	bne.n	800ba2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ba28:	2302      	movs	r3, #2
 800ba2a:	e032      	b.n	800ba92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2224      	movs	r2, #36	; 0x24
 800ba38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f022 0201 	bic.w	r2, r2, #1
 800ba4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ba5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6819      	ldr	r1, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f042 0201 	orr.w	r2, r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2220      	movs	r2, #32
 800ba80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	e000      	b.n	800ba92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ba90:	2302      	movs	r3, #2
  }
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b085      	sub	sp, #20
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b20      	cmp	r3, #32
 800bab2:	d139      	bne.n	800bb28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800baba:	2b01      	cmp	r3, #1
 800babc:	d101      	bne.n	800bac2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800babe:	2302      	movs	r3, #2
 800bac0:	e033      	b.n	800bb2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2224      	movs	r2, #36	; 0x24
 800bace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f022 0201 	bic.w	r2, r2, #1
 800bae0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800baf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	021b      	lsls	r3, r3, #8
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f042 0201 	orr.w	r2, r2, #1
 800bb12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2220      	movs	r2, #32
 800bb18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	e000      	b.n	800bb2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bb28:	2302      	movs	r3, #2
  }
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b084      	sub	sp, #16
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d101      	bne.n	800bb48 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
 800bb46:	e038      	b.n	800bbba <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800bb50:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f245 5255 	movw	r2, #21845	; 0x5555
 800bb5a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	6852      	ldr	r2, [r2, #4]
 800bb64:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	6892      	ldr	r2, [r2, #8]
 800bb6e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800bb70:	f7fb fdee 	bl	8007750 <HAL_GetTick>
 800bb74:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800bb76:	e008      	b.n	800bb8a <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800bb78:	f7fb fdea 	bl	8007750 <HAL_GetTick>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	2b30      	cmp	r3, #48	; 0x30
 800bb84:	d901      	bls.n	800bb8a <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e017      	b.n	800bbba <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1f1      	bne.n	800bb78 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	691a      	ldr	r2, [r3, #16]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d005      	beq.n	800bbae <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	68d2      	ldr	r2, [r2, #12]
 800bbaa:	611a      	str	r2, [r3, #16]
 800bbac:	e004      	b.n	800bbb8 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800bbb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b083      	sub	sp, #12
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800bbd2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
	...

0800bbe4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d101      	bne.n	800bbf6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e0bf      	b.n	800bd76 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d106      	bne.n	800bc10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7f7 f93c 	bl	8002e88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2202      	movs	r2, #2
 800bc14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	699a      	ldr	r2, [r3, #24]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800bc26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6999      	ldr	r1, [r3, #24]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	685a      	ldr	r2, [r3, #4]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bc3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	691b      	ldr	r3, [r3, #16]
 800bc42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	430a      	orrs	r2, r1
 800bc4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6899      	ldr	r1, [r3, #8]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	4b4a      	ldr	r3, [pc, #296]	; (800bd80 <HAL_LTDC_Init+0x19c>)
 800bc58:	400b      	ands	r3, r1
 800bc5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	695b      	ldr	r3, [r3, #20]
 800bc60:	041b      	lsls	r3, r3, #16
 800bc62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	6899      	ldr	r1, [r3, #8]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	699a      	ldr	r2, [r3, #24]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	431a      	orrs	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	430a      	orrs	r2, r1
 800bc78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	68d9      	ldr	r1, [r3, #12]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	4b3e      	ldr	r3, [pc, #248]	; (800bd80 <HAL_LTDC_Init+0x19c>)
 800bc86:	400b      	ands	r3, r1
 800bc88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	041b      	lsls	r3, r3, #16
 800bc90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68d9      	ldr	r1, [r3, #12]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a1a      	ldr	r2, [r3, #32]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	431a      	orrs	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	430a      	orrs	r2, r1
 800bca6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	6919      	ldr	r1, [r3, #16]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	4b33      	ldr	r3, [pc, #204]	; (800bd80 <HAL_LTDC_Init+0x19c>)
 800bcb4:	400b      	ands	r3, r1
 800bcb6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcbc:	041b      	lsls	r3, r3, #16
 800bcbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	6919      	ldr	r1, [r3, #16]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	431a      	orrs	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	430a      	orrs	r2, r1
 800bcd4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	6959      	ldr	r1, [r3, #20]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	4b27      	ldr	r3, [pc, #156]	; (800bd80 <HAL_LTDC_Init+0x19c>)
 800bce2:	400b      	ands	r3, r1
 800bce4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcea:	041b      	lsls	r3, r3, #16
 800bcec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6959      	ldr	r1, [r3, #20]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	430a      	orrs	r2, r1
 800bd02:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd0a:	021b      	lsls	r3, r3, #8
 800bd0c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bd14:	041b      	lsls	r3, r3, #16
 800bd16:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800bd26:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800bd3a:	431a      	orrs	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	430a      	orrs	r2, r1
 800bd42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f042 0206 	orr.w	r2, r2, #6
 800bd52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	699a      	ldr	r2, [r3, #24]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f042 0201 	orr.w	r2, r2, #1
 800bd62:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	f000f800 	.word	0xf000f800

0800bd84 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd92:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd9a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f003 0304 	and.w	r3, r3, #4
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d023      	beq.n	800bdee <HAL_LTDC_IRQHandler+0x6a>
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d01e      	beq.n	800bdee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 0204 	bic.w	r2, r2, #4
 800bdbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2204      	movs	r2, #4
 800bdc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bdce:	f043 0201 	orr.w	r2, r3, #1
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2204      	movs	r2, #4
 800bddc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f86f 	bl	800becc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f003 0302 	and.w	r3, r3, #2
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d023      	beq.n	800be40 <HAL_LTDC_IRQHandler+0xbc>
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f003 0302 	and.w	r3, r3, #2
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d01e      	beq.n	800be40 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f022 0202 	bic.w	r2, r2, #2
 800be10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2202      	movs	r2, #2
 800be18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be20:	f043 0202 	orr.w	r2, r3, #2
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2204      	movs	r2, #4
 800be2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f846 	bl	800becc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f003 0301 	and.w	r3, r3, #1
 800be46:	2b00      	cmp	r3, #0
 800be48:	d01b      	beq.n	800be82 <HAL_LTDC_IRQHandler+0xfe>
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f003 0301 	and.w	r3, r3, #1
 800be50:	2b00      	cmp	r3, #0
 800be52:	d016      	beq.n	800be82 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f022 0201 	bic.w	r2, r2, #1
 800be62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2201      	movs	r2, #1
 800be6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f82f 	bl	800bee0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f003 0308 	and.w	r3, r3, #8
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d01b      	beq.n	800bec4 <HAL_LTDC_IRQHandler+0x140>
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	f003 0308 	and.w	r3, r3, #8
 800be92:	2b00      	cmp	r3, #0
 800be94:	d016      	beq.n	800bec4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f022 0208 	bic.w	r2, r2, #8
 800bea4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2208      	movs	r2, #8
 800beac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f818 	bl	800bef4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800bec4:	bf00      	nop
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800bf08:	b5b0      	push	{r4, r5, r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d101      	bne.n	800bf22 <HAL_LTDC_ConfigLayer+0x1a>
 800bf1e:	2302      	movs	r3, #2
 800bf20:	e02c      	b.n	800bf7c <HAL_LTDC_ConfigLayer+0x74>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2201      	movs	r2, #1
 800bf26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2134      	movs	r1, #52	; 0x34
 800bf38:	fb01 f303 	mul.w	r3, r1, r3
 800bf3c:	4413      	add	r3, r2
 800bf3e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	4614      	mov	r4, r2
 800bf46:	461d      	mov	r5, r3
 800bf48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	68b9      	ldr	r1, [r7, #8]
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 f81f 	bl	800bfa0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2201      	movs	r2, #1
 800bf68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800bf7a:	2300      	movs	r3, #0
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bdb0      	pop	{r4, r5, r7, pc}

0800bf84 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800bf92:	b2db      	uxtb	r3, r3
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b089      	sub	sp, #36	; 0x24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	685a      	ldr	r2, [r3, #4]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	0c1b      	lsrs	r3, r3, #16
 800bfb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfbc:	4413      	add	r3, r2
 800bfbe:	041b      	lsls	r3, r3, #16
 800bfc0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	01db      	lsls	r3, r3, #7
 800bfcc:	4413      	add	r3, r2
 800bfce:	3384      	adds	r3, #132	; 0x84
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	6812      	ldr	r2, [r2, #0]
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	01d2      	lsls	r2, r2, #7
 800bfdc:	440a      	add	r2, r1
 800bfde:	3284      	adds	r2, #132	; 0x84
 800bfe0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bfe4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	0c1b      	lsrs	r3, r3, #16
 800bff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bff6:	4413      	add	r3, r2
 800bff8:	1c5a      	adds	r2, r3, #1
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4619      	mov	r1, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	01db      	lsls	r3, r3, #7
 800c004:	440b      	add	r3, r1
 800c006:	3384      	adds	r3, #132	; 0x84
 800c008:	4619      	mov	r1, r3
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	68da      	ldr	r2, [r3, #12]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c01e:	4413      	add	r3, r2
 800c020:	041b      	lsls	r3, r3, #16
 800c022:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	461a      	mov	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	01db      	lsls	r3, r3, #7
 800c02e:	4413      	add	r3, r2
 800c030:	3384      	adds	r3, #132	; 0x84
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	6812      	ldr	r2, [r2, #0]
 800c038:	4611      	mov	r1, r2
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	01d2      	lsls	r2, r2, #7
 800c03e:	440a      	add	r2, r1
 800c040:	3284      	adds	r2, #132	; 0x84
 800c042:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c046:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	689a      	ldr	r2, [r3, #8]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c056:	4413      	add	r3, r2
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4619      	mov	r1, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	01db      	lsls	r3, r3, #7
 800c064:	440b      	add	r3, r1
 800c066:	3384      	adds	r3, #132	; 0x84
 800c068:	4619      	mov	r1, r3
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	461a      	mov	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	01db      	lsls	r3, r3, #7
 800c07a:	4413      	add	r3, r2
 800c07c:	3384      	adds	r3, #132	; 0x84
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	6812      	ldr	r2, [r2, #0]
 800c084:	4611      	mov	r1, r2
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	01d2      	lsls	r2, r2, #7
 800c08a:	440a      	add	r2, r1
 800c08c:	3284      	adds	r2, #132	; 0x84
 800c08e:	f023 0307 	bic.w	r3, r3, #7
 800c092:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	461a      	mov	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	01db      	lsls	r3, r3, #7
 800c09e:	4413      	add	r3, r2
 800c0a0:	3384      	adds	r3, #132	; 0x84
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c0b0:	021b      	lsls	r3, r3, #8
 800c0b2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c0ba:	041b      	lsls	r3, r3, #16
 800c0bc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	699b      	ldr	r3, [r3, #24]
 800c0c2:	061b      	lsls	r3, r3, #24
 800c0c4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	01db      	lsls	r3, r3, #7
 800c0d0:	4413      	add	r3, r2
 800c0d2:	3384      	adds	r3, #132	; 0x84
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	01db      	lsls	r3, r3, #7
 800c0e0:	4413      	add	r3, r2
 800c0e2:	3384      	adds	r3, #132	; 0x84
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	431a      	orrs	r2, r3
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	431a      	orrs	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4619      	mov	r1, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	01db      	lsls	r3, r3, #7
 800c104:	440b      	add	r3, r1
 800c106:	3384      	adds	r3, #132	; 0x84
 800c108:	4619      	mov	r1, r3
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	461a      	mov	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	01db      	lsls	r3, r3, #7
 800c11a:	4413      	add	r3, r2
 800c11c:	3384      	adds	r3, #132	; 0x84
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	6812      	ldr	r2, [r2, #0]
 800c124:	4611      	mov	r1, r2
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	01d2      	lsls	r2, r2, #7
 800c12a:	440a      	add	r2, r1
 800c12c:	3284      	adds	r2, #132	; 0x84
 800c12e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c132:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	461a      	mov	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	01db      	lsls	r3, r3, #7
 800c13e:	4413      	add	r3, r2
 800c140:	3384      	adds	r3, #132	; 0x84
 800c142:	461a      	mov	r2, r3
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	695b      	ldr	r3, [r3, #20]
 800c148:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	01db      	lsls	r3, r3, #7
 800c154:	4413      	add	r3, r2
 800c156:	3384      	adds	r3, #132	; 0x84
 800c158:	69da      	ldr	r2, [r3, #28]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4619      	mov	r1, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	01db      	lsls	r3, r3, #7
 800c164:	440b      	add	r3, r1
 800c166:	3384      	adds	r3, #132	; 0x84
 800c168:	4619      	mov	r1, r3
 800c16a:	4b58      	ldr	r3, [pc, #352]	; (800c2cc <LTDC_SetConfig+0x32c>)
 800c16c:	4013      	ands	r3, r2
 800c16e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	69da      	ldr	r2, [r3, #28]
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	6a1b      	ldr	r3, [r3, #32]
 800c178:	68f9      	ldr	r1, [r7, #12]
 800c17a:	6809      	ldr	r1, [r1, #0]
 800c17c:	4608      	mov	r0, r1
 800c17e:	6879      	ldr	r1, [r7, #4]
 800c180:	01c9      	lsls	r1, r1, #7
 800c182:	4401      	add	r1, r0
 800c184:	3184      	adds	r1, #132	; 0x84
 800c186:	4313      	orrs	r3, r2
 800c188:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	461a      	mov	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	01db      	lsls	r3, r3, #7
 800c194:	4413      	add	r3, r2
 800c196:	3384      	adds	r3, #132	; 0x84
 800c198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	01db      	lsls	r3, r3, #7
 800c1a4:	4413      	add	r3, r2
 800c1a6:	3384      	adds	r3, #132	; 0x84
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	01db      	lsls	r3, r3, #7
 800c1b8:	4413      	add	r3, r2
 800c1ba:	3384      	adds	r3, #132	; 0x84
 800c1bc:	461a      	mov	r2, r3
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	691b      	ldr	r3, [r3, #16]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d102      	bne.n	800c1d2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800c1cc:	2304      	movs	r3, #4
 800c1ce:	61fb      	str	r3, [r7, #28]
 800c1d0:	e01b      	b.n	800c20a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d102      	bne.n	800c1e0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	61fb      	str	r3, [r7, #28]
 800c1de:	e014      	b.n	800c20a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	691b      	ldr	r3, [r3, #16]
 800c1e4:	2b04      	cmp	r3, #4
 800c1e6:	d00b      	beq.n	800c200 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d007      	beq.n	800c200 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c1f4:	2b03      	cmp	r3, #3
 800c1f6:	d003      	beq.n	800c200 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c1fc:	2b07      	cmp	r3, #7
 800c1fe:	d102      	bne.n	800c206 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800c200:	2302      	movs	r3, #2
 800c202:	61fb      	str	r3, [r7, #28]
 800c204:	e001      	b.n	800c20a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800c206:	2301      	movs	r3, #1
 800c208:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	01db      	lsls	r3, r3, #7
 800c214:	4413      	add	r3, r2
 800c216:	3384      	adds	r3, #132	; 0x84
 800c218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	6812      	ldr	r2, [r2, #0]
 800c21e:	4611      	mov	r1, r2
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	01d2      	lsls	r2, r2, #7
 800c224:	440a      	add	r2, r1
 800c226:	3284      	adds	r2, #132	; 0x84
 800c228:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800c22c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c232:	69fa      	ldr	r2, [r7, #28]
 800c234:	fb02 f303 	mul.w	r3, r2, r3
 800c238:	041a      	lsls	r2, r3, #16
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	6859      	ldr	r1, [r3, #4]
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	1acb      	subs	r3, r1, r3
 800c244:	69f9      	ldr	r1, [r7, #28]
 800c246:	fb01 f303 	mul.w	r3, r1, r3
 800c24a:	3303      	adds	r3, #3
 800c24c:	68f9      	ldr	r1, [r7, #12]
 800c24e:	6809      	ldr	r1, [r1, #0]
 800c250:	4608      	mov	r0, r1
 800c252:	6879      	ldr	r1, [r7, #4]
 800c254:	01c9      	lsls	r1, r1, #7
 800c256:	4401      	add	r1, r0
 800c258:	3184      	adds	r1, #132	; 0x84
 800c25a:	4313      	orrs	r3, r2
 800c25c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	461a      	mov	r2, r3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	01db      	lsls	r3, r3, #7
 800c268:	4413      	add	r3, r2
 800c26a:	3384      	adds	r3, #132	; 0x84
 800c26c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4619      	mov	r1, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	01db      	lsls	r3, r3, #7
 800c278:	440b      	add	r3, r1
 800c27a:	3384      	adds	r3, #132	; 0x84
 800c27c:	4619      	mov	r1, r3
 800c27e:	4b14      	ldr	r3, [pc, #80]	; (800c2d0 <LTDC_SetConfig+0x330>)
 800c280:	4013      	ands	r3, r2
 800c282:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	461a      	mov	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	01db      	lsls	r3, r3, #7
 800c28e:	4413      	add	r3, r2
 800c290:	3384      	adds	r3, #132	; 0x84
 800c292:	461a      	mov	r2, r3
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c298:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	01db      	lsls	r3, r3, #7
 800c2a4:	4413      	add	r3, r2
 800c2a6:	3384      	adds	r3, #132	; 0x84
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	6812      	ldr	r2, [r2, #0]
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	01d2      	lsls	r2, r2, #7
 800c2b4:	440a      	add	r2, r1
 800c2b6:	3284      	adds	r2, #132	; 0x84
 800c2b8:	f043 0301 	orr.w	r3, r3, #1
 800c2bc:	6013      	str	r3, [r2, #0]
}
 800c2be:	bf00      	nop
 800c2c0:	3724      	adds	r7, #36	; 0x24
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	fffff8f8 	.word	0xfffff8f8
 800c2d0:	fffff800 	.word	0xfffff800

0800c2d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c2d8:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a04      	ldr	r2, [pc, #16]	; (800c2f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c2de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2e2:	6013      	str	r3, [r2, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	40007000 	.word	0x40007000

0800c2f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c2fe:	4b23      	ldr	r3, [pc, #140]	; (800c38c <HAL_PWREx_EnableOverDrive+0x98>)
 800c300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c302:	4a22      	ldr	r2, [pc, #136]	; (800c38c <HAL_PWREx_EnableOverDrive+0x98>)
 800c304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c308:	6413      	str	r3, [r2, #64]	; 0x40
 800c30a:	4b20      	ldr	r3, [pc, #128]	; (800c38c <HAL_PWREx_EnableOverDrive+0x98>)
 800c30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c312:	603b      	str	r3, [r7, #0]
 800c314:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c316:	4b1e      	ldr	r3, [pc, #120]	; (800c390 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a1d      	ldr	r2, [pc, #116]	; (800c390 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c31c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c320:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c322:	f7fb fa15 	bl	8007750 <HAL_GetTick>
 800c326:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c328:	e009      	b.n	800c33e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c32a:	f7fb fa11 	bl	8007750 <HAL_GetTick>
 800c32e:	4602      	mov	r2, r0
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c338:	d901      	bls.n	800c33e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e022      	b.n	800c384 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c33e:	4b14      	ldr	r3, [pc, #80]	; (800c390 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c34a:	d1ee      	bne.n	800c32a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c34c:	4b10      	ldr	r3, [pc, #64]	; (800c390 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a0f      	ldr	r2, [pc, #60]	; (800c390 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c356:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c358:	f7fb f9fa 	bl	8007750 <HAL_GetTick>
 800c35c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c35e:	e009      	b.n	800c374 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c360:	f7fb f9f6 	bl	8007750 <HAL_GetTick>
 800c364:	4602      	mov	r2, r0
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c36e:	d901      	bls.n	800c374 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c370:	2303      	movs	r3, #3
 800c372:	e007      	b.n	800c384 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c374:	4b06      	ldr	r3, [pc, #24]	; (800c390 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c37c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c380:	d1ee      	bne.n	800c360 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c382:	2300      	movs	r3, #0
}
 800c384:	4618      	mov	r0, r3
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	40023800 	.word	0x40023800
 800c390:	40007000 	.word	0x40007000

0800c394 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af02      	add	r7, sp, #8
 800c39a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c39c:	f7fb f9d8 	bl	8007750 <HAL_GetTick>
 800c3a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d101      	bne.n	800c3ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e067      	b.n	800c47c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10b      	bne.n	800c3d0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f7f6 fe29 	bl	8003018 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c3c6:	f241 3188 	movw	r1, #5000	; 0x1388
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f85e 	bl	800c48c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	021a      	lsls	r2, r3, #8
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3ee:	9300      	str	r3, [sp, #0]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2120      	movs	r1, #32
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 f856 	bl	800c4a8 <QSPI_WaitFlagStateUntilTimeout>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c400:	7afb      	ldrb	r3, [r7, #11]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d135      	bne.n	800c472 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	4b1d      	ldr	r3, [pc, #116]	; (800c484 <HAL_QSPI_Init+0xf0>)
 800c40e:	4013      	ands	r3, r2
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	6852      	ldr	r2, [r2, #4]
 800c414:	0611      	lsls	r1, r2, #24
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	68d2      	ldr	r2, [r2, #12]
 800c41a:	4311      	orrs	r1, r2
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	69d2      	ldr	r2, [r2, #28]
 800c420:	4311      	orrs	r1, r2
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	6a12      	ldr	r2, [r2, #32]
 800c426:	4311      	orrs	r1, r2
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	6812      	ldr	r2, [r2, #0]
 800c42c:	430b      	orrs	r3, r1
 800c42e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	685a      	ldr	r2, [r3, #4]
 800c436:	4b14      	ldr	r3, [pc, #80]	; (800c488 <HAL_QSPI_Init+0xf4>)
 800c438:	4013      	ands	r3, r2
 800c43a:	687a      	ldr	r2, [r7, #4]
 800c43c:	6912      	ldr	r2, [r2, #16]
 800c43e:	0411      	lsls	r1, r2, #16
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	6952      	ldr	r2, [r2, #20]
 800c444:	4311      	orrs	r1, r2
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	6992      	ldr	r2, [r2, #24]
 800c44a:	4311      	orrs	r1, r2
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	6812      	ldr	r2, [r2, #0]
 800c450:	430b      	orrs	r3, r1
 800c452:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f042 0201 	orr.w	r2, r2, #1
 800c462:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c47a:	7afb      	ldrb	r3, [r7, #11]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	00ffff2f 	.word	0x00ffff2f
 800c488:	ffe0f8fe 	.word	0xffe0f8fe

0800c48c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	683a      	ldr	r2, [r7, #0]
 800c49a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c4b8:	e01a      	b.n	800c4f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c0:	d016      	beq.n	800c4f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4c2:	f7fb f945 	bl	8007750 <HAL_GetTick>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	69ba      	ldr	r2, [r7, #24]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d302      	bcc.n	800c4d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10b      	bne.n	800c4f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2204      	movs	r2, #4
 800c4dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4e4:	f043 0201 	orr.w	r2, r3, #1
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e00e      	b.n	800c50e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	689a      	ldr	r2, [r3, #8]
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	bf14      	ite	ne
 800c4fe:	2301      	movne	r3, #1
 800c500:	2300      	moveq	r3, #0
 800c502:	b2db      	uxtb	r3, r3
 800c504:	461a      	mov	r2, r3
 800c506:	79fb      	ldrb	r3, [r7, #7]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d1d6      	bne.n	800c4ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c520:	2300      	movs	r3, #0
 800c522:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c52a:	2301      	movs	r3, #1
 800c52c:	e291      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f003 0301 	and.w	r3, r3, #1
 800c536:	2b00      	cmp	r3, #0
 800c538:	f000 8087 	beq.w	800c64a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c53c:	4b96      	ldr	r3, [pc, #600]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	f003 030c 	and.w	r3, r3, #12
 800c544:	2b04      	cmp	r3, #4
 800c546:	d00c      	beq.n	800c562 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c548:	4b93      	ldr	r3, [pc, #588]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	f003 030c 	and.w	r3, r3, #12
 800c550:	2b08      	cmp	r3, #8
 800c552:	d112      	bne.n	800c57a <HAL_RCC_OscConfig+0x62>
 800c554:	4b90      	ldr	r3, [pc, #576]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c55c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c560:	d10b      	bne.n	800c57a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c562:	4b8d      	ldr	r3, [pc, #564]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d06c      	beq.n	800c648 <HAL_RCC_OscConfig+0x130>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d168      	bne.n	800c648 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	e26b      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c582:	d106      	bne.n	800c592 <HAL_RCC_OscConfig+0x7a>
 800c584:	4b84      	ldr	r3, [pc, #528]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a83      	ldr	r2, [pc, #524]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c58a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c58e:	6013      	str	r3, [r2, #0]
 800c590:	e02e      	b.n	800c5f0 <HAL_RCC_OscConfig+0xd8>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10c      	bne.n	800c5b4 <HAL_RCC_OscConfig+0x9c>
 800c59a:	4b7f      	ldr	r3, [pc, #508]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a7e      	ldr	r2, [pc, #504]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c5a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5a4:	6013      	str	r3, [r2, #0]
 800c5a6:	4b7c      	ldr	r3, [pc, #496]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a7b      	ldr	r2, [pc, #492]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c5ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5b0:	6013      	str	r3, [r2, #0]
 800c5b2:	e01d      	b.n	800c5f0 <HAL_RCC_OscConfig+0xd8>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5bc:	d10c      	bne.n	800c5d8 <HAL_RCC_OscConfig+0xc0>
 800c5be:	4b76      	ldr	r3, [pc, #472]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a75      	ldr	r2, [pc, #468]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c5c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c5c8:	6013      	str	r3, [r2, #0]
 800c5ca:	4b73      	ldr	r3, [pc, #460]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a72      	ldr	r2, [pc, #456]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c5d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5d4:	6013      	str	r3, [r2, #0]
 800c5d6:	e00b      	b.n	800c5f0 <HAL_RCC_OscConfig+0xd8>
 800c5d8:	4b6f      	ldr	r3, [pc, #444]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a6e      	ldr	r2, [pc, #440]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c5de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5e2:	6013      	str	r3, [r2, #0]
 800c5e4:	4b6c      	ldr	r3, [pc, #432]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a6b      	ldr	r2, [pc, #428]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c5ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d013      	beq.n	800c620 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5f8:	f7fb f8aa 	bl	8007750 <HAL_GetTick>
 800c5fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5fe:	e008      	b.n	800c612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c600:	f7fb f8a6 	bl	8007750 <HAL_GetTick>
 800c604:	4602      	mov	r2, r0
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	2b64      	cmp	r3, #100	; 0x64
 800c60c:	d901      	bls.n	800c612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c60e:	2303      	movs	r3, #3
 800c610:	e21f      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c612:	4b61      	ldr	r3, [pc, #388]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d0f0      	beq.n	800c600 <HAL_RCC_OscConfig+0xe8>
 800c61e:	e014      	b.n	800c64a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c620:	f7fb f896 	bl	8007750 <HAL_GetTick>
 800c624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c626:	e008      	b.n	800c63a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c628:	f7fb f892 	bl	8007750 <HAL_GetTick>
 800c62c:	4602      	mov	r2, r0
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	2b64      	cmp	r3, #100	; 0x64
 800c634:	d901      	bls.n	800c63a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c636:	2303      	movs	r3, #3
 800c638:	e20b      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c63a:	4b57      	ldr	r3, [pc, #348]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1f0      	bne.n	800c628 <HAL_RCC_OscConfig+0x110>
 800c646:	e000      	b.n	800c64a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 0302 	and.w	r3, r3, #2
 800c652:	2b00      	cmp	r3, #0
 800c654:	d069      	beq.n	800c72a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c656:	4b50      	ldr	r3, [pc, #320]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f003 030c 	and.w	r3, r3, #12
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00b      	beq.n	800c67a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c662:	4b4d      	ldr	r3, [pc, #308]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	f003 030c 	and.w	r3, r3, #12
 800c66a:	2b08      	cmp	r3, #8
 800c66c:	d11c      	bne.n	800c6a8 <HAL_RCC_OscConfig+0x190>
 800c66e:	4b4a      	ldr	r3, [pc, #296]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c676:	2b00      	cmp	r3, #0
 800c678:	d116      	bne.n	800c6a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c67a:	4b47      	ldr	r3, [pc, #284]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f003 0302 	and.w	r3, r3, #2
 800c682:	2b00      	cmp	r3, #0
 800c684:	d005      	beq.n	800c692 <HAL_RCC_OscConfig+0x17a>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d001      	beq.n	800c692 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e1df      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c692:	4b41      	ldr	r3, [pc, #260]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	00db      	lsls	r3, r3, #3
 800c6a0:	493d      	ldr	r1, [pc, #244]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c6a6:	e040      	b.n	800c72a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d023      	beq.n	800c6f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c6b0:	4b39      	ldr	r3, [pc, #228]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a38      	ldr	r2, [pc, #224]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c6b6:	f043 0301 	orr.w	r3, r3, #1
 800c6ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6bc:	f7fb f848 	bl	8007750 <HAL_GetTick>
 800c6c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6c2:	e008      	b.n	800c6d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6c4:	f7fb f844 	bl	8007750 <HAL_GetTick>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d901      	bls.n	800c6d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c6d2:	2303      	movs	r3, #3
 800c6d4:	e1bd      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6d6:	4b30      	ldr	r3, [pc, #192]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d0f0      	beq.n	800c6c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6e2:	4b2d      	ldr	r3, [pc, #180]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	691b      	ldr	r3, [r3, #16]
 800c6ee:	00db      	lsls	r3, r3, #3
 800c6f0:	4929      	ldr	r1, [pc, #164]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	600b      	str	r3, [r1, #0]
 800c6f6:	e018      	b.n	800c72a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c6f8:	4b27      	ldr	r3, [pc, #156]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a26      	ldr	r2, [pc, #152]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c6fe:	f023 0301 	bic.w	r3, r3, #1
 800c702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c704:	f7fb f824 	bl	8007750 <HAL_GetTick>
 800c708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c70a:	e008      	b.n	800c71e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c70c:	f7fb f820 	bl	8007750 <HAL_GetTick>
 800c710:	4602      	mov	r2, r0
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	2b02      	cmp	r3, #2
 800c718:	d901      	bls.n	800c71e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c71a:	2303      	movs	r3, #3
 800c71c:	e199      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c71e:	4b1e      	ldr	r3, [pc, #120]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 0302 	and.w	r3, r3, #2
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1f0      	bne.n	800c70c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f003 0308 	and.w	r3, r3, #8
 800c732:	2b00      	cmp	r3, #0
 800c734:	d038      	beq.n	800c7a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	695b      	ldr	r3, [r3, #20]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d019      	beq.n	800c772 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c73e:	4b16      	ldr	r3, [pc, #88]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c742:	4a15      	ldr	r2, [pc, #84]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c744:	f043 0301 	orr.w	r3, r3, #1
 800c748:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c74a:	f7fb f801 	bl	8007750 <HAL_GetTick>
 800c74e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c750:	e008      	b.n	800c764 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c752:	f7fa fffd 	bl	8007750 <HAL_GetTick>
 800c756:	4602      	mov	r2, r0
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	d901      	bls.n	800c764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c760:	2303      	movs	r3, #3
 800c762:	e176      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c764:	4b0c      	ldr	r3, [pc, #48]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c768:	f003 0302 	and.w	r3, r3, #2
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d0f0      	beq.n	800c752 <HAL_RCC_OscConfig+0x23a>
 800c770:	e01a      	b.n	800c7a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c772:	4b09      	ldr	r3, [pc, #36]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c776:	4a08      	ldr	r2, [pc, #32]	; (800c798 <HAL_RCC_OscConfig+0x280>)
 800c778:	f023 0301 	bic.w	r3, r3, #1
 800c77c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c77e:	f7fa ffe7 	bl	8007750 <HAL_GetTick>
 800c782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c784:	e00a      	b.n	800c79c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c786:	f7fa ffe3 	bl	8007750 <HAL_GetTick>
 800c78a:	4602      	mov	r2, r0
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	2b02      	cmp	r3, #2
 800c792:	d903      	bls.n	800c79c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c794:	2303      	movs	r3, #3
 800c796:	e15c      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
 800c798:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c79c:	4b91      	ldr	r3, [pc, #580]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c79e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7a0:	f003 0302 	and.w	r3, r3, #2
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1ee      	bne.n	800c786 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 0304 	and.w	r3, r3, #4
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 80a4 	beq.w	800c8fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c7b6:	4b8b      	ldr	r3, [pc, #556]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10d      	bne.n	800c7de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c7c2:	4b88      	ldr	r3, [pc, #544]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c6:	4a87      	ldr	r2, [pc, #540]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c7c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7cc:	6413      	str	r3, [r2, #64]	; 0x40
 800c7ce:	4b85      	ldr	r3, [pc, #532]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7d6:	60bb      	str	r3, [r7, #8]
 800c7d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7de:	4b82      	ldr	r3, [pc, #520]	; (800c9e8 <HAL_RCC_OscConfig+0x4d0>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d118      	bne.n	800c81c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c7ea:	4b7f      	ldr	r3, [pc, #508]	; (800c9e8 <HAL_RCC_OscConfig+0x4d0>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a7e      	ldr	r2, [pc, #504]	; (800c9e8 <HAL_RCC_OscConfig+0x4d0>)
 800c7f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c7f6:	f7fa ffab 	bl	8007750 <HAL_GetTick>
 800c7fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c7fc:	e008      	b.n	800c810 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7fe:	f7fa ffa7 	bl	8007750 <HAL_GetTick>
 800c802:	4602      	mov	r2, r0
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	2b64      	cmp	r3, #100	; 0x64
 800c80a:	d901      	bls.n	800c810 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e120      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c810:	4b75      	ldr	r3, [pc, #468]	; (800c9e8 <HAL_RCC_OscConfig+0x4d0>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d0f0      	beq.n	800c7fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d106      	bne.n	800c832 <HAL_RCC_OscConfig+0x31a>
 800c824:	4b6f      	ldr	r3, [pc, #444]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c828:	4a6e      	ldr	r2, [pc, #440]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c82a:	f043 0301 	orr.w	r3, r3, #1
 800c82e:	6713      	str	r3, [r2, #112]	; 0x70
 800c830:	e02d      	b.n	800c88e <HAL_RCC_OscConfig+0x376>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10c      	bne.n	800c854 <HAL_RCC_OscConfig+0x33c>
 800c83a:	4b6a      	ldr	r3, [pc, #424]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c83e:	4a69      	ldr	r2, [pc, #420]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c840:	f023 0301 	bic.w	r3, r3, #1
 800c844:	6713      	str	r3, [r2, #112]	; 0x70
 800c846:	4b67      	ldr	r3, [pc, #412]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c84a:	4a66      	ldr	r2, [pc, #408]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c84c:	f023 0304 	bic.w	r3, r3, #4
 800c850:	6713      	str	r3, [r2, #112]	; 0x70
 800c852:	e01c      	b.n	800c88e <HAL_RCC_OscConfig+0x376>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	2b05      	cmp	r3, #5
 800c85a:	d10c      	bne.n	800c876 <HAL_RCC_OscConfig+0x35e>
 800c85c:	4b61      	ldr	r3, [pc, #388]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c860:	4a60      	ldr	r2, [pc, #384]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c862:	f043 0304 	orr.w	r3, r3, #4
 800c866:	6713      	str	r3, [r2, #112]	; 0x70
 800c868:	4b5e      	ldr	r3, [pc, #376]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c86a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c86c:	4a5d      	ldr	r2, [pc, #372]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c86e:	f043 0301 	orr.w	r3, r3, #1
 800c872:	6713      	str	r3, [r2, #112]	; 0x70
 800c874:	e00b      	b.n	800c88e <HAL_RCC_OscConfig+0x376>
 800c876:	4b5b      	ldr	r3, [pc, #364]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c87a:	4a5a      	ldr	r2, [pc, #360]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c87c:	f023 0301 	bic.w	r3, r3, #1
 800c880:	6713      	str	r3, [r2, #112]	; 0x70
 800c882:	4b58      	ldr	r3, [pc, #352]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c886:	4a57      	ldr	r2, [pc, #348]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c888:	f023 0304 	bic.w	r3, r3, #4
 800c88c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d015      	beq.n	800c8c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c896:	f7fa ff5b 	bl	8007750 <HAL_GetTick>
 800c89a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c89c:	e00a      	b.n	800c8b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c89e:	f7fa ff57 	bl	8007750 <HAL_GetTick>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d901      	bls.n	800c8b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c8b0:	2303      	movs	r3, #3
 800c8b2:	e0ce      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8b4:	4b4b      	ldr	r3, [pc, #300]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c8b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8b8:	f003 0302 	and.w	r3, r3, #2
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d0ee      	beq.n	800c89e <HAL_RCC_OscConfig+0x386>
 800c8c0:	e014      	b.n	800c8ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8c2:	f7fa ff45 	bl	8007750 <HAL_GetTick>
 800c8c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8c8:	e00a      	b.n	800c8e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8ca:	f7fa ff41 	bl	8007750 <HAL_GetTick>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d901      	bls.n	800c8e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	e0b8      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8e0:	4b40      	ldr	r3, [pc, #256]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c8e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e4:	f003 0302 	and.w	r3, r3, #2
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1ee      	bne.n	800c8ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c8ec:	7dfb      	ldrb	r3, [r7, #23]
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d105      	bne.n	800c8fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c8f2:	4b3c      	ldr	r3, [pc, #240]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f6:	4a3b      	ldr	r2, [pc, #236]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c8f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	699b      	ldr	r3, [r3, #24]
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 80a4 	beq.w	800ca50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c908:	4b36      	ldr	r3, [pc, #216]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	f003 030c 	and.w	r3, r3, #12
 800c910:	2b08      	cmp	r3, #8
 800c912:	d06b      	beq.n	800c9ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	2b02      	cmp	r3, #2
 800c91a:	d149      	bne.n	800c9b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c91c:	4b31      	ldr	r3, [pc, #196]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a30      	ldr	r2, [pc, #192]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c928:	f7fa ff12 	bl	8007750 <HAL_GetTick>
 800c92c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c92e:	e008      	b.n	800c942 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c930:	f7fa ff0e 	bl	8007750 <HAL_GetTick>
 800c934:	4602      	mov	r2, r0
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d901      	bls.n	800c942 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c93e:	2303      	movs	r3, #3
 800c940:	e087      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c942:	4b28      	ldr	r3, [pc, #160]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1f0      	bne.n	800c930 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	69da      	ldr	r2, [r3, #28]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	431a      	orrs	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95c:	019b      	lsls	r3, r3, #6
 800c95e:	431a      	orrs	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c964:	085b      	lsrs	r3, r3, #1
 800c966:	3b01      	subs	r3, #1
 800c968:	041b      	lsls	r3, r3, #16
 800c96a:	431a      	orrs	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c970:	061b      	lsls	r3, r3, #24
 800c972:	4313      	orrs	r3, r2
 800c974:	4a1b      	ldr	r2, [pc, #108]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c976:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c97a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c97c:	4b19      	ldr	r3, [pc, #100]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a18      	ldr	r2, [pc, #96]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c988:	f7fa fee2 	bl	8007750 <HAL_GetTick>
 800c98c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c98e:	e008      	b.n	800c9a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c990:	f7fa fede 	bl	8007750 <HAL_GetTick>
 800c994:	4602      	mov	r2, r0
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d901      	bls.n	800c9a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	e057      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c9a2:	4b10      	ldr	r3, [pc, #64]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d0f0      	beq.n	800c990 <HAL_RCC_OscConfig+0x478>
 800c9ae:	e04f      	b.n	800ca50 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9b0:	4b0c      	ldr	r3, [pc, #48]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a0b      	ldr	r2, [pc, #44]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c9b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c9ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9bc:	f7fa fec8 	bl	8007750 <HAL_GetTick>
 800c9c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9c2:	e008      	b.n	800c9d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9c4:	f7fa fec4 	bl	8007750 <HAL_GetTick>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d901      	bls.n	800c9d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e03d      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9d6:	4b03      	ldr	r3, [pc, #12]	; (800c9e4 <HAL_RCC_OscConfig+0x4cc>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1f0      	bne.n	800c9c4 <HAL_RCC_OscConfig+0x4ac>
 800c9e2:	e035      	b.n	800ca50 <HAL_RCC_OscConfig+0x538>
 800c9e4:	40023800 	.word	0x40023800
 800c9e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c9ec:	4b1b      	ldr	r3, [pc, #108]	; (800ca5c <HAL_RCC_OscConfig+0x544>)
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	699b      	ldr	r3, [r3, #24]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d028      	beq.n	800ca4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d121      	bne.n	800ca4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d11a      	bne.n	800ca4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ca1c:	4013      	ands	r3, r2
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ca22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d111      	bne.n	800ca4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca32:	085b      	lsrs	r3, r3, #1
 800ca34:	3b01      	subs	r3, #1
 800ca36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d107      	bne.n	800ca4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d001      	beq.n	800ca50 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e000      	b.n	800ca52 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3718      	adds	r7, #24
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	40023800 	.word	0x40023800

0800ca60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d101      	bne.n	800ca78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e0d0      	b.n	800cc1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca78:	4b6a      	ldr	r3, [pc, #424]	; (800cc24 <HAL_RCC_ClockConfig+0x1c4>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f003 030f 	and.w	r3, r3, #15
 800ca80:	683a      	ldr	r2, [r7, #0]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d910      	bls.n	800caa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca86:	4b67      	ldr	r3, [pc, #412]	; (800cc24 <HAL_RCC_ClockConfig+0x1c4>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f023 020f 	bic.w	r2, r3, #15
 800ca8e:	4965      	ldr	r1, [pc, #404]	; (800cc24 <HAL_RCC_ClockConfig+0x1c4>)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca96:	4b63      	ldr	r3, [pc, #396]	; (800cc24 <HAL_RCC_ClockConfig+0x1c4>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f003 030f 	and.w	r3, r3, #15
 800ca9e:	683a      	ldr	r2, [r7, #0]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d001      	beq.n	800caa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	e0b8      	b.n	800cc1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 0302 	and.w	r3, r3, #2
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d020      	beq.n	800caf6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 0304 	and.w	r3, r3, #4
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d005      	beq.n	800cacc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cac0:	4b59      	ldr	r3, [pc, #356]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	4a58      	ldr	r2, [pc, #352]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800caca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f003 0308 	and.w	r3, r3, #8
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d005      	beq.n	800cae4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cad8:	4b53      	ldr	r3, [pc, #332]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	4a52      	ldr	r2, [pc, #328]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cae2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cae4:	4b50      	ldr	r3, [pc, #320]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	494d      	ldr	r1, [pc, #308]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800caf2:	4313      	orrs	r3, r2
 800caf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f003 0301 	and.w	r3, r3, #1
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d040      	beq.n	800cb84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d107      	bne.n	800cb1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb0a:	4b47      	ldr	r3, [pc, #284]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d115      	bne.n	800cb42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	e07f      	b.n	800cc1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d107      	bne.n	800cb32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb22:	4b41      	ldr	r3, [pc, #260]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d109      	bne.n	800cb42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e073      	b.n	800cc1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb32:	4b3d      	ldr	r3, [pc, #244]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 0302 	and.w	r3, r3, #2
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d101      	bne.n	800cb42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e06b      	b.n	800cc1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cb42:	4b39      	ldr	r3, [pc, #228]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	f023 0203 	bic.w	r2, r3, #3
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	4936      	ldr	r1, [pc, #216]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cb50:	4313      	orrs	r3, r2
 800cb52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb54:	f7fa fdfc 	bl	8007750 <HAL_GetTick>
 800cb58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb5a:	e00a      	b.n	800cb72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb5c:	f7fa fdf8 	bl	8007750 <HAL_GetTick>
 800cb60:	4602      	mov	r2, r0
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d901      	bls.n	800cb72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800cb6e:	2303      	movs	r3, #3
 800cb70:	e053      	b.n	800cc1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb72:	4b2d      	ldr	r3, [pc, #180]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	f003 020c 	and.w	r2, r3, #12
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d1eb      	bne.n	800cb5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb84:	4b27      	ldr	r3, [pc, #156]	; (800cc24 <HAL_RCC_ClockConfig+0x1c4>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 030f 	and.w	r3, r3, #15
 800cb8c:	683a      	ldr	r2, [r7, #0]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d210      	bcs.n	800cbb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb92:	4b24      	ldr	r3, [pc, #144]	; (800cc24 <HAL_RCC_ClockConfig+0x1c4>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f023 020f 	bic.w	r2, r3, #15
 800cb9a:	4922      	ldr	r1, [pc, #136]	; (800cc24 <HAL_RCC_ClockConfig+0x1c4>)
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cba2:	4b20      	ldr	r3, [pc, #128]	; (800cc24 <HAL_RCC_ClockConfig+0x1c4>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f003 030f 	and.w	r3, r3, #15
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d001      	beq.n	800cbb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e032      	b.n	800cc1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 0304 	and.w	r3, r3, #4
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d008      	beq.n	800cbd2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cbc0:	4b19      	ldr	r3, [pc, #100]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	4916      	ldr	r1, [pc, #88]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f003 0308 	and.w	r3, r3, #8
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d009      	beq.n	800cbf2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cbde:	4b12      	ldr	r3, [pc, #72]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	490e      	ldr	r1, [pc, #56]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cbf2:	f000 f821 	bl	800cc38 <HAL_RCC_GetSysClockFreq>
 800cbf6:	4601      	mov	r1, r0
 800cbf8:	4b0b      	ldr	r3, [pc, #44]	; (800cc28 <HAL_RCC_ClockConfig+0x1c8>)
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	091b      	lsrs	r3, r3, #4
 800cbfe:	f003 030f 	and.w	r3, r3, #15
 800cc02:	4a0a      	ldr	r2, [pc, #40]	; (800cc2c <HAL_RCC_ClockConfig+0x1cc>)
 800cc04:	5cd3      	ldrb	r3, [r2, r3]
 800cc06:	fa21 f303 	lsr.w	r3, r1, r3
 800cc0a:	4a09      	ldr	r2, [pc, #36]	; (800cc30 <HAL_RCC_ClockConfig+0x1d0>)
 800cc0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cc0e:	4b09      	ldr	r3, [pc, #36]	; (800cc34 <HAL_RCC_ClockConfig+0x1d4>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7f6 fe26 	bl	8003864 <HAL_InitTick>

  return HAL_OK;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	40023c00 	.word	0x40023c00
 800cc28:	40023800 	.word	0x40023800
 800cc2c:	08018714 	.word	0x08018714
 800cc30:	20000000 	.word	0x20000000
 800cc34:	2000006c 	.word	0x2000006c

0800cc38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	607b      	str	r3, [r7, #4]
 800cc42:	2300      	movs	r3, #0
 800cc44:	60fb      	str	r3, [r7, #12]
 800cc46:	2300      	movs	r3, #0
 800cc48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cc4e:	4b50      	ldr	r3, [pc, #320]	; (800cd90 <HAL_RCC_GetSysClockFreq+0x158>)
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	f003 030c 	and.w	r3, r3, #12
 800cc56:	2b04      	cmp	r3, #4
 800cc58:	d007      	beq.n	800cc6a <HAL_RCC_GetSysClockFreq+0x32>
 800cc5a:	2b08      	cmp	r3, #8
 800cc5c:	d008      	beq.n	800cc70 <HAL_RCC_GetSysClockFreq+0x38>
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f040 808d 	bne.w	800cd7e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cc64:	4b4b      	ldr	r3, [pc, #300]	; (800cd94 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cc66:	60bb      	str	r3, [r7, #8]
      break;
 800cc68:	e08c      	b.n	800cd84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cc6a:	4b4b      	ldr	r3, [pc, #300]	; (800cd98 <HAL_RCC_GetSysClockFreq+0x160>)
 800cc6c:	60bb      	str	r3, [r7, #8]
      break;
 800cc6e:	e089      	b.n	800cd84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cc70:	4b47      	ldr	r3, [pc, #284]	; (800cd90 <HAL_RCC_GetSysClockFreq+0x158>)
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc78:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800cc7a:	4b45      	ldr	r3, [pc, #276]	; (800cd90 <HAL_RCC_GetSysClockFreq+0x158>)
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d023      	beq.n	800ccce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cc86:	4b42      	ldr	r3, [pc, #264]	; (800cd90 <HAL_RCC_GetSysClockFreq+0x158>)
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	099b      	lsrs	r3, r3, #6
 800cc8c:	f04f 0400 	mov.w	r4, #0
 800cc90:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cc94:	f04f 0200 	mov.w	r2, #0
 800cc98:	ea03 0501 	and.w	r5, r3, r1
 800cc9c:	ea04 0602 	and.w	r6, r4, r2
 800cca0:	4a3d      	ldr	r2, [pc, #244]	; (800cd98 <HAL_RCC_GetSysClockFreq+0x160>)
 800cca2:	fb02 f106 	mul.w	r1, r2, r6
 800cca6:	2200      	movs	r2, #0
 800cca8:	fb02 f205 	mul.w	r2, r2, r5
 800ccac:	440a      	add	r2, r1
 800ccae:	493a      	ldr	r1, [pc, #232]	; (800cd98 <HAL_RCC_GetSysClockFreq+0x160>)
 800ccb0:	fba5 0101 	umull	r0, r1, r5, r1
 800ccb4:	1853      	adds	r3, r2, r1
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f04f 0400 	mov.w	r4, #0
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	4623      	mov	r3, r4
 800ccc2:	f7f3 fd01 	bl	80006c8 <__aeabi_uldivmod>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	460c      	mov	r4, r1
 800ccca:	60fb      	str	r3, [r7, #12]
 800cccc:	e049      	b.n	800cd62 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ccce:	4b30      	ldr	r3, [pc, #192]	; (800cd90 <HAL_RCC_GetSysClockFreq+0x158>)
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	099b      	lsrs	r3, r3, #6
 800ccd4:	f04f 0400 	mov.w	r4, #0
 800ccd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ccdc:	f04f 0200 	mov.w	r2, #0
 800cce0:	ea03 0501 	and.w	r5, r3, r1
 800cce4:	ea04 0602 	and.w	r6, r4, r2
 800cce8:	4629      	mov	r1, r5
 800ccea:	4632      	mov	r2, r6
 800ccec:	f04f 0300 	mov.w	r3, #0
 800ccf0:	f04f 0400 	mov.w	r4, #0
 800ccf4:	0154      	lsls	r4, r2, #5
 800ccf6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ccfa:	014b      	lsls	r3, r1, #5
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	4622      	mov	r2, r4
 800cd00:	1b49      	subs	r1, r1, r5
 800cd02:	eb62 0206 	sbc.w	r2, r2, r6
 800cd06:	f04f 0300 	mov.w	r3, #0
 800cd0a:	f04f 0400 	mov.w	r4, #0
 800cd0e:	0194      	lsls	r4, r2, #6
 800cd10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cd14:	018b      	lsls	r3, r1, #6
 800cd16:	1a5b      	subs	r3, r3, r1
 800cd18:	eb64 0402 	sbc.w	r4, r4, r2
 800cd1c:	f04f 0100 	mov.w	r1, #0
 800cd20:	f04f 0200 	mov.w	r2, #0
 800cd24:	00e2      	lsls	r2, r4, #3
 800cd26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cd2a:	00d9      	lsls	r1, r3, #3
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	4614      	mov	r4, r2
 800cd30:	195b      	adds	r3, r3, r5
 800cd32:	eb44 0406 	adc.w	r4, r4, r6
 800cd36:	f04f 0100 	mov.w	r1, #0
 800cd3a:	f04f 0200 	mov.w	r2, #0
 800cd3e:	02a2      	lsls	r2, r4, #10
 800cd40:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cd44:	0299      	lsls	r1, r3, #10
 800cd46:	460b      	mov	r3, r1
 800cd48:	4614      	mov	r4, r2
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f04f 0400 	mov.w	r4, #0
 800cd54:	461a      	mov	r2, r3
 800cd56:	4623      	mov	r3, r4
 800cd58:	f7f3 fcb6 	bl	80006c8 <__aeabi_uldivmod>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	460c      	mov	r4, r1
 800cd60:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800cd62:	4b0b      	ldr	r3, [pc, #44]	; (800cd90 <HAL_RCC_GetSysClockFreq+0x158>)
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	0c1b      	lsrs	r3, r3, #16
 800cd68:	f003 0303 	and.w	r3, r3, #3
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd7a:	60bb      	str	r3, [r7, #8]
      break;
 800cd7c:	e002      	b.n	800cd84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cd7e:	4b05      	ldr	r3, [pc, #20]	; (800cd94 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cd80:	60bb      	str	r3, [r7, #8]
      break;
 800cd82:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cd84:	68bb      	ldr	r3, [r7, #8]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	40023800 	.word	0x40023800
 800cd94:	00f42400 	.word	0x00f42400
 800cd98:	017d7840 	.word	0x017d7840

0800cd9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cda0:	4b03      	ldr	r3, [pc, #12]	; (800cdb0 <HAL_RCC_GetHCLKFreq+0x14>)
 800cda2:	681b      	ldr	r3, [r3, #0]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	20000000 	.word	0x20000000

0800cdb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cdb8:	f7ff fff0 	bl	800cd9c <HAL_RCC_GetHCLKFreq>
 800cdbc:	4601      	mov	r1, r0
 800cdbe:	4b05      	ldr	r3, [pc, #20]	; (800cdd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	0a9b      	lsrs	r3, r3, #10
 800cdc4:	f003 0307 	and.w	r3, r3, #7
 800cdc8:	4a03      	ldr	r2, [pc, #12]	; (800cdd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cdca:	5cd3      	ldrb	r3, [r2, r3]
 800cdcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	40023800 	.word	0x40023800
 800cdd8:	08018724 	.word	0x08018724

0800cddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cde0:	f7ff ffdc 	bl	800cd9c <HAL_RCC_GetHCLKFreq>
 800cde4:	4601      	mov	r1, r0
 800cde6:	4b05      	ldr	r3, [pc, #20]	; (800cdfc <HAL_RCC_GetPCLK2Freq+0x20>)
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	0b5b      	lsrs	r3, r3, #13
 800cdec:	f003 0307 	and.w	r3, r3, #7
 800cdf0:	4a03      	ldr	r2, [pc, #12]	; (800ce00 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cdf2:	5cd3      	ldrb	r3, [r2, r3]
 800cdf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	40023800 	.word	0x40023800
 800ce00:	08018724 	.word	0x08018724

0800ce04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	220f      	movs	r2, #15
 800ce12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ce14:	4b12      	ldr	r3, [pc, #72]	; (800ce60 <HAL_RCC_GetClockConfig+0x5c>)
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	f003 0203 	and.w	r2, r3, #3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ce20:	4b0f      	ldr	r3, [pc, #60]	; (800ce60 <HAL_RCC_GetClockConfig+0x5c>)
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ce2c:	4b0c      	ldr	r3, [pc, #48]	; (800ce60 <HAL_RCC_GetClockConfig+0x5c>)
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ce38:	4b09      	ldr	r3, [pc, #36]	; (800ce60 <HAL_RCC_GetClockConfig+0x5c>)
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	08db      	lsrs	r3, r3, #3
 800ce3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ce46:	4b07      	ldr	r3, [pc, #28]	; (800ce64 <HAL_RCC_GetClockConfig+0x60>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f003 020f 	and.w	r2, r3, #15
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	601a      	str	r2, [r3, #0]
}
 800ce52:	bf00      	nop
 800ce54:	370c      	adds	r7, #12
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	40023800 	.word	0x40023800
 800ce64:	40023c00 	.word	0x40023c00

0800ce68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b088      	sub	sp, #32
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ce74:	2300      	movs	r3, #0
 800ce76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ce80:	2300      	movs	r3, #0
 800ce82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f003 0301 	and.w	r3, r3, #1
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d012      	beq.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ce90:	4b69      	ldr	r3, [pc, #420]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	4a68      	ldr	r2, [pc, #416]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ce9a:	6093      	str	r3, [r2, #8]
 800ce9c:	4b66      	ldr	r3, [pc, #408]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ce9e:	689a      	ldr	r2, [r3, #8]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea4:	4964      	ldr	r1, [pc, #400]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cea6:	4313      	orrs	r3, r2
 800cea8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d101      	bne.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d017      	beq.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cec2:	4b5d      	ldr	r3, [pc, #372]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced0:	4959      	ldr	r1, [pc, #356]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ced2:	4313      	orrs	r3, r2
 800ced4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cedc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cee0:	d101      	bne.n	800cee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cee2:	2301      	movs	r3, #1
 800cee4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d101      	bne.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ceee:	2301      	movs	r3, #1
 800cef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d017      	beq.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cefe:	4b4e      	ldr	r3, [pc, #312]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf0c:	494a      	ldr	r1, [pc, #296]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf1c:	d101      	bne.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d101      	bne.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d001      	beq.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f003 0320 	and.w	r3, r3, #32
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 808b 	beq.w	800d062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cf4c:	4b3a      	ldr	r3, [pc, #232]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf50:	4a39      	ldr	r2, [pc, #228]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf56:	6413      	str	r3, [r2, #64]	; 0x40
 800cf58:	4b37      	ldr	r3, [pc, #220]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf60:	60bb      	str	r3, [r7, #8]
 800cf62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cf64:	4b35      	ldr	r3, [pc, #212]	; (800d03c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a34      	ldr	r2, [pc, #208]	; (800d03c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cf6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf70:	f7fa fbee 	bl	8007750 <HAL_GetTick>
 800cf74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cf76:	e008      	b.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf78:	f7fa fbea 	bl	8007750 <HAL_GetTick>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	2b64      	cmp	r3, #100	; 0x64
 800cf84:	d901      	bls.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800cf86:	2303      	movs	r3, #3
 800cf88:	e355      	b.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cf8a:	4b2c      	ldr	r3, [pc, #176]	; (800d03c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d0f0      	beq.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cf96:	4b28      	ldr	r3, [pc, #160]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cf98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d035      	beq.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfae:	693a      	ldr	r2, [r7, #16]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d02e      	beq.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cfb4:	4b20      	ldr	r3, [pc, #128]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfbc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cfbe:	4b1e      	ldr	r3, [pc, #120]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfc2:	4a1d      	ldr	r2, [pc, #116]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cfc8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cfca:	4b1b      	ldr	r3, [pc, #108]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfce:	4a1a      	ldr	r2, [pc, #104]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cfd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cfd6:	4a18      	ldr	r2, [pc, #96]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cfdc:	4b16      	ldr	r3, [pc, #88]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cfde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe0:	f003 0301 	and.w	r3, r3, #1
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d114      	bne.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfe8:	f7fa fbb2 	bl	8007750 <HAL_GetTick>
 800cfec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfee:	e00a      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cff0:	f7fa fbae 	bl	8007750 <HAL_GetTick>
 800cff4:	4602      	mov	r2, r0
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	f241 3288 	movw	r2, #5000	; 0x1388
 800cffe:	4293      	cmp	r3, r2
 800d000:	d901      	bls.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d002:	2303      	movs	r3, #3
 800d004:	e317      	b.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d006:	4b0c      	ldr	r3, [pc, #48]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d00a:	f003 0302 	and.w	r3, r3, #2
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d0ee      	beq.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d01a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d01e:	d111      	bne.n	800d044 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d020:	4b05      	ldr	r3, [pc, #20]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d02c:	4b04      	ldr	r3, [pc, #16]	; (800d040 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d02e:	400b      	ands	r3, r1
 800d030:	4901      	ldr	r1, [pc, #4]	; (800d038 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d032:	4313      	orrs	r3, r2
 800d034:	608b      	str	r3, [r1, #8]
 800d036:	e00b      	b.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d038:	40023800 	.word	0x40023800
 800d03c:	40007000 	.word	0x40007000
 800d040:	0ffffcff 	.word	0x0ffffcff
 800d044:	4bb0      	ldr	r3, [pc, #704]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	4aaf      	ldr	r2, [pc, #700]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d04a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d04e:	6093      	str	r3, [r2, #8]
 800d050:	4bad      	ldr	r3, [pc, #692]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d05c:	49aa      	ldr	r1, [pc, #680]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d05e:	4313      	orrs	r3, r2
 800d060:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f003 0310 	and.w	r3, r3, #16
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d010      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d06e:	4ba6      	ldr	r3, [pc, #664]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d074:	4aa4      	ldr	r2, [pc, #656]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d07a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d07e:	4ba2      	ldr	r3, [pc, #648]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d080:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d088:	499f      	ldr	r1, [pc, #636]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d08a:	4313      	orrs	r3, r2
 800d08c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00a      	beq.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d09c:	4b9a      	ldr	r3, [pc, #616]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0aa:	4997      	ldr	r1, [pc, #604]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00a      	beq.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d0be:	4b92      	ldr	r3, [pc, #584]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0cc:	498e      	ldr	r1, [pc, #568]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00a      	beq.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d0e0:	4b89      	ldr	r3, [pc, #548]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ee:	4986      	ldr	r1, [pc, #536]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00a      	beq.n	800d118 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d102:	4b81      	ldr	r3, [pc, #516]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d108:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d110:	497d      	ldr	r1, [pc, #500]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d112:	4313      	orrs	r3, r2
 800d114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00a      	beq.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d124:	4b78      	ldr	r3, [pc, #480]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d12a:	f023 0203 	bic.w	r2, r3, #3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d132:	4975      	ldr	r1, [pc, #468]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d134:	4313      	orrs	r3, r2
 800d136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00a      	beq.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d146:	4b70      	ldr	r3, [pc, #448]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d14c:	f023 020c 	bic.w	r2, r3, #12
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d154:	496c      	ldr	r1, [pc, #432]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d156:	4313      	orrs	r3, r2
 800d158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00a      	beq.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d168:	4b67      	ldr	r3, [pc, #412]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d16e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d176:	4964      	ldr	r1, [pc, #400]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d178:	4313      	orrs	r3, r2
 800d17a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00a      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d18a:	4b5f      	ldr	r3, [pc, #380]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d190:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d198:	495b      	ldr	r1, [pc, #364]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d19a:	4313      	orrs	r3, r2
 800d19c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00a      	beq.n	800d1c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d1ac:	4b56      	ldr	r3, [pc, #344]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1ba:	4953      	ldr	r1, [pc, #332]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00a      	beq.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d1ce:	4b4e      	ldr	r3, [pc, #312]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1dc:	494a      	ldr	r1, [pc, #296]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d00a      	beq.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d1f0:	4b45      	ldr	r3, [pc, #276]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1fe:	4942      	ldr	r1, [pc, #264]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d200:	4313      	orrs	r3, r2
 800d202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00a      	beq.n	800d228 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d212:	4b3d      	ldr	r3, [pc, #244]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d218:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d220:	4939      	ldr	r1, [pc, #228]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d222:	4313      	orrs	r3, r2
 800d224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00a      	beq.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d234:	4b34      	ldr	r3, [pc, #208]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d23a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d242:	4931      	ldr	r1, [pc, #196]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d244:	4313      	orrs	r3, r2
 800d246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d252:	2b00      	cmp	r3, #0
 800d254:	d011      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d256:	4b2c      	ldr	r3, [pc, #176]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d25c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d264:	4928      	ldr	r1, [pc, #160]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d266:	4313      	orrs	r3, r2
 800d268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d274:	d101      	bne.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d276:	2301      	movs	r3, #1
 800d278:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f003 0308 	and.w	r3, r3, #8
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d286:	2301      	movs	r3, #1
 800d288:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00a      	beq.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d296:	4b1c      	ldr	r3, [pc, #112]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d29c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2a4:	4918      	ldr	r1, [pc, #96]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00b      	beq.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d2b8:	4b13      	ldr	r3, [pc, #76]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d2c8:	490f      	ldr	r1, [pc, #60]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d005      	beq.n	800d2e2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2de:	f040 80d8 	bne.w	800d492 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d2e2:	4b09      	ldr	r3, [pc, #36]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4a08      	ldr	r2, [pc, #32]	; (800d308 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800d2e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d2ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2ee:	f7fa fa2f 	bl	8007750 <HAL_GetTick>
 800d2f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d2f4:	e00a      	b.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d2f6:	f7fa fa2b 	bl	8007750 <HAL_GetTick>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	2b64      	cmp	r3, #100	; 0x64
 800d302:	d903      	bls.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d304:	2303      	movs	r3, #3
 800d306:	e196      	b.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800d308:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d30c:	4b6c      	ldr	r3, [pc, #432]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d314:	2b00      	cmp	r3, #0
 800d316:	d1ee      	bne.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f003 0301 	and.w	r3, r3, #1
 800d320:	2b00      	cmp	r3, #0
 800d322:	d021      	beq.n	800d368 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d11d      	bne.n	800d368 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d32c:	4b64      	ldr	r3, [pc, #400]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d32e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d332:	0c1b      	lsrs	r3, r3, #16
 800d334:	f003 0303 	and.w	r3, r3, #3
 800d338:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d33a:	4b61      	ldr	r3, [pc, #388]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d33c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d340:	0e1b      	lsrs	r3, r3, #24
 800d342:	f003 030f 	and.w	r3, r3, #15
 800d346:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	019a      	lsls	r2, r3, #6
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	041b      	lsls	r3, r3, #16
 800d352:	431a      	orrs	r2, r3
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	061b      	lsls	r3, r3, #24
 800d358:	431a      	orrs	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	071b      	lsls	r3, r3, #28
 800d360:	4957      	ldr	r1, [pc, #348]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d362:	4313      	orrs	r3, r2
 800d364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d370:	2b00      	cmp	r3, #0
 800d372:	d004      	beq.n	800d37e <HAL_RCCEx_PeriphCLKConfig+0x516>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d37c:	d00a      	beq.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d386:	2b00      	cmp	r3, #0
 800d388:	d02e      	beq.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d392:	d129      	bne.n	800d3e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d394:	4b4a      	ldr	r3, [pc, #296]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d39a:	0c1b      	lsrs	r3, r3, #16
 800d39c:	f003 0303 	and.w	r3, r3, #3
 800d3a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d3a2:	4b47      	ldr	r3, [pc, #284]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d3a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3a8:	0f1b      	lsrs	r3, r3, #28
 800d3aa:	f003 0307 	and.w	r3, r3, #7
 800d3ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	019a      	lsls	r2, r3, #6
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	041b      	lsls	r3, r3, #16
 800d3ba:	431a      	orrs	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	061b      	lsls	r3, r3, #24
 800d3c2:	431a      	orrs	r2, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	071b      	lsls	r3, r3, #28
 800d3c8:	493d      	ldr	r1, [pc, #244]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d3d0:	4b3b      	ldr	r3, [pc, #236]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d3d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3d6:	f023 021f 	bic.w	r2, r3, #31
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	4937      	ldr	r1, [pc, #220]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d01d      	beq.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d3f4:	4b32      	ldr	r3, [pc, #200]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d3f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3fa:	0e1b      	lsrs	r3, r3, #24
 800d3fc:	f003 030f 	and.w	r3, r3, #15
 800d400:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d402:	4b2f      	ldr	r3, [pc, #188]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d408:	0f1b      	lsrs	r3, r3, #28
 800d40a:	f003 0307 	and.w	r3, r3, #7
 800d40e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	019a      	lsls	r2, r3, #6
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	041b      	lsls	r3, r3, #16
 800d41c:	431a      	orrs	r2, r3
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	061b      	lsls	r3, r3, #24
 800d422:	431a      	orrs	r2, r3
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	071b      	lsls	r3, r3, #28
 800d428:	4925      	ldr	r1, [pc, #148]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d42a:	4313      	orrs	r3, r2
 800d42c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d011      	beq.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	019a      	lsls	r2, r3, #6
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	041b      	lsls	r3, r3, #16
 800d448:	431a      	orrs	r2, r3
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	061b      	lsls	r3, r3, #24
 800d450:	431a      	orrs	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	071b      	lsls	r3, r3, #28
 800d458:	4919      	ldr	r1, [pc, #100]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d45a:	4313      	orrs	r3, r2
 800d45c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d460:	4b17      	ldr	r3, [pc, #92]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a16      	ldr	r2, [pc, #88]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d466:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d46a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d46c:	f7fa f970 	bl	8007750 <HAL_GetTick>
 800d470:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d472:	e008      	b.n	800d486 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d474:	f7fa f96c 	bl	8007750 <HAL_GetTick>
 800d478:	4602      	mov	r2, r0
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	1ad3      	subs	r3, r2, r3
 800d47e:	2b64      	cmp	r3, #100	; 0x64
 800d480:	d901      	bls.n	800d486 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d482:	2303      	movs	r3, #3
 800d484:	e0d7      	b.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d486:	4b0e      	ldr	r3, [pc, #56]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d0f0      	beq.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	2b01      	cmp	r3, #1
 800d496:	f040 80cd 	bne.w	800d634 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d49a:	4b09      	ldr	r3, [pc, #36]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a08      	ldr	r2, [pc, #32]	; (800d4c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800d4a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d4a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4a6:	f7fa f953 	bl	8007750 <HAL_GetTick>
 800d4aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d4ac:	e00a      	b.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d4ae:	f7fa f94f 	bl	8007750 <HAL_GetTick>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	2b64      	cmp	r3, #100	; 0x64
 800d4ba:	d903      	bls.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d4bc:	2303      	movs	r3, #3
 800d4be:	e0ba      	b.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800d4c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d4c4:	4b5e      	ldr	r3, [pc, #376]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4d0:	d0ed      	beq.n	800d4ae <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d003      	beq.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d009      	beq.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d02e      	beq.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d12a      	bne.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d4fa:	4b51      	ldr	r3, [pc, #324]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d500:	0c1b      	lsrs	r3, r3, #16
 800d502:	f003 0303 	and.w	r3, r3, #3
 800d506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d508:	4b4d      	ldr	r3, [pc, #308]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d50e:	0f1b      	lsrs	r3, r3, #28
 800d510:	f003 0307 	and.w	r3, r3, #7
 800d514:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	695b      	ldr	r3, [r3, #20]
 800d51a:	019a      	lsls	r2, r3, #6
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	041b      	lsls	r3, r3, #16
 800d520:	431a      	orrs	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	699b      	ldr	r3, [r3, #24]
 800d526:	061b      	lsls	r3, r3, #24
 800d528:	431a      	orrs	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	071b      	lsls	r3, r3, #28
 800d52e:	4944      	ldr	r1, [pc, #272]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d530:	4313      	orrs	r3, r2
 800d532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d536:	4b42      	ldr	r3, [pc, #264]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d53c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d544:	3b01      	subs	r3, #1
 800d546:	021b      	lsls	r3, r3, #8
 800d548:	493d      	ldr	r1, [pc, #244]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d54a:	4313      	orrs	r3, r2
 800d54c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d022      	beq.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d564:	d11d      	bne.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d566:	4b36      	ldr	r3, [pc, #216]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d56c:	0e1b      	lsrs	r3, r3, #24
 800d56e:	f003 030f 	and.w	r3, r3, #15
 800d572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d574:	4b32      	ldr	r3, [pc, #200]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d57a:	0f1b      	lsrs	r3, r3, #28
 800d57c:	f003 0307 	and.w	r3, r3, #7
 800d580:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	695b      	ldr	r3, [r3, #20]
 800d586:	019a      	lsls	r2, r3, #6
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6a1b      	ldr	r3, [r3, #32]
 800d58c:	041b      	lsls	r3, r3, #16
 800d58e:	431a      	orrs	r2, r3
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	061b      	lsls	r3, r3, #24
 800d594:	431a      	orrs	r2, r3
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	071b      	lsls	r3, r3, #28
 800d59a:	4929      	ldr	r1, [pc, #164]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d59c:	4313      	orrs	r3, r2
 800d59e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f003 0308 	and.w	r3, r3, #8
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d028      	beq.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d5ae:	4b24      	ldr	r3, [pc, #144]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d5b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5b4:	0e1b      	lsrs	r3, r3, #24
 800d5b6:	f003 030f 	and.w	r3, r3, #15
 800d5ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d5bc:	4b20      	ldr	r3, [pc, #128]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5c2:	0c1b      	lsrs	r3, r3, #16
 800d5c4:	f003 0303 	and.w	r3, r3, #3
 800d5c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	695b      	ldr	r3, [r3, #20]
 800d5ce:	019a      	lsls	r2, r3, #6
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	041b      	lsls	r3, r3, #16
 800d5d4:	431a      	orrs	r2, r3
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	061b      	lsls	r3, r3, #24
 800d5da:	431a      	orrs	r2, r3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	69db      	ldr	r3, [r3, #28]
 800d5e0:	071b      	lsls	r3, r3, #28
 800d5e2:	4917      	ldr	r1, [pc, #92]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d5ea:	4b15      	ldr	r3, [pc, #84]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d5ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f8:	4911      	ldr	r1, [pc, #68]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d600:	4b0f      	ldr	r3, [pc, #60]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a0e      	ldr	r2, [pc, #56]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d60a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d60c:	f7fa f8a0 	bl	8007750 <HAL_GetTick>
 800d610:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d612:	e008      	b.n	800d626 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d614:	f7fa f89c 	bl	8007750 <HAL_GetTick>
 800d618:	4602      	mov	r2, r0
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	2b64      	cmp	r3, #100	; 0x64
 800d620:	d901      	bls.n	800d626 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d622:	2303      	movs	r3, #3
 800d624:	e007      	b.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d626:	4b06      	ldr	r3, [pc, #24]	; (800d640 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d62e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d632:	d1ef      	bne.n	800d614 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3720      	adds	r7, #32
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	40023800 	.word	0x40023800

0800d644 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	4a80      	ldr	r2, [pc, #512]	; (800d854 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800d654:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800d656:	4b80      	ldr	r3, [pc, #512]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d65c:	099b      	lsrs	r3, r3, #6
 800d65e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d666:	4b7c      	ldr	r3, [pc, #496]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d66c:	0c1b      	lsrs	r3, r3, #16
 800d66e:	f003 0203 	and.w	r2, r3, #3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d676:	4b78      	ldr	r3, [pc, #480]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d67c:	0e1b      	lsrs	r3, r3, #24
 800d67e:	f003 020f 	and.w	r2, r3, #15
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d686:	4b74      	ldr	r3, [pc, #464]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d68c:	0f1b      	lsrs	r3, r3, #28
 800d68e:	f003 0207 	and.w	r2, r3, #7
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800d696:	4b70      	ldr	r3, [pc, #448]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d69c:	099b      	lsrs	r3, r3, #6
 800d69e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d6a6:	4b6c      	ldr	r3, [pc, #432]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6ac:	0c1b      	lsrs	r3, r3, #16
 800d6ae:	f003 0203 	and.w	r2, r3, #3
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d6b6:	4b68      	ldr	r3, [pc, #416]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6bc:	0e1b      	lsrs	r3, r3, #24
 800d6be:	f003 020f 	and.w	r2, r3, #15
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d6c6:	4b64      	ldr	r3, [pc, #400]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6cc:	0f1b      	lsrs	r3, r3, #28
 800d6ce:	f003 0207 	and.w	r2, r3, #7
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800d6d6:	4b60      	ldr	r3, [pc, #384]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6dc:	f003 021f 	and.w	r2, r3, #31
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800d6e4:	4b5c      	ldr	r3, [pc, #368]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6ea:	0a1b      	lsrs	r3, r3, #8
 800d6ec:	f003 021f 	and.w	r2, r3, #31
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800d6f4:	4b58      	ldr	r3, [pc, #352]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d6f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6fa:	0c1b      	lsrs	r3, r3, #16
 800d6fc:	f003 0203 	and.w	r2, r3, #3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800d704:	4b54      	ldr	r3, [pc, #336]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d70a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800d712:	4b51      	ldr	r3, [pc, #324]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d718:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800d720:	4b4d      	ldr	r3, [pc, #308]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800d72c:	4b4a      	ldr	r3, [pc, #296]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800d73a:	4b47      	ldr	r3, [pc, #284]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d740:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800d748:	4b43      	ldr	r3, [pc, #268]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d74a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d74e:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800d756:	4b40      	ldr	r3, [pc, #256]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d75c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800d764:	4b3c      	ldr	r3, [pc, #240]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d76a:	f003 0203 	and.w	r2, r3, #3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800d772:	4b39      	ldr	r3, [pc, #228]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d778:	f003 020c 	and.w	r2, r3, #12
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800d780:	4b35      	ldr	r3, [pc, #212]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d786:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800d78e:	4b32      	ldr	r3, [pc, #200]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d794:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800d79c:	4b2e      	ldr	r3, [pc, #184]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d79e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800d7aa:	4b2b      	ldr	r3, [pc, #172]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7b0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800d7b8:	4b27      	ldr	r3, [pc, #156]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7be:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800d7c6:	4b24      	ldr	r3, [pc, #144]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7cc:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800d7d4:	4b20      	ldr	r3, [pc, #128]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7da:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800d7e2:	4b1d      	ldr	r3, [pc, #116]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7e8:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800d7f0:	4b19      	ldr	r3, [pc, #100]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7f6:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800d7fe:	4b16      	ldr	r3, [pc, #88]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d804:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800d80e:	4b12      	ldr	r3, [pc, #72]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d816:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800d818:	4b0f      	ldr	r3, [pc, #60]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d81c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	431a      	orrs	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800d828:	4b0b      	ldr	r3, [pc, #44]	; (800d858 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800d82a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d82e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d832:	2b00      	cmp	r3, #0
 800d834:	d103      	bne.n	800d83e <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2200      	movs	r2, #0
 800d83a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800d83c:	e003      	b.n	800d846 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d844:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d846:	bf00      	nop
 800d848:	3714      	adds	r7, #20
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	00fffff1 	.word	0x00fffff1
 800d858:	40023800 	.word	0x40023800

0800d85c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b087      	sub	sp, #28
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d864:	2300      	movs	r3, #0
 800d866:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800d868:	2300      	movs	r3, #0
 800d86a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800d86c:	2300      	movs	r3, #0
 800d86e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800d870:	2300      	movs	r3, #0
 800d872:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d87a:	f040 8086 	bne.w	800d98a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d87e:	4b8d      	ldr	r3, [pc, #564]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d884:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d88c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d894:	d03e      	beq.n	800d914 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800d896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d89a:	d073      	beq.n	800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d000      	beq.n	800d8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d8a0:	e074      	b.n	800d98c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d8a2:	4b84      	ldr	r3, [pc, #528]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d108      	bne.n	800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d8ae:	4b81      	ldr	r3, [pc, #516]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8b6:	4a80      	ldr	r2, [pc, #512]	; (800dab8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800d8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8bc:	613b      	str	r3, [r7, #16]
 800d8be:	e007      	b.n	800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d8c0:	4b7c      	ldr	r3, [pc, #496]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8c8:	4a7c      	ldr	r2, [pc, #496]	; (800dabc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800d8ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ce:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d8d0:	4b78      	ldr	r3, [pc, #480]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d8d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8d6:	0e1b      	lsrs	r3, r3, #24
 800d8d8:	f003 030f 	and.w	r3, r3, #15
 800d8dc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d8de:	4b75      	ldr	r3, [pc, #468]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d8e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8e4:	099b      	lsrs	r3, r3, #6
 800d8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8ea:	693a      	ldr	r2, [r7, #16]
 800d8ec:	fb02 f203 	mul.w	r2, r2, r3
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d8f8:	4b6e      	ldr	r3, [pc, #440]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d8fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8fe:	0a1b      	lsrs	r3, r3, #8
 800d900:	f003 031f 	and.w	r3, r3, #31
 800d904:	3301      	adds	r3, #1
 800d906:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d910:	617b      	str	r3, [r7, #20]
        break;
 800d912:	e03b      	b.n	800d98c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d914:	4b67      	ldr	r3, [pc, #412]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d108      	bne.n	800d932 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d920:	4b64      	ldr	r3, [pc, #400]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d928:	4a63      	ldr	r2, [pc, #396]	; (800dab8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800d92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d92e:	613b      	str	r3, [r7, #16]
 800d930:	e007      	b.n	800d942 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d932:	4b60      	ldr	r3, [pc, #384]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d93a:	4a60      	ldr	r2, [pc, #384]	; (800dabc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800d93c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d940:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d942:	4b5c      	ldr	r3, [pc, #368]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d948:	0e1b      	lsrs	r3, r3, #24
 800d94a:	f003 030f 	and.w	r3, r3, #15
 800d94e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d950:	4b58      	ldr	r3, [pc, #352]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d956:	099b      	lsrs	r3, r3, #6
 800d958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d95c:	693a      	ldr	r2, [r7, #16]
 800d95e:	fb02 f203 	mul.w	r2, r2, r3
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	fbb2 f3f3 	udiv	r3, r2, r3
 800d968:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d96a:	4b52      	ldr	r3, [pc, #328]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d96c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d970:	f003 031f 	and.w	r3, r3, #31
 800d974:	3301      	adds	r3, #1
 800d976:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d978:	697a      	ldr	r2, [r7, #20]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d980:	617b      	str	r3, [r7, #20]
        break;
 800d982:	e003      	b.n	800d98c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d984:	4b4e      	ldr	r3, [pc, #312]	; (800dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800d986:	617b      	str	r3, [r7, #20]
        break;
 800d988:	e000      	b.n	800d98c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800d98a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d992:	f040 8086 	bne.w	800daa2 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d996:	4b47      	ldr	r3, [pc, #284]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d99c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800d9a4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9ac:	d03e      	beq.n	800da2c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800d9ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d9b2:	d073      	beq.n	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d000      	beq.n	800d9ba <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d9b8:	e074      	b.n	800daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d9ba:	4b3e      	ldr	r3, [pc, #248]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d108      	bne.n	800d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d9c6:	4b3b      	ldr	r3, [pc, #236]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9ce:	4a3a      	ldr	r2, [pc, #232]	; (800dab8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800d9d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9d4:	613b      	str	r3, [r7, #16]
 800d9d6:	e007      	b.n	800d9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d9d8:	4b36      	ldr	r3, [pc, #216]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9e0:	4a36      	ldr	r2, [pc, #216]	; (800dabc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800d9e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9e6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d9e8:	4b32      	ldr	r3, [pc, #200]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d9ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9ee:	0e1b      	lsrs	r3, r3, #24
 800d9f0:	f003 030f 	and.w	r3, r3, #15
 800d9f4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d9f6:	4b2f      	ldr	r3, [pc, #188]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800d9f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9fc:	099b      	lsrs	r3, r3, #6
 800d9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da02:	693a      	ldr	r2, [r7, #16]
 800da04:	fb02 f203 	mul.w	r2, r2, r3
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da0e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800da10:	4b28      	ldr	r3, [pc, #160]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da16:	0a1b      	lsrs	r3, r3, #8
 800da18:	f003 031f 	and.w	r3, r3, #31
 800da1c:	3301      	adds	r3, #1
 800da1e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800da20:	697a      	ldr	r2, [r7, #20]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	fbb2 f3f3 	udiv	r3, r2, r3
 800da28:	617b      	str	r3, [r7, #20]
        break;
 800da2a:	e03b      	b.n	800daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800da2c:	4b21      	ldr	r3, [pc, #132]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da34:	2b00      	cmp	r3, #0
 800da36:	d108      	bne.n	800da4a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800da38:	4b1e      	ldr	r3, [pc, #120]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da40:	4a1d      	ldr	r2, [pc, #116]	; (800dab8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800da42:	fbb2 f3f3 	udiv	r3, r2, r3
 800da46:	613b      	str	r3, [r7, #16]
 800da48:	e007      	b.n	800da5a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800da4a:	4b1a      	ldr	r3, [pc, #104]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da52:	4a1a      	ldr	r2, [pc, #104]	; (800dabc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800da54:	fbb2 f3f3 	udiv	r3, r2, r3
 800da58:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800da5a:	4b16      	ldr	r3, [pc, #88]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da60:	0e1b      	lsrs	r3, r3, #24
 800da62:	f003 030f 	and.w	r3, r3, #15
 800da66:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800da68:	4b12      	ldr	r3, [pc, #72]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da6e:	099b      	lsrs	r3, r3, #6
 800da70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da74:	693a      	ldr	r2, [r7, #16]
 800da76:	fb02 f203 	mul.w	r2, r2, r3
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da80:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800da82:	4b0c      	ldr	r3, [pc, #48]	; (800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800da84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da88:	f003 031f 	and.w	r3, r3, #31
 800da8c:	3301      	adds	r3, #1
 800da8e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800da90:	697a      	ldr	r2, [r7, #20]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	fbb2 f3f3 	udiv	r3, r2, r3
 800da98:	617b      	str	r3, [r7, #20]
        break;
 800da9a:	e003      	b.n	800daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800da9c:	4b08      	ldr	r3, [pc, #32]	; (800dac0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800da9e:	617b      	str	r3, [r7, #20]
        break;
 800daa0:	e000      	b.n	800daa4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800daa2:	bf00      	nop

  return frequency;
 800daa4:	697b      	ldr	r3, [r7, #20]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	371c      	adds	r7, #28
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	40023800 	.word	0x40023800
 800dab8:	00f42400 	.word	0x00f42400
 800dabc:	017d7840 	.word	0x017d7840
 800dac0:	00bb8000 	.word	0x00bb8000

0800dac4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d101      	bne.n	800dad6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800dad2:	2301      	movs	r3, #1
 800dad4:	e06b      	b.n	800dbae <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	7f5b      	ldrb	r3, [r3, #29]
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d105      	bne.n	800daec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f7f5 fb26 	bl	8003138 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2202      	movs	r2, #2
 800daf0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	22ca      	movs	r2, #202	; 0xca
 800daf8:	625a      	str	r2, [r3, #36]	; 0x24
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2253      	movs	r2, #83	; 0x53
 800db00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 fb00 	bl	800e108 <RTC_EnterInitMode>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d008      	beq.n	800db20 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	22ff      	movs	r2, #255	; 0xff
 800db14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2204      	movs	r2, #4
 800db1a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800db1c:	2301      	movs	r3, #1
 800db1e:	e046      	b.n	800dbae <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	6899      	ldr	r1, [r3, #8]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	4b23      	ldr	r3, [pc, #140]	; (800dbb8 <HAL_RTC_Init+0xf4>)
 800db2c:	400b      	ands	r3, r1
 800db2e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6899      	ldr	r1, [r3, #8]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	691b      	ldr	r3, [r3, #16]
 800db3e:	431a      	orrs	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	695b      	ldr	r3, [r3, #20]
 800db44:	431a      	orrs	r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	430a      	orrs	r2, r1
 800db4c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	68d2      	ldr	r2, [r2, #12]
 800db56:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	6919      	ldr	r1, [r3, #16]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	041a      	lsls	r2, r3, #16
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	430a      	orrs	r2, r1
 800db6a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68da      	ldr	r2, [r3, #12]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800db7a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f022 0208 	bic.w	r2, r2, #8
 800db8a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	699a      	ldr	r2, [r3, #24]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	430a      	orrs	r2, r1
 800db9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	22ff      	movs	r2, #255	; 0xff
 800dba4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800dbac:	2300      	movs	r3, #0
  }
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	ff8fffbf 	.word	0xff8fffbf

0800dbbc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dbbc:	b590      	push	{r4, r7, lr}
 800dbbe:	b087      	sub	sp, #28
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	7f1b      	ldrb	r3, [r3, #28]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d101      	bne.n	800dbd8 <HAL_RTC_SetTime+0x1c>
 800dbd4:	2302      	movs	r3, #2
 800dbd6:	e0a8      	b.n	800dd2a <HAL_RTC_SetTime+0x16e>
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d126      	bne.n	800dc38 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	689b      	ldr	r3, [r3, #8]
 800dbf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d102      	bne.n	800dbfe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	4618      	mov	r0, r3
 800dc04:	f000 faac 	bl	800e160 <RTC_ByteToBcd2>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	785b      	ldrb	r3, [r3, #1]
 800dc10:	4618      	mov	r0, r3
 800dc12:	f000 faa5 	bl	800e160 <RTC_ByteToBcd2>
 800dc16:	4603      	mov	r3, r0
 800dc18:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800dc1a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	789b      	ldrb	r3, [r3, #2]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f000 fa9d 	bl	800e160 <RTC_ByteToBcd2>
 800dc26:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800dc28:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	7b1b      	ldrb	r3, [r3, #12]
 800dc30:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800dc32:	4313      	orrs	r3, r2
 800dc34:	617b      	str	r3, [r7, #20]
 800dc36:	e018      	b.n	800dc6a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	689b      	ldr	r3, [r3, #8]
 800dc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d102      	bne.n	800dc4c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	785b      	ldrb	r3, [r3, #1]
 800dc56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800dc58:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800dc5a:	68ba      	ldr	r2, [r7, #8]
 800dc5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800dc5e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	7b1b      	ldrb	r3, [r3, #12]
 800dc64:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800dc66:	4313      	orrs	r3, r2
 800dc68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	22ca      	movs	r2, #202	; 0xca
 800dc70:	625a      	str	r2, [r3, #36]	; 0x24
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2253      	movs	r2, #83	; 0x53
 800dc78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 fa44 	bl	800e108 <RTC_EnterInitMode>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00b      	beq.n	800dc9e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	22ff      	movs	r2, #255	; 0xff
 800dc8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2204      	movs	r2, #4
 800dc92:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2200      	movs	r2, #0
 800dc98:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e045      	b.n	800dd2a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	6979      	ldr	r1, [r7, #20]
 800dca4:	4b23      	ldr	r3, [pc, #140]	; (800dd34 <HAL_RTC_SetTime+0x178>)
 800dca6:	400b      	ands	r3, r1
 800dca8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	689a      	ldr	r2, [r3, #8]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dcb8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	6899      	ldr	r1, [r3, #8]
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	691a      	ldr	r2, [r3, #16]
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	695b      	ldr	r3, [r3, #20]
 800dcc8:	431a      	orrs	r2, r3
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	430a      	orrs	r2, r1
 800dcd0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	68da      	ldr	r2, [r3, #12]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dce0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	f003 0320 	and.w	r3, r3, #32
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d111      	bne.n	800dd14 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f000 f9e1 	bl	800e0b8 <HAL_RTC_WaitForSynchro>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00b      	beq.n	800dd14 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	22ff      	movs	r2, #255	; 0xff
 800dd02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2204      	movs	r2, #4
 800dd08:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800dd10:	2301      	movs	r3, #1
 800dd12:	e00a      	b.n	800dd2a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	22ff      	movs	r2, #255	; 0xff
 800dd1a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800dd28:	2300      	movs	r3, #0
  }
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	371c      	adds	r7, #28
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd90      	pop	{r4, r7, pc}
 800dd32:	bf00      	nop
 800dd34:	007f7f7f 	.word	0x007f7f7f

0800dd38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dd38:	b590      	push	{r4, r7, lr}
 800dd3a:	b087      	sub	sp, #28
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800dd44:	2300      	movs	r3, #0
 800dd46:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	7f1b      	ldrb	r3, [r3, #28]
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d101      	bne.n	800dd54 <HAL_RTC_SetDate+0x1c>
 800dd50:	2302      	movs	r3, #2
 800dd52:	e092      	b.n	800de7a <HAL_RTC_SetDate+0x142>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2201      	movs	r2, #1
 800dd58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2202      	movs	r2, #2
 800dd5e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d10e      	bne.n	800dd84 <HAL_RTC_SetDate+0x4c>
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	785b      	ldrb	r3, [r3, #1]
 800dd6a:	f003 0310 	and.w	r3, r3, #16
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d008      	beq.n	800dd84 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	785b      	ldrb	r3, [r3, #1]
 800dd76:	f023 0310 	bic.w	r3, r3, #16
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	330a      	adds	r3, #10
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d11c      	bne.n	800ddc4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	78db      	ldrb	r3, [r3, #3]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 f9e6 	bl	800e160 <RTC_ByteToBcd2>
 800dd94:	4603      	mov	r3, r0
 800dd96:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	785b      	ldrb	r3, [r3, #1]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f000 f9df 	bl	800e160 <RTC_ByteToBcd2>
 800dda2:	4603      	mov	r3, r0
 800dda4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800dda6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	789b      	ldrb	r3, [r3, #2]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 f9d7 	bl	800e160 <RTC_ByteToBcd2>
 800ddb2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ddb4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	617b      	str	r3, [r7, #20]
 800ddc2:	e00e      	b.n	800dde2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	78db      	ldrb	r3, [r3, #3]
 800ddc8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	785b      	ldrb	r3, [r3, #1]
 800ddce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ddd0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ddd2:	68ba      	ldr	r2, [r7, #8]
 800ddd4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800ddd6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ddde:	4313      	orrs	r3, r2
 800dde0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	22ca      	movs	r2, #202	; 0xca
 800dde8:	625a      	str	r2, [r3, #36]	; 0x24
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2253      	movs	r2, #83	; 0x53
 800ddf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f000 f988 	bl	800e108 <RTC_EnterInitMode>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00b      	beq.n	800de16 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	22ff      	movs	r2, #255	; 0xff
 800de04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2204      	movs	r2, #4
 800de0a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2200      	movs	r2, #0
 800de10:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e031      	b.n	800de7a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	6979      	ldr	r1, [r7, #20]
 800de1c:	4b19      	ldr	r3, [pc, #100]	; (800de84 <HAL_RTC_SetDate+0x14c>)
 800de1e:	400b      	ands	r3, r1
 800de20:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	68da      	ldr	r2, [r3, #12]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de30:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	f003 0320 	and.w	r3, r3, #32
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d111      	bne.n	800de64 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f000 f939 	bl	800e0b8 <HAL_RTC_WaitForSynchro>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00b      	beq.n	800de64 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	22ff      	movs	r2, #255	; 0xff
 800de52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2204      	movs	r2, #4
 800de58:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2200      	movs	r2, #0
 800de5e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800de60:	2301      	movs	r3, #1
 800de62:	e00a      	b.n	800de7a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	22ff      	movs	r2, #255	; 0xff
 800de6a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2201      	movs	r2, #1
 800de70:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800de78:	2300      	movs	r3, #0
  }
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	371c      	adds	r7, #28
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd90      	pop	{r4, r7, pc}
 800de82:	bf00      	nop
 800de84:	00ffff3f 	.word	0x00ffff3f

0800de88 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800de88:	b590      	push	{r4, r7, lr}
 800de8a:	b089      	sub	sp, #36	; 0x24
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800de94:	2300      	movs	r3, #0
 800de96:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800de98:	2300      	movs	r3, #0
 800de9a:	61fb      	str	r3, [r7, #28]
 800de9c:	2300      	movs	r3, #0
 800de9e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	7f1b      	ldrb	r3, [r3, #28]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d101      	bne.n	800deac <HAL_RTC_SetAlarm+0x24>
 800dea8:	2302      	movs	r3, #2
 800deaa:	e101      	b.n	800e0b0 <HAL_RTC_SetAlarm+0x228>
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2201      	movs	r2, #1
 800deb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2202      	movs	r2, #2
 800deb6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d137      	bne.n	800df2e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d102      	bne.n	800ded2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	2200      	movs	r2, #0
 800ded0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	4618      	mov	r0, r3
 800ded8:	f000 f942 	bl	800e160 <RTC_ByteToBcd2>
 800dedc:	4603      	mov	r3, r0
 800dede:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	785b      	ldrb	r3, [r3, #1]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f000 f93b 	bl	800e160 <RTC_ByteToBcd2>
 800deea:	4603      	mov	r3, r0
 800deec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800deee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	789b      	ldrb	r3, [r3, #2]
 800def4:	4618      	mov	r0, r3
 800def6:	f000 f933 	bl	800e160 <RTC_ByteToBcd2>
 800defa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800defc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	7b1b      	ldrb	r3, [r3, #12]
 800df04:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800df06:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df10:	4618      	mov	r0, r3
 800df12:	f000 f925 	bl	800e160 <RTC_ByteToBcd2>
 800df16:	4603      	mov	r3, r0
 800df18:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800df1a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800df22:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800df28:	4313      	orrs	r3, r2
 800df2a:	61fb      	str	r3, [r7, #28]
 800df2c:	e023      	b.n	800df76 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d102      	bne.n	800df42 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	2200      	movs	r2, #0
 800df40:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	785b      	ldrb	r3, [r3, #1]
 800df4c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800df4e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800df54:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	7b1b      	ldrb	r3, [r3, #12]
 800df5a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800df5c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df64:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800df66:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800df6c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800df72:	4313      	orrs	r3, r2
 800df74:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	685a      	ldr	r2, [r3, #4]
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	69db      	ldr	r3, [r3, #28]
 800df7e:	4313      	orrs	r3, r2
 800df80:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	22ca      	movs	r2, #202	; 0xca
 800df88:	625a      	str	r2, [r3, #36]	; 0x24
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2253      	movs	r2, #83	; 0x53
 800df90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df9a:	d13f      	bne.n	800e01c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	689a      	ldr	r2, [r3, #8]
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dfaa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	689a      	ldr	r2, [r3, #8]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dfba:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800dfbc:	f7f9 fbc8 	bl	8007750 <HAL_GetTick>
 800dfc0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800dfc2:	e013      	b.n	800dfec <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800dfc4:	f7f9 fbc4 	bl	8007750 <HAL_GetTick>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfd2:	d90b      	bls.n	800dfec <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	22ff      	movs	r2, #255	; 0xff
 800dfda:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2203      	movs	r2, #3
 800dfe0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800dfe8:	2303      	movs	r3, #3
 800dfea:	e061      	b.n	800e0b0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	f003 0301 	and.w	r3, r3, #1
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d0e4      	beq.n	800dfc4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	69fa      	ldr	r2, [r7, #28]
 800e000:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	697a      	ldr	r2, [r7, #20]
 800e008:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	689a      	ldr	r2, [r3, #8]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e018:	609a      	str	r2, [r3, #8]
 800e01a:	e03e      	b.n	800e09a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	689a      	ldr	r2, [r3, #8]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e02a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	689a      	ldr	r2, [r3, #8]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e03a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e03c:	f7f9 fb88 	bl	8007750 <HAL_GetTick>
 800e040:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800e042:	e013      	b.n	800e06c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e044:	f7f9 fb84 	bl	8007750 <HAL_GetTick>
 800e048:	4602      	mov	r2, r0
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e052:	d90b      	bls.n	800e06c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	22ff      	movs	r2, #255	; 0xff
 800e05a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2203      	movs	r2, #3
 800e060:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2200      	movs	r2, #0
 800e066:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800e068:	2303      	movs	r3, #3
 800e06a:	e021      	b.n	800e0b0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	f003 0302 	and.w	r3, r3, #2
 800e076:	2b00      	cmp	r3, #0
 800e078:	d0e4      	beq.n	800e044 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	69fa      	ldr	r2, [r7, #28]
 800e080:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	697a      	ldr	r2, [r7, #20]
 800e088:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	689a      	ldr	r2, [r3, #8]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e098:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	22ff      	movs	r2, #255	; 0xff
 800e0a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3724      	adds	r7, #36	; 0x24
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd90      	pop	{r4, r7, pc}

0800e0b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68da      	ldr	r2, [r3, #12]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e0d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e0d4:	f7f9 fb3c 	bl	8007750 <HAL_GetTick>
 800e0d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e0da:	e009      	b.n	800e0f0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e0dc:	f7f9 fb38 	bl	8007750 <HAL_GetTick>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	1ad3      	subs	r3, r2, r3
 800e0e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0ea:	d901      	bls.n	800e0f0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800e0ec:	2303      	movs	r3, #3
 800e0ee:	e007      	b.n	800e100 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	f003 0320 	and.w	r3, r3, #32
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d0ee      	beq.n	800e0dc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3710      	adds	r7, #16
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e110:	2300      	movs	r3, #0
 800e112:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d119      	bne.n	800e156 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f04f 32ff 	mov.w	r2, #4294967295
 800e12a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e12c:	f7f9 fb10 	bl	8007750 <HAL_GetTick>
 800e130:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e132:	e009      	b.n	800e148 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e134:	f7f9 fb0c 	bl	8007750 <HAL_GetTick>
 800e138:	4602      	mov	r2, r0
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e142:	d901      	bls.n	800e148 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800e144:	2303      	movs	r3, #3
 800e146:	e007      	b.n	800e158 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e152:	2b00      	cmp	r3, #0
 800e154:	d0ee      	beq.n	800e134 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	4603      	mov	r3, r0
 800e168:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800e16a:	2300      	movs	r3, #0
 800e16c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800e16e:	e005      	b.n	800e17c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	3301      	adds	r3, #1
 800e174:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800e176:	79fb      	ldrb	r3, [r7, #7]
 800e178:	3b0a      	subs	r3, #10
 800e17a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800e17c:	79fb      	ldrb	r3, [r7, #7]
 800e17e:	2b09      	cmp	r3, #9
 800e180:	d8f6      	bhi.n	800e170 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	b2db      	uxtb	r3, r3
 800e186:	011b      	lsls	r3, r3, #4
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	79fb      	ldrb	r3, [r7, #7]
 800e18c:	4313      	orrs	r3, r2
 800e18e:	b2db      	uxtb	r3, r3
}
 800e190:	4618      	mov	r0, r3
 800e192:	3714      	adds	r7, #20
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b087      	sub	sp, #28
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	7f1b      	ldrb	r3, [r3, #28]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d101      	bne.n	800e1b8 <HAL_RTCEx_SetTimeStamp+0x1c>
 800e1b4:	2302      	movs	r3, #2
 800e1b6:	e03e      	b.n	800e236 <HAL_RTCEx_SetTimeStamp+0x9a>
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2202      	movs	r2, #2
 800e1c2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	689a      	ldr	r2, [r3, #8]
 800e1ca:	4b1e      	ldr	r3, [pc, #120]	; (800e244 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800e1cc:	4013      	ands	r3, r2
 800e1ce:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800e1d0:	697a      	ldr	r2, [r7, #20]
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	22ca      	movs	r2, #202	; 0xca
 800e1de:	625a      	str	r2, [r3, #36]	; 0x24
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2253      	movs	r2, #83	; 0x53
 800e1e6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f022 0206 	bic.w	r2, r2, #6
 800e1f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	430a      	orrs	r2, r1
 800e206:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	697a      	ldr	r2, [r7, #20]
 800e20e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	689a      	ldr	r2, [r3, #8]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e21e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	22ff      	movs	r2, #255	; 0xff
 800e226:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2201      	movs	r2, #1
 800e22c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2200      	movs	r2, #0
 800e232:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	371c      	adds	r7, #28
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr
 800e242:	bf00      	nop
 800e244:	fffff7f7 	.word	0xfffff7f7

0800e248 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b088      	sub	sp, #32
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800e250:	2300      	movs	r3, #0
 800e252:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800e254:	2300      	movs	r3, #0
 800e256:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800e258:	2300      	movs	r3, #0
 800e25a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d101      	bne.n	800e266 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800e262:	2301      	movs	r3, #1
 800e264:	e149      	b.n	800e4fa <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d106      	bne.n	800e280 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2200      	movs	r2, #0
 800e276:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7f5 fa42 	bl	8003704 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2202      	movs	r2, #2
 800e284:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fa57 	bl	800e73c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	2b01      	cmp	r3, #1
 800e294:	d007      	beq.n	800e2a6 <HAL_SAI_Init+0x5e>
 800e296:	2b01      	cmp	r3, #1
 800e298:	d302      	bcc.n	800e2a0 <HAL_SAI_Init+0x58>
 800e29a:	2b02      	cmp	r3, #2
 800e29c:	d006      	beq.n	800e2ac <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800e29e:	e008      	b.n	800e2b2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	61fb      	str	r3, [r7, #28]
      break;
 800e2a4:	e005      	b.n	800e2b2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800e2a6:	2310      	movs	r3, #16
 800e2a8:	61fb      	str	r3, [r7, #28]
      break;
 800e2aa:	e002      	b.n	800e2b2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800e2ac:	2320      	movs	r3, #32
 800e2ae:	61fb      	str	r3, [r7, #28]
      break;
 800e2b0:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	2b03      	cmp	r3, #3
 800e2b8:	d81d      	bhi.n	800e2f6 <HAL_SAI_Init+0xae>
 800e2ba:	a201      	add	r2, pc, #4	; (adr r2, 800e2c0 <HAL_SAI_Init+0x78>)
 800e2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c0:	0800e2d1 	.word	0x0800e2d1
 800e2c4:	0800e2d7 	.word	0x0800e2d7
 800e2c8:	0800e2df 	.word	0x0800e2df
 800e2cc:	0800e2e7 	.word	0x0800e2e7
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	617b      	str	r3, [r7, #20]
      }
      break;
 800e2d4:	e010      	b.n	800e2f8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800e2d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2da:	617b      	str	r3, [r7, #20]
      }
      break;
 800e2dc:	e00c      	b.n	800e2f8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800e2de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2e2:	617b      	str	r3, [r7, #20]
      }
      break;
 800e2e4:	e008      	b.n	800e2f8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800e2e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2ea:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	f043 0301 	orr.w	r3, r3, #1
 800e2f2:	61fb      	str	r3, [r7, #28]
      }
      break;
 800e2f4:	e000      	b.n	800e2f8 <HAL_SAI_Init+0xb0>
  default:
    break;
 800e2f6:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4a81      	ldr	r2, [pc, #516]	; (800e504 <HAL_SAI_Init+0x2bc>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d004      	beq.n	800e30c <HAL_SAI_Init+0xc4>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4a80      	ldr	r2, [pc, #512]	; (800e508 <HAL_SAI_Init+0x2c0>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d103      	bne.n	800e314 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800e30c:	4a7f      	ldr	r2, [pc, #508]	; (800e50c <HAL_SAI_Init+0x2c4>)
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	6013      	str	r3, [r2, #0]
 800e312:	e002      	b.n	800e31a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800e314:	4a7e      	ldr	r2, [pc, #504]	; (800e510 <HAL_SAI_Init+0x2c8>)
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	69db      	ldr	r3, [r3, #28]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d043      	beq.n	800e3aa <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800e322:	2300      	movs	r3, #0
 800e324:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4a76      	ldr	r2, [pc, #472]	; (800e504 <HAL_SAI_Init+0x2bc>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d004      	beq.n	800e33a <HAL_SAI_Init+0xf2>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a74      	ldr	r2, [pc, #464]	; (800e508 <HAL_SAI_Init+0x2c0>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d104      	bne.n	800e344 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800e33a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800e33e:	f7ff fa8d 	bl	800d85c <HAL_RCCEx_GetPeriphCLKFreq>
 800e342:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a72      	ldr	r2, [pc, #456]	; (800e514 <HAL_SAI_Init+0x2cc>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d004      	beq.n	800e358 <HAL_SAI_Init+0x110>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a71      	ldr	r2, [pc, #452]	; (800e518 <HAL_SAI_Init+0x2d0>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d104      	bne.n	800e362 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800e358:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e35c:	f7ff fa7e 	bl	800d85c <HAL_RCCEx_GetPeriphCLKFreq>
 800e360:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800e362:	693a      	ldr	r2, [r7, #16]
 800e364:	4613      	mov	r3, r2
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	4413      	add	r3, r2
 800e36a:	005b      	lsls	r3, r3, #1
 800e36c:	461a      	mov	r2, r3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	69db      	ldr	r3, [r3, #28]
 800e372:	025b      	lsls	r3, r3, #9
 800e374:	fbb2 f3f3 	udiv	r3, r2, r3
 800e378:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	4a67      	ldr	r2, [pc, #412]	; (800e51c <HAL_SAI_Init+0x2d4>)
 800e37e:	fba2 2303 	umull	r2, r3, r2, r3
 800e382:	08da      	lsrs	r2, r3, #3
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800e388:	68f9      	ldr	r1, [r7, #12]
 800e38a:	4b64      	ldr	r3, [pc, #400]	; (800e51c <HAL_SAI_Init+0x2d4>)
 800e38c:	fba3 2301 	umull	r2, r3, r3, r1
 800e390:	08da      	lsrs	r2, r3, #3
 800e392:	4613      	mov	r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	4413      	add	r3, r2
 800e398:	005b      	lsls	r3, r3, #1
 800e39a:	1aca      	subs	r2, r1, r3
 800e39c:	2a08      	cmp	r2, #8
 800e39e:	d904      	bls.n	800e3aa <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6a1b      	ldr	r3, [r3, #32]
 800e3a4:	1c5a      	adds	r2, r3, #1
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d003      	beq.n	800e3ba <HAL_SAI_Init+0x172>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	2b02      	cmp	r3, #2
 800e3b8:	d109      	bne.n	800e3ce <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d101      	bne.n	800e3c6 <HAL_SAI_Init+0x17e>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	e001      	b.n	800e3ca <HAL_SAI_Init+0x182>
 800e3c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3ca:	61bb      	str	r3, [r7, #24]
 800e3cc:	e008      	b.n	800e3e0 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d102      	bne.n	800e3dc <HAL_SAI_Init+0x194>
 800e3d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3da:	e000      	b.n	800e3de <HAL_SAI_Init+0x196>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	6819      	ldr	r1, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	4b4d      	ldr	r3, [pc, #308]	; (800e520 <HAL_SAI_Init+0x2d8>)
 800e3ec:	400b      	ands	r3, r1
 800e3ee:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6819      	ldr	r1, [r3, #0]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	685a      	ldr	r2, [r3, #4]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fe:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e404:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e40a:	431a      	orrs	r2, r3
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800e418:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	691b      	ldr	r3, [r3, #16]
 800e41e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800e424:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6a1b      	ldr	r3, [r3, #32]
 800e42a:	051b      	lsls	r3, r3, #20
 800e42c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	430a      	orrs	r2, r1
 800e434:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	6859      	ldr	r1, [r3, #4]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	4b38      	ldr	r3, [pc, #224]	; (800e524 <HAL_SAI_Init+0x2dc>)
 800e442:	400b      	ands	r3, r1
 800e444:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	6859      	ldr	r1, [r3, #4]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	699a      	ldr	r2, [r3, #24]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e454:	431a      	orrs	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e45a:	431a      	orrs	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	430a      	orrs	r2, r1
 800e462:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6899      	ldr	r1, [r3, #8]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	4b2e      	ldr	r3, [pc, #184]	; (800e528 <HAL_SAI_Init+0x2e0>)
 800e470:	400b      	ands	r3, r1
 800e472:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	6899      	ldr	r1, [r3, #8]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e47e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800e484:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800e48a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800e490:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e496:	3b01      	subs	r3, #1
 800e498:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800e49a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	430a      	orrs	r2, r1
 800e4a2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	68d9      	ldr	r1, [r3, #12]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	f24f 0320 	movw	r3, #61472	; 0xf020
 800e4b2:	400b      	ands	r3, r1
 800e4b4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	68d9      	ldr	r1, [r3, #12]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4c4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4ca:	041b      	lsls	r3, r3, #16
 800e4cc:	431a      	orrs	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	021b      	lsls	r3, r3, #8
 800e4d6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	430a      	orrs	r2, r1
 800e4de:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e4f8:	2300      	movs	r3, #0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3720      	adds	r7, #32
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	40015804 	.word	0x40015804
 800e508:	40015824 	.word	0x40015824
 800e50c:	40015800 	.word	0x40015800
 800e510:	40015c00 	.word	0x40015c00
 800e514:	40015c04 	.word	0x40015c04
 800e518:	40015c24 	.word	0x40015c24
 800e51c:	cccccccd 	.word	0xcccccccd
 800e520:	ff05c010 	.word	0xff05c010
 800e524:	ffff1ff0 	.word	0xffff1ff0
 800e528:	fff88000 	.word	0xfff88000

0800e52c <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d101      	bne.n	800e53e <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800e53a:	2301      	movs	r3, #1
 800e53c:	e027      	b.n	800e58e <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2202      	movs	r2, #2
 800e542:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2200      	movs	r2, #0
 800e54c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f04f 32ff 	mov.w	r2, #4294967295
 800e556:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 f8ef 	bl	800e73c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	685a      	ldr	r2, [r3, #4]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f042 0208 	orr.w	r2, r2, #8
 800e56c:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7f5 f932 	bl	80037d8 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
	...

0800e598 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <HAL_SAI_Receive_DMA+0x1a>
 800e5ac:	88fb      	ldrh	r3, [r7, #6]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d101      	bne.n	800e5b6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e074      	b.n	800e6a0 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d16d      	bne.n	800e69e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d101      	bne.n	800e5d0 <HAL_SAI_Receive_DMA+0x38>
 800e5cc:	2302      	movs	r3, #2
 800e5ce:	e067      	b.n	800e6a0 <HAL_SAI_Receive_DMA+0x108>
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	68ba      	ldr	r2, [r7, #8]
 800e5dc:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	88fa      	ldrh	r2, [r7, #6]
 800e5e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	88fa      	ldrh	r2, [r7, #6]
 800e5ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2222      	movs	r2, #34	; 0x22
 800e5fa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e602:	4a29      	ldr	r2, [pc, #164]	; (800e6a8 <HAL_SAI_Receive_DMA+0x110>)
 800e604:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e60a:	4a28      	ldr	r2, [pc, #160]	; (800e6ac <HAL_SAI_Receive_DMA+0x114>)
 800e60c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e612:	4a27      	ldr	r2, [pc, #156]	; (800e6b0 <HAL_SAI_Receive_DMA+0x118>)
 800e614:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e61a:	2200      	movs	r2, #0
 800e61c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	331c      	adds	r3, #28
 800e628:	4619      	mov	r1, r3
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e62e:	461a      	mov	r2, r3
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e636:	f7f9 fe93 	bl	8008360 <HAL_DMA_Start_IT>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d005      	beq.n	800e64c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2200      	movs	r2, #0
 800e644:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800e648:	2301      	movs	r3, #1
 800e64a:	e029      	b.n	800e6a0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e656:	2b00      	cmp	r3, #0
 800e658:	d107      	bne.n	800e66a <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	681a      	ldr	r2, [r3, #0]
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e668:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e66a:	2100      	movs	r1, #0
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f000 f82f 	bl	800e6d0 <SAI_InterruptFlag>
 800e672:	4601      	mov	r1, r0
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	691a      	ldr	r2, [r3, #16]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	430a      	orrs	r2, r1
 800e680:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e690:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2200      	movs	r2, #0
 800e696:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e69a:	2300      	movs	r3, #0
 800e69c:	e000      	b.n	800e6a0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800e69e:	2302      	movs	r3, #2
  }
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	0800e809 	.word	0x0800e809
 800e6ac:	0800e7a9 	.word	0x0800e7a9
 800e6b0:	0800e825 	.word	0x0800e825

0800e6b4 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e6c2:	b2db      	uxtb	r3, r3
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e6da:	2301      	movs	r3, #1
 800e6dc:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d103      	bne.n	800e6ec <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f043 0308 	orr.w	r3, r3, #8
 800e6ea:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6f0:	2b08      	cmp	r3, #8
 800e6f2:	d10b      	bne.n	800e70c <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e6f8:	2b03      	cmp	r3, #3
 800e6fa:	d003      	beq.n	800e704 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	2b01      	cmp	r3, #1
 800e702:	d103      	bne.n	800e70c <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f043 0310 	orr.w	r3, r3, #16
 800e70a:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	2b03      	cmp	r3, #3
 800e712:	d003      	beq.n	800e71c <SAI_InterruptFlag+0x4c>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	2b02      	cmp	r3, #2
 800e71a:	d104      	bne.n	800e726 <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e722:	60fb      	str	r3, [r7, #12]
 800e724:	e003      	b.n	800e72e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f043 0304 	orr.w	r3, r3, #4
 800e72c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e72e:	68fb      	ldr	r3, [r7, #12]
}
 800e730:	4618      	mov	r0, r3
 800e732:	3714      	adds	r7, #20
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr

0800e73c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e73c:	b490      	push	{r4, r7}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800e744:	4b16      	ldr	r3, [pc, #88]	; (800e7a0 <SAI_Disable+0x64>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a16      	ldr	r2, [pc, #88]	; (800e7a4 <SAI_Disable+0x68>)
 800e74a:	fba2 2303 	umull	r2, r3, r2, r3
 800e74e:	0b1b      	lsrs	r3, r3, #12
 800e750:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800e752:	2300      	movs	r3, #0
 800e754:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e764:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800e766:	4623      	mov	r3, r4
 800e768:	1e5c      	subs	r4, r3, #1
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d10a      	bne.n	800e784 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e774:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800e77e:	2303      	movs	r3, #3
 800e780:	73fb      	strb	r3, [r7, #15]
      break;
 800e782:	e006      	b.n	800e792 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d1e9      	bne.n	800e766 <SAI_Disable+0x2a>

  return status;
 800e792:	7bfb      	ldrb	r3, [r7, #15]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bc90      	pop	{r4, r7}
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	20000000 	.word	0x20000000
 800e7a4:	95cbec1b 	.word	0x95cbec1b

0800e7a8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b084      	sub	sp, #16
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	69db      	ldr	r3, [r3, #28]
 800e7ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7be:	d01c      	beq.n	800e7fa <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e7ce:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e7d8:	2100      	movs	r1, #0
 800e7da:	68f8      	ldr	r0, [r7, #12]
 800e7dc:	f7ff ff78 	bl	800e6d0 <SAI_InterruptFlag>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	43d9      	mvns	r1, r3
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	691a      	ldr	r2, [r3, #16]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	400a      	ands	r2, r1
 800e7f0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800e7fa:	68f8      	ldr	r0, [r7, #12]
 800e7fc:	f7f7 fad8 	bl	8005db0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e800:	bf00      	nop
 800e802:	3710      	adds	r7, #16
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e814:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f7f7 fad4 	bl	8005dc4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e81c:	bf00      	nop
 800e81e:	3710      	adds	r7, #16
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e830:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e838:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d004      	beq.n	800e856 <SAI_DMAError+0x32>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e852:	2b01      	cmp	r3, #1
 800e854:	d112      	bne.n	800e87c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e864:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f7ff ff68 	bl	800e73c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2201      	movs	r2, #1
 800e870:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2200      	movs	r2, #0
 800e878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e87c:	68f8      	ldr	r0, [r7, #12]
 800e87e:	f7f7 f8b9 	bl	80059f4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e882:	bf00      	nop
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}

0800e88a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b082      	sub	sp, #8
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
 800e892:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d101      	bne.n	800e89e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e89a:	2301      	movs	r3, #1
 800e89c:	e025      	b.n	800e8ea <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d106      	bne.n	800e8b8 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7f4 ff1c 	bl	80036f0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2202      	movs	r2, #2
 800e8bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	3304      	adds	r3, #4
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	4610      	mov	r0, r2
 800e8cc:	f001 fdea 	bl	80104a4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6818      	ldr	r0, [r3, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	6839      	ldr	r1, [r7, #0]
 800e8dc:	f001 fe54 	bl	8010588 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800e8e8:	2300      	movs	r3, #0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3708      	adds	r7, #8
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b084      	sub	sp, #16
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	60f8      	str	r0, [r7, #12]
 800e8fa:	60b9      	str	r1, [r7, #8]
 800e8fc:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e904:	b2db      	uxtb	r3, r3
 800e906:	2b02      	cmp	r3, #2
 800e908:	d101      	bne.n	800e90e <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800e90a:	2302      	movs	r3, #2
 800e90c:	e018      	b.n	800e940 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2202      	movs	r2, #2
 800e912:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	68b9      	ldr	r1, [r7, #8]
 800e91e:	4618      	mov	r0, r3
 800e920:	f001 feb2 	bl	8010688 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b02      	cmp	r3, #2
 800e92a:	d104      	bne.n	800e936 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2205      	movs	r2, #5
 800e930:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e934:	e003      	b.n	800e93e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2201      	movs	r2, #1
 800e93a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800e93e:	2300      	movs	r3, #0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3710      	adds	r7, #16
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	2b02      	cmp	r3, #2
 800e95c:	d101      	bne.n	800e962 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800e95e:	2302      	movs	r3, #2
 800e960:	e00e      	b.n	800e980 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2202      	movs	r2, #2
 800e966:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	4618      	mov	r0, r3
 800e972:	f001 feaa 	bl	80106ca <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2201      	movs	r2, #1
 800e97a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b084      	sub	sp, #16
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	e04c      	b.n	800ea34 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d106      	bne.n	800e9b4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f7f4 fbdc 	bl	800316c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2202      	movs	r2, #2
 800e9b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f022 0203 	bic.w	r2, r2, #3
 800e9ca:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800e9d4:	68fa      	ldr	r2, [r7, #12]
 800e9d6:	4b19      	ldr	r3, [pc, #100]	; (800ea3c <HAL_SPDIFRX_Init+0xb4>)
 800e9d8:	4013      	ands	r3, r2
 800e9da:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800e9e4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800e9ea:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800e9f0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800e9f6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800e9fc:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800ea02:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800ea08:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800ea0e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800ea14:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	68fa      	ldr	r2, [r7, #12]
 800ea22:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2200      	movs	r2, #0
 800ea28:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	fff88407 	.word	0xfff88407

0800ea40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d101      	bne.n	800ea52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e01d      	b.n	800ea8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d106      	bne.n	800ea6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f7f4 fbc2 	bl	80031f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2202      	movs	r2, #2
 800ea70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	3304      	adds	r3, #4
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	4610      	mov	r0, r2
 800ea80:	f000 fb78 	bl	800f174 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea8c:	2300      	movs	r3, #0
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
	...

0800ea98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b085      	sub	sp, #20
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68da      	ldr	r2, [r3, #12]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f042 0201 	orr.w	r2, r2, #1
 800eaae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	689a      	ldr	r2, [r3, #8]
 800eab6:	4b0c      	ldr	r3, [pc, #48]	; (800eae8 <HAL_TIM_Base_Start_IT+0x50>)
 800eab8:	4013      	ands	r3, r2
 800eaba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2b06      	cmp	r3, #6
 800eac0:	d00b      	beq.n	800eada <HAL_TIM_Base_Start_IT+0x42>
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eac8:	d007      	beq.n	800eada <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	681a      	ldr	r2, [r3, #0]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	f042 0201 	orr.w	r2, r2, #1
 800ead8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3714      	adds	r7, #20
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr
 800eae8:	00010007 	.word	0x00010007

0800eaec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	e01d      	b.n	800eb3a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d106      	bne.n	800eb18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7f4 fbda 	bl	80032cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	3304      	adds	r3, #4
 800eb28:	4619      	mov	r1, r3
 800eb2a:	4610      	mov	r0, r2
 800eb2c:	f000 fb22 	bl	800f174 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3708      	adds	r7, #8
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}

0800eb42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb42:	b580      	push	{r7, lr}
 800eb44:	b082      	sub	sp, #8
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	691b      	ldr	r3, [r3, #16]
 800eb50:	f003 0302 	and.w	r3, r3, #2
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d122      	bne.n	800eb9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	f003 0302 	and.w	r3, r3, #2
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d11b      	bne.n	800eb9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f06f 0202 	mvn.w	r2, #2
 800eb6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	699b      	ldr	r3, [r3, #24]
 800eb7c:	f003 0303 	and.w	r3, r3, #3
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d003      	beq.n	800eb8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 fad7 	bl	800f138 <HAL_TIM_IC_CaptureCallback>
 800eb8a:	e005      	b.n	800eb98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 fac9 	bl	800f124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 fada 	bl	800f14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	691b      	ldr	r3, [r3, #16]
 800eba4:	f003 0304 	and.w	r3, r3, #4
 800eba8:	2b04      	cmp	r3, #4
 800ebaa:	d122      	bne.n	800ebf2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	f003 0304 	and.w	r3, r3, #4
 800ebb6:	2b04      	cmp	r3, #4
 800ebb8:	d11b      	bne.n	800ebf2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f06f 0204 	mvn.w	r2, #4
 800ebc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2202      	movs	r2, #2
 800ebc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d003      	beq.n	800ebe0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 faad 	bl	800f138 <HAL_TIM_IC_CaptureCallback>
 800ebde:	e005      	b.n	800ebec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f000 fa9f 	bl	800f124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fab0 	bl	800f14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	691b      	ldr	r3, [r3, #16]
 800ebf8:	f003 0308 	and.w	r3, r3, #8
 800ebfc:	2b08      	cmp	r3, #8
 800ebfe:	d122      	bne.n	800ec46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	f003 0308 	and.w	r3, r3, #8
 800ec0a:	2b08      	cmp	r3, #8
 800ec0c:	d11b      	bne.n	800ec46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f06f 0208 	mvn.w	r2, #8
 800ec16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2204      	movs	r2, #4
 800ec1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	69db      	ldr	r3, [r3, #28]
 800ec24:	f003 0303 	and.w	r3, r3, #3
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d003      	beq.n	800ec34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 fa83 	bl	800f138 <HAL_TIM_IC_CaptureCallback>
 800ec32:	e005      	b.n	800ec40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 fa75 	bl	800f124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 fa86 	bl	800f14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	f003 0310 	and.w	r3, r3, #16
 800ec50:	2b10      	cmp	r3, #16
 800ec52:	d122      	bne.n	800ec9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	f003 0310 	and.w	r3, r3, #16
 800ec5e:	2b10      	cmp	r3, #16
 800ec60:	d11b      	bne.n	800ec9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f06f 0210 	mvn.w	r2, #16
 800ec6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2208      	movs	r2, #8
 800ec70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	69db      	ldr	r3, [r3, #28]
 800ec78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d003      	beq.n	800ec88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 fa59 	bl	800f138 <HAL_TIM_IC_CaptureCallback>
 800ec86:	e005      	b.n	800ec94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f000 fa4b 	bl	800f124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 fa5c 	bl	800f14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2200      	movs	r2, #0
 800ec98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	f003 0301 	and.w	r3, r3, #1
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d10e      	bne.n	800ecc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	f003 0301 	and.w	r3, r3, #1
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d107      	bne.n	800ecc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f06f 0201 	mvn.w	r2, #1
 800ecbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7f3 fe91 	bl	80029e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	691b      	ldr	r3, [r3, #16]
 800eccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecd0:	2b80      	cmp	r3, #128	; 0x80
 800ecd2:	d10e      	bne.n	800ecf2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecde:	2b80      	cmp	r3, #128	; 0x80
 800ece0:	d107      	bne.n	800ecf2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ecea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 feef 	bl	800fad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed00:	d10e      	bne.n	800ed20 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	68db      	ldr	r3, [r3, #12]
 800ed08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed0c:	2b80      	cmp	r3, #128	; 0x80
 800ed0e:	d107      	bne.n	800ed20 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ed18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 fee2 	bl	800fae4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed2a:	2b40      	cmp	r3, #64	; 0x40
 800ed2c:	d10e      	bne.n	800ed4c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed38:	2b40      	cmp	r3, #64	; 0x40
 800ed3a:	d107      	bne.n	800ed4c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ed44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 fa0a 	bl	800f160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	691b      	ldr	r3, [r3, #16]
 800ed52:	f003 0320 	and.w	r3, r3, #32
 800ed56:	2b20      	cmp	r3, #32
 800ed58:	d10e      	bne.n	800ed78 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	f003 0320 	and.w	r3, r3, #32
 800ed64:	2b20      	cmp	r3, #32
 800ed66:	d107      	bne.n	800ed78 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f06f 0220 	mvn.w	r2, #32
 800ed70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 fea2 	bl	800fabc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed78:	bf00      	nop
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	d101      	bne.n	800ed9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ed96:	2302      	movs	r3, #2
 800ed98:	e105      	b.n	800efa6 <HAL_TIM_PWM_ConfigChannel+0x226>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2202      	movs	r2, #2
 800eda6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2b14      	cmp	r3, #20
 800edae:	f200 80f0 	bhi.w	800ef92 <HAL_TIM_PWM_ConfigChannel+0x212>
 800edb2:	a201      	add	r2, pc, #4	; (adr r2, 800edb8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800edb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb8:	0800ee0d 	.word	0x0800ee0d
 800edbc:	0800ef93 	.word	0x0800ef93
 800edc0:	0800ef93 	.word	0x0800ef93
 800edc4:	0800ef93 	.word	0x0800ef93
 800edc8:	0800ee4d 	.word	0x0800ee4d
 800edcc:	0800ef93 	.word	0x0800ef93
 800edd0:	0800ef93 	.word	0x0800ef93
 800edd4:	0800ef93 	.word	0x0800ef93
 800edd8:	0800ee8f 	.word	0x0800ee8f
 800eddc:	0800ef93 	.word	0x0800ef93
 800ede0:	0800ef93 	.word	0x0800ef93
 800ede4:	0800ef93 	.word	0x0800ef93
 800ede8:	0800eecf 	.word	0x0800eecf
 800edec:	0800ef93 	.word	0x0800ef93
 800edf0:	0800ef93 	.word	0x0800ef93
 800edf4:	0800ef93 	.word	0x0800ef93
 800edf8:	0800ef11 	.word	0x0800ef11
 800edfc:	0800ef93 	.word	0x0800ef93
 800ee00:	0800ef93 	.word	0x0800ef93
 800ee04:	0800ef93 	.word	0x0800ef93
 800ee08:	0800ef51 	.word	0x0800ef51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	68b9      	ldr	r1, [r7, #8]
 800ee12:	4618      	mov	r0, r3
 800ee14:	f000 fa4e 	bl	800f2b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	699a      	ldr	r2, [r3, #24]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f042 0208 	orr.w	r2, r2, #8
 800ee26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	699a      	ldr	r2, [r3, #24]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f022 0204 	bic.w	r2, r2, #4
 800ee36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	6999      	ldr	r1, [r3, #24]
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	691a      	ldr	r2, [r3, #16]
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	430a      	orrs	r2, r1
 800ee48:	619a      	str	r2, [r3, #24]
      break;
 800ee4a:	e0a3      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	68b9      	ldr	r1, [r7, #8]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f000 faa0 	bl	800f398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	699a      	ldr	r2, [r3, #24]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	699a      	ldr	r2, [r3, #24]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	6999      	ldr	r1, [r3, #24]
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	691b      	ldr	r3, [r3, #16]
 800ee82:	021a      	lsls	r2, r3, #8
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	430a      	orrs	r2, r1
 800ee8a:	619a      	str	r2, [r3, #24]
      break;
 800ee8c:	e082      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	68b9      	ldr	r1, [r7, #8]
 800ee94:	4618      	mov	r0, r3
 800ee96:	f000 faf7 	bl	800f488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	69da      	ldr	r2, [r3, #28]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f042 0208 	orr.w	r2, r2, #8
 800eea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	69da      	ldr	r2, [r3, #28]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f022 0204 	bic.w	r2, r2, #4
 800eeb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	69d9      	ldr	r1, [r3, #28]
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	691a      	ldr	r2, [r3, #16]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	430a      	orrs	r2, r1
 800eeca:	61da      	str	r2, [r3, #28]
      break;
 800eecc:	e062      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	68b9      	ldr	r1, [r7, #8]
 800eed4:	4618      	mov	r0, r3
 800eed6:	f000 fb4d 	bl	800f574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	69da      	ldr	r2, [r3, #28]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	69da      	ldr	r2, [r3, #28]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	69d9      	ldr	r1, [r3, #28]
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	691b      	ldr	r3, [r3, #16]
 800ef04:	021a      	lsls	r2, r3, #8
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	430a      	orrs	r2, r1
 800ef0c:	61da      	str	r2, [r3, #28]
      break;
 800ef0e:	e041      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68b9      	ldr	r1, [r7, #8]
 800ef16:	4618      	mov	r0, r3
 800ef18:	f000 fb84 	bl	800f624 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f042 0208 	orr.w	r2, r2, #8
 800ef2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f022 0204 	bic.w	r2, r2, #4
 800ef3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	691a      	ldr	r2, [r3, #16]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	430a      	orrs	r2, r1
 800ef4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ef4e:	e021      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	68b9      	ldr	r1, [r7, #8]
 800ef56:	4618      	mov	r0, r3
 800ef58:	f000 fbb6 	bl	800f6c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	691b      	ldr	r3, [r3, #16]
 800ef86:	021a      	lsls	r2, r3, #8
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	430a      	orrs	r2, r1
 800ef8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ef90:	e000      	b.n	800ef94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800ef92:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800efa4:	2300      	movs	r3, #0
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3710      	adds	r7, #16
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop

0800efb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d101      	bne.n	800efc8 <HAL_TIM_ConfigClockSource+0x18>
 800efc4:	2302      	movs	r3, #2
 800efc6:	e0a6      	b.n	800f116 <HAL_TIM_ConfigClockSource+0x166>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2201      	movs	r2, #1
 800efcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2202      	movs	r2, #2
 800efd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	689b      	ldr	r3, [r3, #8]
 800efde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	4b4f      	ldr	r3, [pc, #316]	; (800f120 <HAL_TIM_ConfigClockSource+0x170>)
 800efe4:	4013      	ands	r3, r2
 800efe6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800efee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	2b40      	cmp	r3, #64	; 0x40
 800effe:	d067      	beq.n	800f0d0 <HAL_TIM_ConfigClockSource+0x120>
 800f000:	2b40      	cmp	r3, #64	; 0x40
 800f002:	d80b      	bhi.n	800f01c <HAL_TIM_ConfigClockSource+0x6c>
 800f004:	2b10      	cmp	r3, #16
 800f006:	d073      	beq.n	800f0f0 <HAL_TIM_ConfigClockSource+0x140>
 800f008:	2b10      	cmp	r3, #16
 800f00a:	d802      	bhi.n	800f012 <HAL_TIM_ConfigClockSource+0x62>
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d06f      	beq.n	800f0f0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800f010:	e078      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f012:	2b20      	cmp	r3, #32
 800f014:	d06c      	beq.n	800f0f0 <HAL_TIM_ConfigClockSource+0x140>
 800f016:	2b30      	cmp	r3, #48	; 0x30
 800f018:	d06a      	beq.n	800f0f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800f01a:	e073      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f01c:	2b70      	cmp	r3, #112	; 0x70
 800f01e:	d00d      	beq.n	800f03c <HAL_TIM_ConfigClockSource+0x8c>
 800f020:	2b70      	cmp	r3, #112	; 0x70
 800f022:	d804      	bhi.n	800f02e <HAL_TIM_ConfigClockSource+0x7e>
 800f024:	2b50      	cmp	r3, #80	; 0x50
 800f026:	d033      	beq.n	800f090 <HAL_TIM_ConfigClockSource+0xe0>
 800f028:	2b60      	cmp	r3, #96	; 0x60
 800f02a:	d041      	beq.n	800f0b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800f02c:	e06a      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f02e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f032:	d066      	beq.n	800f102 <HAL_TIM_ConfigClockSource+0x152>
 800f034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f038:	d017      	beq.n	800f06a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800f03a:	e063      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6818      	ldr	r0, [r3, #0]
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	6899      	ldr	r1, [r3, #8]
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	685a      	ldr	r2, [r3, #4]
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	f000 fc0a 	bl	800f864 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f05e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	609a      	str	r2, [r3, #8]
      break;
 800f068:	e04c      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6818      	ldr	r0, [r3, #0]
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	6899      	ldr	r1, [r3, #8]
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	685a      	ldr	r2, [r3, #4]
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	f000 fbf3 	bl	800f864 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	689a      	ldr	r2, [r3, #8]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f08c:	609a      	str	r2, [r3, #8]
      break;
 800f08e:	e039      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6818      	ldr	r0, [r3, #0]
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	6859      	ldr	r1, [r3, #4]
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	461a      	mov	r2, r3
 800f09e:	f000 fb67 	bl	800f770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2150      	movs	r1, #80	; 0x50
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f000 fbc0 	bl	800f82e <TIM_ITRx_SetConfig>
      break;
 800f0ae:	e029      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6818      	ldr	r0, [r3, #0]
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	6859      	ldr	r1, [r3, #4]
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	461a      	mov	r2, r3
 800f0be:	f000 fb86 	bl	800f7ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2160      	movs	r1, #96	; 0x60
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f000 fbb0 	bl	800f82e <TIM_ITRx_SetConfig>
      break;
 800f0ce:	e019      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6818      	ldr	r0, [r3, #0]
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	6859      	ldr	r1, [r3, #4]
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	f000 fb47 	bl	800f770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2140      	movs	r1, #64	; 0x40
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f000 fba0 	bl	800f82e <TIM_ITRx_SetConfig>
      break;
 800f0ee:	e009      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	4610      	mov	r0, r2
 800f0fc:	f000 fb97 	bl	800f82e <TIM_ITRx_SetConfig>
      break;
 800f100:	e000      	b.n	800f104 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800f102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2201      	movs	r2, #1
 800f108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3710      	adds	r7, #16
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	fffeff88 	.word	0xfffeff88

0800f124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f12c:	bf00      	nop
 800f12e:	370c      	adds	r7, #12
 800f130:	46bd      	mov	sp, r7
 800f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f136:	4770      	bx	lr

0800f138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f140:	bf00      	nop
 800f142:	370c      	adds	r7, #12
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f154:	bf00      	nop
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f168:	bf00      	nop
 800f16a:	370c      	adds	r7, #12
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a40      	ldr	r2, [pc, #256]	; (800f288 <TIM_Base_SetConfig+0x114>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d013      	beq.n	800f1b4 <TIM_Base_SetConfig+0x40>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f192:	d00f      	beq.n	800f1b4 <TIM_Base_SetConfig+0x40>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a3d      	ldr	r2, [pc, #244]	; (800f28c <TIM_Base_SetConfig+0x118>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d00b      	beq.n	800f1b4 <TIM_Base_SetConfig+0x40>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4a3c      	ldr	r2, [pc, #240]	; (800f290 <TIM_Base_SetConfig+0x11c>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d007      	beq.n	800f1b4 <TIM_Base_SetConfig+0x40>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a3b      	ldr	r2, [pc, #236]	; (800f294 <TIM_Base_SetConfig+0x120>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d003      	beq.n	800f1b4 <TIM_Base_SetConfig+0x40>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4a3a      	ldr	r2, [pc, #232]	; (800f298 <TIM_Base_SetConfig+0x124>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d108      	bne.n	800f1c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a2f      	ldr	r2, [pc, #188]	; (800f288 <TIM_Base_SetConfig+0x114>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d02b      	beq.n	800f226 <TIM_Base_SetConfig+0xb2>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1d4:	d027      	beq.n	800f226 <TIM_Base_SetConfig+0xb2>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4a2c      	ldr	r2, [pc, #176]	; (800f28c <TIM_Base_SetConfig+0x118>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d023      	beq.n	800f226 <TIM_Base_SetConfig+0xb2>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4a2b      	ldr	r2, [pc, #172]	; (800f290 <TIM_Base_SetConfig+0x11c>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d01f      	beq.n	800f226 <TIM_Base_SetConfig+0xb2>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4a2a      	ldr	r2, [pc, #168]	; (800f294 <TIM_Base_SetConfig+0x120>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d01b      	beq.n	800f226 <TIM_Base_SetConfig+0xb2>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4a29      	ldr	r2, [pc, #164]	; (800f298 <TIM_Base_SetConfig+0x124>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d017      	beq.n	800f226 <TIM_Base_SetConfig+0xb2>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4a28      	ldr	r2, [pc, #160]	; (800f29c <TIM_Base_SetConfig+0x128>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d013      	beq.n	800f226 <TIM_Base_SetConfig+0xb2>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4a27      	ldr	r2, [pc, #156]	; (800f2a0 <TIM_Base_SetConfig+0x12c>)
 800f202:	4293      	cmp	r3, r2
 800f204:	d00f      	beq.n	800f226 <TIM_Base_SetConfig+0xb2>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4a26      	ldr	r2, [pc, #152]	; (800f2a4 <TIM_Base_SetConfig+0x130>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d00b      	beq.n	800f226 <TIM_Base_SetConfig+0xb2>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	4a25      	ldr	r2, [pc, #148]	; (800f2a8 <TIM_Base_SetConfig+0x134>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d007      	beq.n	800f226 <TIM_Base_SetConfig+0xb2>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	4a24      	ldr	r2, [pc, #144]	; (800f2ac <TIM_Base_SetConfig+0x138>)
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d003      	beq.n	800f226 <TIM_Base_SetConfig+0xb2>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	4a23      	ldr	r2, [pc, #140]	; (800f2b0 <TIM_Base_SetConfig+0x13c>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d108      	bne.n	800f238 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f22c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	4313      	orrs	r3, r2
 800f236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	695b      	ldr	r3, [r3, #20]
 800f242:	4313      	orrs	r3, r2
 800f244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	689a      	ldr	r2, [r3, #8]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	4a0a      	ldr	r2, [pc, #40]	; (800f288 <TIM_Base_SetConfig+0x114>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d003      	beq.n	800f26c <TIM_Base_SetConfig+0xf8>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a0c      	ldr	r2, [pc, #48]	; (800f298 <TIM_Base_SetConfig+0x124>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d103      	bne.n	800f274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	691a      	ldr	r2, [r3, #16]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2201      	movs	r2, #1
 800f278:	615a      	str	r2, [r3, #20]
}
 800f27a:	bf00      	nop
 800f27c:	3714      	adds	r7, #20
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	40010000 	.word	0x40010000
 800f28c:	40000400 	.word	0x40000400
 800f290:	40000800 	.word	0x40000800
 800f294:	40000c00 	.word	0x40000c00
 800f298:	40010400 	.word	0x40010400
 800f29c:	40014000 	.word	0x40014000
 800f2a0:	40014400 	.word	0x40014400
 800f2a4:	40014800 	.word	0x40014800
 800f2a8:	40001800 	.word	0x40001800
 800f2ac:	40001c00 	.word	0x40001c00
 800f2b0:	40002000 	.word	0x40002000

0800f2b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b087      	sub	sp, #28
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a1b      	ldr	r3, [r3, #32]
 800f2c2:	f023 0201 	bic.w	r2, r3, #1
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6a1b      	ldr	r3, [r3, #32]
 800f2ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	699b      	ldr	r3, [r3, #24]
 800f2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f2dc:	68fa      	ldr	r2, [r7, #12]
 800f2de:	4b2b      	ldr	r3, [pc, #172]	; (800f38c <TIM_OC1_SetConfig+0xd8>)
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f023 0303 	bic.w	r3, r3, #3
 800f2ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	68fa      	ldr	r2, [r7, #12]
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	f023 0302 	bic.w	r3, r3, #2
 800f2fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	689b      	ldr	r3, [r3, #8]
 800f302:	697a      	ldr	r2, [r7, #20]
 800f304:	4313      	orrs	r3, r2
 800f306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4a21      	ldr	r2, [pc, #132]	; (800f390 <TIM_OC1_SetConfig+0xdc>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d003      	beq.n	800f318 <TIM_OC1_SetConfig+0x64>
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4a20      	ldr	r2, [pc, #128]	; (800f394 <TIM_OC1_SetConfig+0xe0>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d10c      	bne.n	800f332 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	f023 0308 	bic.w	r3, r3, #8
 800f31e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	697a      	ldr	r2, [r7, #20]
 800f326:	4313      	orrs	r3, r2
 800f328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	f023 0304 	bic.w	r3, r3, #4
 800f330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4a16      	ldr	r2, [pc, #88]	; (800f390 <TIM_OC1_SetConfig+0xdc>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d003      	beq.n	800f342 <TIM_OC1_SetConfig+0x8e>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	4a15      	ldr	r2, [pc, #84]	; (800f394 <TIM_OC1_SetConfig+0xe0>)
 800f33e:	4293      	cmp	r3, r2
 800f340:	d111      	bne.n	800f366 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	695b      	ldr	r3, [r3, #20]
 800f356:	693a      	ldr	r2, [r7, #16]
 800f358:	4313      	orrs	r3, r2
 800f35a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	699b      	ldr	r3, [r3, #24]
 800f360:	693a      	ldr	r2, [r7, #16]
 800f362:	4313      	orrs	r3, r2
 800f364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	693a      	ldr	r2, [r7, #16]
 800f36a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	685a      	ldr	r2, [r3, #4]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	697a      	ldr	r2, [r7, #20]
 800f37e:	621a      	str	r2, [r3, #32]
}
 800f380:	bf00      	nop
 800f382:	371c      	adds	r7, #28
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr
 800f38c:	fffeff8f 	.word	0xfffeff8f
 800f390:	40010000 	.word	0x40010000
 800f394:	40010400 	.word	0x40010400

0800f398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f398:	b480      	push	{r7}
 800f39a:	b087      	sub	sp, #28
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6a1b      	ldr	r3, [r3, #32]
 800f3a6:	f023 0210 	bic.w	r2, r3, #16
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6a1b      	ldr	r3, [r3, #32]
 800f3b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	699b      	ldr	r3, [r3, #24]
 800f3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	4b2e      	ldr	r3, [pc, #184]	; (800f47c <TIM_OC2_SetConfig+0xe4>)
 800f3c4:	4013      	ands	r3, r2
 800f3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	021b      	lsls	r3, r3, #8
 800f3d6:	68fa      	ldr	r2, [r7, #12]
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	f023 0320 	bic.w	r3, r3, #32
 800f3e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	011b      	lsls	r3, r3, #4
 800f3ea:	697a      	ldr	r2, [r7, #20]
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4a23      	ldr	r2, [pc, #140]	; (800f480 <TIM_OC2_SetConfig+0xe8>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d003      	beq.n	800f400 <TIM_OC2_SetConfig+0x68>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4a22      	ldr	r2, [pc, #136]	; (800f484 <TIM_OC2_SetConfig+0xec>)
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d10d      	bne.n	800f41c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	68db      	ldr	r3, [r3, #12]
 800f40c:	011b      	lsls	r3, r3, #4
 800f40e:	697a      	ldr	r2, [r7, #20]
 800f410:	4313      	orrs	r3, r2
 800f412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f41a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4a18      	ldr	r2, [pc, #96]	; (800f480 <TIM_OC2_SetConfig+0xe8>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d003      	beq.n	800f42c <TIM_OC2_SetConfig+0x94>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	4a17      	ldr	r2, [pc, #92]	; (800f484 <TIM_OC2_SetConfig+0xec>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d113      	bne.n	800f454 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f43a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	695b      	ldr	r3, [r3, #20]
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	693a      	ldr	r2, [r7, #16]
 800f444:	4313      	orrs	r3, r2
 800f446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	699b      	ldr	r3, [r3, #24]
 800f44c:	009b      	lsls	r3, r3, #2
 800f44e:	693a      	ldr	r2, [r7, #16]
 800f450:	4313      	orrs	r3, r2
 800f452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	693a      	ldr	r2, [r7, #16]
 800f458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	685a      	ldr	r2, [r3, #4]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	697a      	ldr	r2, [r7, #20]
 800f46c:	621a      	str	r2, [r3, #32]
}
 800f46e:	bf00      	nop
 800f470:	371c      	adds	r7, #28
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	feff8fff 	.word	0xfeff8fff
 800f480:	40010000 	.word	0x40010000
 800f484:	40010400 	.word	0x40010400

0800f488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f488:	b480      	push	{r7}
 800f48a:	b087      	sub	sp, #28
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6a1b      	ldr	r3, [r3, #32]
 800f496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6a1b      	ldr	r3, [r3, #32]
 800f4a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	69db      	ldr	r3, [r3, #28]
 800f4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	4b2d      	ldr	r3, [pc, #180]	; (800f568 <TIM_OC3_SetConfig+0xe0>)
 800f4b4:	4013      	ands	r3, r2
 800f4b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f023 0303 	bic.w	r3, r3, #3
 800f4be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	68fa      	ldr	r2, [r7, #12]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f4d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	021b      	lsls	r3, r3, #8
 800f4d8:	697a      	ldr	r2, [r7, #20]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	4a22      	ldr	r2, [pc, #136]	; (800f56c <TIM_OC3_SetConfig+0xe4>)
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d003      	beq.n	800f4ee <TIM_OC3_SetConfig+0x66>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4a21      	ldr	r2, [pc, #132]	; (800f570 <TIM_OC3_SetConfig+0xe8>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d10d      	bne.n	800f50a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f4f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	021b      	lsls	r3, r3, #8
 800f4fc:	697a      	ldr	r2, [r7, #20]
 800f4fe:	4313      	orrs	r3, r2
 800f500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4a17      	ldr	r2, [pc, #92]	; (800f56c <TIM_OC3_SetConfig+0xe4>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d003      	beq.n	800f51a <TIM_OC3_SetConfig+0x92>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4a16      	ldr	r2, [pc, #88]	; (800f570 <TIM_OC3_SetConfig+0xe8>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d113      	bne.n	800f542 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	695b      	ldr	r3, [r3, #20]
 800f52e:	011b      	lsls	r3, r3, #4
 800f530:	693a      	ldr	r2, [r7, #16]
 800f532:	4313      	orrs	r3, r2
 800f534:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	011b      	lsls	r3, r3, #4
 800f53c:	693a      	ldr	r2, [r7, #16]
 800f53e:	4313      	orrs	r3, r2
 800f540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	693a      	ldr	r2, [r7, #16]
 800f546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	68fa      	ldr	r2, [r7, #12]
 800f54c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	685a      	ldr	r2, [r3, #4]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	697a      	ldr	r2, [r7, #20]
 800f55a:	621a      	str	r2, [r3, #32]
}
 800f55c:	bf00      	nop
 800f55e:	371c      	adds	r7, #28
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr
 800f568:	fffeff8f 	.word	0xfffeff8f
 800f56c:	40010000 	.word	0x40010000
 800f570:	40010400 	.word	0x40010400

0800f574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f574:	b480      	push	{r7}
 800f576:	b087      	sub	sp, #28
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6a1b      	ldr	r3, [r3, #32]
 800f582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a1b      	ldr	r3, [r3, #32]
 800f58e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	685b      	ldr	r3, [r3, #4]
 800f594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	69db      	ldr	r3, [r3, #28]
 800f59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	4b1e      	ldr	r3, [pc, #120]	; (800f618 <TIM_OC4_SetConfig+0xa4>)
 800f5a0:	4013      	ands	r3, r2
 800f5a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	021b      	lsls	r3, r3, #8
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f5be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	031b      	lsls	r3, r3, #12
 800f5c6:	693a      	ldr	r2, [r7, #16]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a13      	ldr	r2, [pc, #76]	; (800f61c <TIM_OC4_SetConfig+0xa8>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d003      	beq.n	800f5dc <TIM_OC4_SetConfig+0x68>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4a12      	ldr	r2, [pc, #72]	; (800f620 <TIM_OC4_SetConfig+0xac>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d109      	bne.n	800f5f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f5e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	695b      	ldr	r3, [r3, #20]
 800f5e8:	019b      	lsls	r3, r3, #6
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	4313      	orrs	r3, r2
 800f5ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	697a      	ldr	r2, [r7, #20]
 800f5f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	685a      	ldr	r2, [r3, #4]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	693a      	ldr	r2, [r7, #16]
 800f608:	621a      	str	r2, [r3, #32]
}
 800f60a:	bf00      	nop
 800f60c:	371c      	adds	r7, #28
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop
 800f618:	feff8fff 	.word	0xfeff8fff
 800f61c:	40010000 	.word	0x40010000
 800f620:	40010400 	.word	0x40010400

0800f624 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f624:	b480      	push	{r7}
 800f626:	b087      	sub	sp, #28
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6a1b      	ldr	r3, [r3, #32]
 800f632:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6a1b      	ldr	r3, [r3, #32]
 800f63e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f64c:	68fa      	ldr	r2, [r7, #12]
 800f64e:	4b1b      	ldr	r3, [pc, #108]	; (800f6bc <TIM_OC5_SetConfig+0x98>)
 800f650:	4013      	ands	r3, r2
 800f652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	4313      	orrs	r3, r2
 800f65c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f664:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	689b      	ldr	r3, [r3, #8]
 800f66a:	041b      	lsls	r3, r3, #16
 800f66c:	693a      	ldr	r2, [r7, #16]
 800f66e:	4313      	orrs	r3, r2
 800f670:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4a12      	ldr	r2, [pc, #72]	; (800f6c0 <TIM_OC5_SetConfig+0x9c>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d003      	beq.n	800f682 <TIM_OC5_SetConfig+0x5e>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4a11      	ldr	r2, [pc, #68]	; (800f6c4 <TIM_OC5_SetConfig+0xa0>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d109      	bne.n	800f696 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f688:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	695b      	ldr	r3, [r3, #20]
 800f68e:	021b      	lsls	r3, r3, #8
 800f690:	697a      	ldr	r2, [r7, #20]
 800f692:	4313      	orrs	r3, r2
 800f694:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	697a      	ldr	r2, [r7, #20]
 800f69a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	685a      	ldr	r2, [r3, #4]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	693a      	ldr	r2, [r7, #16]
 800f6ae:	621a      	str	r2, [r3, #32]
}
 800f6b0:	bf00      	nop
 800f6b2:	371c      	adds	r7, #28
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr
 800f6bc:	fffeff8f 	.word	0xfffeff8f
 800f6c0:	40010000 	.word	0x40010000
 800f6c4:	40010400 	.word	0x40010400

0800f6c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b087      	sub	sp, #28
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6a1b      	ldr	r3, [r3, #32]
 800f6d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6a1b      	ldr	r3, [r3, #32]
 800f6e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	4b1c      	ldr	r3, [pc, #112]	; (800f764 <TIM_OC6_SetConfig+0x9c>)
 800f6f4:	4013      	ands	r3, r2
 800f6f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	021b      	lsls	r3, r3, #8
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	4313      	orrs	r3, r2
 800f702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f70a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	051b      	lsls	r3, r3, #20
 800f712:	693a      	ldr	r2, [r7, #16]
 800f714:	4313      	orrs	r3, r2
 800f716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4a13      	ldr	r2, [pc, #76]	; (800f768 <TIM_OC6_SetConfig+0xa0>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d003      	beq.n	800f728 <TIM_OC6_SetConfig+0x60>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4a12      	ldr	r2, [pc, #72]	; (800f76c <TIM_OC6_SetConfig+0xa4>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d109      	bne.n	800f73c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f72e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	695b      	ldr	r3, [r3, #20]
 800f734:	029b      	lsls	r3, r3, #10
 800f736:	697a      	ldr	r2, [r7, #20]
 800f738:	4313      	orrs	r3, r2
 800f73a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	685a      	ldr	r2, [r3, #4]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	693a      	ldr	r2, [r7, #16]
 800f754:	621a      	str	r2, [r3, #32]
}
 800f756:	bf00      	nop
 800f758:	371c      	adds	r7, #28
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr
 800f762:	bf00      	nop
 800f764:	feff8fff 	.word	0xfeff8fff
 800f768:	40010000 	.word	0x40010000
 800f76c:	40010400 	.word	0x40010400

0800f770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f770:	b480      	push	{r7}
 800f772:	b087      	sub	sp, #28
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	6a1b      	ldr	r3, [r3, #32]
 800f780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6a1b      	ldr	r3, [r3, #32]
 800f786:	f023 0201 	bic.w	r2, r3, #1
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	699b      	ldr	r3, [r3, #24]
 800f792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f79a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	011b      	lsls	r3, r3, #4
 800f7a0:	693a      	ldr	r2, [r7, #16]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	f023 030a 	bic.w	r3, r3, #10
 800f7ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f7ae:	697a      	ldr	r2, [r7, #20]
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	693a      	ldr	r2, [r7, #16]
 800f7ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	697a      	ldr	r2, [r7, #20]
 800f7c0:	621a      	str	r2, [r3, #32]
}
 800f7c2:	bf00      	nop
 800f7c4:	371c      	adds	r7, #28
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f7ce:	b480      	push	{r7}
 800f7d0:	b087      	sub	sp, #28
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	60f8      	str	r0, [r7, #12]
 800f7d6:	60b9      	str	r1, [r7, #8]
 800f7d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	6a1b      	ldr	r3, [r3, #32]
 800f7de:	f023 0210 	bic.w	r2, r3, #16
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	699b      	ldr	r3, [r3, #24]
 800f7ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6a1b      	ldr	r3, [r3, #32]
 800f7f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f7f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	031b      	lsls	r3, r3, #12
 800f7fe:	697a      	ldr	r2, [r7, #20]
 800f800:	4313      	orrs	r3, r2
 800f802:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f80a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	011b      	lsls	r3, r3, #4
 800f810:	693a      	ldr	r2, [r7, #16]
 800f812:	4313      	orrs	r3, r2
 800f814:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	697a      	ldr	r2, [r7, #20]
 800f81a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	693a      	ldr	r2, [r7, #16]
 800f820:	621a      	str	r2, [r3, #32]
}
 800f822:	bf00      	nop
 800f824:	371c      	adds	r7, #28
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr

0800f82e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f82e:	b480      	push	{r7}
 800f830:	b085      	sub	sp, #20
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
 800f836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	689b      	ldr	r3, [r3, #8]
 800f83c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f846:	683a      	ldr	r2, [r7, #0]
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	4313      	orrs	r3, r2
 800f84c:	f043 0307 	orr.w	r3, r3, #7
 800f850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	68fa      	ldr	r2, [r7, #12]
 800f856:	609a      	str	r2, [r3, #8]
}
 800f858:	bf00      	nop
 800f85a:	3714      	adds	r7, #20
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f864:	b480      	push	{r7}
 800f866:	b087      	sub	sp, #28
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	607a      	str	r2, [r7, #4]
 800f870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	689b      	ldr	r3, [r3, #8]
 800f876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f87e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	021a      	lsls	r2, r3, #8
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	431a      	orrs	r2, r3
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	4313      	orrs	r3, r2
 800f88c:	697a      	ldr	r2, [r7, #20]
 800f88e:	4313      	orrs	r3, r2
 800f890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	697a      	ldr	r2, [r7, #20]
 800f896:	609a      	str	r2, [r3, #8]
}
 800f898:	bf00      	nop
 800f89a:	371c      	adds	r7, #28
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d101      	bne.n	800f8bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f8b8:	2302      	movs	r3, #2
 800f8ba:	e06d      	b.n	800f998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2201      	movs	r2, #1
 800f8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2202      	movs	r2, #2
 800f8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	689b      	ldr	r3, [r3, #8]
 800f8da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a30      	ldr	r2, [pc, #192]	; (800f9a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d004      	beq.n	800f8f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4a2f      	ldr	r2, [pc, #188]	; (800f9a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d108      	bne.n	800f902 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f8f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	4313      	orrs	r3, r2
 800f900:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f908:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	68fa      	ldr	r2, [r7, #12]
 800f910:	4313      	orrs	r3, r2
 800f912:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	68fa      	ldr	r2, [r7, #12]
 800f91a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4a20      	ldr	r2, [pc, #128]	; (800f9a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d022      	beq.n	800f96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f92e:	d01d      	beq.n	800f96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	4a1d      	ldr	r2, [pc, #116]	; (800f9ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f936:	4293      	cmp	r3, r2
 800f938:	d018      	beq.n	800f96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	4a1c      	ldr	r2, [pc, #112]	; (800f9b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d013      	beq.n	800f96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4a1a      	ldr	r2, [pc, #104]	; (800f9b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d00e      	beq.n	800f96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	4a15      	ldr	r2, [pc, #84]	; (800f9a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d009      	beq.n	800f96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4a16      	ldr	r2, [pc, #88]	; (800f9b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f95e:	4293      	cmp	r3, r2
 800f960:	d004      	beq.n	800f96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4a15      	ldr	r2, [pc, #84]	; (800f9bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d10c      	bne.n	800f986 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	689b      	ldr	r3, [r3, #8]
 800f978:	68ba      	ldr	r2, [r7, #8]
 800f97a:	4313      	orrs	r3, r2
 800f97c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	68ba      	ldr	r2, [r7, #8]
 800f984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2201      	movs	r2, #1
 800f98a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2200      	movs	r2, #0
 800f992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f996:	2300      	movs	r3, #0
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3714      	adds	r7, #20
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr
 800f9a4:	40010000 	.word	0x40010000
 800f9a8:	40010400 	.word	0x40010400
 800f9ac:	40000400 	.word	0x40000400
 800f9b0:	40000800 	.word	0x40000800
 800f9b4:	40000c00 	.word	0x40000c00
 800f9b8:	40014000 	.word	0x40014000
 800f9bc:	40001800 	.word	0x40001800

0800f9c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b085      	sub	sp, #20
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
 800f9c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d101      	bne.n	800f9dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f9d8:	2302      	movs	r3, #2
 800f9da:	e065      	b.n	800faa8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	68db      	ldr	r3, [r3, #12]
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	689b      	ldr	r3, [r3, #8]
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	691b      	ldr	r3, [r3, #16]
 800fa26:	4313      	orrs	r3, r2
 800fa28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	695b      	ldr	r3, [r3, #20]
 800fa34:	4313      	orrs	r3, r2
 800fa36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa42:	4313      	orrs	r3, r2
 800fa44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	699b      	ldr	r3, [r3, #24]
 800fa50:	041b      	lsls	r3, r3, #16
 800fa52:	4313      	orrs	r3, r2
 800fa54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4a16      	ldr	r2, [pc, #88]	; (800fab4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d004      	beq.n	800fa6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a14      	ldr	r2, [pc, #80]	; (800fab8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d115      	bne.n	800fa96 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa74:	051b      	lsls	r3, r3, #20
 800fa76:	4313      	orrs	r3, r2
 800fa78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	69db      	ldr	r3, [r3, #28]
 800fa84:	4313      	orrs	r3, r2
 800fa86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	6a1b      	ldr	r3, [r3, #32]
 800fa92:	4313      	orrs	r3, r2
 800fa94:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2200      	movs	r2, #0
 800faa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800faa6:	2300      	movs	r3, #0
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3714      	adds	r7, #20
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr
 800fab4:	40010000 	.word	0x40010000
 800fab8:	40010400 	.word	0x40010400

0800fabc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fac4:	bf00      	nop
 800fac6:	370c      	adds	r7, #12
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fad8:	bf00      	nop
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800faec:	bf00      	nop
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d101      	bne.n	800fb0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fb06:	2301      	movs	r3, #1
 800fb08:	e040      	b.n	800fb8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d106      	bne.n	800fb20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2200      	movs	r2, #0
 800fb16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7f3 fcc4 	bl	80034a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2224      	movs	r2, #36	; 0x24
 800fb24:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f022 0201 	bic.w	r2, r2, #1
 800fb34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 f8be 	bl	800fcb8 <UART_SetConfig>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d101      	bne.n	800fb46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800fb42:	2301      	movs	r3, #1
 800fb44:	e022      	b.n	800fb8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d002      	beq.n	800fb54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 fb5c 	bl	801020c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	685a      	ldr	r2, [r3, #4]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fb62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	689a      	ldr	r2, [r3, #8]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fb72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f042 0201 	orr.w	r2, r2, #1
 800fb82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f000 fbe3 	bl	8010350 <UART_CheckIdleState>
 800fb8a:	4603      	mov	r3, r0
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b08a      	sub	sp, #40	; 0x28
 800fb98:	af02      	add	r7, sp, #8
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	603b      	str	r3, [r7, #0]
 800fba0:	4613      	mov	r3, r2
 800fba2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fba8:	2b20      	cmp	r3, #32
 800fbaa:	d17f      	bne.n	800fcac <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d002      	beq.n	800fbb8 <HAL_UART_Transmit+0x24>
 800fbb2:	88fb      	ldrh	r3, [r7, #6]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d101      	bne.n	800fbbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800fbb8:	2301      	movs	r3, #1
 800fbba:	e078      	b.n	800fcae <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d101      	bne.n	800fbca <HAL_UART_Transmit+0x36>
 800fbc6:	2302      	movs	r3, #2
 800fbc8:	e071      	b.n	800fcae <HAL_UART_Transmit+0x11a>
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2221      	movs	r2, #33	; 0x21
 800fbdc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800fbde:	f7f7 fdb7 	bl	8007750 <HAL_GetTick>
 800fbe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	88fa      	ldrh	r2, [r7, #6]
 800fbe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	88fa      	ldrh	r2, [r7, #6]
 800fbf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbfc:	d108      	bne.n	800fc10 <HAL_UART_Transmit+0x7c>
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	691b      	ldr	r3, [r3, #16]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d104      	bne.n	800fc10 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800fc06:	2300      	movs	r3, #0
 800fc08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	61bb      	str	r3, [r7, #24]
 800fc0e:	e003      	b.n	800fc18 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fc14:	2300      	movs	r3, #0
 800fc16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800fc20:	e02c      	b.n	800fc7c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	2180      	movs	r1, #128	; 0x80
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f000 fbbe 	bl	80103ae <UART_WaitOnFlagUntilTimeout>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d001      	beq.n	800fc3c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800fc38:	2303      	movs	r3, #3
 800fc3a:	e038      	b.n	800fcae <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d10b      	bne.n	800fc5a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	881b      	ldrh	r3, [r3, #0]
 800fc46:	461a      	mov	r2, r3
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fc52:	69bb      	ldr	r3, [r7, #24]
 800fc54:	3302      	adds	r3, #2
 800fc56:	61bb      	str	r3, [r7, #24]
 800fc58:	e007      	b.n	800fc6a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fc5a:	69fb      	ldr	r3, [r7, #28]
 800fc5c:	781a      	ldrb	r2, [r3, #0]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	3301      	adds	r3, #1
 800fc68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	3b01      	subs	r3, #1
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d1cc      	bne.n	800fc22 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	9300      	str	r3, [sp, #0]
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	2140      	movs	r1, #64	; 0x40
 800fc92:	68f8      	ldr	r0, [r7, #12]
 800fc94:	f000 fb8b 	bl	80103ae <UART_WaitOnFlagUntilTimeout>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d001      	beq.n	800fca2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800fc9e:	2303      	movs	r3, #3
 800fca0:	e005      	b.n	800fcae <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2220      	movs	r2, #32
 800fca6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	e000      	b.n	800fcae <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800fcac:	2302      	movs	r3, #2
  }
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3720      	adds	r7, #32
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
	...

0800fcb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b088      	sub	sp, #32
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	689a      	ldr	r2, [r3, #8]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	691b      	ldr	r3, [r3, #16]
 800fcd0:	431a      	orrs	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	695b      	ldr	r3, [r3, #20]
 800fcd6:	431a      	orrs	r2, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	69db      	ldr	r3, [r3, #28]
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	681a      	ldr	r2, [r3, #0]
 800fce6:	4bb1      	ldr	r3, [pc, #708]	; (800ffac <UART_SetConfig+0x2f4>)
 800fce8:	4013      	ands	r3, r2
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	6812      	ldr	r2, [r2, #0]
 800fcee:	6939      	ldr	r1, [r7, #16]
 800fcf0:	430b      	orrs	r3, r1
 800fcf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	68da      	ldr	r2, [r3, #12]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	430a      	orrs	r2, r1
 800fd08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	699b      	ldr	r3, [r3, #24]
 800fd0e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6a1b      	ldr	r3, [r3, #32]
 800fd14:	693a      	ldr	r2, [r7, #16]
 800fd16:	4313      	orrs	r3, r2
 800fd18:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	689b      	ldr	r3, [r3, #8]
 800fd20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	693a      	ldr	r2, [r7, #16]
 800fd2a:	430a      	orrs	r2, r1
 800fd2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4a9f      	ldr	r2, [pc, #636]	; (800ffb0 <UART_SetConfig+0x2f8>)
 800fd34:	4293      	cmp	r3, r2
 800fd36:	d121      	bne.n	800fd7c <UART_SetConfig+0xc4>
 800fd38:	4b9e      	ldr	r3, [pc, #632]	; (800ffb4 <UART_SetConfig+0x2fc>)
 800fd3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd3e:	f003 0303 	and.w	r3, r3, #3
 800fd42:	2b03      	cmp	r3, #3
 800fd44:	d816      	bhi.n	800fd74 <UART_SetConfig+0xbc>
 800fd46:	a201      	add	r2, pc, #4	; (adr r2, 800fd4c <UART_SetConfig+0x94>)
 800fd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd4c:	0800fd5d 	.word	0x0800fd5d
 800fd50:	0800fd69 	.word	0x0800fd69
 800fd54:	0800fd63 	.word	0x0800fd63
 800fd58:	0800fd6f 	.word	0x0800fd6f
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	77fb      	strb	r3, [r7, #31]
 800fd60:	e151      	b.n	8010006 <UART_SetConfig+0x34e>
 800fd62:	2302      	movs	r3, #2
 800fd64:	77fb      	strb	r3, [r7, #31]
 800fd66:	e14e      	b.n	8010006 <UART_SetConfig+0x34e>
 800fd68:	2304      	movs	r3, #4
 800fd6a:	77fb      	strb	r3, [r7, #31]
 800fd6c:	e14b      	b.n	8010006 <UART_SetConfig+0x34e>
 800fd6e:	2308      	movs	r3, #8
 800fd70:	77fb      	strb	r3, [r7, #31]
 800fd72:	e148      	b.n	8010006 <UART_SetConfig+0x34e>
 800fd74:	2310      	movs	r3, #16
 800fd76:	77fb      	strb	r3, [r7, #31]
 800fd78:	bf00      	nop
 800fd7a:	e144      	b.n	8010006 <UART_SetConfig+0x34e>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	4a8d      	ldr	r2, [pc, #564]	; (800ffb8 <UART_SetConfig+0x300>)
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d134      	bne.n	800fdf0 <UART_SetConfig+0x138>
 800fd86:	4b8b      	ldr	r3, [pc, #556]	; (800ffb4 <UART_SetConfig+0x2fc>)
 800fd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd8c:	f003 030c 	and.w	r3, r3, #12
 800fd90:	2b0c      	cmp	r3, #12
 800fd92:	d829      	bhi.n	800fde8 <UART_SetConfig+0x130>
 800fd94:	a201      	add	r2, pc, #4	; (adr r2, 800fd9c <UART_SetConfig+0xe4>)
 800fd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd9a:	bf00      	nop
 800fd9c:	0800fdd1 	.word	0x0800fdd1
 800fda0:	0800fde9 	.word	0x0800fde9
 800fda4:	0800fde9 	.word	0x0800fde9
 800fda8:	0800fde9 	.word	0x0800fde9
 800fdac:	0800fddd 	.word	0x0800fddd
 800fdb0:	0800fde9 	.word	0x0800fde9
 800fdb4:	0800fde9 	.word	0x0800fde9
 800fdb8:	0800fde9 	.word	0x0800fde9
 800fdbc:	0800fdd7 	.word	0x0800fdd7
 800fdc0:	0800fde9 	.word	0x0800fde9
 800fdc4:	0800fde9 	.word	0x0800fde9
 800fdc8:	0800fde9 	.word	0x0800fde9
 800fdcc:	0800fde3 	.word	0x0800fde3
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	77fb      	strb	r3, [r7, #31]
 800fdd4:	e117      	b.n	8010006 <UART_SetConfig+0x34e>
 800fdd6:	2302      	movs	r3, #2
 800fdd8:	77fb      	strb	r3, [r7, #31]
 800fdda:	e114      	b.n	8010006 <UART_SetConfig+0x34e>
 800fddc:	2304      	movs	r3, #4
 800fdde:	77fb      	strb	r3, [r7, #31]
 800fde0:	e111      	b.n	8010006 <UART_SetConfig+0x34e>
 800fde2:	2308      	movs	r3, #8
 800fde4:	77fb      	strb	r3, [r7, #31]
 800fde6:	e10e      	b.n	8010006 <UART_SetConfig+0x34e>
 800fde8:	2310      	movs	r3, #16
 800fdea:	77fb      	strb	r3, [r7, #31]
 800fdec:	bf00      	nop
 800fdee:	e10a      	b.n	8010006 <UART_SetConfig+0x34e>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	4a71      	ldr	r2, [pc, #452]	; (800ffbc <UART_SetConfig+0x304>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d120      	bne.n	800fe3c <UART_SetConfig+0x184>
 800fdfa:	4b6e      	ldr	r3, [pc, #440]	; (800ffb4 <UART_SetConfig+0x2fc>)
 800fdfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fe04:	2b10      	cmp	r3, #16
 800fe06:	d00f      	beq.n	800fe28 <UART_SetConfig+0x170>
 800fe08:	2b10      	cmp	r3, #16
 800fe0a:	d802      	bhi.n	800fe12 <UART_SetConfig+0x15a>
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d005      	beq.n	800fe1c <UART_SetConfig+0x164>
 800fe10:	e010      	b.n	800fe34 <UART_SetConfig+0x17c>
 800fe12:	2b20      	cmp	r3, #32
 800fe14:	d005      	beq.n	800fe22 <UART_SetConfig+0x16a>
 800fe16:	2b30      	cmp	r3, #48	; 0x30
 800fe18:	d009      	beq.n	800fe2e <UART_SetConfig+0x176>
 800fe1a:	e00b      	b.n	800fe34 <UART_SetConfig+0x17c>
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	77fb      	strb	r3, [r7, #31]
 800fe20:	e0f1      	b.n	8010006 <UART_SetConfig+0x34e>
 800fe22:	2302      	movs	r3, #2
 800fe24:	77fb      	strb	r3, [r7, #31]
 800fe26:	e0ee      	b.n	8010006 <UART_SetConfig+0x34e>
 800fe28:	2304      	movs	r3, #4
 800fe2a:	77fb      	strb	r3, [r7, #31]
 800fe2c:	e0eb      	b.n	8010006 <UART_SetConfig+0x34e>
 800fe2e:	2308      	movs	r3, #8
 800fe30:	77fb      	strb	r3, [r7, #31]
 800fe32:	e0e8      	b.n	8010006 <UART_SetConfig+0x34e>
 800fe34:	2310      	movs	r3, #16
 800fe36:	77fb      	strb	r3, [r7, #31]
 800fe38:	bf00      	nop
 800fe3a:	e0e4      	b.n	8010006 <UART_SetConfig+0x34e>
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4a5f      	ldr	r2, [pc, #380]	; (800ffc0 <UART_SetConfig+0x308>)
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d120      	bne.n	800fe88 <UART_SetConfig+0x1d0>
 800fe46:	4b5b      	ldr	r3, [pc, #364]	; (800ffb4 <UART_SetConfig+0x2fc>)
 800fe48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fe50:	2b40      	cmp	r3, #64	; 0x40
 800fe52:	d00f      	beq.n	800fe74 <UART_SetConfig+0x1bc>
 800fe54:	2b40      	cmp	r3, #64	; 0x40
 800fe56:	d802      	bhi.n	800fe5e <UART_SetConfig+0x1a6>
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d005      	beq.n	800fe68 <UART_SetConfig+0x1b0>
 800fe5c:	e010      	b.n	800fe80 <UART_SetConfig+0x1c8>
 800fe5e:	2b80      	cmp	r3, #128	; 0x80
 800fe60:	d005      	beq.n	800fe6e <UART_SetConfig+0x1b6>
 800fe62:	2bc0      	cmp	r3, #192	; 0xc0
 800fe64:	d009      	beq.n	800fe7a <UART_SetConfig+0x1c2>
 800fe66:	e00b      	b.n	800fe80 <UART_SetConfig+0x1c8>
 800fe68:	2300      	movs	r3, #0
 800fe6a:	77fb      	strb	r3, [r7, #31]
 800fe6c:	e0cb      	b.n	8010006 <UART_SetConfig+0x34e>
 800fe6e:	2302      	movs	r3, #2
 800fe70:	77fb      	strb	r3, [r7, #31]
 800fe72:	e0c8      	b.n	8010006 <UART_SetConfig+0x34e>
 800fe74:	2304      	movs	r3, #4
 800fe76:	77fb      	strb	r3, [r7, #31]
 800fe78:	e0c5      	b.n	8010006 <UART_SetConfig+0x34e>
 800fe7a:	2308      	movs	r3, #8
 800fe7c:	77fb      	strb	r3, [r7, #31]
 800fe7e:	e0c2      	b.n	8010006 <UART_SetConfig+0x34e>
 800fe80:	2310      	movs	r3, #16
 800fe82:	77fb      	strb	r3, [r7, #31]
 800fe84:	bf00      	nop
 800fe86:	e0be      	b.n	8010006 <UART_SetConfig+0x34e>
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	4a4d      	ldr	r2, [pc, #308]	; (800ffc4 <UART_SetConfig+0x30c>)
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d124      	bne.n	800fedc <UART_SetConfig+0x224>
 800fe92:	4b48      	ldr	r3, [pc, #288]	; (800ffb4 <UART_SetConfig+0x2fc>)
 800fe94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fe9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fea0:	d012      	beq.n	800fec8 <UART_SetConfig+0x210>
 800fea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fea6:	d802      	bhi.n	800feae <UART_SetConfig+0x1f6>
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d007      	beq.n	800febc <UART_SetConfig+0x204>
 800feac:	e012      	b.n	800fed4 <UART_SetConfig+0x21c>
 800feae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800feb2:	d006      	beq.n	800fec2 <UART_SetConfig+0x20a>
 800feb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800feb8:	d009      	beq.n	800fece <UART_SetConfig+0x216>
 800feba:	e00b      	b.n	800fed4 <UART_SetConfig+0x21c>
 800febc:	2300      	movs	r3, #0
 800febe:	77fb      	strb	r3, [r7, #31]
 800fec0:	e0a1      	b.n	8010006 <UART_SetConfig+0x34e>
 800fec2:	2302      	movs	r3, #2
 800fec4:	77fb      	strb	r3, [r7, #31]
 800fec6:	e09e      	b.n	8010006 <UART_SetConfig+0x34e>
 800fec8:	2304      	movs	r3, #4
 800feca:	77fb      	strb	r3, [r7, #31]
 800fecc:	e09b      	b.n	8010006 <UART_SetConfig+0x34e>
 800fece:	2308      	movs	r3, #8
 800fed0:	77fb      	strb	r3, [r7, #31]
 800fed2:	e098      	b.n	8010006 <UART_SetConfig+0x34e>
 800fed4:	2310      	movs	r3, #16
 800fed6:	77fb      	strb	r3, [r7, #31]
 800fed8:	bf00      	nop
 800feda:	e094      	b.n	8010006 <UART_SetConfig+0x34e>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	4a39      	ldr	r2, [pc, #228]	; (800ffc8 <UART_SetConfig+0x310>)
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d124      	bne.n	800ff30 <UART_SetConfig+0x278>
 800fee6:	4b33      	ldr	r3, [pc, #204]	; (800ffb4 <UART_SetConfig+0x2fc>)
 800fee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800feec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fef4:	d012      	beq.n	800ff1c <UART_SetConfig+0x264>
 800fef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fefa:	d802      	bhi.n	800ff02 <UART_SetConfig+0x24a>
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d007      	beq.n	800ff10 <UART_SetConfig+0x258>
 800ff00:	e012      	b.n	800ff28 <UART_SetConfig+0x270>
 800ff02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ff06:	d006      	beq.n	800ff16 <UART_SetConfig+0x25e>
 800ff08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ff0c:	d009      	beq.n	800ff22 <UART_SetConfig+0x26a>
 800ff0e:	e00b      	b.n	800ff28 <UART_SetConfig+0x270>
 800ff10:	2301      	movs	r3, #1
 800ff12:	77fb      	strb	r3, [r7, #31]
 800ff14:	e077      	b.n	8010006 <UART_SetConfig+0x34e>
 800ff16:	2302      	movs	r3, #2
 800ff18:	77fb      	strb	r3, [r7, #31]
 800ff1a:	e074      	b.n	8010006 <UART_SetConfig+0x34e>
 800ff1c:	2304      	movs	r3, #4
 800ff1e:	77fb      	strb	r3, [r7, #31]
 800ff20:	e071      	b.n	8010006 <UART_SetConfig+0x34e>
 800ff22:	2308      	movs	r3, #8
 800ff24:	77fb      	strb	r3, [r7, #31]
 800ff26:	e06e      	b.n	8010006 <UART_SetConfig+0x34e>
 800ff28:	2310      	movs	r3, #16
 800ff2a:	77fb      	strb	r3, [r7, #31]
 800ff2c:	bf00      	nop
 800ff2e:	e06a      	b.n	8010006 <UART_SetConfig+0x34e>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	4a25      	ldr	r2, [pc, #148]	; (800ffcc <UART_SetConfig+0x314>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d124      	bne.n	800ff84 <UART_SetConfig+0x2cc>
 800ff3a:	4b1e      	ldr	r3, [pc, #120]	; (800ffb4 <UART_SetConfig+0x2fc>)
 800ff3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff40:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ff44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff48:	d012      	beq.n	800ff70 <UART_SetConfig+0x2b8>
 800ff4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff4e:	d802      	bhi.n	800ff56 <UART_SetConfig+0x29e>
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d007      	beq.n	800ff64 <UART_SetConfig+0x2ac>
 800ff54:	e012      	b.n	800ff7c <UART_SetConfig+0x2c4>
 800ff56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff5a:	d006      	beq.n	800ff6a <UART_SetConfig+0x2b2>
 800ff5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ff60:	d009      	beq.n	800ff76 <UART_SetConfig+0x2be>
 800ff62:	e00b      	b.n	800ff7c <UART_SetConfig+0x2c4>
 800ff64:	2300      	movs	r3, #0
 800ff66:	77fb      	strb	r3, [r7, #31]
 800ff68:	e04d      	b.n	8010006 <UART_SetConfig+0x34e>
 800ff6a:	2302      	movs	r3, #2
 800ff6c:	77fb      	strb	r3, [r7, #31]
 800ff6e:	e04a      	b.n	8010006 <UART_SetConfig+0x34e>
 800ff70:	2304      	movs	r3, #4
 800ff72:	77fb      	strb	r3, [r7, #31]
 800ff74:	e047      	b.n	8010006 <UART_SetConfig+0x34e>
 800ff76:	2308      	movs	r3, #8
 800ff78:	77fb      	strb	r3, [r7, #31]
 800ff7a:	e044      	b.n	8010006 <UART_SetConfig+0x34e>
 800ff7c:	2310      	movs	r3, #16
 800ff7e:	77fb      	strb	r3, [r7, #31]
 800ff80:	bf00      	nop
 800ff82:	e040      	b.n	8010006 <UART_SetConfig+0x34e>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4a11      	ldr	r2, [pc, #68]	; (800ffd0 <UART_SetConfig+0x318>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d139      	bne.n	8010002 <UART_SetConfig+0x34a>
 800ff8e:	4b09      	ldr	r3, [pc, #36]	; (800ffb4 <UART_SetConfig+0x2fc>)
 800ff90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ff98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ff9c:	d027      	beq.n	800ffee <UART_SetConfig+0x336>
 800ff9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ffa2:	d817      	bhi.n	800ffd4 <UART_SetConfig+0x31c>
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d01c      	beq.n	800ffe2 <UART_SetConfig+0x32a>
 800ffa8:	e027      	b.n	800fffa <UART_SetConfig+0x342>
 800ffaa:	bf00      	nop
 800ffac:	efff69f3 	.word	0xefff69f3
 800ffb0:	40011000 	.word	0x40011000
 800ffb4:	40023800 	.word	0x40023800
 800ffb8:	40004400 	.word	0x40004400
 800ffbc:	40004800 	.word	0x40004800
 800ffc0:	40004c00 	.word	0x40004c00
 800ffc4:	40005000 	.word	0x40005000
 800ffc8:	40011400 	.word	0x40011400
 800ffcc:	40007800 	.word	0x40007800
 800ffd0:	40007c00 	.word	0x40007c00
 800ffd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffd8:	d006      	beq.n	800ffe8 <UART_SetConfig+0x330>
 800ffda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ffde:	d009      	beq.n	800fff4 <UART_SetConfig+0x33c>
 800ffe0:	e00b      	b.n	800fffa <UART_SetConfig+0x342>
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	77fb      	strb	r3, [r7, #31]
 800ffe6:	e00e      	b.n	8010006 <UART_SetConfig+0x34e>
 800ffe8:	2302      	movs	r3, #2
 800ffea:	77fb      	strb	r3, [r7, #31]
 800ffec:	e00b      	b.n	8010006 <UART_SetConfig+0x34e>
 800ffee:	2304      	movs	r3, #4
 800fff0:	77fb      	strb	r3, [r7, #31]
 800fff2:	e008      	b.n	8010006 <UART_SetConfig+0x34e>
 800fff4:	2308      	movs	r3, #8
 800fff6:	77fb      	strb	r3, [r7, #31]
 800fff8:	e005      	b.n	8010006 <UART_SetConfig+0x34e>
 800fffa:	2310      	movs	r3, #16
 800fffc:	77fb      	strb	r3, [r7, #31]
 800fffe:	bf00      	nop
 8010000:	e001      	b.n	8010006 <UART_SetConfig+0x34e>
 8010002:	2310      	movs	r3, #16
 8010004:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	69db      	ldr	r3, [r3, #28]
 801000a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801000e:	d17f      	bne.n	8010110 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8010010:	7ffb      	ldrb	r3, [r7, #31]
 8010012:	2b08      	cmp	r3, #8
 8010014:	d85c      	bhi.n	80100d0 <UART_SetConfig+0x418>
 8010016:	a201      	add	r2, pc, #4	; (adr r2, 801001c <UART_SetConfig+0x364>)
 8010018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801001c:	08010041 	.word	0x08010041
 8010020:	08010061 	.word	0x08010061
 8010024:	08010081 	.word	0x08010081
 8010028:	080100d1 	.word	0x080100d1
 801002c:	08010099 	.word	0x08010099
 8010030:	080100d1 	.word	0x080100d1
 8010034:	080100d1 	.word	0x080100d1
 8010038:	080100d1 	.word	0x080100d1
 801003c:	080100b9 	.word	0x080100b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010040:	f7fc feb8 	bl	800cdb4 <HAL_RCC_GetPCLK1Freq>
 8010044:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	005a      	lsls	r2, r3, #1
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	085b      	lsrs	r3, r3, #1
 8010050:	441a      	add	r2, r3
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	fbb2 f3f3 	udiv	r3, r2, r3
 801005a:	b29b      	uxth	r3, r3
 801005c:	61bb      	str	r3, [r7, #24]
        break;
 801005e:	e03a      	b.n	80100d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010060:	f7fc febc 	bl	800cddc <HAL_RCC_GetPCLK2Freq>
 8010064:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	005a      	lsls	r2, r3, #1
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	085b      	lsrs	r3, r3, #1
 8010070:	441a      	add	r2, r3
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	fbb2 f3f3 	udiv	r3, r2, r3
 801007a:	b29b      	uxth	r3, r3
 801007c:	61bb      	str	r3, [r7, #24]
        break;
 801007e:	e02a      	b.n	80100d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	085a      	lsrs	r2, r3, #1
 8010086:	4b5f      	ldr	r3, [pc, #380]	; (8010204 <UART_SetConfig+0x54c>)
 8010088:	4413      	add	r3, r2
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	6852      	ldr	r2, [r2, #4]
 801008e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010092:	b29b      	uxth	r3, r3
 8010094:	61bb      	str	r3, [r7, #24]
        break;
 8010096:	e01e      	b.n	80100d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010098:	f7fc fdce 	bl	800cc38 <HAL_RCC_GetSysClockFreq>
 801009c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	005a      	lsls	r2, r3, #1
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	085b      	lsrs	r3, r3, #1
 80100a8:	441a      	add	r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	61bb      	str	r3, [r7, #24]
        break;
 80100b6:	e00e      	b.n	80100d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	085b      	lsrs	r3, r3, #1
 80100be:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	61bb      	str	r3, [r7, #24]
        break;
 80100ce:	e002      	b.n	80100d6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80100d0:	2301      	movs	r3, #1
 80100d2:	75fb      	strb	r3, [r7, #23]
        break;
 80100d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	2b0f      	cmp	r3, #15
 80100da:	d916      	bls.n	801010a <UART_SetConfig+0x452>
 80100dc:	69bb      	ldr	r3, [r7, #24]
 80100de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100e2:	d212      	bcs.n	801010a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80100e4:	69bb      	ldr	r3, [r7, #24]
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	f023 030f 	bic.w	r3, r3, #15
 80100ec:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	085b      	lsrs	r3, r3, #1
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	f003 0307 	and.w	r3, r3, #7
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	897b      	ldrh	r3, [r7, #10]
 80100fc:	4313      	orrs	r3, r2
 80100fe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	897a      	ldrh	r2, [r7, #10]
 8010106:	60da      	str	r2, [r3, #12]
 8010108:	e070      	b.n	80101ec <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 801010a:	2301      	movs	r3, #1
 801010c:	75fb      	strb	r3, [r7, #23]
 801010e:	e06d      	b.n	80101ec <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8010110:	7ffb      	ldrb	r3, [r7, #31]
 8010112:	2b08      	cmp	r3, #8
 8010114:	d859      	bhi.n	80101ca <UART_SetConfig+0x512>
 8010116:	a201      	add	r2, pc, #4	; (adr r2, 801011c <UART_SetConfig+0x464>)
 8010118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801011c:	08010141 	.word	0x08010141
 8010120:	0801015f 	.word	0x0801015f
 8010124:	0801017d 	.word	0x0801017d
 8010128:	080101cb 	.word	0x080101cb
 801012c:	08010195 	.word	0x08010195
 8010130:	080101cb 	.word	0x080101cb
 8010134:	080101cb 	.word	0x080101cb
 8010138:	080101cb 	.word	0x080101cb
 801013c:	080101b3 	.word	0x080101b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010140:	f7fc fe38 	bl	800cdb4 <HAL_RCC_GetPCLK1Freq>
 8010144:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	085a      	lsrs	r2, r3, #1
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	441a      	add	r2, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	fbb2 f3f3 	udiv	r3, r2, r3
 8010158:	b29b      	uxth	r3, r3
 801015a:	61bb      	str	r3, [r7, #24]
        break;
 801015c:	e038      	b.n	80101d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801015e:	f7fc fe3d 	bl	800cddc <HAL_RCC_GetPCLK2Freq>
 8010162:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	085a      	lsrs	r2, r3, #1
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	441a      	add	r2, r3
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	fbb2 f3f3 	udiv	r3, r2, r3
 8010176:	b29b      	uxth	r3, r3
 8010178:	61bb      	str	r3, [r7, #24]
        break;
 801017a:	e029      	b.n	80101d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	085a      	lsrs	r2, r3, #1
 8010182:	4b21      	ldr	r3, [pc, #132]	; (8010208 <UART_SetConfig+0x550>)
 8010184:	4413      	add	r3, r2
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	6852      	ldr	r2, [r2, #4]
 801018a:	fbb3 f3f2 	udiv	r3, r3, r2
 801018e:	b29b      	uxth	r3, r3
 8010190:	61bb      	str	r3, [r7, #24]
        break;
 8010192:	e01d      	b.n	80101d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010194:	f7fc fd50 	bl	800cc38 <HAL_RCC_GetSysClockFreq>
 8010198:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	085a      	lsrs	r2, r3, #1
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	441a      	add	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	61bb      	str	r3, [r7, #24]
        break;
 80101b0:	e00e      	b.n	80101d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	085b      	lsrs	r3, r3, #1
 80101b8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	61bb      	str	r3, [r7, #24]
        break;
 80101c8:	e002      	b.n	80101d0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80101ca:	2301      	movs	r3, #1
 80101cc:	75fb      	strb	r3, [r7, #23]
        break;
 80101ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	2b0f      	cmp	r3, #15
 80101d4:	d908      	bls.n	80101e8 <UART_SetConfig+0x530>
 80101d6:	69bb      	ldr	r3, [r7, #24]
 80101d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101dc:	d204      	bcs.n	80101e8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	69ba      	ldr	r2, [r7, #24]
 80101e4:	60da      	str	r2, [r3, #12]
 80101e6:	e001      	b.n	80101ec <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80101e8:	2301      	movs	r3, #1
 80101ea:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2200      	movs	r2, #0
 80101f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80101f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3720      	adds	r7, #32
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
 8010202:	bf00      	nop
 8010204:	01e84800 	.word	0x01e84800
 8010208:	00f42400 	.word	0x00f42400

0801020c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801020c:	b480      	push	{r7}
 801020e:	b083      	sub	sp, #12
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010218:	f003 0301 	and.w	r3, r3, #1
 801021c:	2b00      	cmp	r3, #0
 801021e:	d00a      	beq.n	8010236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	430a      	orrs	r2, r1
 8010234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801023a:	f003 0302 	and.w	r3, r3, #2
 801023e:	2b00      	cmp	r3, #0
 8010240:	d00a      	beq.n	8010258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	430a      	orrs	r2, r1
 8010256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801025c:	f003 0304 	and.w	r3, r3, #4
 8010260:	2b00      	cmp	r3, #0
 8010262:	d00a      	beq.n	801027a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	430a      	orrs	r2, r1
 8010278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801027e:	f003 0308 	and.w	r3, r3, #8
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00a      	beq.n	801029c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	430a      	orrs	r2, r1
 801029a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a0:	f003 0310 	and.w	r3, r3, #16
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d00a      	beq.n	80102be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	689b      	ldr	r3, [r3, #8]
 80102ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	430a      	orrs	r2, r1
 80102bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c2:	f003 0320 	and.w	r3, r3, #32
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d00a      	beq.n	80102e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	430a      	orrs	r2, r1
 80102de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d01a      	beq.n	8010322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	430a      	orrs	r2, r1
 8010300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801030a:	d10a      	bne.n	8010322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	430a      	orrs	r2, r1
 8010320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801032a:	2b00      	cmp	r3, #0
 801032c:	d00a      	beq.n	8010344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	430a      	orrs	r2, r1
 8010342:	605a      	str	r2, [r3, #4]
  }
}
 8010344:	bf00      	nop
 8010346:	370c      	adds	r7, #12
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr

08010350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b086      	sub	sp, #24
 8010354:	af02      	add	r7, sp, #8
 8010356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801035e:	f7f7 f9f7 	bl	8007750 <HAL_GetTick>
 8010362:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f003 0308 	and.w	r3, r3, #8
 801036e:	2b08      	cmp	r3, #8
 8010370:	d10e      	bne.n	8010390 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010372:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010376:	9300      	str	r3, [sp, #0]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	2200      	movs	r2, #0
 801037c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 f814 	bl	80103ae <UART_WaitOnFlagUntilTimeout>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d001      	beq.n	8010390 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801038c:	2303      	movs	r3, #3
 801038e:	e00a      	b.n	80103a6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2220      	movs	r2, #32
 8010394:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2220      	movs	r2, #32
 801039a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2200      	movs	r2, #0
 80103a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80103a4:	2300      	movs	r3, #0
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3710      	adds	r7, #16
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}

080103ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80103ae:	b580      	push	{r7, lr}
 80103b0:	b084      	sub	sp, #16
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	60f8      	str	r0, [r7, #12]
 80103b6:	60b9      	str	r1, [r7, #8]
 80103b8:	603b      	str	r3, [r7, #0]
 80103ba:	4613      	mov	r3, r2
 80103bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80103be:	e05d      	b.n	801047c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c6:	d059      	beq.n	801047c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80103c8:	f7f7 f9c2 	bl	8007750 <HAL_GetTick>
 80103cc:	4602      	mov	r2, r0
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	69ba      	ldr	r2, [r7, #24]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d302      	bcc.n	80103de <UART_WaitOnFlagUntilTimeout+0x30>
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d11b      	bne.n	8010416 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	681a      	ldr	r2, [r3, #0]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80103ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	689a      	ldr	r2, [r3, #8]
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f022 0201 	bic.w	r2, r2, #1
 80103fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2220      	movs	r2, #32
 8010402:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2220      	movs	r2, #32
 8010408:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2200      	movs	r2, #0
 801040e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8010412:	2303      	movs	r3, #3
 8010414:	e042      	b.n	801049c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f003 0304 	and.w	r3, r3, #4
 8010420:	2b00      	cmp	r3, #0
 8010422:	d02b      	beq.n	801047c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	69db      	ldr	r3, [r3, #28]
 801042a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801042e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010432:	d123      	bne.n	801047c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801043c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801044c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	689a      	ldr	r2, [r3, #8]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f022 0201 	bic.w	r2, r2, #1
 801045c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	2220      	movs	r2, #32
 8010462:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2220      	movs	r2, #32
 8010468:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2220      	movs	r2, #32
 801046e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2200      	movs	r2, #0
 8010474:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8010478:	2303      	movs	r3, #3
 801047a:	e00f      	b.n	801049c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	69da      	ldr	r2, [r3, #28]
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	4013      	ands	r3, r2
 8010486:	68ba      	ldr	r2, [r7, #8]
 8010488:	429a      	cmp	r2, r3
 801048a:	bf0c      	ite	eq
 801048c:	2301      	moveq	r3, #1
 801048e:	2300      	movne	r3, #0
 8010490:	b2db      	uxtb	r3, r3
 8010492:	461a      	mov	r2, r3
 8010494:	79fb      	ldrb	r3, [r7, #7]
 8010496:	429a      	cmp	r2, r3
 8010498:	d092      	beq.n	80103c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801049a:	2300      	movs	r3, #0
}
 801049c:	4618      	mov	r0, r3
 801049e:	3710      	adds	r7, #16
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b085      	sub	sp, #20
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80104ae:	2300      	movs	r3, #0
 80104b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80104b2:	2300      	movs	r3, #0
 80104b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d027      	beq.n	801050e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80104c4:	68fa      	ldr	r2, [r7, #12]
 80104c6:	4b2f      	ldr	r3, [pc, #188]	; (8010584 <FMC_SDRAM_Init+0xe0>)
 80104c8:	4013      	ands	r3, r2
 80104ca:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80104d4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80104da:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80104e0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80104e6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80104ec:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80104f2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80104f8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80104fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010500:	68fa      	ldr	r2, [r7, #12]
 8010502:	4313      	orrs	r3, r2
 8010504:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	68fa      	ldr	r2, [r7, #12]
 801050a:	601a      	str	r2, [r3, #0]
 801050c:	e032      	b.n	8010574 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801051a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8010524:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 801052a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 801052c:	68fa      	ldr	r2, [r7, #12]
 801052e:	4313      	orrs	r3, r2
 8010530:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8010538:	68ba      	ldr	r2, [r7, #8]
 801053a:	4b12      	ldr	r3, [pc, #72]	; (8010584 <FMC_SDRAM_Init+0xe0>)
 801053c:	4013      	ands	r3, r2
 801053e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010548:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 801054e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8010554:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 801055a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8010560:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8010562:	68ba      	ldr	r2, [r7, #8]
 8010564:	4313      	orrs	r3, r2
 8010566:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	68ba      	ldr	r2, [r7, #8]
 8010572:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3714      	adds	r7, #20
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr
 8010582:	bf00      	nop
 8010584:	ffff8000 	.word	0xffff8000

08010588 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010588:	b480      	push	{r7}
 801058a:	b087      	sub	sp, #28
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8010594:	2300      	movs	r3, #0
 8010596:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8010598:	2300      	movs	r3, #0
 801059a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b01      	cmp	r3, #1
 80105a0:	d02e      	beq.n	8010600 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80105ae:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	3b01      	subs	r3, #1
 80105bc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80105be:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	3b01      	subs	r3, #1
 80105c6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80105c8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	68db      	ldr	r3, [r3, #12]
 80105ce:	3b01      	subs	r3, #1
 80105d0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80105d2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	691b      	ldr	r3, [r3, #16]
 80105d8:	3b01      	subs	r3, #1
 80105da:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80105dc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	695b      	ldr	r3, [r3, #20]
 80105e2:	3b01      	subs	r3, #1
 80105e4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80105e6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	699b      	ldr	r3, [r3, #24]
 80105ec:	3b01      	subs	r3, #1
 80105ee:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80105f0:	4313      	orrs	r3, r2
 80105f2:	697a      	ldr	r2, [r7, #20]
 80105f4:	4313      	orrs	r3, r2
 80105f6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	697a      	ldr	r2, [r7, #20]
 80105fc:	609a      	str	r2, [r3, #8]
 80105fe:	e039      	b.n	8010674 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8010606:	697a      	ldr	r2, [r7, #20]
 8010608:	4b1e      	ldr	r3, [pc, #120]	; (8010684 <FMC_SDRAM_Timing_Init+0xfc>)
 801060a:	4013      	ands	r3, r2
 801060c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	68db      	ldr	r3, [r3, #12]
 8010612:	3b01      	subs	r3, #1
 8010614:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	695b      	ldr	r3, [r3, #20]
 801061a:	3b01      	subs	r3, #1
 801061c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 801061e:	4313      	orrs	r3, r2
 8010620:	697a      	ldr	r2, [r7, #20]
 8010622:	4313      	orrs	r3, r2
 8010624:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	68db      	ldr	r3, [r3, #12]
 801062a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010632:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	3b01      	subs	r3, #1
 8010640:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010642:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	689b      	ldr	r3, [r3, #8]
 8010648:	3b01      	subs	r3, #1
 801064a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 801064c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	691b      	ldr	r3, [r3, #16]
 8010652:	3b01      	subs	r3, #1
 8010654:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8010656:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	699b      	ldr	r3, [r3, #24]
 801065c:	3b01      	subs	r3, #1
 801065e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8010660:	4313      	orrs	r3, r2
 8010662:	693a      	ldr	r2, [r7, #16]
 8010664:	4313      	orrs	r3, r2
 8010666:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	697a      	ldr	r2, [r7, #20]
 801066c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	693a      	ldr	r2, [r7, #16]
 8010672:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	371c      	adds	r7, #28
 801067a:	46bd      	mov	sp, r7
 801067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010680:	4770      	bx	lr
 8010682:	bf00      	nop
 8010684:	ff0f0fff 	.word	0xff0f0fff

08010688 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8010688:	b480      	push	{r7}
 801068a:	b087      	sub	sp, #28
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8010694:	2300      	movs	r3, #0
 8010696:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80106a0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	689b      	ldr	r3, [r3, #8]
 80106a6:	3b01      	subs	r3, #1
 80106a8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80106aa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	68db      	ldr	r3, [r3, #12]
 80106b0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80106b2:	4313      	orrs	r3, r2
 80106b4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80106bc:	2300      	movs	r3, #0
}
 80106be:	4618      	mov	r0, r3
 80106c0:	371c      	adds	r7, #28
 80106c2:	46bd      	mov	sp, r7
 80106c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c8:	4770      	bx	lr

080106ca <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80106ca:	b480      	push	{r7}
 80106cc:	b083      	sub	sp, #12
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
 80106d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	695a      	ldr	r2, [r3, #20]
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	005b      	lsls	r3, r3, #1
 80106dc:	431a      	orrs	r2, r3
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80106e2:	2300      	movs	r3, #0
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	370c      	adds	r7, #12
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr

080106f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80106f0:	b084      	sub	sp, #16
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b084      	sub	sp, #16
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
 80106fa:	f107 001c 	add.w	r0, r7, #28
 80106fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010704:	2b01      	cmp	r3, #1
 8010706:	d120      	bne.n	801074a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801070c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	68da      	ldr	r2, [r3, #12]
 8010718:	4b20      	ldr	r3, [pc, #128]	; (801079c <USB_CoreInit+0xac>)
 801071a:	4013      	ands	r3, r2
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801072c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801072e:	2b01      	cmp	r3, #1
 8010730:	d105      	bne.n	801073e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 f942 	bl	80109c8 <USB_CoreReset>
 8010744:	4603      	mov	r3, r0
 8010746:	73fb      	strb	r3, [r7, #15]
 8010748:	e010      	b.n	801076c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f000 f936 	bl	80109c8 <USB_CoreReset>
 801075c:	4603      	mov	r3, r0
 801075e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010764:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 801076c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801076e:	2b01      	cmp	r3, #1
 8010770:	d10b      	bne.n	801078a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	689b      	ldr	r3, [r3, #8]
 8010776:	f043 0206 	orr.w	r2, r3, #6
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	689b      	ldr	r3, [r3, #8]
 8010782:	f043 0220 	orr.w	r2, r3, #32
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801078a:	7bfb      	ldrb	r3, [r7, #15]
}
 801078c:	4618      	mov	r0, r3
 801078e:	3710      	adds	r7, #16
 8010790:	46bd      	mov	sp, r7
 8010792:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010796:	b004      	add	sp, #16
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	ffbdffbf 	.word	0xffbdffbf

080107a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	689b      	ldr	r3, [r3, #8]
 80107ac:	f043 0201 	orr.w	r2, r3, #1
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80107b4:	2300      	movs	r3, #0
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	370c      	adds	r7, #12
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr

080107c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80107c2:	b480      	push	{r7}
 80107c4:	b083      	sub	sp, #12
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	689b      	ldr	r3, [r3, #8]
 80107ce:	f023 0201 	bic.w	r2, r3, #1
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80107d6:	2300      	movs	r3, #0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	370c      	adds	r7, #12
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr

080107e4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	460b      	mov	r3, r1
 80107ee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80107fc:	78fb      	ldrb	r3, [r7, #3]
 80107fe:	2b01      	cmp	r3, #1
 8010800:	d106      	bne.n	8010810 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	60da      	str	r2, [r3, #12]
 801080e:	e00b      	b.n	8010828 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8010810:	78fb      	ldrb	r3, [r7, #3]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d106      	bne.n	8010824 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	60da      	str	r2, [r3, #12]
 8010822:	e001      	b.n	8010828 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8010824:	2301      	movs	r3, #1
 8010826:	e003      	b.n	8010830 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8010828:	2032      	movs	r0, #50	; 0x32
 801082a:	f7f6 ff9d 	bl	8007768 <HAL_Delay>

  return HAL_OK;
 801082e:	2300      	movs	r3, #0
}
 8010830:	4618      	mov	r0, r3
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010838:	b480      	push	{r7}
 801083a:	b085      	sub	sp, #20
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010842:	2300      	movs	r3, #0
 8010844:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	019b      	lsls	r3, r3, #6
 801084a:	f043 0220 	orr.w	r2, r3, #32
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	3301      	adds	r3, #1
 8010856:	60fb      	str	r3, [r7, #12]
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	4a09      	ldr	r2, [pc, #36]	; (8010880 <USB_FlushTxFifo+0x48>)
 801085c:	4293      	cmp	r3, r2
 801085e:	d901      	bls.n	8010864 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010860:	2303      	movs	r3, #3
 8010862:	e006      	b.n	8010872 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	691b      	ldr	r3, [r3, #16]
 8010868:	f003 0320 	and.w	r3, r3, #32
 801086c:	2b20      	cmp	r3, #32
 801086e:	d0f0      	beq.n	8010852 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010870:	2300      	movs	r3, #0
}
 8010872:	4618      	mov	r0, r3
 8010874:	3714      	adds	r7, #20
 8010876:	46bd      	mov	sp, r7
 8010878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087c:	4770      	bx	lr
 801087e:	bf00      	nop
 8010880:	00030d40 	.word	0x00030d40

08010884 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010884:	b480      	push	{r7}
 8010886:	b085      	sub	sp, #20
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801088c:	2300      	movs	r3, #0
 801088e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2210      	movs	r2, #16
 8010894:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	3301      	adds	r3, #1
 801089a:	60fb      	str	r3, [r7, #12]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	4a09      	ldr	r2, [pc, #36]	; (80108c4 <USB_FlushRxFifo+0x40>)
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d901      	bls.n	80108a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80108a4:	2303      	movs	r3, #3
 80108a6:	e006      	b.n	80108b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	691b      	ldr	r3, [r3, #16]
 80108ac:	f003 0310 	and.w	r3, r3, #16
 80108b0:	2b10      	cmp	r3, #16
 80108b2:	d0f0      	beq.n	8010896 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80108b4:	2300      	movs	r3, #0
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3714      	adds	r7, #20
 80108ba:	46bd      	mov	sp, r7
 80108bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop
 80108c4:	00030d40 	.word	0x00030d40

080108c8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b089      	sub	sp, #36	; 0x24
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	4611      	mov	r1, r2
 80108d4:	461a      	mov	r2, r3
 80108d6:	460b      	mov	r3, r1
 80108d8:	71fb      	strb	r3, [r7, #7]
 80108da:	4613      	mov	r3, r2
 80108dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80108e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d11a      	bne.n	8010924 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80108ee:	88bb      	ldrh	r3, [r7, #4]
 80108f0:	3303      	adds	r3, #3
 80108f2:	089b      	lsrs	r3, r3, #2
 80108f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80108f6:	2300      	movs	r3, #0
 80108f8:	61bb      	str	r3, [r7, #24]
 80108fa:	e00f      	b.n	801091c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80108fc:	79fb      	ldrb	r3, [r7, #7]
 80108fe:	031a      	lsls	r2, r3, #12
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	4413      	add	r3, r2
 8010904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010908:	461a      	mov	r2, r3
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010910:	69fb      	ldr	r3, [r7, #28]
 8010912:	3304      	adds	r3, #4
 8010914:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	3301      	adds	r3, #1
 801091a:	61bb      	str	r3, [r7, #24]
 801091c:	69ba      	ldr	r2, [r7, #24]
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	429a      	cmp	r2, r3
 8010922:	d3eb      	bcc.n	80108fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010924:	2300      	movs	r3, #0
}
 8010926:	4618      	mov	r0, r3
 8010928:	3724      	adds	r7, #36	; 0x24
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010932:	b480      	push	{r7}
 8010934:	b089      	sub	sp, #36	; 0x24
 8010936:	af00      	add	r7, sp, #0
 8010938:	60f8      	str	r0, [r7, #12]
 801093a:	60b9      	str	r1, [r7, #8]
 801093c:	4613      	mov	r3, r2
 801093e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010948:	88fb      	ldrh	r3, [r7, #6]
 801094a:	3303      	adds	r3, #3
 801094c:	089b      	lsrs	r3, r3, #2
 801094e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010950:	2300      	movs	r3, #0
 8010952:	61bb      	str	r3, [r7, #24]
 8010954:	e00b      	b.n	801096e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801095c:	681a      	ldr	r2, [r3, #0]
 801095e:	69fb      	ldr	r3, [r7, #28]
 8010960:	601a      	str	r2, [r3, #0]
    pDest++;
 8010962:	69fb      	ldr	r3, [r7, #28]
 8010964:	3304      	adds	r3, #4
 8010966:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010968:	69bb      	ldr	r3, [r7, #24]
 801096a:	3301      	adds	r3, #1
 801096c:	61bb      	str	r3, [r7, #24]
 801096e:	69ba      	ldr	r2, [r7, #24]
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	429a      	cmp	r2, r3
 8010974:	d3ef      	bcc.n	8010956 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010976:	69fb      	ldr	r3, [r7, #28]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3724      	adds	r7, #36	; 0x24
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010984:	b480      	push	{r7}
 8010986:	b085      	sub	sp, #20
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	695b      	ldr	r3, [r3, #20]
 8010990:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	699b      	ldr	r3, [r3, #24]
 8010996:	68fa      	ldr	r2, [r7, #12]
 8010998:	4013      	ands	r3, r2
 801099a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801099c:	68fb      	ldr	r3, [r7, #12]
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3714      	adds	r7, #20
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr

080109aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80109aa:	b480      	push	{r7}
 80109ac:	b083      	sub	sp, #12
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	695b      	ldr	r3, [r3, #20]
 80109b6:	f003 0301 	and.w	r3, r3, #1
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	370c      	adds	r7, #12
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr
	...

080109c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b085      	sub	sp, #20
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80109d0:	2300      	movs	r3, #0
 80109d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	3301      	adds	r3, #1
 80109d8:	60fb      	str	r3, [r7, #12]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	4a13      	ldr	r2, [pc, #76]	; (8010a2c <USB_CoreReset+0x64>)
 80109de:	4293      	cmp	r3, r2
 80109e0:	d901      	bls.n	80109e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80109e2:	2303      	movs	r3, #3
 80109e4:	e01b      	b.n	8010a1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	691b      	ldr	r3, [r3, #16]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	daf2      	bge.n	80109d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80109ee:	2300      	movs	r3, #0
 80109f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	691b      	ldr	r3, [r3, #16]
 80109f6:	f043 0201 	orr.w	r2, r3, #1
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	3301      	adds	r3, #1
 8010a02:	60fb      	str	r3, [r7, #12]
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	4a09      	ldr	r2, [pc, #36]	; (8010a2c <USB_CoreReset+0x64>)
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	d901      	bls.n	8010a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010a0c:	2303      	movs	r3, #3
 8010a0e:	e006      	b.n	8010a1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	691b      	ldr	r3, [r3, #16]
 8010a14:	f003 0301 	and.w	r3, r3, #1
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	d0f0      	beq.n	80109fe <USB_CoreReset+0x36>

  return HAL_OK;
 8010a1c:	2300      	movs	r3, #0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3714      	adds	r7, #20
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop
 8010a2c:	00030d40 	.word	0x00030d40

08010a30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010a30:	b084      	sub	sp, #16
 8010a32:	b580      	push	{r7, lr}
 8010a34:	b084      	sub	sp, #16
 8010a36:	af00      	add	r7, sp, #0
 8010a38:	6078      	str	r0, [r7, #4]
 8010a3a:	f107 001c 	add.w	r0, r7, #28
 8010a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	2300      	movs	r3, #0
 8010a50:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a56:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d018      	beq.n	8010a9c <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8010a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6c:	2b01      	cmp	r3, #1
 8010a6e:	d10a      	bne.n	8010a86 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010a7e:	f043 0304 	orr.w	r3, r3, #4
 8010a82:	6013      	str	r3, [r2, #0]
 8010a84:	e014      	b.n	8010ab0 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	68ba      	ldr	r2, [r7, #8]
 8010a90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010a94:	f023 0304 	bic.w	r3, r3, #4
 8010a98:	6013      	str	r3, [r2, #0]
 8010a9a:	e009      	b.n	8010ab0 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	68ba      	ldr	r2, [r7, #8]
 8010aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010aaa:	f023 0304 	bic.w	r3, r3, #4
 8010aae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8010ab0:	2110      	movs	r1, #16
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f7ff fec0 	bl	8010838 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff fee3 	bl	8010884 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8010abe:	2300      	movs	r3, #0
 8010ac0:	60fb      	str	r3, [r7, #12]
 8010ac2:	e015      	b.n	8010af0 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	015a      	lsls	r2, r3, #5
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	4413      	add	r3, r2
 8010acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ad6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	015a      	lsls	r2, r3, #5
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	4413      	add	r3, r2
 8010ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	3301      	adds	r3, #1
 8010aee:	60fb      	str	r3, [r7, #12]
 8010af0:	6a3b      	ldr	r3, [r7, #32]
 8010af2:	68fa      	ldr	r2, [r7, #12]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d3e5      	bcc.n	8010ac4 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8010af8:	2101      	movs	r1, #1
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f8ac 	bl	8010c58 <USB_DriveVbus>

  HAL_Delay(200U);
 8010b00:	20c8      	movs	r0, #200	; 0xc8
 8010b02:	f7f6 fe31 	bl	8007768 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b12:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d00b      	beq.n	8010b38 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010b26:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	4a14      	ldr	r2, [pc, #80]	; (8010b7c <USB_HostInit+0x14c>)
 8010b2c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	4a13      	ldr	r2, [pc, #76]	; (8010b80 <USB_HostInit+0x150>)
 8010b32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8010b36:	e009      	b.n	8010b4c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2280      	movs	r2, #128	; 0x80
 8010b3c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	4a10      	ldr	r2, [pc, #64]	; (8010b84 <USB_HostInit+0x154>)
 8010b42:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	4a10      	ldr	r2, [pc, #64]	; (8010b88 <USB_HostInit+0x158>)
 8010b48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d105      	bne.n	8010b5e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	699b      	ldr	r3, [r3, #24]
 8010b56:	f043 0210 	orr.w	r2, r3, #16
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	699a      	ldr	r2, [r3, #24]
 8010b62:	4b0a      	ldr	r3, [pc, #40]	; (8010b8c <USB_HostInit+0x15c>)
 8010b64:	4313      	orrs	r3, r2
 8010b66:	687a      	ldr	r2, [r7, #4]
 8010b68:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8010b6a:	2300      	movs	r3, #0
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3710      	adds	r7, #16
 8010b70:	46bd      	mov	sp, r7
 8010b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010b76:	b004      	add	sp, #16
 8010b78:	4770      	bx	lr
 8010b7a:	bf00      	nop
 8010b7c:	01000200 	.word	0x01000200
 8010b80:	00e00300 	.word	0x00e00300
 8010b84:	00600080 	.word	0x00600080
 8010b88:	004000e0 	.word	0x004000e0
 8010b8c:	a3200008 	.word	0xa3200008

08010b90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010bae:	f023 0303 	bic.w	r3, r3, #3
 8010bb2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	78fb      	ldrb	r3, [r7, #3]
 8010bbe:	f003 0303 	and.w	r3, r3, #3
 8010bc2:	68f9      	ldr	r1, [r7, #12]
 8010bc4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010bc8:	4313      	orrs	r3, r2
 8010bca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010bcc:	78fb      	ldrb	r3, [r7, #3]
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d107      	bne.n	8010be2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010bd8:	461a      	mov	r2, r3
 8010bda:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8010bde:	6053      	str	r3, [r2, #4]
 8010be0:	e009      	b.n	8010bf6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8010be2:	78fb      	ldrb	r3, [r7, #3]
 8010be4:	2b02      	cmp	r3, #2
 8010be6:	d106      	bne.n	8010bf6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010bee:	461a      	mov	r2, r3
 8010bf0:	f241 7370 	movw	r3, #6000	; 0x1770
 8010bf4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8010bf6:	2300      	movs	r3, #0
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3714      	adds	r7, #20
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr

08010c04 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8010c10:	2300      	movs	r3, #0
 8010c12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8010c24:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8010c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010c32:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8010c34:	2064      	movs	r0, #100	; 0x64
 8010c36:	f7f6 fd97 	bl	8007768 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8010c42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c46:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8010c48:	200a      	movs	r0, #10
 8010c4a:	f7f6 fd8d 	bl	8007768 <HAL_Delay>

  return HAL_OK;
 8010c4e:	2300      	movs	r3, #0
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b085      	sub	sp, #20
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	460b      	mov	r3, r1
 8010c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8010c7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d109      	bne.n	8010c9c <USB_DriveVbus+0x44>
 8010c88:	78fb      	ldrb	r3, [r7, #3]
 8010c8a:	2b01      	cmp	r3, #1
 8010c8c:	d106      	bne.n	8010c9c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	68fa      	ldr	r2, [r7, #12]
 8010c92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8010c96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010c9a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ca6:	d109      	bne.n	8010cbc <USB_DriveVbus+0x64>
 8010ca8:	78fb      	ldrb	r3, [r7, #3]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d106      	bne.n	8010cbc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	68fa      	ldr	r2, [r7, #12]
 8010cb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8010cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010cba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8010cbc:	2300      	movs	r3, #0
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3714      	adds	r7, #20
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr

08010cca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010cca:	b480      	push	{r7}
 8010ccc:	b085      	sub	sp, #20
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	0c5b      	lsrs	r3, r3, #17
 8010ce8:	f003 0303 	and.w	r3, r3, #3
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3714      	adds	r7, #20
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr

08010cf8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b085      	sub	sp, #20
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	b29b      	uxth	r3, r3
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3714      	adds	r7, #20
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr
	...

08010d1c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b087      	sub	sp, #28
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	4608      	mov	r0, r1
 8010d26:	4611      	mov	r1, r2
 8010d28:	461a      	mov	r2, r3
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	70fb      	strb	r3, [r7, #3]
 8010d2e:	460b      	mov	r3, r1
 8010d30:	70bb      	strb	r3, [r7, #2]
 8010d32:	4613      	mov	r3, r2
 8010d34:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8010d36:	2300      	movs	r3, #0
 8010d38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8010d3e:	78fb      	ldrb	r3, [r7, #3]
 8010d40:	015a      	lsls	r2, r3, #5
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	4413      	add	r3, r2
 8010d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d50:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8010d52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d56:	2b03      	cmp	r3, #3
 8010d58:	d87e      	bhi.n	8010e58 <USB_HC_Init+0x13c>
 8010d5a:	a201      	add	r2, pc, #4	; (adr r2, 8010d60 <USB_HC_Init+0x44>)
 8010d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d60:	08010d71 	.word	0x08010d71
 8010d64:	08010e1b 	.word	0x08010e1b
 8010d68:	08010d71 	.word	0x08010d71
 8010d6c:	08010ddd 	.word	0x08010ddd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010d70:	78fb      	ldrb	r3, [r7, #3]
 8010d72:	015a      	lsls	r2, r3, #5
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	4413      	add	r3, r2
 8010d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d7c:	461a      	mov	r2, r3
 8010d7e:	f240 439d 	movw	r3, #1181	; 0x49d
 8010d82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8010d84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	da10      	bge.n	8010dae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010d8c:	78fb      	ldrb	r3, [r7, #3]
 8010d8e:	015a      	lsls	r2, r3, #5
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	4413      	add	r3, r2
 8010d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010d98:	68db      	ldr	r3, [r3, #12]
 8010d9a:	78fa      	ldrb	r2, [r7, #3]
 8010d9c:	0151      	lsls	r1, r2, #5
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	440a      	add	r2, r1
 8010da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010daa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8010dac:	e057      	b.n	8010e5e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d051      	beq.n	8010e5e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8010dba:	78fb      	ldrb	r3, [r7, #3]
 8010dbc:	015a      	lsls	r2, r3, #5
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010dc6:	68db      	ldr	r3, [r3, #12]
 8010dc8:	78fa      	ldrb	r2, [r7, #3]
 8010dca:	0151      	lsls	r1, r2, #5
 8010dcc:	68ba      	ldr	r2, [r7, #8]
 8010dce:	440a      	add	r2, r1
 8010dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010dd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010dd8:	60d3      	str	r3, [r2, #12]
      break;
 8010dda:	e040      	b.n	8010e5e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010ddc:	78fb      	ldrb	r3, [r7, #3]
 8010dde:	015a      	lsls	r2, r3, #5
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	4413      	add	r3, r2
 8010de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010de8:	461a      	mov	r2, r3
 8010dea:	f240 639d 	movw	r3, #1693	; 0x69d
 8010dee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010df0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	da34      	bge.n	8010e62 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010df8:	78fb      	ldrb	r3, [r7, #3]
 8010dfa:	015a      	lsls	r2, r3, #5
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	4413      	add	r3, r2
 8010e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	78fa      	ldrb	r2, [r7, #3]
 8010e08:	0151      	lsls	r1, r2, #5
 8010e0a:	68ba      	ldr	r2, [r7, #8]
 8010e0c:	440a      	add	r2, r1
 8010e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e16:	60d3      	str	r3, [r2, #12]
      }

      break;
 8010e18:	e023      	b.n	8010e62 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010e1a:	78fb      	ldrb	r3, [r7, #3]
 8010e1c:	015a      	lsls	r2, r3, #5
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	4413      	add	r3, r2
 8010e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010e26:	461a      	mov	r2, r3
 8010e28:	f240 2325 	movw	r3, #549	; 0x225
 8010e2c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8010e2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	da17      	bge.n	8010e66 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8010e36:	78fb      	ldrb	r3, [r7, #3]
 8010e38:	015a      	lsls	r2, r3, #5
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	78fa      	ldrb	r2, [r7, #3]
 8010e46:	0151      	lsls	r1, r2, #5
 8010e48:	68ba      	ldr	r2, [r7, #8]
 8010e4a:	440a      	add	r2, r1
 8010e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010e50:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8010e54:	60d3      	str	r3, [r2, #12]
      }
      break;
 8010e56:	e006      	b.n	8010e66 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8010e5c:	e004      	b.n	8010e68 <USB_HC_Init+0x14c>
      break;
 8010e5e:	bf00      	nop
 8010e60:	e002      	b.n	8010e68 <USB_HC_Init+0x14c>
      break;
 8010e62:	bf00      	nop
 8010e64:	e000      	b.n	8010e68 <USB_HC_Init+0x14c>
      break;
 8010e66:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e6e:	699a      	ldr	r2, [r3, #24]
 8010e70:	78fb      	ldrb	r3, [r7, #3]
 8010e72:	f003 030f 	and.w	r3, r3, #15
 8010e76:	2101      	movs	r1, #1
 8010e78:	fa01 f303 	lsl.w	r3, r1, r3
 8010e7c:	68b9      	ldr	r1, [r7, #8]
 8010e7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e82:	4313      	orrs	r3, r2
 8010e84:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	699b      	ldr	r3, [r3, #24]
 8010e8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8010e92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	da03      	bge.n	8010ea2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8010e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e9e:	613b      	str	r3, [r7, #16]
 8010ea0:	e001      	b.n	8010ea6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8010ea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010eaa:	2b02      	cmp	r3, #2
 8010eac:	d103      	bne.n	8010eb6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8010eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010eb2:	60fb      	str	r3, [r7, #12]
 8010eb4:	e001      	b.n	8010eba <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010eba:	787b      	ldrb	r3, [r7, #1]
 8010ebc:	059b      	lsls	r3, r3, #22
 8010ebe:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010ec2:	78bb      	ldrb	r3, [r7, #2]
 8010ec4:	02db      	lsls	r3, r3, #11
 8010ec6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010eca:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010ecc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010ed0:	049b      	lsls	r3, r3, #18
 8010ed2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8010ed6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8010ed8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010eda:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8010ede:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010ee4:	78fb      	ldrb	r3, [r7, #3]
 8010ee6:	0159      	lsls	r1, r3, #5
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	440b      	add	r3, r1
 8010eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010ef0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8010ef6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8010ef8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010efc:	2b03      	cmp	r3, #3
 8010efe:	d10f      	bne.n	8010f20 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8010f00:	78fb      	ldrb	r3, [r7, #3]
 8010f02:	015a      	lsls	r2, r3, #5
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	4413      	add	r3, r2
 8010f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	78fa      	ldrb	r2, [r7, #3]
 8010f10:	0151      	lsls	r1, r2, #5
 8010f12:	68ba      	ldr	r2, [r7, #8]
 8010f14:	440a      	add	r2, r1
 8010f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010f1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010f1e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8010f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	371c      	adds	r7, #28
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr
 8010f2e:	bf00      	nop

08010f30 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b08c      	sub	sp, #48	; 0x30
 8010f34:	af02      	add	r7, sp, #8
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	4613      	mov	r3, r2
 8010f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	785b      	ldrb	r3, [r3, #1]
 8010f46:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8010f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f4c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d028      	beq.n	8010fac <USB_HC_StartXfer+0x7c>
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	791b      	ldrb	r3, [r3, #4]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d124      	bne.n	8010fac <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8010f62:	79fb      	ldrb	r3, [r7, #7]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d10b      	bne.n	8010f80 <USB_HC_StartXfer+0x50>
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	795b      	ldrb	r3, [r3, #5]
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d107      	bne.n	8010f80 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	785b      	ldrb	r3, [r3, #1]
 8010f74:	4619      	mov	r1, r3
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f000 fa2e 	bl	80113d8 <USB_DoPing>
      return HAL_OK;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	e112      	b.n	80111a6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8010f80:	79fb      	ldrb	r3, [r7, #7]
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d112      	bne.n	8010fac <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	015a      	lsls	r2, r3, #5
 8010f8a:	6a3b      	ldr	r3, [r7, #32]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8010f92:	68db      	ldr	r3, [r3, #12]
 8010f94:	69fa      	ldr	r2, [r7, #28]
 8010f96:	0151      	lsls	r1, r2, #5
 8010f98:	6a3a      	ldr	r2, [r7, #32]
 8010f9a:	440a      	add	r2, r1
 8010f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8010fa0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8010fa4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	691b      	ldr	r3, [r3, #16]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d018      	beq.n	8010fe6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	691b      	ldr	r3, [r3, #16]
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	8912      	ldrh	r2, [r2, #8]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	3b01      	subs	r3, #1
 8010fc0:	68ba      	ldr	r2, [r7, #8]
 8010fc2:	8912      	ldrh	r2, [r2, #8]
 8010fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fc8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8010fca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010fcc:	8b7b      	ldrh	r3, [r7, #26]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d90b      	bls.n	8010fea <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8010fd2:	8b7b      	ldrh	r3, [r7, #26]
 8010fd4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8010fd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010fd8:	68ba      	ldr	r2, [r7, #8]
 8010fda:	8912      	ldrh	r2, [r2, #8]
 8010fdc:	fb02 f203 	mul.w	r2, r2, r3
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	611a      	str	r2, [r3, #16]
 8010fe4:	e001      	b.n	8010fea <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	78db      	ldrb	r3, [r3, #3]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d006      	beq.n	8011000 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8010ff2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ff4:	68ba      	ldr	r2, [r7, #8]
 8010ff6:	8912      	ldrh	r2, [r2, #8]
 8010ff8:	fb02 f203 	mul.w	r2, r2, r3
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	691b      	ldr	r3, [r3, #16]
 8011004:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801100a:	04d9      	lsls	r1, r3, #19
 801100c:	4b68      	ldr	r3, [pc, #416]	; (80111b0 <USB_HC_StartXfer+0x280>)
 801100e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8011010:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	7a9b      	ldrb	r3, [r3, #10]
 8011016:	075b      	lsls	r3, r3, #29
 8011018:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801101c:	69f9      	ldr	r1, [r7, #28]
 801101e:	0148      	lsls	r0, r1, #5
 8011020:	6a39      	ldr	r1, [r7, #32]
 8011022:	4401      	add	r1, r0
 8011024:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011028:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 801102a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 801102c:	79fb      	ldrb	r3, [r7, #7]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d009      	beq.n	8011046 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	68d9      	ldr	r1, [r3, #12]
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	015a      	lsls	r2, r3, #5
 801103a:	6a3b      	ldr	r3, [r7, #32]
 801103c:	4413      	add	r3, r2
 801103e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011042:	460a      	mov	r2, r1
 8011044:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8011046:	6a3b      	ldr	r3, [r7, #32]
 8011048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801104c:	689b      	ldr	r3, [r3, #8]
 801104e:	f003 0301 	and.w	r3, r3, #1
 8011052:	2b00      	cmp	r3, #0
 8011054:	bf0c      	ite	eq
 8011056:	2301      	moveq	r3, #1
 8011058:	2300      	movne	r3, #0
 801105a:	b2db      	uxtb	r3, r3
 801105c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 801105e:	69fb      	ldr	r3, [r7, #28]
 8011060:	015a      	lsls	r2, r3, #5
 8011062:	6a3b      	ldr	r3, [r7, #32]
 8011064:	4413      	add	r3, r2
 8011066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	69fa      	ldr	r2, [r7, #28]
 801106e:	0151      	lsls	r1, r2, #5
 8011070:	6a3a      	ldr	r2, [r7, #32]
 8011072:	440a      	add	r2, r1
 8011074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011078:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801107c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	015a      	lsls	r2, r3, #5
 8011082:	6a3b      	ldr	r3, [r7, #32]
 8011084:	4413      	add	r3, r2
 8011086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801108a:	681a      	ldr	r2, [r3, #0]
 801108c:	7e7b      	ldrb	r3, [r7, #25]
 801108e:	075b      	lsls	r3, r3, #29
 8011090:	69f9      	ldr	r1, [r7, #28]
 8011092:	0148      	lsls	r0, r1, #5
 8011094:	6a39      	ldr	r1, [r7, #32]
 8011096:	4401      	add	r1, r0
 8011098:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 801109c:	4313      	orrs	r3, r2
 801109e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80110a0:	69fb      	ldr	r3, [r7, #28]
 80110a2:	015a      	lsls	r2, r3, #5
 80110a4:	6a3b      	ldr	r3, [r7, #32]
 80110a6:	4413      	add	r3, r2
 80110a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	4a41      	ldr	r2, [pc, #260]	; (80111b4 <USB_HC_StartXfer+0x284>)
 80110b0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80110b2:	4b40      	ldr	r3, [pc, #256]	; (80111b4 <USB_HC_StartXfer+0x284>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80110ba:	4a3e      	ldr	r2, [pc, #248]	; (80111b4 <USB_HC_StartXfer+0x284>)
 80110bc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	78db      	ldrb	r3, [r3, #3]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d006      	beq.n	80110d4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80110c6:	4b3b      	ldr	r3, [pc, #236]	; (80111b4 <USB_HC_StartXfer+0x284>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110ce:	4a39      	ldr	r2, [pc, #228]	; (80111b4 <USB_HC_StartXfer+0x284>)
 80110d0:	6013      	str	r3, [r2, #0]
 80110d2:	e005      	b.n	80110e0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80110d4:	4b37      	ldr	r3, [pc, #220]	; (80111b4 <USB_HC_StartXfer+0x284>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80110dc:	4a35      	ldr	r2, [pc, #212]	; (80111b4 <USB_HC_StartXfer+0x284>)
 80110de:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80110e0:	4b34      	ldr	r3, [pc, #208]	; (80111b4 <USB_HC_StartXfer+0x284>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80110e8:	4a32      	ldr	r2, [pc, #200]	; (80111b4 <USB_HC_StartXfer+0x284>)
 80110ea:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80110ec:	69fb      	ldr	r3, [r7, #28]
 80110ee:	015a      	lsls	r2, r3, #5
 80110f0:	6a3b      	ldr	r3, [r7, #32]
 80110f2:	4413      	add	r3, r2
 80110f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80110f8:	461a      	mov	r2, r3
 80110fa:	4b2e      	ldr	r3, [pc, #184]	; (80111b4 <USB_HC_StartXfer+0x284>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8011100:	79fb      	ldrb	r3, [r7, #7]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d14e      	bne.n	80111a4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	78db      	ldrb	r3, [r3, #3]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d14a      	bne.n	80111a4 <USB_HC_StartXfer+0x274>
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	691b      	ldr	r3, [r3, #16]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d046      	beq.n	80111a4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	79db      	ldrb	r3, [r3, #7]
 801111a:	2b03      	cmp	r3, #3
 801111c:	d830      	bhi.n	8011180 <USB_HC_StartXfer+0x250>
 801111e:	a201      	add	r2, pc, #4	; (adr r2, 8011124 <USB_HC_StartXfer+0x1f4>)
 8011120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011124:	08011135 	.word	0x08011135
 8011128:	08011159 	.word	0x08011159
 801112c:	08011135 	.word	0x08011135
 8011130:	08011159 	.word	0x08011159
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	691b      	ldr	r3, [r3, #16]
 8011138:	3303      	adds	r3, #3
 801113a:	089b      	lsrs	r3, r3, #2
 801113c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801113e:	8afa      	ldrh	r2, [r7, #22]
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011144:	b29b      	uxth	r3, r3
 8011146:	429a      	cmp	r2, r3
 8011148:	d91c      	bls.n	8011184 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	699b      	ldr	r3, [r3, #24]
 801114e:	f043 0220 	orr.w	r2, r3, #32
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	619a      	str	r2, [r3, #24]
          }
          break;
 8011156:	e015      	b.n	8011184 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	691b      	ldr	r3, [r3, #16]
 801115c:	3303      	adds	r3, #3
 801115e:	089b      	lsrs	r3, r3, #2
 8011160:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8011162:	8afa      	ldrh	r2, [r7, #22]
 8011164:	6a3b      	ldr	r3, [r7, #32]
 8011166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801116a:	691b      	ldr	r3, [r3, #16]
 801116c:	b29b      	uxth	r3, r3
 801116e:	429a      	cmp	r2, r3
 8011170:	d90a      	bls.n	8011188 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	699b      	ldr	r3, [r3, #24]
 8011176:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	619a      	str	r2, [r3, #24]
          }
          break;
 801117e:	e003      	b.n	8011188 <USB_HC_StartXfer+0x258>

        default:
          break;
 8011180:	bf00      	nop
 8011182:	e002      	b.n	801118a <USB_HC_StartXfer+0x25a>
          break;
 8011184:	bf00      	nop
 8011186:	e000      	b.n	801118a <USB_HC_StartXfer+0x25a>
          break;
 8011188:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	68d9      	ldr	r1, [r3, #12]
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	785a      	ldrb	r2, [r3, #1]
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	691b      	ldr	r3, [r3, #16]
 8011196:	b298      	uxth	r0, r3
 8011198:	2300      	movs	r3, #0
 801119a:	9300      	str	r3, [sp, #0]
 801119c:	4603      	mov	r3, r0
 801119e:	68f8      	ldr	r0, [r7, #12]
 80111a0:	f7ff fb92 	bl	80108c8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80111a4:	2300      	movs	r3, #0
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3728      	adds	r7, #40	; 0x28
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	1ff80000 	.word	0x1ff80000
 80111b4:	20001170 	.word	0x20001170

080111b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80111b8:	b480      	push	{r7}
 80111ba:	b085      	sub	sp, #20
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80111ca:	695b      	ldr	r3, [r3, #20]
 80111cc:	b29b      	uxth	r3, r3
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3714      	adds	r7, #20
 80111d2:	46bd      	mov	sp, r7
 80111d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d8:	4770      	bx	lr

080111da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80111da:	b480      	push	{r7}
 80111dc:	b087      	sub	sp, #28
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
 80111e2:	460b      	mov	r3, r1
 80111e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80111ea:	78fb      	ldrb	r3, [r7, #3]
 80111ec:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80111ee:	2300      	movs	r3, #0
 80111f0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	015a      	lsls	r2, r3, #5
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	4413      	add	r3, r2
 80111fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	0c9b      	lsrs	r3, r3, #18
 8011202:	f003 0303 	and.w	r3, r3, #3
 8011206:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d002      	beq.n	8011214 <USB_HC_Halt+0x3a>
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	2b02      	cmp	r3, #2
 8011212:	d16c      	bne.n	80112ee <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	015a      	lsls	r2, r3, #5
 8011218:	693b      	ldr	r3, [r7, #16]
 801121a:	4413      	add	r3, r2
 801121c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	68fa      	ldr	r2, [r7, #12]
 8011224:	0151      	lsls	r1, r2, #5
 8011226:	693a      	ldr	r2, [r7, #16]
 8011228:	440a      	add	r2, r1
 801122a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801122e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011232:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011238:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801123c:	2b00      	cmp	r3, #0
 801123e:	d143      	bne.n	80112c8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	015a      	lsls	r2, r3, #5
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	4413      	add	r3, r2
 8011248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	68fa      	ldr	r2, [r7, #12]
 8011250:	0151      	lsls	r1, r2, #5
 8011252:	693a      	ldr	r2, [r7, #16]
 8011254:	440a      	add	r2, r1
 8011256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801125a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801125e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	015a      	lsls	r2, r3, #5
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	4413      	add	r3, r2
 8011268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	68fa      	ldr	r2, [r7, #12]
 8011270:	0151      	lsls	r1, r2, #5
 8011272:	693a      	ldr	r2, [r7, #16]
 8011274:	440a      	add	r2, r1
 8011276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801127a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801127e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	015a      	lsls	r2, r3, #5
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	4413      	add	r3, r2
 8011288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	68fa      	ldr	r2, [r7, #12]
 8011290:	0151      	lsls	r1, r2, #5
 8011292:	693a      	ldr	r2, [r7, #16]
 8011294:	440a      	add	r2, r1
 8011296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801129a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801129e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80112a0:	697b      	ldr	r3, [r7, #20]
 80112a2:	3301      	adds	r3, #1
 80112a4:	617b      	str	r3, [r7, #20]
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80112ac:	d81d      	bhi.n	80112ea <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	015a      	lsls	r2, r3, #5
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	4413      	add	r3, r2
 80112b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80112c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80112c4:	d0ec      	beq.n	80112a0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80112c6:	e080      	b.n	80113ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	015a      	lsls	r2, r3, #5
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	4413      	add	r3, r2
 80112d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	68fa      	ldr	r2, [r7, #12]
 80112d8:	0151      	lsls	r1, r2, #5
 80112da:	693a      	ldr	r2, [r7, #16]
 80112dc:	440a      	add	r2, r1
 80112de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80112e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80112e6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80112e8:	e06f      	b.n	80113ca <USB_HC_Halt+0x1f0>
          break;
 80112ea:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80112ec:	e06d      	b.n	80113ca <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	015a      	lsls	r2, r3, #5
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	4413      	add	r3, r2
 80112f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	68fa      	ldr	r2, [r7, #12]
 80112fe:	0151      	lsls	r1, r2, #5
 8011300:	693a      	ldr	r2, [r7, #16]
 8011302:	440a      	add	r2, r1
 8011304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801130c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011314:	691b      	ldr	r3, [r3, #16]
 8011316:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801131a:	2b00      	cmp	r3, #0
 801131c:	d143      	bne.n	80113a6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	015a      	lsls	r2, r3, #5
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	4413      	add	r3, r2
 8011326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	68fa      	ldr	r2, [r7, #12]
 801132e:	0151      	lsls	r1, r2, #5
 8011330:	693a      	ldr	r2, [r7, #16]
 8011332:	440a      	add	r2, r1
 8011334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801133c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	015a      	lsls	r2, r3, #5
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	4413      	add	r3, r2
 8011346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	68fa      	ldr	r2, [r7, #12]
 801134e:	0151      	lsls	r1, r2, #5
 8011350:	693a      	ldr	r2, [r7, #16]
 8011352:	440a      	add	r2, r1
 8011354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801135c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	015a      	lsls	r2, r3, #5
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	4413      	add	r3, r2
 8011366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	68fa      	ldr	r2, [r7, #12]
 801136e:	0151      	lsls	r1, r2, #5
 8011370:	693a      	ldr	r2, [r7, #16]
 8011372:	440a      	add	r2, r1
 8011374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011378:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801137c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	3301      	adds	r3, #1
 8011382:	617b      	str	r3, [r7, #20]
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801138a:	d81d      	bhi.n	80113c8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	015a      	lsls	r2, r3, #5
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	4413      	add	r3, r2
 8011394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801139e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113a2:	d0ec      	beq.n	801137e <USB_HC_Halt+0x1a4>
 80113a4:	e011      	b.n	80113ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	015a      	lsls	r2, r3, #5
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	4413      	add	r3, r2
 80113ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	68fa      	ldr	r2, [r7, #12]
 80113b6:	0151      	lsls	r1, r2, #5
 80113b8:	693a      	ldr	r2, [r7, #16]
 80113ba:	440a      	add	r2, r1
 80113bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80113c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80113c4:	6013      	str	r3, [r2, #0]
 80113c6:	e000      	b.n	80113ca <USB_HC_Halt+0x1f0>
          break;
 80113c8:	bf00      	nop
    }
  }

  return HAL_OK;
 80113ca:	2300      	movs	r3, #0
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	371c      	adds	r7, #28
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80113d8:	b480      	push	{r7}
 80113da:	b087      	sub	sp, #28
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	460b      	mov	r3, r1
 80113e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80113e8:	78fb      	ldrb	r3, [r7, #3]
 80113ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80113ec:	2301      	movs	r3, #1
 80113ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	04da      	lsls	r2, r3, #19
 80113f4:	4b15      	ldr	r3, [pc, #84]	; (801144c <USB_DoPing+0x74>)
 80113f6:	4013      	ands	r3, r2
 80113f8:	693a      	ldr	r2, [r7, #16]
 80113fa:	0151      	lsls	r1, r2, #5
 80113fc:	697a      	ldr	r2, [r7, #20]
 80113fe:	440a      	add	r2, r1
 8011400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8011404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011408:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	015a      	lsls	r2, r3, #5
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	4413      	add	r3, r2
 8011412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011420:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011428:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	015a      	lsls	r2, r3, #5
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	4413      	add	r3, r2
 8011432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011436:	461a      	mov	r2, r3
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801143c:	2300      	movs	r3, #0
}
 801143e:	4618      	mov	r0, r3
 8011440:	371c      	adds	r7, #28
 8011442:	46bd      	mov	sp, r7
 8011444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011448:	4770      	bx	lr
 801144a:	bf00      	nop
 801144c:	1ff80000 	.word	0x1ff80000

08011450 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b086      	sub	sp, #24
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 801145c:	2300      	movs	r3, #0
 801145e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7ff f9ae 	bl	80107c2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8011466:	2110      	movs	r1, #16
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7ff f9e5 	bl	8010838 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f7ff fa08 	bl	8010884 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8011474:	2300      	movs	r3, #0
 8011476:	613b      	str	r3, [r7, #16]
 8011478:	e01f      	b.n	80114ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	015a      	lsls	r2, r3, #5
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	4413      	add	r3, r2
 8011482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011490:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011498:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80114a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	015a      	lsls	r2, r3, #5
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	4413      	add	r3, r2
 80114aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80114ae:	461a      	mov	r2, r3
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	3301      	adds	r3, #1
 80114b8:	613b      	str	r3, [r7, #16]
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	2b0f      	cmp	r3, #15
 80114be:	d9dc      	bls.n	801147a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80114c0:	2300      	movs	r3, #0
 80114c2:	613b      	str	r3, [r7, #16]
 80114c4:	e034      	b.n	8011530 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	015a      	lsls	r2, r3, #5
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	4413      	add	r3, r2
 80114ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80114dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80114e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80114ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	015a      	lsls	r2, r3, #5
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	4413      	add	r3, r2
 80114f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80114fa:	461a      	mov	r2, r3
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	3301      	adds	r3, #1
 8011504:	617b      	str	r3, [r7, #20]
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801150c:	d80c      	bhi.n	8011528 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	015a      	lsls	r2, r3, #5
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	4413      	add	r3, r2
 8011516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011524:	d0ec      	beq.n	8011500 <USB_StopHost+0xb0>
 8011526:	e000      	b.n	801152a <USB_StopHost+0xda>
        break;
 8011528:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	3301      	adds	r3, #1
 801152e:	613b      	str	r3, [r7, #16]
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	2b0f      	cmp	r3, #15
 8011534:	d9c7      	bls.n	80114c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801153c:	461a      	mov	r2, r3
 801153e:	f04f 33ff 	mov.w	r3, #4294967295
 8011542:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f04f 32ff 	mov.w	r2, #4294967295
 801154a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f7ff f927 	bl	80107a0 <USB_EnableGlobalInt>

  return HAL_OK;
 8011552:	2300      	movs	r3, #0
}
 8011554:	4618      	mov	r0, r3
 8011556:	3718      	adds	r7, #24
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 801155c:	b590      	push	{r4, r7, lr}
 801155e:	b089      	sub	sp, #36	; 0x24
 8011560:	af04      	add	r7, sp, #16
 8011562:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8011564:	2301      	movs	r3, #1
 8011566:	2202      	movs	r2, #2
 8011568:	2102      	movs	r1, #2
 801156a:	6878      	ldr	r0, [r7, #4]
 801156c:	f000 fcb4 	bl	8011ed8 <USBH_FindInterface>
 8011570:	4603      	mov	r3, r0
 8011572:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011574:	7bfb      	ldrb	r3, [r7, #15]
 8011576:	2bff      	cmp	r3, #255	; 0xff
 8011578:	d002      	beq.n	8011580 <USBH_CDC_InterfaceInit+0x24>
 801157a:	7bfb      	ldrb	r3, [r7, #15]
 801157c:	2b01      	cmp	r3, #1
 801157e:	d901      	bls.n	8011584 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011580:	2302      	movs	r3, #2
 8011582:	e13d      	b.n	8011800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8011584:	7bfb      	ldrb	r3, [r7, #15]
 8011586:	4619      	mov	r1, r3
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f000 fc89 	bl	8011ea0 <USBH_SelectInterface>
 801158e:	4603      	mov	r3, r0
 8011590:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8011592:	7bbb      	ldrb	r3, [r7, #14]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d001      	beq.n	801159c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8011598:	2302      	movs	r3, #2
 801159a:	e131      	b.n	8011800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80115a2:	2050      	movs	r0, #80	; 0x50
 80115a4:	f006 f96e 	bl	8017884 <malloc>
 80115a8:	4603      	mov	r3, r0
 80115aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80115b2:	69db      	ldr	r3, [r3, #28]
 80115b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d101      	bne.n	80115c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80115bc:	2302      	movs	r3, #2
 80115be:	e11f      	b.n	8011800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80115c0:	2250      	movs	r2, #80	; 0x50
 80115c2:	2100      	movs	r1, #0
 80115c4:	68b8      	ldr	r0, [r7, #8]
 80115c6:	f006 f978 	bl	80178ba <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80115ca:	7bfb      	ldrb	r3, [r7, #15]
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	211a      	movs	r1, #26
 80115d0:	fb01 f303 	mul.w	r3, r1, r3
 80115d4:	4413      	add	r3, r2
 80115d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	b25b      	sxtb	r3, r3
 80115de:	2b00      	cmp	r3, #0
 80115e0:	da15      	bge.n	801160e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80115e2:	7bfb      	ldrb	r3, [r7, #15]
 80115e4:	687a      	ldr	r2, [r7, #4]
 80115e6:	211a      	movs	r1, #26
 80115e8:	fb01 f303 	mul.w	r3, r1, r3
 80115ec:	4413      	add	r3, r2
 80115ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80115f2:	781a      	ldrb	r2, [r3, #0]
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80115f8:	7bfb      	ldrb	r3, [r7, #15]
 80115fa:	687a      	ldr	r2, [r7, #4]
 80115fc:	211a      	movs	r1, #26
 80115fe:	fb01 f303 	mul.w	r3, r1, r3
 8011602:	4413      	add	r3, r2
 8011604:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8011608:	881a      	ldrh	r2, [r3, #0]
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	785b      	ldrb	r3, [r3, #1]
 8011612:	4619      	mov	r1, r3
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f002 f890 	bl	801373a <USBH_AllocPipe>
 801161a:	4603      	mov	r3, r0
 801161c:	461a      	mov	r2, r3
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	7819      	ldrb	r1, [r3, #0]
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	7858      	ldrb	r0, [r3, #1]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011636:	68ba      	ldr	r2, [r7, #8]
 8011638:	8952      	ldrh	r2, [r2, #10]
 801163a:	9202      	str	r2, [sp, #8]
 801163c:	2203      	movs	r2, #3
 801163e:	9201      	str	r2, [sp, #4]
 8011640:	9300      	str	r3, [sp, #0]
 8011642:	4623      	mov	r3, r4
 8011644:	4602      	mov	r2, r0
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	f002 f848 	bl	80136dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	2200      	movs	r2, #0
 8011652:	4619      	mov	r1, r3
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f006 f865 	bl	8017724 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 801165a:	2300      	movs	r3, #0
 801165c:	2200      	movs	r2, #0
 801165e:	210a      	movs	r1, #10
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f000 fc39 	bl	8011ed8 <USBH_FindInterface>
 8011666:	4603      	mov	r3, r0
 8011668:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801166a:	7bfb      	ldrb	r3, [r7, #15]
 801166c:	2bff      	cmp	r3, #255	; 0xff
 801166e:	d002      	beq.n	8011676 <USBH_CDC_InterfaceInit+0x11a>
 8011670:	7bfb      	ldrb	r3, [r7, #15]
 8011672:	2b01      	cmp	r3, #1
 8011674:	d901      	bls.n	801167a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011676:	2302      	movs	r3, #2
 8011678:	e0c2      	b.n	8011800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 801167a:	7bfb      	ldrb	r3, [r7, #15]
 801167c:	687a      	ldr	r2, [r7, #4]
 801167e:	211a      	movs	r1, #26
 8011680:	fb01 f303 	mul.w	r3, r1, r3
 8011684:	4413      	add	r3, r2
 8011686:	f203 334e 	addw	r3, r3, #846	; 0x34e
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	b25b      	sxtb	r3, r3
 801168e:	2b00      	cmp	r3, #0
 8011690:	da16      	bge.n	80116c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011692:	7bfb      	ldrb	r3, [r7, #15]
 8011694:	687a      	ldr	r2, [r7, #4]
 8011696:	211a      	movs	r1, #26
 8011698:	fb01 f303 	mul.w	r3, r1, r3
 801169c:	4413      	add	r3, r2
 801169e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80116a2:	781a      	ldrb	r2, [r3, #0]
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80116a8:	7bfb      	ldrb	r3, [r7, #15]
 80116aa:	687a      	ldr	r2, [r7, #4]
 80116ac:	211a      	movs	r1, #26
 80116ae:	fb01 f303 	mul.w	r3, r1, r3
 80116b2:	4413      	add	r3, r2
 80116b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80116b8:	881a      	ldrh	r2, [r3, #0]
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	835a      	strh	r2, [r3, #26]
 80116be:	e015      	b.n	80116ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80116c0:	7bfb      	ldrb	r3, [r7, #15]
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	211a      	movs	r1, #26
 80116c6:	fb01 f303 	mul.w	r3, r1, r3
 80116ca:	4413      	add	r3, r2
 80116cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80116d0:	781a      	ldrb	r2, [r3, #0]
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80116d6:	7bfb      	ldrb	r3, [r7, #15]
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	211a      	movs	r1, #26
 80116dc:	fb01 f303 	mul.w	r3, r1, r3
 80116e0:	4413      	add	r3, r2
 80116e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80116e6:	881a      	ldrh	r2, [r3, #0]
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80116ec:	7bfb      	ldrb	r3, [r7, #15]
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	211a      	movs	r1, #26
 80116f2:	fb01 f303 	mul.w	r3, r1, r3
 80116f6:	4413      	add	r3, r2
 80116f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	b25b      	sxtb	r3, r3
 8011700:	2b00      	cmp	r3, #0
 8011702:	da16      	bge.n	8011732 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011704:	7bfb      	ldrb	r3, [r7, #15]
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	211a      	movs	r1, #26
 801170a:	fb01 f303 	mul.w	r3, r1, r3
 801170e:	4413      	add	r3, r2
 8011710:	f203 3356 	addw	r3, r3, #854	; 0x356
 8011714:	781a      	ldrb	r2, [r3, #0]
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801171a:	7bfb      	ldrb	r3, [r7, #15]
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	211a      	movs	r1, #26
 8011720:	fb01 f303 	mul.w	r3, r1, r3
 8011724:	4413      	add	r3, r2
 8011726:	f503 7356 	add.w	r3, r3, #856	; 0x358
 801172a:	881a      	ldrh	r2, [r3, #0]
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	835a      	strh	r2, [r3, #26]
 8011730:	e015      	b.n	801175e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8011732:	7bfb      	ldrb	r3, [r7, #15]
 8011734:	687a      	ldr	r2, [r7, #4]
 8011736:	211a      	movs	r1, #26
 8011738:	fb01 f303 	mul.w	r3, r1, r3
 801173c:	4413      	add	r3, r2
 801173e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8011742:	781a      	ldrb	r2, [r3, #0]
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8011748:	7bfb      	ldrb	r3, [r7, #15]
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	211a      	movs	r1, #26
 801174e:	fb01 f303 	mul.w	r3, r1, r3
 8011752:	4413      	add	r3, r2
 8011754:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8011758:	881a      	ldrh	r2, [r3, #0]
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	7b9b      	ldrb	r3, [r3, #14]
 8011762:	4619      	mov	r1, r3
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f001 ffe8 	bl	801373a <USBH_AllocPipe>
 801176a:	4603      	mov	r3, r0
 801176c:	461a      	mov	r2, r3
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	7bdb      	ldrb	r3, [r3, #15]
 8011776:	4619      	mov	r1, r3
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f001 ffde 	bl	801373a <USBH_AllocPipe>
 801177e:	4603      	mov	r3, r0
 8011780:	461a      	mov	r2, r3
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	7b59      	ldrb	r1, [r3, #13]
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	7b98      	ldrb	r0, [r3, #14]
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801179a:	68ba      	ldr	r2, [r7, #8]
 801179c:	8b12      	ldrh	r2, [r2, #24]
 801179e:	9202      	str	r2, [sp, #8]
 80117a0:	2202      	movs	r2, #2
 80117a2:	9201      	str	r2, [sp, #4]
 80117a4:	9300      	str	r3, [sp, #0]
 80117a6:	4623      	mov	r3, r4
 80117a8:	4602      	mov	r2, r0
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f001 ff96 	bl	80136dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	7b19      	ldrb	r1, [r3, #12]
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	7bd8      	ldrb	r0, [r3, #15]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80117c4:	68ba      	ldr	r2, [r7, #8]
 80117c6:	8b52      	ldrh	r2, [r2, #26]
 80117c8:	9202      	str	r2, [sp, #8]
 80117ca:	2202      	movs	r2, #2
 80117cc:	9201      	str	r2, [sp, #4]
 80117ce:	9300      	str	r3, [sp, #0]
 80117d0:	4623      	mov	r3, r4
 80117d2:	4602      	mov	r2, r0
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f001 ff81 	bl	80136dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	2200      	movs	r2, #0
 80117de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	7b5b      	ldrb	r3, [r3, #13]
 80117e6:	2200      	movs	r2, #0
 80117e8:	4619      	mov	r1, r3
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f005 ff9a 	bl	8017724 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	7b1b      	ldrb	r3, [r3, #12]
 80117f4:	2200      	movs	r2, #0
 80117f6:	4619      	mov	r1, r3
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f005 ff93 	bl	8017724 <USBH_LL_SetToggle>

  return USBH_OK;
 80117fe:	2300      	movs	r3, #0
}
 8011800:	4618      	mov	r0, r3
 8011802:	3714      	adds	r7, #20
 8011804:	46bd      	mov	sp, r7
 8011806:	bd90      	pop	{r4, r7, pc}

08011808 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b084      	sub	sp, #16
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011816:	69db      	ldr	r3, [r3, #28]
 8011818:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d00e      	beq.n	8011840 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	4619      	mov	r1, r3
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f001 ff76 	bl	801371a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	4619      	mov	r1, r3
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f001 ffa1 	bl	801377c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2200      	movs	r2, #0
 801183e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	7b1b      	ldrb	r3, [r3, #12]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d00e      	beq.n	8011866 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	7b1b      	ldrb	r3, [r3, #12]
 801184c:	4619      	mov	r1, r3
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f001 ff63 	bl	801371a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	7b1b      	ldrb	r3, [r3, #12]
 8011858:	4619      	mov	r1, r3
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f001 ff8e 	bl	801377c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2200      	movs	r2, #0
 8011864:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	7b5b      	ldrb	r3, [r3, #13]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d00e      	beq.n	801188c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	7b5b      	ldrb	r3, [r3, #13]
 8011872:	4619      	mov	r1, r3
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f001 ff50 	bl	801371a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	7b5b      	ldrb	r3, [r3, #13]
 801187e:	4619      	mov	r1, r3
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f001 ff7b 	bl	801377c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	2200      	movs	r2, #0
 801188a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011892:	69db      	ldr	r3, [r3, #28]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d00b      	beq.n	80118b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801189e:	69db      	ldr	r3, [r3, #28]
 80118a0:	4618      	mov	r0, r3
 80118a2:	f005 fff7 	bl	8017894 <free>
    phost->pActiveClass->pData = 0U;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80118ac:	2200      	movs	r2, #0
 80118ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80118b0:	2300      	movs	r3, #0
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3710      	adds	r7, #16
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}

080118ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80118ba:	b580      	push	{r7, lr}
 80118bc:	b084      	sub	sp, #16
 80118be:	af00      	add	r7, sp, #0
 80118c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80118c8:	69db      	ldr	r3, [r3, #28]
 80118ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	3340      	adds	r3, #64	; 0x40
 80118d0:	4619      	mov	r1, r3
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f000 f8b1 	bl	8011a3a <GetLineCoding>
 80118d8:	4603      	mov	r3, r0
 80118da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80118dc:	7afb      	ldrb	r3, [r7, #11]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d105      	bne.n	80118ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80118e8:	2102      	movs	r1, #2
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80118ee:	7afb      	ldrb	r3, [r7, #11]
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3710      	adds	r7, #16
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8011900:	2301      	movs	r3, #1
 8011902:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8011904:	2300      	movs	r3, #0
 8011906:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801190e:	69db      	ldr	r3, [r3, #28]
 8011910:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011918:	2b04      	cmp	r3, #4
 801191a:	d877      	bhi.n	8011a0c <USBH_CDC_Process+0x114>
 801191c:	a201      	add	r2, pc, #4	; (adr r2, 8011924 <USBH_CDC_Process+0x2c>)
 801191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011922:	bf00      	nop
 8011924:	08011939 	.word	0x08011939
 8011928:	0801193f 	.word	0x0801193f
 801192c:	0801196f 	.word	0x0801196f
 8011930:	080119e3 	.word	0x080119e3
 8011934:	080119f1 	.word	0x080119f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8011938:	2300      	movs	r3, #0
 801193a:	73fb      	strb	r3, [r7, #15]
      break;
 801193c:	e06d      	b.n	8011a1a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011942:	4619      	mov	r1, r3
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 f897 	bl	8011a78 <SetLineCoding>
 801194a:	4603      	mov	r3, r0
 801194c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801194e:	7bbb      	ldrb	r3, [r7, #14]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d104      	bne.n	801195e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	2202      	movs	r2, #2
 8011958:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 801195c:	e058      	b.n	8011a10 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801195e:	7bbb      	ldrb	r3, [r7, #14]
 8011960:	2b01      	cmp	r3, #1
 8011962:	d055      	beq.n	8011a10 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	2204      	movs	r2, #4
 8011968:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 801196c:	e050      	b.n	8011a10 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	3340      	adds	r3, #64	; 0x40
 8011972:	4619      	mov	r1, r3
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 f860 	bl	8011a3a <GetLineCoding>
 801197a:	4603      	mov	r3, r0
 801197c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801197e:	7bbb      	ldrb	r3, [r7, #14]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d126      	bne.n	80119d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	2200      	movs	r2, #0
 8011988:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011996:	791b      	ldrb	r3, [r3, #4]
 8011998:	429a      	cmp	r2, r3
 801199a:	d13b      	bne.n	8011a14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80119a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d133      	bne.n	8011a14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80119b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d12b      	bne.n	8011a14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80119c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d124      	bne.n	8011a14 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80119ca:	6878      	ldr	r0, [r7, #4]
 80119cc:	f000 f984 	bl	8011cd8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80119d0:	e020      	b.n	8011a14 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80119d2:	7bbb      	ldrb	r3, [r7, #14]
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	d01d      	beq.n	8011a14 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	2204      	movs	r2, #4
 80119dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80119e0:	e018      	b.n	8011a14 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f000 f867 	bl	8011ab6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f000 f8f8 	bl	8011bde <CDC_ProcessReception>
      break;
 80119ee:	e014      	b.n	8011a1a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80119f0:	2100      	movs	r1, #0
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f001 f94f 	bl	8012c96 <USBH_ClrFeature>
 80119f8:	4603      	mov	r3, r0
 80119fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80119fc:	7bbb      	ldrb	r3, [r7, #14]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d10a      	bne.n	8011a18 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	2200      	movs	r2, #0
 8011a06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8011a0a:	e005      	b.n	8011a18 <USBH_CDC_Process+0x120>

    default:
      break;
 8011a0c:	bf00      	nop
 8011a0e:	e004      	b.n	8011a1a <USBH_CDC_Process+0x122>
      break;
 8011a10:	bf00      	nop
 8011a12:	e002      	b.n	8011a1a <USBH_CDC_Process+0x122>
      break;
 8011a14:	bf00      	nop
 8011a16:	e000      	b.n	8011a1a <USBH_CDC_Process+0x122>
      break;
 8011a18:	bf00      	nop

  }

  return status;
 8011a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3710      	adds	r7, #16
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}

08011a24 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b083      	sub	sp, #12
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	370c      	adds	r7, #12
 8011a32:	46bd      	mov	sp, r7
 8011a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a38:	4770      	bx	lr

08011a3a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8011a3a:	b580      	push	{r7, lr}
 8011a3c:	b082      	sub	sp, #8
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	6078      	str	r0, [r7, #4]
 8011a42:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	22a1      	movs	r2, #161	; 0xa1
 8011a48:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2221      	movs	r2, #33	; 0x21
 8011a4e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2200      	movs	r2, #0
 8011a54:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2200      	movs	r2, #0
 8011a5a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2207      	movs	r2, #7
 8011a60:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	2207      	movs	r2, #7
 8011a66:	4619      	mov	r1, r3
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f001 faf4 	bl	8013056 <USBH_CtlReq>
 8011a6e:	4603      	mov	r3, r0
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3708      	adds	r7, #8
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2221      	movs	r2, #33	; 0x21
 8011a86:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2220      	movs	r2, #32
 8011a8c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2200      	movs	r2, #0
 8011a92:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2200      	movs	r2, #0
 8011a98:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2207      	movs	r2, #7
 8011a9e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	2207      	movs	r2, #7
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f001 fad5 	bl	8013056 <USBH_CtlReq>
 8011aac:	4603      	mov	r3, r0
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3708      	adds	r7, #8
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}

08011ab6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8011ab6:	b580      	push	{r7, lr}
 8011ab8:	b086      	sub	sp, #24
 8011aba:	af02      	add	r7, sp, #8
 8011abc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011ac4:	69db      	ldr	r3, [r3, #28]
 8011ac6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011ad2:	2b01      	cmp	r3, #1
 8011ad4:	d002      	beq.n	8011adc <CDC_ProcessTransmission+0x26>
 8011ad6:	2b02      	cmp	r3, #2
 8011ad8:	d025      	beq.n	8011b26 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8011ada:	e07c      	b.n	8011bd6 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ae0:	68fa      	ldr	r2, [r7, #12]
 8011ae2:	8b12      	ldrh	r2, [r2, #24]
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d90c      	bls.n	8011b02 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	69d9      	ldr	r1, [r3, #28]
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	8b1a      	ldrh	r2, [r3, #24]
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	7b58      	ldrb	r0, [r3, #13]
 8011af4:	2301      	movs	r3, #1
 8011af6:	9300      	str	r3, [sp, #0]
 8011af8:	4603      	mov	r3, r0
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f001 fdab 	bl	8013656 <USBH_BulkSendData>
 8011b00:	e00c      	b.n	8011b1c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	7b58      	ldrb	r0, [r3, #13]
 8011b10:	2301      	movs	r3, #1
 8011b12:	9300      	str	r3, [sp, #0]
 8011b14:	4603      	mov	r3, r0
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f001 fd9d 	bl	8013656 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2202      	movs	r2, #2
 8011b20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8011b24:	e057      	b.n	8011bd6 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	7b5b      	ldrb	r3, [r3, #13]
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f005 fdcf 	bl	80176d0 <USBH_LL_GetURBState>
 8011b32:	4603      	mov	r3, r0
 8011b34:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8011b36:	7afb      	ldrb	r3, [r7, #11]
 8011b38:	2b01      	cmp	r3, #1
 8011b3a:	d136      	bne.n	8011baa <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b40:	68fa      	ldr	r2, [r7, #12]
 8011b42:	8b12      	ldrh	r2, [r2, #24]
 8011b44:	4293      	cmp	r3, r2
 8011b46:	d90e      	bls.n	8011b66 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b4c:	68fa      	ldr	r2, [r7, #12]
 8011b4e:	8b12      	ldrh	r2, [r2, #24]
 8011b50:	1a9a      	subs	r2, r3, r2
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	69db      	ldr	r3, [r3, #28]
 8011b5a:	68fa      	ldr	r2, [r7, #12]
 8011b5c:	8b12      	ldrh	r2, [r2, #24]
 8011b5e:	441a      	add	r2, r3
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	61da      	str	r2, [r3, #28]
 8011b64:	e002      	b.n	8011b6c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d004      	beq.n	8011b7e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	2201      	movs	r2, #1
 8011b78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011b7c:	e006      	b.n	8011b8c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	2200      	movs	r2, #0
 8011b82:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 f892 	bl	8011cb0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2204      	movs	r2, #4
 8011b90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	f002 f974 	bl	8013e90 <osMessageQueuePut>
      break;
 8011ba8:	e014      	b.n	8011bd4 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8011baa:	7afb      	ldrb	r3, [r7, #11]
 8011bac:	2b02      	cmp	r3, #2
 8011bae:	d111      	bne.n	8011bd4 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2201      	movs	r2, #1
 8011bb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2204      	movs	r2, #4
 8011bbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011bcc:	2300      	movs	r3, #0
 8011bce:	2200      	movs	r2, #0
 8011bd0:	f002 f95e 	bl	8013e90 <osMessageQueuePut>
      break;
 8011bd4:	bf00      	nop
  }
}
 8011bd6:	bf00      	nop
 8011bd8:	3710      	adds	r7, #16
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}

08011bde <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8011bde:	b580      	push	{r7, lr}
 8011be0:	b086      	sub	sp, #24
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8011bec:	69db      	ldr	r3, [r3, #28]
 8011bee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011bfa:	2b03      	cmp	r3, #3
 8011bfc:	d002      	beq.n	8011c04 <CDC_ProcessReception+0x26>
 8011bfe:	2b04      	cmp	r3, #4
 8011c00:	d00e      	beq.n	8011c20 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8011c02:	e051      	b.n	8011ca8 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	6a19      	ldr	r1, [r3, #32]
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	8b5a      	ldrh	r2, [r3, #26]
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	7b1b      	ldrb	r3, [r3, #12]
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f001 fd45 	bl	80136a0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	2204      	movs	r2, #4
 8011c1a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8011c1e:	e043      	b.n	8011ca8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	7b1b      	ldrb	r3, [r3, #12]
 8011c24:	4619      	mov	r1, r3
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f005 fd52 	bl	80176d0 <USBH_LL_GetURBState>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8011c30:	7cfb      	ldrb	r3, [r7, #19]
 8011c32:	2b01      	cmp	r3, #1
 8011c34:	d137      	bne.n	8011ca6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	7b1b      	ldrb	r3, [r3, #12]
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f005 fcb5 	bl	80175ac <USBH_LL_GetLastXferSize>
 8011c42:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c48:	68fa      	ldr	r2, [r7, #12]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d016      	beq.n	8011c7c <CDC_ProcessReception+0x9e>
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	8b5b      	ldrh	r3, [r3, #26]
 8011c52:	461a      	mov	r2, r3
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	4293      	cmp	r3, r2
 8011c58:	d910      	bls.n	8011c7c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	1ad2      	subs	r2, r2, r3
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	6a1a      	ldr	r2, [r3, #32]
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	441a      	add	r2, r3
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	2203      	movs	r2, #3
 8011c76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8011c7a:	e006      	b.n	8011c8a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f000 f81d 	bl	8011cc4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2204      	movs	r2, #4
 8011c8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	f002 f8f5 	bl	8013e90 <osMessageQueuePut>
      break;
 8011ca6:	bf00      	nop
  }
}
 8011ca8:	bf00      	nop
 8011caa:	3718      	adds	r7, #24
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8011cb0:	b480      	push	{r7}
 8011cb2:	b083      	sub	sp, #12
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8011cb8:	bf00      	nop
 8011cba:	370c      	adds	r7, #12
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8011ccc:	bf00      	nop
 8011cce:	370c      	adds	r7, #12
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr

08011cd8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8011ce0:	bf00      	nop
 8011ce2:	370c      	adds	r7, #12
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cea:	4770      	bx	lr

08011cec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b084      	sub	sp, #16
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d101      	bne.n	8011d04 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8011d00:	2302      	movs	r3, #2
 8011d02:	e044      	b.n	8011d8e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	79fa      	ldrb	r2, [r7, #7]
 8011d08:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	2200      	movs	r2, #0
 8011d18:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8011d1c:	68f8      	ldr	r0, [r7, #12]
 8011d1e:	f000 f841 	bl	8011da4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	2200      	movs	r2, #0
 8011d26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	2200      	movs	r2, #0
 8011d36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d003      	beq.n	8011d50 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	68ba      	ldr	r2, [r7, #8]
 8011d4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8011d50:	2200      	movs	r2, #0
 8011d52:	2104      	movs	r1, #4
 8011d54:	2010      	movs	r0, #16
 8011d56:	f002 f815 	bl	8013d84 <osMessageQueueNew>
 8011d5a:	4602      	mov	r2, r0
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8011d62:	4b0d      	ldr	r3, [pc, #52]	; (8011d98 <USBH_Init+0xac>)
 8011d64:	4a0d      	ldr	r2, [pc, #52]	; (8011d9c <USBH_Init+0xb0>)
 8011d66:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8011d68:	4b0b      	ldr	r3, [pc, #44]	; (8011d98 <USBH_Init+0xac>)
 8011d6a:	2280      	movs	r2, #128	; 0x80
 8011d6c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8011d6e:	4b0a      	ldr	r3, [pc, #40]	; (8011d98 <USBH_Init+0xac>)
 8011d70:	2218      	movs	r2, #24
 8011d72:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8011d74:	4a08      	ldr	r2, [pc, #32]	; (8011d98 <USBH_Init+0xac>)
 8011d76:	68f9      	ldr	r1, [r7, #12]
 8011d78:	4809      	ldr	r0, [pc, #36]	; (8011da0 <USBH_Init+0xb4>)
 8011d7a:	f001 fdb3 	bl	80138e4 <osThreadNew>
 8011d7e:	4602      	mov	r2, r0
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8011d86:	68f8      	ldr	r0, [r7, #12]
 8011d88:	f005 fb5e 	bl	8017448 <USBH_LL_Init>

  return USBH_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3710      	adds	r7, #16
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop
 8011d98:	2001ba20 	.word	0x2001ba20
 8011d9c:	08018614 	.word	0x08018614
 8011da0:	08012a0d 	.word	0x08012a0d

08011da4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8011da4:	b480      	push	{r7}
 8011da6:	b085      	sub	sp, #20
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8011dac:	2300      	movs	r3, #0
 8011dae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8011db0:	2300      	movs	r3, #0
 8011db2:	60fb      	str	r3, [r7, #12]
 8011db4:	e009      	b.n	8011dca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	33e0      	adds	r3, #224	; 0xe0
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	4413      	add	r3, r2
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	60fb      	str	r3, [r7, #12]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	2b0e      	cmp	r3, #14
 8011dce:	d9f2      	bls.n	8011db6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	60fb      	str	r3, [r7, #12]
 8011dd4:	e009      	b.n	8011dea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8011dd6:	687a      	ldr	r2, [r7, #4]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	4413      	add	r3, r2
 8011ddc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011de0:	2200      	movs	r2, #0
 8011de2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	3301      	adds	r3, #1
 8011de8:	60fb      	str	r3, [r7, #12]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011df0:	d3f1      	bcc.n	8011dd6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2200      	movs	r2, #0
 8011df6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2201      	movs	r2, #1
 8011e02:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2200      	movs	r2, #0
 8011e08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2201      	movs	r2, #1
 8011e10:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2240      	movs	r2, #64	; 0x40
 8011e16:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2200      	movs	r2, #0
 8011e22:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2201      	movs	r2, #1
 8011e2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	2200      	movs	r2, #0
 8011e32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2200      	movs	r2, #0
 8011e3a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8011e3e:	2300      	movs	r3, #0
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3714      	adds	r7, #20
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr

08011e4c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b085      	sub	sp, #20
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8011e56:	2300      	movs	r3, #0
 8011e58:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d016      	beq.n	8011e8e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d10e      	bne.n	8011e88 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8011e70:	1c59      	adds	r1, r3, #1
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8011e78:	687a      	ldr	r2, [r7, #4]
 8011e7a:	33de      	adds	r3, #222	; 0xde
 8011e7c:	6839      	ldr	r1, [r7, #0]
 8011e7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8011e82:	2300      	movs	r3, #0
 8011e84:	73fb      	strb	r3, [r7, #15]
 8011e86:	e004      	b.n	8011e92 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8011e88:	2302      	movs	r3, #2
 8011e8a:	73fb      	strb	r3, [r7, #15]
 8011e8c:	e001      	b.n	8011e92 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8011e8e:	2302      	movs	r3, #2
 8011e90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e94:	4618      	mov	r0, r3
 8011e96:	3714      	adds	r7, #20
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9e:	4770      	bx	lr

08011ea0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b085      	sub	sp, #20
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8011eac:	2300      	movs	r3, #0
 8011eae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8011eb6:	78fa      	ldrb	r2, [r7, #3]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d204      	bcs.n	8011ec6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	78fa      	ldrb	r2, [r7, #3]
 8011ec0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8011ec4:	e001      	b.n	8011eca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8011ec6:	2302      	movs	r3, #2
 8011ec8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3714      	adds	r7, #20
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr

08011ed8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b087      	sub	sp, #28
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	4608      	mov	r0, r1
 8011ee2:	4611      	mov	r1, r2
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	70fb      	strb	r3, [r7, #3]
 8011eea:	460b      	mov	r3, r1
 8011eec:	70bb      	strb	r3, [r7, #2]
 8011eee:	4613      	mov	r3, r2
 8011ef0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011f00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8011f02:	e025      	b.n	8011f50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8011f04:	7dfb      	ldrb	r3, [r7, #23]
 8011f06:	221a      	movs	r2, #26
 8011f08:	fb02 f303 	mul.w	r3, r2, r3
 8011f0c:	3308      	adds	r3, #8
 8011f0e:	68fa      	ldr	r2, [r7, #12]
 8011f10:	4413      	add	r3, r2
 8011f12:	3302      	adds	r3, #2
 8011f14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	795b      	ldrb	r3, [r3, #5]
 8011f1a:	78fa      	ldrb	r2, [r7, #3]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d002      	beq.n	8011f26 <USBH_FindInterface+0x4e>
 8011f20:	78fb      	ldrb	r3, [r7, #3]
 8011f22:	2bff      	cmp	r3, #255	; 0xff
 8011f24:	d111      	bne.n	8011f4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011f2a:	78ba      	ldrb	r2, [r7, #2]
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d002      	beq.n	8011f36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011f30:	78bb      	ldrb	r3, [r7, #2]
 8011f32:	2bff      	cmp	r3, #255	; 0xff
 8011f34:	d109      	bne.n	8011f4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011f3a:	787a      	ldrb	r2, [r7, #1]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d002      	beq.n	8011f46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011f40:	787b      	ldrb	r3, [r7, #1]
 8011f42:	2bff      	cmp	r3, #255	; 0xff
 8011f44:	d101      	bne.n	8011f4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8011f46:	7dfb      	ldrb	r3, [r7, #23]
 8011f48:	e006      	b.n	8011f58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8011f4a:	7dfb      	ldrb	r3, [r7, #23]
 8011f4c:	3301      	adds	r3, #1
 8011f4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8011f50:	7dfb      	ldrb	r3, [r7, #23]
 8011f52:	2b01      	cmp	r3, #1
 8011f54:	d9d6      	bls.n	8011f04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8011f56:	23ff      	movs	r3, #255	; 0xff
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	371c      	adds	r7, #28
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr

08011f64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f005 faa7 	bl	80174c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8011f72:	2101      	movs	r1, #1
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f005 fbbe 	bl	80176f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8011f7a:	2300      	movs	r3, #0
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}

08011f84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b088      	sub	sp, #32
 8011f88:	af04      	add	r7, sp, #16
 8011f8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8011f8c:	2302      	movs	r3, #2
 8011f8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8011f90:	2300      	movs	r3, #0
 8011f92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	2b01      	cmp	r3, #1
 8011f9e:	d102      	bne.n	8011fa6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2203      	movs	r2, #3
 8011fa4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	2b0b      	cmp	r3, #11
 8011fae:	f200 823c 	bhi.w	801242a <USBH_Process+0x4a6>
 8011fb2:	a201      	add	r2, pc, #4	; (adr r2, 8011fb8 <USBH_Process+0x34>)
 8011fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fb8:	08011fe9 	.word	0x08011fe9
 8011fbc:	08012037 	.word	0x08012037
 8011fc0:	080120bb 	.word	0x080120bb
 8011fc4:	080123a9 	.word	0x080123a9
 8011fc8:	0801242b 	.word	0x0801242b
 8011fcc:	0801217b 	.word	0x0801217b
 8011fd0:	08012333 	.word	0x08012333
 8011fd4:	080121cd 	.word	0x080121cd
 8011fd8:	08012209 	.word	0x08012209
 8011fdc:	08012243 	.word	0x08012243
 8011fe0:	0801228b 	.word	0x0801228b
 8011fe4:	08012391 	.word	0x08012391
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8011fee:	b2db      	uxtb	r3, r3
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	f000 821c 	beq.w	801242e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8011ffc:	20c8      	movs	r0, #200	; 0xc8
 8011ffe:	f005 fbc4 	bl	801778a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f005 fab7 	bl	8017576 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2200      	movs	r2, #0
 801200c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2200      	movs	r2, #0
 8012014:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2201      	movs	r2, #1
 801201c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801202c:	2300      	movs	r3, #0
 801202e:	2200      	movs	r2, #0
 8012030:	f001 ff2e 	bl	8013e90 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8012034:	e1fb      	b.n	801242e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 801203c:	2b01      	cmp	r3, #1
 801203e:	d107      	bne.n	8012050 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2200      	movs	r2, #0
 8012044:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2202      	movs	r2, #2
 801204c:	701a      	strb	r2, [r3, #0]
 801204e:	e025      	b.n	801209c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8012056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801205a:	d914      	bls.n	8012086 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8012062:	3301      	adds	r3, #1
 8012064:	b2da      	uxtb	r2, r3
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8012072:	2b03      	cmp	r3, #3
 8012074:	d903      	bls.n	801207e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	220d      	movs	r2, #13
 801207a:	701a      	strb	r2, [r3, #0]
 801207c:	e00e      	b.n	801209c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	701a      	strb	r2, [r3, #0]
 8012084:	e00a      	b.n	801209c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801208c:	f103 020a 	add.w	r2, r3, #10
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8012096:	200a      	movs	r0, #10
 8012098:	f005 fb77 	bl	801778a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2201      	movs	r2, #1
 80120a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80120b0:	2300      	movs	r3, #0
 80120b2:	2200      	movs	r2, #0
 80120b4:	f001 feec 	bl	8013e90 <osMessageQueuePut>
#endif
#endif
      break;
 80120b8:	e1c0      	b.n	801243c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d005      	beq.n	80120d0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80120ca:	2104      	movs	r1, #4
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80120d0:	2064      	movs	r0, #100	; 0x64
 80120d2:	f005 fb5a 	bl	801778a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f005 fa28 	bl	801752c <USBH_LL_GetSpeed>
 80120dc:	4603      	mov	r3, r0
 80120de:	461a      	mov	r2, r3
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2205      	movs	r2, #5
 80120ea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80120ec:	2100      	movs	r1, #0
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f001 fb23 	bl	801373a <USBH_AllocPipe>
 80120f4:	4603      	mov	r3, r0
 80120f6:	461a      	mov	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80120fc:	2180      	movs	r1, #128	; 0x80
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f001 fb1b 	bl	801373a <USBH_AllocPipe>
 8012104:	4603      	mov	r3, r0
 8012106:	461a      	mov	r2, r3
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	7919      	ldrb	r1, [r3, #4]
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801211c:	687a      	ldr	r2, [r7, #4]
 801211e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012120:	b292      	uxth	r2, r2
 8012122:	9202      	str	r2, [sp, #8]
 8012124:	2200      	movs	r2, #0
 8012126:	9201      	str	r2, [sp, #4]
 8012128:	9300      	str	r3, [sp, #0]
 801212a:	4603      	mov	r3, r0
 801212c:	2280      	movs	r2, #128	; 0x80
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f001 fad4 	bl	80136dc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	7959      	ldrb	r1, [r3, #5]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012144:	687a      	ldr	r2, [r7, #4]
 8012146:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012148:	b292      	uxth	r2, r2
 801214a:	9202      	str	r2, [sp, #8]
 801214c:	2200      	movs	r2, #0
 801214e:	9201      	str	r2, [sp, #4]
 8012150:	9300      	str	r3, [sp, #0]
 8012152:	4603      	mov	r3, r0
 8012154:	2200      	movs	r2, #0
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f001 fac0 	bl	80136dc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2201      	movs	r2, #1
 8012160:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012170:	2300      	movs	r3, #0
 8012172:	2200      	movs	r2, #0
 8012174:	f001 fe8c 	bl	8013e90 <osMessageQueuePut>
#endif
#endif
      break;
 8012178:	e160      	b.n	801243c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f000 f964 	bl	8012448 <USBH_HandleEnum>
 8012180:	4603      	mov	r3, r0
 8012182:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8012184:	7bbb      	ldrb	r3, [r7, #14]
 8012186:	b2db      	uxtb	r3, r3
 8012188:	2b00      	cmp	r3, #0
 801218a:	f040 8152 	bne.w	8012432 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2200      	movs	r2, #0
 8012192:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 801219c:	2b01      	cmp	r3, #1
 801219e:	d103      	bne.n	80121a8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2208      	movs	r2, #8
 80121a4:	701a      	strb	r2, [r3, #0]
 80121a6:	e002      	b.n	80121ae <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2207      	movs	r2, #7
 80121ac:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2205      	movs	r2, #5
 80121b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80121c2:	2300      	movs	r3, #0
 80121c4:	2200      	movs	r2, #0
 80121c6:	f001 fe63 	bl	8013e90 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80121ca:	e132      	b.n	8012432 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	f000 812f 	beq.w	8012436 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80121de:	2101      	movs	r1, #1
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2208      	movs	r2, #8
 80121e8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2205      	movs	r2, #5
 80121ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80121fe:	2300      	movs	r3, #0
 8012200:	2200      	movs	r2, #0
 8012202:	f001 fe45 	bl	8013e90 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8012206:	e116      	b.n	8012436 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 801220e:	b29b      	uxth	r3, r3
 8012210:	4619      	mov	r1, r3
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f000 fcf8 	bl	8012c08 <USBH_SetCfg>
 8012218:	4603      	mov	r3, r0
 801221a:	2b00      	cmp	r3, #0
 801221c:	d102      	bne.n	8012224 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2209      	movs	r2, #9
 8012222:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2201      	movs	r2, #1
 8012228:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012238:	2300      	movs	r3, #0
 801223a:	2200      	movs	r2, #0
 801223c:	f001 fe28 	bl	8013e90 <osMessageQueuePut>
#endif
#endif
      break;
 8012240:	e0fc      	b.n	801243c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8012248:	f003 0320 	and.w	r3, r3, #32
 801224c:	2b00      	cmp	r3, #0
 801224e:	d00a      	beq.n	8012266 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8012250:	2101      	movs	r1, #1
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f000 fcfb 	bl	8012c4e <USBH_SetFeature>
 8012258:	4603      	mov	r3, r0
 801225a:	2b00      	cmp	r3, #0
 801225c:	d106      	bne.n	801226c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	220a      	movs	r2, #10
 8012262:	701a      	strb	r2, [r3, #0]
 8012264:	e002      	b.n	801226c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	220a      	movs	r2, #10
 801226a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2201      	movs	r2, #1
 8012270:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012280:	2300      	movs	r3, #0
 8012282:	2200      	movs	r2, #0
 8012284:	f001 fe04 	bl	8013e90 <osMessageQueuePut>
#endif
#endif
      break;
 8012288:	e0d8      	b.n	801243c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8012290:	2b00      	cmp	r3, #0
 8012292:	d03f      	beq.n	8012314 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2200      	movs	r2, #0
 8012298:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801229c:	2300      	movs	r3, #0
 801229e:	73fb      	strb	r3, [r7, #15]
 80122a0:	e016      	b.n	80122d0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80122a2:	7bfa      	ldrb	r2, [r7, #15]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	32de      	adds	r2, #222	; 0xde
 80122a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122ac:	791a      	ldrb	r2, [r3, #4]
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d108      	bne.n	80122ca <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80122b8:	7bfa      	ldrb	r2, [r7, #15]
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	32de      	adds	r2, #222	; 0xde
 80122be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80122c8:	e005      	b.n	80122d6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80122ca:	7bfb      	ldrb	r3, [r7, #15]
 80122cc:	3301      	adds	r3, #1
 80122ce:	73fb      	strb	r3, [r7, #15]
 80122d0:	7bfb      	ldrb	r3, [r7, #15]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d0e5      	beq.n	80122a2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d016      	beq.n	801230e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80122e6:	689b      	ldr	r3, [r3, #8]
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	4798      	blx	r3
 80122ec:	4603      	mov	r3, r0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d109      	bne.n	8012306 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2206      	movs	r2, #6
 80122f6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80122fe:	2103      	movs	r1, #3
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	4798      	blx	r3
 8012304:	e006      	b.n	8012314 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	220d      	movs	r2, #13
 801230a:	701a      	strb	r2, [r3, #0]
 801230c:	e002      	b.n	8012314 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	220d      	movs	r2, #13
 8012312:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2205      	movs	r2, #5
 8012318:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012328:	2300      	movs	r3, #0
 801232a:	2200      	movs	r2, #0
 801232c:	f001 fdb0 	bl	8013e90 <osMessageQueuePut>
#endif
#endif
      break;
 8012330:	e084      	b.n	801243c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012338:	2b00      	cmp	r3, #0
 801233a:	d017      	beq.n	801236c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012342:	691b      	ldr	r3, [r3, #16]
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	4798      	blx	r3
 8012348:	4603      	mov	r3, r0
 801234a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801234c:	7bbb      	ldrb	r3, [r7, #14]
 801234e:	b2db      	uxtb	r3, r3
 8012350:	2b00      	cmp	r3, #0
 8012352:	d103      	bne.n	801235c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	220b      	movs	r2, #11
 8012358:	701a      	strb	r2, [r3, #0]
 801235a:	e00a      	b.n	8012372 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 801235c:	7bbb      	ldrb	r3, [r7, #14]
 801235e:	b2db      	uxtb	r3, r3
 8012360:	2b02      	cmp	r3, #2
 8012362:	d106      	bne.n	8012372 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	220d      	movs	r2, #13
 8012368:	701a      	strb	r2, [r3, #0]
 801236a:	e002      	b.n	8012372 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	220d      	movs	r2, #13
 8012370:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2205      	movs	r2, #5
 8012376:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012386:	2300      	movs	r3, #0
 8012388:	2200      	movs	r2, #0
 801238a:	f001 fd81 	bl	8013e90 <osMessageQueuePut>
#endif
#endif
      break;
 801238e:	e055      	b.n	801243c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012396:	2b00      	cmp	r3, #0
 8012398:	d04f      	beq.n	801243a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80123a0:	695b      	ldr	r3, [r3, #20]
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	4798      	blx	r3
      }
      break;
 80123a6:	e048      	b.n	801243a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2200      	movs	r2, #0
 80123ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f7ff fcf7 	bl	8011da4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d009      	beq.n	80123d4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80123c6:	68db      	ldr	r3, [r3, #12]
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2200      	movs	r2, #0
 80123d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d005      	beq.n	80123ea <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80123e4:	2105      	movs	r1, #5
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80123f0:	b2db      	uxtb	r3, r3
 80123f2:	2b01      	cmp	r3, #1
 80123f4:	d107      	bne.n	8012406 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2200      	movs	r2, #0
 80123fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f7ff fdb0 	bl	8011f64 <USBH_Start>
 8012404:	e002      	b.n	801240c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f005 f85a 	bl	80174c0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2201      	movs	r2, #1
 8012410:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012420:	2300      	movs	r3, #0
 8012422:	2200      	movs	r2, #0
 8012424:	f001 fd34 	bl	8013e90 <osMessageQueuePut>
#endif
#endif
      break;
 8012428:	e008      	b.n	801243c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 801242a:	bf00      	nop
 801242c:	e006      	b.n	801243c <USBH_Process+0x4b8>
      break;
 801242e:	bf00      	nop
 8012430:	e004      	b.n	801243c <USBH_Process+0x4b8>
      break;
 8012432:	bf00      	nop
 8012434:	e002      	b.n	801243c <USBH_Process+0x4b8>
    break;
 8012436:	bf00      	nop
 8012438:	e000      	b.n	801243c <USBH_Process+0x4b8>
      break;
 801243a:	bf00      	nop
  }
  return USBH_OK;
 801243c:	2300      	movs	r3, #0
}
 801243e:	4618      	mov	r0, r3
 8012440:	3710      	adds	r7, #16
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
 8012446:	bf00      	nop

08012448 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b088      	sub	sp, #32
 801244c:	af04      	add	r7, sp, #16
 801244e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8012450:	2301      	movs	r3, #1
 8012452:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8012454:	2301      	movs	r3, #1
 8012456:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	785b      	ldrb	r3, [r3, #1]
 801245c:	2b07      	cmp	r3, #7
 801245e:	f200 8208 	bhi.w	8012872 <USBH_HandleEnum+0x42a>
 8012462:	a201      	add	r2, pc, #4	; (adr r2, 8012468 <USBH_HandleEnum+0x20>)
 8012464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012468:	08012489 	.word	0x08012489
 801246c:	08012547 	.word	0x08012547
 8012470:	080125b1 	.word	0x080125b1
 8012474:	0801263f 	.word	0x0801263f
 8012478:	080126a9 	.word	0x080126a9
 801247c:	08012719 	.word	0x08012719
 8012480:	080127b5 	.word	0x080127b5
 8012484:	08012833 	.word	0x08012833
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8012488:	2108      	movs	r1, #8
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f000 faec 	bl	8012a68 <USBH_Get_DevDesc>
 8012490:	4603      	mov	r3, r0
 8012492:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012494:	7bbb      	ldrb	r3, [r7, #14]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d130      	bne.n	80124fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2201      	movs	r2, #1
 80124a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	7919      	ldrb	r1, [r3, #4]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80124be:	b292      	uxth	r2, r2
 80124c0:	9202      	str	r2, [sp, #8]
 80124c2:	2200      	movs	r2, #0
 80124c4:	9201      	str	r2, [sp, #4]
 80124c6:	9300      	str	r3, [sp, #0]
 80124c8:	4603      	mov	r3, r0
 80124ca:	2280      	movs	r2, #128	; 0x80
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f001 f905 	bl	80136dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	7959      	ldrb	r1, [r3, #5]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80124e2:	687a      	ldr	r2, [r7, #4]
 80124e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80124e6:	b292      	uxth	r2, r2
 80124e8:	9202      	str	r2, [sp, #8]
 80124ea:	2200      	movs	r2, #0
 80124ec:	9201      	str	r2, [sp, #4]
 80124ee:	9300      	str	r3, [sp, #0]
 80124f0:	4603      	mov	r3, r0
 80124f2:	2200      	movs	r2, #0
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f001 f8f1 	bl	80136dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80124fa:	e1bc      	b.n	8012876 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80124fc:	7bbb      	ldrb	r3, [r7, #14]
 80124fe:	2b03      	cmp	r3, #3
 8012500:	f040 81b9 	bne.w	8012876 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801250a:	3301      	adds	r3, #1
 801250c:	b2da      	uxtb	r2, r3
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801251a:	2b03      	cmp	r3, #3
 801251c:	d903      	bls.n	8012526 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	220d      	movs	r2, #13
 8012522:	701a      	strb	r2, [r3, #0]
      break;
 8012524:	e1a7      	b.n	8012876 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	795b      	ldrb	r3, [r3, #5]
 801252a:	4619      	mov	r1, r3
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f001 f925 	bl	801377c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	791b      	ldrb	r3, [r3, #4]
 8012536:	4619      	mov	r1, r3
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f001 f91f 	bl	801377c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2200      	movs	r2, #0
 8012542:	701a      	strb	r2, [r3, #0]
      break;
 8012544:	e197      	b.n	8012876 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8012546:	2112      	movs	r1, #18
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f000 fa8d 	bl	8012a68 <USBH_Get_DevDesc>
 801254e:	4603      	mov	r3, r0
 8012550:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012552:	7bbb      	ldrb	r3, [r7, #14]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d103      	bne.n	8012560 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2202      	movs	r2, #2
 801255c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801255e:	e18c      	b.n	801287a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012560:	7bbb      	ldrb	r3, [r7, #14]
 8012562:	2b03      	cmp	r3, #3
 8012564:	f040 8189 	bne.w	801287a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801256e:	3301      	adds	r3, #1
 8012570:	b2da      	uxtb	r2, r3
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801257e:	2b03      	cmp	r3, #3
 8012580:	d903      	bls.n	801258a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	220d      	movs	r2, #13
 8012586:	701a      	strb	r2, [r3, #0]
      break;
 8012588:	e177      	b.n	801287a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	795b      	ldrb	r3, [r3, #5]
 801258e:	4619      	mov	r1, r3
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f001 f8f3 	bl	801377c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	791b      	ldrb	r3, [r3, #4]
 801259a:	4619      	mov	r1, r3
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f001 f8ed 	bl	801377c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2200      	movs	r2, #0
 80125a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2200      	movs	r2, #0
 80125ac:	701a      	strb	r2, [r3, #0]
      break;
 80125ae:	e164      	b.n	801287a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80125b0:	2101      	movs	r1, #1
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f000 fb04 	bl	8012bc0 <USBH_SetAddress>
 80125b8:	4603      	mov	r3, r0
 80125ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80125bc:	7bbb      	ldrb	r3, [r7, #14]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d132      	bne.n	8012628 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80125c2:	2002      	movs	r0, #2
 80125c4:	f005 f8e1 	bl	801778a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2201      	movs	r2, #1
 80125cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2203      	movs	r2, #3
 80125d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	7919      	ldrb	r1, [r3, #4]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80125ea:	b292      	uxth	r2, r2
 80125ec:	9202      	str	r2, [sp, #8]
 80125ee:	2200      	movs	r2, #0
 80125f0:	9201      	str	r2, [sp, #4]
 80125f2:	9300      	str	r3, [sp, #0]
 80125f4:	4603      	mov	r3, r0
 80125f6:	2280      	movs	r2, #128	; 0x80
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f001 f86f 	bl	80136dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	7959      	ldrb	r1, [r3, #5]
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 801260e:	687a      	ldr	r2, [r7, #4]
 8012610:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012612:	b292      	uxth	r2, r2
 8012614:	9202      	str	r2, [sp, #8]
 8012616:	2200      	movs	r2, #0
 8012618:	9201      	str	r2, [sp, #4]
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	4603      	mov	r3, r0
 801261e:	2200      	movs	r2, #0
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f001 f85b 	bl	80136dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012626:	e12a      	b.n	801287e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012628:	7bbb      	ldrb	r3, [r7, #14]
 801262a:	2b03      	cmp	r3, #3
 801262c:	f040 8127 	bne.w	801287e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	220d      	movs	r2, #13
 8012634:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2200      	movs	r2, #0
 801263a:	705a      	strb	r2, [r3, #1]
      break;
 801263c:	e11f      	b.n	801287e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801263e:	2109      	movs	r1, #9
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f000 fa39 	bl	8012ab8 <USBH_Get_CfgDesc>
 8012646:	4603      	mov	r3, r0
 8012648:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801264a:	7bbb      	ldrb	r3, [r7, #14]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d103      	bne.n	8012658 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2204      	movs	r2, #4
 8012654:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012656:	e114      	b.n	8012882 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012658:	7bbb      	ldrb	r3, [r7, #14]
 801265a:	2b03      	cmp	r3, #3
 801265c:	f040 8111 	bne.w	8012882 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8012666:	3301      	adds	r3, #1
 8012668:	b2da      	uxtb	r2, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8012676:	2b03      	cmp	r3, #3
 8012678:	d903      	bls.n	8012682 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	220d      	movs	r2, #13
 801267e:	701a      	strb	r2, [r3, #0]
      break;
 8012680:	e0ff      	b.n	8012882 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	795b      	ldrb	r3, [r3, #5]
 8012686:	4619      	mov	r1, r3
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f001 f877 	bl	801377c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	791b      	ldrb	r3, [r3, #4]
 8012692:	4619      	mov	r1, r3
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f001 f871 	bl	801377c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2200      	movs	r2, #0
 801269e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2200      	movs	r2, #0
 80126a4:	701a      	strb	r2, [r3, #0]
      break;
 80126a6:	e0ec      	b.n	8012882 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80126ae:	4619      	mov	r1, r3
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f000 fa01 	bl	8012ab8 <USBH_Get_CfgDesc>
 80126b6:	4603      	mov	r3, r0
 80126b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80126ba:	7bbb      	ldrb	r3, [r7, #14]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d103      	bne.n	80126c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2205      	movs	r2, #5
 80126c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80126c6:	e0de      	b.n	8012886 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80126c8:	7bbb      	ldrb	r3, [r7, #14]
 80126ca:	2b03      	cmp	r3, #3
 80126cc:	f040 80db 	bne.w	8012886 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80126d6:	3301      	adds	r3, #1
 80126d8:	b2da      	uxtb	r2, r3
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80126e6:	2b03      	cmp	r3, #3
 80126e8:	d903      	bls.n	80126f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	220d      	movs	r2, #13
 80126ee:	701a      	strb	r2, [r3, #0]
      break;
 80126f0:	e0c9      	b.n	8012886 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	795b      	ldrb	r3, [r3, #5]
 80126f6:	4619      	mov	r1, r3
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f001 f83f 	bl	801377c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	791b      	ldrb	r3, [r3, #4]
 8012702:	4619      	mov	r1, r3
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f001 f839 	bl	801377c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2200      	movs	r2, #0
 801270e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2200      	movs	r2, #0
 8012714:	701a      	strb	r2, [r3, #0]
      break;
 8012716:	e0b6      	b.n	8012886 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 801271e:	2b00      	cmp	r3, #0
 8012720:	d036      	beq.n	8012790 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801272e:	23ff      	movs	r3, #255	; 0xff
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f000 f9e5 	bl	8012b00 <USBH_Get_StringDesc>
 8012736:	4603      	mov	r3, r0
 8012738:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801273a:	7bbb      	ldrb	r3, [r7, #14]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d111      	bne.n	8012764 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2206      	movs	r2, #6
 8012744:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2205      	movs	r2, #5
 801274a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801275a:	2300      	movs	r3, #0
 801275c:	2200      	movs	r2, #0
 801275e:	f001 fb97 	bl	8013e90 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8012762:	e092      	b.n	801288a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012764:	7bbb      	ldrb	r3, [r7, #14]
 8012766:	2b03      	cmp	r3, #3
 8012768:	f040 808f 	bne.w	801288a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2206      	movs	r2, #6
 8012770:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2205      	movs	r2, #5
 8012776:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012786:	2300      	movs	r3, #0
 8012788:	2200      	movs	r2, #0
 801278a:	f001 fb81 	bl	8013e90 <osMessageQueuePut>
      break;
 801278e:	e07c      	b.n	801288a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2206      	movs	r2, #6
 8012794:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2205      	movs	r2, #5
 801279a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80127aa:	2300      	movs	r3, #0
 80127ac:	2200      	movs	r2, #0
 80127ae:	f001 fb6f 	bl	8013e90 <osMessageQueuePut>
      break;
 80127b2:	e06a      	b.n	801288a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d027      	beq.n	801280e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80127ca:	23ff      	movs	r3, #255	; 0xff
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f000 f997 	bl	8012b00 <USBH_Get_StringDesc>
 80127d2:	4603      	mov	r3, r0
 80127d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80127d6:	7bbb      	ldrb	r3, [r7, #14]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d103      	bne.n	80127e4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2207      	movs	r2, #7
 80127e0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80127e2:	e054      	b.n	801288e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80127e4:	7bbb      	ldrb	r3, [r7, #14]
 80127e6:	2b03      	cmp	r3, #3
 80127e8:	d151      	bne.n	801288e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	2207      	movs	r2, #7
 80127ee:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2205      	movs	r2, #5
 80127f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012804:	2300      	movs	r3, #0
 8012806:	2200      	movs	r2, #0
 8012808:	f001 fb42 	bl	8013e90 <osMessageQueuePut>
      break;
 801280c:	e03f      	b.n	801288e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2207      	movs	r2, #7
 8012812:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2205      	movs	r2, #5
 8012818:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012828:	2300      	movs	r3, #0
 801282a:	2200      	movs	r2, #0
 801282c:	f001 fb30 	bl	8013e90 <osMessageQueuePut>
      break;
 8012830:	e02d      	b.n	801288e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8012838:	2b00      	cmp	r3, #0
 801283a:	d017      	beq.n	801286c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8012848:	23ff      	movs	r3, #255	; 0xff
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f000 f958 	bl	8012b00 <USBH_Get_StringDesc>
 8012850:	4603      	mov	r3, r0
 8012852:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8012854:	7bbb      	ldrb	r3, [r7, #14]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d102      	bne.n	8012860 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801285a:	2300      	movs	r3, #0
 801285c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801285e:	e018      	b.n	8012892 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012860:	7bbb      	ldrb	r3, [r7, #14]
 8012862:	2b03      	cmp	r3, #3
 8012864:	d115      	bne.n	8012892 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8012866:	2300      	movs	r3, #0
 8012868:	73fb      	strb	r3, [r7, #15]
      break;
 801286a:	e012      	b.n	8012892 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 801286c:	2300      	movs	r3, #0
 801286e:	73fb      	strb	r3, [r7, #15]
      break;
 8012870:	e00f      	b.n	8012892 <USBH_HandleEnum+0x44a>

    default:
      break;
 8012872:	bf00      	nop
 8012874:	e00e      	b.n	8012894 <USBH_HandleEnum+0x44c>
      break;
 8012876:	bf00      	nop
 8012878:	e00c      	b.n	8012894 <USBH_HandleEnum+0x44c>
      break;
 801287a:	bf00      	nop
 801287c:	e00a      	b.n	8012894 <USBH_HandleEnum+0x44c>
      break;
 801287e:	bf00      	nop
 8012880:	e008      	b.n	8012894 <USBH_HandleEnum+0x44c>
      break;
 8012882:	bf00      	nop
 8012884:	e006      	b.n	8012894 <USBH_HandleEnum+0x44c>
      break;
 8012886:	bf00      	nop
 8012888:	e004      	b.n	8012894 <USBH_HandleEnum+0x44c>
      break;
 801288a:	bf00      	nop
 801288c:	e002      	b.n	8012894 <USBH_HandleEnum+0x44c>
      break;
 801288e:	bf00      	nop
 8012890:	e000      	b.n	8012894 <USBH_HandleEnum+0x44c>
      break;
 8012892:	bf00      	nop
  }
  return Status;
 8012894:	7bfb      	ldrb	r3, [r7, #15]
}
 8012896:	4618      	mov	r0, r3
 8012898:	3710      	adds	r7, #16
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop

080128a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b083      	sub	sp, #12
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	683a      	ldr	r2, [r7, #0]
 80128ae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80128b2:	bf00      	nop
 80128b4:	370c      	adds	r7, #12
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr

080128be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80128be:	b580      	push	{r7, lr}
 80128c0:	b082      	sub	sp, #8
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80128cc:	1c5a      	adds	r2, r3, #1
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 f804 	bl	80128e2 <USBH_HandleSof>
}
 80128da:	bf00      	nop
 80128dc:	3708      	adds	r7, #8
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}

080128e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80128e2:	b580      	push	{r7, lr}
 80128e4:	b082      	sub	sp, #8
 80128e6:	af00      	add	r7, sp, #0
 80128e8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	b2db      	uxtb	r3, r3
 80128f0:	2b0b      	cmp	r3, #11
 80128f2:	d10a      	bne.n	801290a <USBH_HandleSof+0x28>
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d005      	beq.n	801290a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012904:	699b      	ldr	r3, [r3, #24]
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	4798      	blx	r3
  }
}
 801290a:	bf00      	nop
 801290c:	3708      	adds	r7, #8
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}

08012912 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012912:	b580      	push	{r7, lr}
 8012914:	b082      	sub	sp, #8
 8012916:	af00      	add	r7, sp, #0
 8012918:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2201      	movs	r2, #1
 801291e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2201      	movs	r2, #1
 8012926:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012936:	2300      	movs	r3, #0
 8012938:	2200      	movs	r2, #0
 801293a:	f001 faa9 	bl	8013e90 <osMessageQueuePut>
#endif
#endif

  return;
 801293e:	bf00      	nop
}
 8012940:	3708      	adds	r7, #8
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}

08012946 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8012946:	b480      	push	{r7}
 8012948:	b083      	sub	sp, #12
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2200      	movs	r2, #0
 8012952:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8012956:	bf00      	nop
}
 8012958:	370c      	adds	r7, #12
 801295a:	46bd      	mov	sp, r7
 801295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012960:	4770      	bx	lr

08012962 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8012962:	b580      	push	{r7, lr}
 8012964:	b082      	sub	sp, #8
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2201      	movs	r2, #1
 801296e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2200      	movs	r2, #0
 8012976:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2200      	movs	r2, #0
 801297e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2201      	movs	r2, #1
 8012986:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012996:	2300      	movs	r3, #0
 8012998:	2200      	movs	r2, #0
 801299a:	f001 fa79 	bl	8013e90 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 801299e:	2300      	movs	r3, #0
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3708      	adds	r7, #8
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2201      	movs	r2, #1
 80129b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2200      	movs	r2, #0
 80129bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2200      	movs	r2, #0
 80129c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f004 fd94 	bl	80174f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	791b      	ldrb	r3, [r3, #4]
 80129d2:	4619      	mov	r1, r3
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f000 fed1 	bl	801377c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	795b      	ldrb	r3, [r3, #5]
 80129de:	4619      	mov	r1, r3
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f000 fecb 	bl	801377c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2201      	movs	r2, #1
 80129ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80129fa:	2300      	movs	r3, #0
 80129fc:	2200      	movs	r2, #0
 80129fe:	f001 fa47 	bl	8013e90 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8012a02:	2300      	movs	r3, #0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8012a20:	f04f 33ff 	mov.w	r3, #4294967295
 8012a24:	2200      	movs	r2, #0
 8012a26:	f001 faa7 	bl	8013f78 <osMessageQueueGet>
 8012a2a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d1f0      	bne.n	8012a14 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f7ff faa6 	bl	8011f84 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8012a38:	e7ec      	b.n	8012a14 <USBH_Process_OS+0x8>

08012a3a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8012a3a:	b580      	push	{r7, lr}
 8012a3c:	b082      	sub	sp, #8
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	2201      	movs	r2, #1
 8012a46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8012a56:	2300      	movs	r3, #0
 8012a58:	2200      	movs	r2, #0
 8012a5a:	f001 fa19 	bl	8013e90 <osMessageQueuePut>
#endif

  return USBH_OK;
 8012a5e:	2300      	movs	r3, #0
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	3708      	adds	r7, #8
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b086      	sub	sp, #24
 8012a6c:	af02      	add	r7, sp, #8
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	460b      	mov	r3, r1
 8012a72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8012a7a:	78fb      	ldrb	r3, [r7, #3]
 8012a7c:	b29b      	uxth	r3, r3
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	4613      	mov	r3, r2
 8012a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012a86:	2100      	movs	r1, #0
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f000 f864 	bl	8012b56 <USBH_GetDescriptor>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	73fb      	strb	r3, [r7, #15]
 8012a92:	7bfb      	ldrb	r3, [r7, #15]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d10a      	bne.n	8012aae <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012aa4:	78fa      	ldrb	r2, [r7, #3]
 8012aa6:	b292      	uxth	r2, r2
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	f000 f918 	bl	8012cde <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8012aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3710      	adds	r7, #16
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b086      	sub	sp, #24
 8012abc:	af02      	add	r7, sp, #8
 8012abe:	6078      	str	r0, [r7, #4]
 8012ac0:	460b      	mov	r3, r1
 8012ac2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	331c      	adds	r3, #28
 8012ac8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8012aca:	887b      	ldrh	r3, [r7, #2]
 8012acc:	9300      	str	r3, [sp, #0]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ad4:	2100      	movs	r1, #0
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f000 f83d 	bl	8012b56 <USBH_GetDescriptor>
 8012adc:	4603      	mov	r3, r0
 8012ade:	72fb      	strb	r3, [r7, #11]
 8012ae0:	7afb      	ldrb	r3, [r7, #11]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d107      	bne.n	8012af6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8012aec:	887a      	ldrh	r2, [r7, #2]
 8012aee:	68f9      	ldr	r1, [r7, #12]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f000 f964 	bl	8012dbe <USBH_ParseCfgDesc>
  }

  return status;
 8012af6:	7afb      	ldrb	r3, [r7, #11]
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	3710      	adds	r7, #16
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b088      	sub	sp, #32
 8012b04:	af02      	add	r7, sp, #8
 8012b06:	60f8      	str	r0, [r7, #12]
 8012b08:	607a      	str	r2, [r7, #4]
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	72fb      	strb	r3, [r7, #11]
 8012b10:	4613      	mov	r3, r2
 8012b12:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8012b14:	7afb      	ldrb	r3, [r7, #11]
 8012b16:	b29b      	uxth	r3, r3
 8012b18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8012b1c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8012b24:	893b      	ldrh	r3, [r7, #8]
 8012b26:	9300      	str	r3, [sp, #0]
 8012b28:	460b      	mov	r3, r1
 8012b2a:	2100      	movs	r1, #0
 8012b2c:	68f8      	ldr	r0, [r7, #12]
 8012b2e:	f000 f812 	bl	8012b56 <USBH_GetDescriptor>
 8012b32:	4603      	mov	r3, r0
 8012b34:	75fb      	strb	r3, [r7, #23]
 8012b36:	7dfb      	ldrb	r3, [r7, #23]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d107      	bne.n	8012b4c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012b42:	893a      	ldrh	r2, [r7, #8]
 8012b44:	6879      	ldr	r1, [r7, #4]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f000 fa37 	bl	8012fba <USBH_ParseStringDesc>
  }

  return status;
 8012b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3718      	adds	r7, #24
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}

08012b56 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8012b56:	b580      	push	{r7, lr}
 8012b58:	b084      	sub	sp, #16
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	60f8      	str	r0, [r7, #12]
 8012b5e:	607b      	str	r3, [r7, #4]
 8012b60:	460b      	mov	r3, r1
 8012b62:	72fb      	strb	r3, [r7, #11]
 8012b64:	4613      	mov	r3, r2
 8012b66:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	789b      	ldrb	r3, [r3, #2]
 8012b6c:	2b01      	cmp	r3, #1
 8012b6e:	d11c      	bne.n	8012baa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8012b70:	7afb      	ldrb	r3, [r7, #11]
 8012b72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012b76:	b2da      	uxtb	r2, r3
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	2206      	movs	r2, #6
 8012b80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	893a      	ldrh	r2, [r7, #8]
 8012b86:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8012b88:	893b      	ldrh	r3, [r7, #8]
 8012b8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012b92:	d104      	bne.n	8012b9e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	f240 4209 	movw	r2, #1033	; 0x409
 8012b9a:	829a      	strh	r2, [r3, #20]
 8012b9c:	e002      	b.n	8012ba4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	8b3a      	ldrh	r2, [r7, #24]
 8012ba8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8012baa:	8b3b      	ldrh	r3, [r7, #24]
 8012bac:	461a      	mov	r2, r3
 8012bae:	6879      	ldr	r1, [r7, #4]
 8012bb0:	68f8      	ldr	r0, [r7, #12]
 8012bb2:	f000 fa50 	bl	8013056 <USBH_CtlReq>
 8012bb6:	4603      	mov	r3, r0
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3710      	adds	r7, #16
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}

08012bc0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	460b      	mov	r3, r1
 8012bca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	789b      	ldrb	r3, [r3, #2]
 8012bd0:	2b01      	cmp	r3, #1
 8012bd2:	d10f      	bne.n	8012bf4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2205      	movs	r2, #5
 8012bde:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8012be0:	78fb      	ldrb	r3, [r7, #3]
 8012be2:	b29a      	uxth	r2, r3
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2200      	movs	r2, #0
 8012bec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	2100      	movs	r1, #0
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f000 fa2c 	bl	8013056 <USBH_CtlReq>
 8012bfe:	4603      	mov	r3, r0
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3708      	adds	r7, #8
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	460b      	mov	r3, r1
 8012c12:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	789b      	ldrb	r3, [r3, #2]
 8012c18:	2b01      	cmp	r3, #1
 8012c1a:	d10e      	bne.n	8012c3a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2209      	movs	r2, #9
 8012c26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	887a      	ldrh	r2, [r7, #2]
 8012c2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2200      	movs	r2, #0
 8012c32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	2100      	movs	r1, #0
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f000 fa09 	bl	8013056 <USBH_CtlReq>
 8012c44:	4603      	mov	r3, r0
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3708      	adds	r7, #8
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}

08012c4e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8012c4e:	b580      	push	{r7, lr}
 8012c50:	b082      	sub	sp, #8
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
 8012c56:	460b      	mov	r3, r1
 8012c58:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	789b      	ldrb	r3, [r3, #2]
 8012c5e:	2b01      	cmp	r3, #1
 8012c60:	d10f      	bne.n	8012c82 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2200      	movs	r2, #0
 8012c66:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2203      	movs	r2, #3
 8012c6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8012c6e:	78fb      	ldrb	r3, [r7, #3]
 8012c70:	b29a      	uxth	r2, r3
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2200      	movs	r2, #0
 8012c80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8012c82:	2200      	movs	r2, #0
 8012c84:	2100      	movs	r1, #0
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f000 f9e5 	bl	8013056 <USBH_CtlReq>
 8012c8c:	4603      	mov	r3, r0
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3708      	adds	r7, #8
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}

08012c96 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8012c96:	b580      	push	{r7, lr}
 8012c98:	b082      	sub	sp, #8
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
 8012c9e:	460b      	mov	r3, r1
 8012ca0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	789b      	ldrb	r3, [r3, #2]
 8012ca6:	2b01      	cmp	r3, #1
 8012ca8:	d10f      	bne.n	8012cca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2202      	movs	r2, #2
 8012cae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2201      	movs	r2, #1
 8012cb4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8012cbc:	78fb      	ldrb	r3, [r7, #3]
 8012cbe:	b29a      	uxth	r2, r3
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8012cca:	2200      	movs	r2, #0
 8012ccc:	2100      	movs	r1, #0
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f000 f9c1 	bl	8013056 <USBH_CtlReq>
 8012cd4:	4603      	mov	r3, r0
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3708      	adds	r7, #8
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}

08012cde <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8012cde:	b480      	push	{r7}
 8012ce0:	b085      	sub	sp, #20
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	60f8      	str	r0, [r7, #12]
 8012ce6:	60b9      	str	r1, [r7, #8]
 8012ce8:	4613      	mov	r3, r2
 8012cea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	781a      	ldrb	r2, [r3, #0]
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	785a      	ldrb	r2, [r3, #1]
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	3302      	adds	r3, #2
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	b29a      	uxth	r2, r3
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	3303      	adds	r3, #3
 8012d08:	781b      	ldrb	r3, [r3, #0]
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	021b      	lsls	r3, r3, #8
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	4313      	orrs	r3, r2
 8012d12:	b29a      	uxth	r2, r3
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	791a      	ldrb	r2, [r3, #4]
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	795a      	ldrb	r2, [r3, #5]
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8012d28:	68bb      	ldr	r3, [r7, #8]
 8012d2a:	799a      	ldrb	r2, [r3, #6]
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	79da      	ldrb	r2, [r3, #7]
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8012d38:	88fb      	ldrh	r3, [r7, #6]
 8012d3a:	2b08      	cmp	r3, #8
 8012d3c:	d939      	bls.n	8012db2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	3308      	adds	r3, #8
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	b29a      	uxth	r2, r3
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	3309      	adds	r3, #9
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	021b      	lsls	r3, r3, #8
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	4313      	orrs	r3, r2
 8012d54:	b29a      	uxth	r2, r3
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	330a      	adds	r3, #10
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	b29a      	uxth	r2, r3
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	330b      	adds	r3, #11
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	021b      	lsls	r3, r3, #8
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	4313      	orrs	r3, r2
 8012d70:	b29a      	uxth	r2, r3
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	330c      	adds	r3, #12
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	b29a      	uxth	r2, r3
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	330d      	adds	r3, #13
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	021b      	lsls	r3, r3, #8
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	4313      	orrs	r3, r2
 8012d8c:	b29a      	uxth	r2, r3
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	7b9a      	ldrb	r2, [r3, #14]
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	7bda      	ldrb	r2, [r3, #15]
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	7c1a      	ldrb	r2, [r3, #16]
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	7c5a      	ldrb	r2, [r3, #17]
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	745a      	strb	r2, [r3, #17]
  }
}
 8012db2:	bf00      	nop
 8012db4:	3714      	adds	r7, #20
 8012db6:	46bd      	mov	sp, r7
 8012db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbc:	4770      	bx	lr

08012dbe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b08a      	sub	sp, #40	; 0x28
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	60f8      	str	r0, [r7, #12]
 8012dc6:	60b9      	str	r1, [r7, #8]
 8012dc8:	4613      	mov	r3, r2
 8012dca:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8012de0:	68bb      	ldr	r3, [r7, #8]
 8012de2:	781a      	ldrb	r2, [r3, #0]
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	785a      	ldrb	r2, [r3, #1]
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	3302      	adds	r3, #2
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	b29a      	uxth	r2, r3
 8012df8:	68bb      	ldr	r3, [r7, #8]
 8012dfa:	3303      	adds	r3, #3
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	021b      	lsls	r3, r3, #8
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	4313      	orrs	r3, r2
 8012e06:	b29a      	uxth	r2, r3
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	791a      	ldrb	r2, [r3, #4]
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	795a      	ldrb	r2, [r3, #5]
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	799a      	ldrb	r2, [r3, #6]
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	79da      	ldrb	r2, [r3, #7]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	7a1a      	ldrb	r2, [r3, #8]
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8012e34:	88fb      	ldrh	r3, [r7, #6]
 8012e36:	2b09      	cmp	r3, #9
 8012e38:	d95f      	bls.n	8012efa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8012e3a:	2309      	movs	r3, #9
 8012e3c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8012e42:	e051      	b.n	8012ee8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8012e44:	f107 0316 	add.w	r3, r7, #22
 8012e48:	4619      	mov	r1, r3
 8012e4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e4c:	f000 f8e8 	bl	8013020 <USBH_GetNextDesc>
 8012e50:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8012e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e54:	785b      	ldrb	r3, [r3, #1]
 8012e56:	2b04      	cmp	r3, #4
 8012e58:	d146      	bne.n	8012ee8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8012e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012e5e:	221a      	movs	r2, #26
 8012e60:	fb02 f303 	mul.w	r3, r2, r3
 8012e64:	3308      	adds	r3, #8
 8012e66:	68fa      	ldr	r2, [r7, #12]
 8012e68:	4413      	add	r3, r2
 8012e6a:	3302      	adds	r3, #2
 8012e6c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8012e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e70:	69f8      	ldr	r0, [r7, #28]
 8012e72:	f000 f846 	bl	8012f02 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8012e76:	2300      	movs	r3, #0
 8012e78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8012e80:	e022      	b.n	8012ec8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8012e82:	f107 0316 	add.w	r3, r7, #22
 8012e86:	4619      	mov	r1, r3
 8012e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e8a:	f000 f8c9 	bl	8013020 <USBH_GetNextDesc>
 8012e8e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8012e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e92:	785b      	ldrb	r3, [r3, #1]
 8012e94:	2b05      	cmp	r3, #5
 8012e96:	d117      	bne.n	8012ec8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8012e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012e9c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012ea0:	3201      	adds	r2, #1
 8012ea2:	00d2      	lsls	r2, r2, #3
 8012ea4:	211a      	movs	r1, #26
 8012ea6:	fb01 f303 	mul.w	r3, r1, r3
 8012eaa:	4413      	add	r3, r2
 8012eac:	3308      	adds	r3, #8
 8012eae:	68fa      	ldr	r2, [r7, #12]
 8012eb0:	4413      	add	r3, r2
 8012eb2:	3304      	adds	r3, #4
 8012eb4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8012eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012eb8:	69b8      	ldr	r0, [r7, #24]
 8012eba:	f000 f851 	bl	8012f60 <USBH_ParseEPDesc>
            ep_ix++;
 8012ebe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012ec2:	3301      	adds	r3, #1
 8012ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8012ec8:	69fb      	ldr	r3, [r7, #28]
 8012eca:	791b      	ldrb	r3, [r3, #4]
 8012ecc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012ed0:	429a      	cmp	r2, r3
 8012ed2:	d204      	bcs.n	8012ede <USBH_ParseCfgDesc+0x120>
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	885a      	ldrh	r2, [r3, #2]
 8012ed8:	8afb      	ldrh	r3, [r7, #22]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d8d1      	bhi.n	8012e82 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8012ede:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8012ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d804      	bhi.n	8012efa <USBH_ParseCfgDesc+0x13c>
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	885a      	ldrh	r2, [r3, #2]
 8012ef4:	8afb      	ldrh	r3, [r7, #22]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d8a4      	bhi.n	8012e44 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8012efa:	bf00      	nop
 8012efc:	3728      	adds	r7, #40	; 0x28
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}

08012f02 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8012f02:	b480      	push	{r7}
 8012f04:	b083      	sub	sp, #12
 8012f06:	af00      	add	r7, sp, #0
 8012f08:	6078      	str	r0, [r7, #4]
 8012f0a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	781a      	ldrb	r2, [r3, #0]
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	785a      	ldrb	r2, [r3, #1]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	789a      	ldrb	r2, [r3, #2]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	78da      	ldrb	r2, [r3, #3]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	791a      	ldrb	r2, [r3, #4]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	795a      	ldrb	r2, [r3, #5]
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	799a      	ldrb	r2, [r3, #6]
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	79da      	ldrb	r2, [r3, #7]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	7a1a      	ldrb	r2, [r3, #8]
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	721a      	strb	r2, [r3, #8]
}
 8012f54:	bf00      	nop
 8012f56:	370c      	adds	r7, #12
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5e:	4770      	bx	lr

08012f60 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b083      	sub	sp, #12
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	781a      	ldrb	r2, [r3, #0]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	785a      	ldrb	r2, [r3, #1]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	789a      	ldrb	r2, [r3, #2]
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	78da      	ldrb	r2, [r3, #3]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8012f8a:	683b      	ldr	r3, [r7, #0]
 8012f8c:	3304      	adds	r3, #4
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	b29a      	uxth	r2, r3
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	3305      	adds	r3, #5
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	021b      	lsls	r3, r3, #8
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	4313      	orrs	r3, r2
 8012fa0:	b29a      	uxth	r2, r3
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	799a      	ldrb	r2, [r3, #6]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	719a      	strb	r2, [r3, #6]
}
 8012fae:	bf00      	nop
 8012fb0:	370c      	adds	r7, #12
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb8:	4770      	bx	lr

08012fba <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8012fba:	b480      	push	{r7}
 8012fbc:	b087      	sub	sp, #28
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	60f8      	str	r0, [r7, #12]
 8012fc2:	60b9      	str	r1, [r7, #8]
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	3301      	adds	r3, #1
 8012fcc:	781b      	ldrb	r3, [r3, #0]
 8012fce:	2b03      	cmp	r3, #3
 8012fd0:	d120      	bne.n	8013014 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	1e9a      	subs	r2, r3, #2
 8012fd8:	88fb      	ldrh	r3, [r7, #6]
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	bf28      	it	cs
 8012fde:	4613      	movcs	r3, r2
 8012fe0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	3302      	adds	r3, #2
 8012fe6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8012fe8:	2300      	movs	r3, #0
 8012fea:	82fb      	strh	r3, [r7, #22]
 8012fec:	e00b      	b.n	8013006 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8012fee:	8afb      	ldrh	r3, [r7, #22]
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	781a      	ldrb	r2, [r3, #0]
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8013000:	8afb      	ldrh	r3, [r7, #22]
 8013002:	3302      	adds	r3, #2
 8013004:	82fb      	strh	r3, [r7, #22]
 8013006:	8afa      	ldrh	r2, [r7, #22]
 8013008:	8abb      	ldrh	r3, [r7, #20]
 801300a:	429a      	cmp	r2, r3
 801300c:	d3ef      	bcc.n	8012fee <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	2200      	movs	r2, #0
 8013012:	701a      	strb	r2, [r3, #0]
  }
}
 8013014:	bf00      	nop
 8013016:	371c      	adds	r7, #28
 8013018:	46bd      	mov	sp, r7
 801301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301e:	4770      	bx	lr

08013020 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8013020:	b480      	push	{r7}
 8013022:	b085      	sub	sp, #20
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	881a      	ldrh	r2, [r3, #0]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	b29b      	uxth	r3, r3
 8013034:	4413      	add	r3, r2
 8013036:	b29a      	uxth	r2, r3
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	4413      	add	r3, r2
 8013046:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013048:	68fb      	ldr	r3, [r7, #12]
}
 801304a:	4618      	mov	r0, r3
 801304c:	3714      	adds	r7, #20
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr

08013056 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8013056:	b580      	push	{r7, lr}
 8013058:	b086      	sub	sp, #24
 801305a:	af00      	add	r7, sp, #0
 801305c:	60f8      	str	r0, [r7, #12]
 801305e:	60b9      	str	r1, [r7, #8]
 8013060:	4613      	mov	r3, r2
 8013062:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8013064:	2301      	movs	r3, #1
 8013066:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	789b      	ldrb	r3, [r3, #2]
 801306c:	2b01      	cmp	r3, #1
 801306e:	d002      	beq.n	8013076 <USBH_CtlReq+0x20>
 8013070:	2b02      	cmp	r3, #2
 8013072:	d01d      	beq.n	80130b0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8013074:	e043      	b.n	80130fe <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	68ba      	ldr	r2, [r7, #8]
 801307a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	88fa      	ldrh	r2, [r7, #6]
 8013080:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	2201      	movs	r2, #1
 8013086:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	2202      	movs	r2, #2
 801308c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801308e:	2301      	movs	r3, #1
 8013090:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	2203      	movs	r2, #3
 8013096:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80130a6:	2300      	movs	r3, #0
 80130a8:	2200      	movs	r2, #0
 80130aa:	f000 fef1 	bl	8013e90 <osMessageQueuePut>
      break;
 80130ae:	e026      	b.n	80130fe <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80130b0:	68f8      	ldr	r0, [r7, #12]
 80130b2:	f000 f829 	bl	8013108 <USBH_HandleControl>
 80130b6:	4603      	mov	r3, r0
 80130b8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80130ba:	7dfb      	ldrb	r3, [r7, #23]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d002      	beq.n	80130c6 <USBH_CtlReq+0x70>
 80130c0:	7dfb      	ldrb	r3, [r7, #23]
 80130c2:	2b03      	cmp	r3, #3
 80130c4:	d106      	bne.n	80130d4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2201      	movs	r2, #1
 80130ca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2200      	movs	r2, #0
 80130d0:	761a      	strb	r2, [r3, #24]
 80130d2:	e005      	b.n	80130e0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80130d4:	7dfb      	ldrb	r3, [r7, #23]
 80130d6:	2b02      	cmp	r3, #2
 80130d8:	d102      	bne.n	80130e0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2201      	movs	r2, #1
 80130de:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2203      	movs	r2, #3
 80130e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80130f4:	2300      	movs	r3, #0
 80130f6:	2200      	movs	r2, #0
 80130f8:	f000 feca 	bl	8013e90 <osMessageQueuePut>
      break;
 80130fc:	bf00      	nop
  }
  return status;
 80130fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8013100:	4618      	mov	r0, r3
 8013102:	3718      	adds	r7, #24
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}

08013108 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b086      	sub	sp, #24
 801310c:	af02      	add	r7, sp, #8
 801310e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8013110:	2301      	movs	r3, #1
 8013112:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013114:	2300      	movs	r3, #0
 8013116:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	7e1b      	ldrb	r3, [r3, #24]
 801311c:	3b01      	subs	r3, #1
 801311e:	2b0a      	cmp	r3, #10
 8013120:	f200 822b 	bhi.w	801357a <USBH_HandleControl+0x472>
 8013124:	a201      	add	r2, pc, #4	; (adr r2, 801312c <USBH_HandleControl+0x24>)
 8013126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801312a:	bf00      	nop
 801312c:	08013159 	.word	0x08013159
 8013130:	08013173 	.word	0x08013173
 8013134:	08013215 	.word	0x08013215
 8013138:	0801323b 	.word	0x0801323b
 801313c:	080132c7 	.word	0x080132c7
 8013140:	080132f3 	.word	0x080132f3
 8013144:	080133b5 	.word	0x080133b5
 8013148:	080133d7 	.word	0x080133d7
 801314c:	08013469 	.word	0x08013469
 8013150:	08013491 	.word	0x08013491
 8013154:	08013523 	.word	0x08013523
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f103 0110 	add.w	r1, r3, #16
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	795b      	ldrb	r3, [r3, #5]
 8013162:	461a      	mov	r2, r3
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f000 fa19 	bl	801359c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	2202      	movs	r2, #2
 801316e:	761a      	strb	r2, [r3, #24]
      break;
 8013170:	e20e      	b.n	8013590 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	795b      	ldrb	r3, [r3, #5]
 8013176:	4619      	mov	r1, r3
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f004 faa9 	bl	80176d0 <USBH_LL_GetURBState>
 801317e:	4603      	mov	r3, r0
 8013180:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8013182:	7bbb      	ldrb	r3, [r7, #14]
 8013184:	2b01      	cmp	r3, #1
 8013186:	d12c      	bne.n	80131e2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	7c1b      	ldrb	r3, [r3, #16]
 801318c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013190:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	8adb      	ldrh	r3, [r3, #22]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d00a      	beq.n	80131b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801319a:	7b7b      	ldrb	r3, [r7, #13]
 801319c:	2b80      	cmp	r3, #128	; 0x80
 801319e:	d103      	bne.n	80131a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2203      	movs	r2, #3
 80131a4:	761a      	strb	r2, [r3, #24]
 80131a6:	e00d      	b.n	80131c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2205      	movs	r2, #5
 80131ac:	761a      	strb	r2, [r3, #24]
 80131ae:	e009      	b.n	80131c4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80131b0:	7b7b      	ldrb	r3, [r7, #13]
 80131b2:	2b80      	cmp	r3, #128	; 0x80
 80131b4:	d103      	bne.n	80131be <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2209      	movs	r2, #9
 80131ba:	761a      	strb	r2, [r3, #24]
 80131bc:	e002      	b.n	80131c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	2207      	movs	r2, #7
 80131c2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2203      	movs	r2, #3
 80131c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80131d8:	2300      	movs	r3, #0
 80131da:	2200      	movs	r2, #0
 80131dc:	f000 fe58 	bl	8013e90 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80131e0:	e1cd      	b.n	801357e <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80131e2:	7bbb      	ldrb	r3, [r7, #14]
 80131e4:	2b04      	cmp	r3, #4
 80131e6:	d003      	beq.n	80131f0 <USBH_HandleControl+0xe8>
 80131e8:	7bbb      	ldrb	r3, [r7, #14]
 80131ea:	2b02      	cmp	r3, #2
 80131ec:	f040 81c7 	bne.w	801357e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	220b      	movs	r2, #11
 80131f4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2203      	movs	r2, #3
 80131fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801320a:	2300      	movs	r3, #0
 801320c:	2200      	movs	r2, #0
 801320e:	f000 fe3f 	bl	8013e90 <osMessageQueuePut>
      break;
 8013212:	e1b4      	b.n	801357e <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801321a:	b29a      	uxth	r2, r3
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	6899      	ldr	r1, [r3, #8]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	899a      	ldrh	r2, [r3, #12]
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	791b      	ldrb	r3, [r3, #4]
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f000 f9f4 	bl	801361a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2204      	movs	r2, #4
 8013236:	761a      	strb	r2, [r3, #24]
      break;
 8013238:	e1aa      	b.n	8013590 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	791b      	ldrb	r3, [r3, #4]
 801323e:	4619      	mov	r1, r3
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	f004 fa45 	bl	80176d0 <USBH_LL_GetURBState>
 8013246:	4603      	mov	r3, r0
 8013248:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801324a:	7bbb      	ldrb	r3, [r7, #14]
 801324c:	2b01      	cmp	r3, #1
 801324e:	d110      	bne.n	8013272 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2209      	movs	r2, #9
 8013254:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2203      	movs	r2, #3
 801325a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801326a:	2300      	movs	r3, #0
 801326c:	2200      	movs	r2, #0
 801326e:	f000 fe0f 	bl	8013e90 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8013272:	7bbb      	ldrb	r3, [r7, #14]
 8013274:	2b05      	cmp	r3, #5
 8013276:	d110      	bne.n	801329a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8013278:	2303      	movs	r3, #3
 801327a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2203      	movs	r2, #3
 8013280:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8013290:	2300      	movs	r3, #0
 8013292:	2200      	movs	r2, #0
 8013294:	f000 fdfc 	bl	8013e90 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8013298:	e173      	b.n	8013582 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801329a:	7bbb      	ldrb	r3, [r7, #14]
 801329c:	2b04      	cmp	r3, #4
 801329e:	f040 8170 	bne.w	8013582 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	220b      	movs	r2, #11
 80132a6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2203      	movs	r2, #3
 80132ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80132bc:	2300      	movs	r3, #0
 80132be:	2200      	movs	r2, #0
 80132c0:	f000 fde6 	bl	8013e90 <osMessageQueuePut>
      break;
 80132c4:	e15d      	b.n	8013582 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	6899      	ldr	r1, [r3, #8]
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	899a      	ldrh	r2, [r3, #12]
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	7958      	ldrb	r0, [r3, #5]
 80132d2:	2301      	movs	r3, #1
 80132d4:	9300      	str	r3, [sp, #0]
 80132d6:	4603      	mov	r3, r0
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f000 f979 	bl	80135d0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80132e4:	b29a      	uxth	r2, r3
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2206      	movs	r2, #6
 80132ee:	761a      	strb	r2, [r3, #24]
      break;
 80132f0:	e14e      	b.n	8013590 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	795b      	ldrb	r3, [r3, #5]
 80132f6:	4619      	mov	r1, r3
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f004 f9e9 	bl	80176d0 <USBH_LL_GetURBState>
 80132fe:	4603      	mov	r3, r0
 8013300:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013302:	7bbb      	ldrb	r3, [r7, #14]
 8013304:	2b01      	cmp	r3, #1
 8013306:	d111      	bne.n	801332c <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2207      	movs	r2, #7
 801330c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2203      	movs	r2, #3
 8013312:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8013322:	2300      	movs	r3, #0
 8013324:	2200      	movs	r2, #0
 8013326:	f000 fdb3 	bl	8013e90 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801332a:	e12c      	b.n	8013586 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 801332c:	7bbb      	ldrb	r3, [r7, #14]
 801332e:	2b05      	cmp	r3, #5
 8013330:	d113      	bne.n	801335a <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	220c      	movs	r2, #12
 8013336:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8013338:	2303      	movs	r3, #3
 801333a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2203      	movs	r2, #3
 8013340:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8013350:	2300      	movs	r3, #0
 8013352:	2200      	movs	r2, #0
 8013354:	f000 fd9c 	bl	8013e90 <osMessageQueuePut>
      break;
 8013358:	e115      	b.n	8013586 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 801335a:	7bbb      	ldrb	r3, [r7, #14]
 801335c:	2b02      	cmp	r3, #2
 801335e:	d111      	bne.n	8013384 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2205      	movs	r2, #5
 8013364:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2203      	movs	r2, #3
 801336a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801337a:	2300      	movs	r3, #0
 801337c:	2200      	movs	r2, #0
 801337e:	f000 fd87 	bl	8013e90 <osMessageQueuePut>
      break;
 8013382:	e100      	b.n	8013586 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8013384:	7bbb      	ldrb	r3, [r7, #14]
 8013386:	2b04      	cmp	r3, #4
 8013388:	f040 80fd 	bne.w	8013586 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	220b      	movs	r2, #11
 8013390:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8013392:	2302      	movs	r3, #2
 8013394:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2203      	movs	r2, #3
 801339a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80133aa:	2300      	movs	r3, #0
 80133ac:	2200      	movs	r2, #0
 80133ae:	f000 fd6f 	bl	8013e90 <osMessageQueuePut>
      break;
 80133b2:	e0e8      	b.n	8013586 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	791b      	ldrb	r3, [r3, #4]
 80133b8:	2200      	movs	r2, #0
 80133ba:	2100      	movs	r1, #0
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f000 f92c 	bl	801361a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2208      	movs	r2, #8
 80133d2:	761a      	strb	r2, [r3, #24]

      break;
 80133d4:	e0dc      	b.n	8013590 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	791b      	ldrb	r3, [r3, #4]
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f004 f977 	bl	80176d0 <USBH_LL_GetURBState>
 80133e2:	4603      	mov	r3, r0
 80133e4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80133e6:	7bbb      	ldrb	r3, [r7, #14]
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	d113      	bne.n	8013414 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	220d      	movs	r2, #13
 80133f0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80133f2:	2300      	movs	r3, #0
 80133f4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	2203      	movs	r2, #3
 80133fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801340a:	2300      	movs	r3, #0
 801340c:	2200      	movs	r2, #0
 801340e:	f000 fd3f 	bl	8013e90 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8013412:	e0ba      	b.n	801358a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8013414:	7bbb      	ldrb	r3, [r7, #14]
 8013416:	2b04      	cmp	r3, #4
 8013418:	d111      	bne.n	801343e <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	220b      	movs	r2, #11
 801341e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2203      	movs	r2, #3
 8013424:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8013434:	2300      	movs	r3, #0
 8013436:	2200      	movs	r2, #0
 8013438:	f000 fd2a 	bl	8013e90 <osMessageQueuePut>
      break;
 801343c:	e0a5      	b.n	801358a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 801343e:	7bbb      	ldrb	r3, [r7, #14]
 8013440:	2b05      	cmp	r3, #5
 8013442:	f040 80a2 	bne.w	801358a <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8013446:	2303      	movs	r3, #3
 8013448:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2203      	movs	r2, #3
 801344e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801345e:	2300      	movs	r3, #0
 8013460:	2200      	movs	r2, #0
 8013462:	f000 fd15 	bl	8013e90 <osMessageQueuePut>
      break;
 8013466:	e090      	b.n	801358a <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	795a      	ldrb	r2, [r3, #5]
 801346c:	2301      	movs	r3, #1
 801346e:	9300      	str	r3, [sp, #0]
 8013470:	4613      	mov	r3, r2
 8013472:	2200      	movs	r2, #0
 8013474:	2100      	movs	r1, #0
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f000 f8aa 	bl	80135d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8013482:	b29a      	uxth	r2, r3
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	220a      	movs	r2, #10
 801348c:	761a      	strb	r2, [r3, #24]
      break;
 801348e:	e07f      	b.n	8013590 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	795b      	ldrb	r3, [r3, #5]
 8013494:	4619      	mov	r1, r3
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f004 f91a 	bl	80176d0 <USBH_LL_GetURBState>
 801349c:	4603      	mov	r3, r0
 801349e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80134a0:	7bbb      	ldrb	r3, [r7, #14]
 80134a2:	2b01      	cmp	r3, #1
 80134a4:	d113      	bne.n	80134ce <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 80134a6:	2300      	movs	r3, #0
 80134a8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	220d      	movs	r2, #13
 80134ae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2203      	movs	r2, #3
 80134b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80134c4:	2300      	movs	r3, #0
 80134c6:	2200      	movs	r2, #0
 80134c8:	f000 fce2 	bl	8013e90 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80134cc:	e05f      	b.n	801358e <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 80134ce:	7bbb      	ldrb	r3, [r7, #14]
 80134d0:	2b02      	cmp	r3, #2
 80134d2:	d111      	bne.n	80134f8 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2209      	movs	r2, #9
 80134d8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	2203      	movs	r2, #3
 80134de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80134ee:	2300      	movs	r3, #0
 80134f0:	2200      	movs	r2, #0
 80134f2:	f000 fccd 	bl	8013e90 <osMessageQueuePut>
      break;
 80134f6:	e04a      	b.n	801358e <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 80134f8:	7bbb      	ldrb	r3, [r7, #14]
 80134fa:	2b04      	cmp	r3, #4
 80134fc:	d147      	bne.n	801358e <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	220b      	movs	r2, #11
 8013502:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2203      	movs	r2, #3
 8013508:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8013518:	2300      	movs	r3, #0
 801351a:	2200      	movs	r2, #0
 801351c:	f000 fcb8 	bl	8013e90 <osMessageQueuePut>
      break;
 8013520:	e035      	b.n	801358e <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	7e5b      	ldrb	r3, [r3, #25]
 8013526:	3301      	adds	r3, #1
 8013528:	b2da      	uxtb	r2, r3
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	765a      	strb	r2, [r3, #25]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	7e5b      	ldrb	r3, [r3, #25]
 8013532:	2b02      	cmp	r3, #2
 8013534:	d806      	bhi.n	8013544 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2201      	movs	r2, #1
 801353a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2201      	movs	r2, #1
 8013540:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8013542:	e025      	b.n	8013590 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801354a:	2106      	movs	r1, #6
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2200      	movs	r2, #0
 8013554:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	795b      	ldrb	r3, [r3, #5]
 801355a:	4619      	mov	r1, r3
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f000 f90d 	bl	801377c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	791b      	ldrb	r3, [r3, #4]
 8013566:	4619      	mov	r1, r3
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f000 f907 	bl	801377c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	2200      	movs	r2, #0
 8013572:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8013574:	2302      	movs	r3, #2
 8013576:	73fb      	strb	r3, [r7, #15]
      break;
 8013578:	e00a      	b.n	8013590 <USBH_HandleControl+0x488>

    default:
      break;
 801357a:	bf00      	nop
 801357c:	e008      	b.n	8013590 <USBH_HandleControl+0x488>
      break;
 801357e:	bf00      	nop
 8013580:	e006      	b.n	8013590 <USBH_HandleControl+0x488>
      break;
 8013582:	bf00      	nop
 8013584:	e004      	b.n	8013590 <USBH_HandleControl+0x488>
      break;
 8013586:	bf00      	nop
 8013588:	e002      	b.n	8013590 <USBH_HandleControl+0x488>
      break;
 801358a:	bf00      	nop
 801358c:	e000      	b.n	8013590 <USBH_HandleControl+0x488>
      break;
 801358e:	bf00      	nop
  }

  return status;
 8013590:	7bfb      	ldrb	r3, [r7, #15]
}
 8013592:	4618      	mov	r0, r3
 8013594:	3710      	adds	r7, #16
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
 801359a:	bf00      	nop

0801359c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b088      	sub	sp, #32
 80135a0:	af04      	add	r7, sp, #16
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	60b9      	str	r1, [r7, #8]
 80135a6:	4613      	mov	r3, r2
 80135a8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80135aa:	79f9      	ldrb	r1, [r7, #7]
 80135ac:	2300      	movs	r3, #0
 80135ae:	9303      	str	r3, [sp, #12]
 80135b0:	2308      	movs	r3, #8
 80135b2:	9302      	str	r3, [sp, #8]
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	9301      	str	r3, [sp, #4]
 80135b8:	2300      	movs	r3, #0
 80135ba:	9300      	str	r3, [sp, #0]
 80135bc:	2300      	movs	r3, #0
 80135be:	2200      	movs	r2, #0
 80135c0:	68f8      	ldr	r0, [r7, #12]
 80135c2:	f004 f854 	bl	801766e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80135c6:	2300      	movs	r3, #0
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3710      	adds	r7, #16
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}

080135d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b088      	sub	sp, #32
 80135d4:	af04      	add	r7, sp, #16
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	4611      	mov	r1, r2
 80135dc:	461a      	mov	r2, r3
 80135de:	460b      	mov	r3, r1
 80135e0:	80fb      	strh	r3, [r7, #6]
 80135e2:	4613      	mov	r3, r2
 80135e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d001      	beq.n	80135f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80135f0:	2300      	movs	r3, #0
 80135f2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80135f4:	7979      	ldrb	r1, [r7, #5]
 80135f6:	7e3b      	ldrb	r3, [r7, #24]
 80135f8:	9303      	str	r3, [sp, #12]
 80135fa:	88fb      	ldrh	r3, [r7, #6]
 80135fc:	9302      	str	r3, [sp, #8]
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	9301      	str	r3, [sp, #4]
 8013602:	2301      	movs	r3, #1
 8013604:	9300      	str	r3, [sp, #0]
 8013606:	2300      	movs	r3, #0
 8013608:	2200      	movs	r2, #0
 801360a:	68f8      	ldr	r0, [r7, #12]
 801360c:	f004 f82f 	bl	801766e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8013610:	2300      	movs	r3, #0
}
 8013612:	4618      	mov	r0, r3
 8013614:	3710      	adds	r7, #16
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}

0801361a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801361a:	b580      	push	{r7, lr}
 801361c:	b088      	sub	sp, #32
 801361e:	af04      	add	r7, sp, #16
 8013620:	60f8      	str	r0, [r7, #12]
 8013622:	60b9      	str	r1, [r7, #8]
 8013624:	4611      	mov	r1, r2
 8013626:	461a      	mov	r2, r3
 8013628:	460b      	mov	r3, r1
 801362a:	80fb      	strh	r3, [r7, #6]
 801362c:	4613      	mov	r3, r2
 801362e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8013630:	7979      	ldrb	r1, [r7, #5]
 8013632:	2300      	movs	r3, #0
 8013634:	9303      	str	r3, [sp, #12]
 8013636:	88fb      	ldrh	r3, [r7, #6]
 8013638:	9302      	str	r3, [sp, #8]
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	9301      	str	r3, [sp, #4]
 801363e:	2301      	movs	r3, #1
 8013640:	9300      	str	r3, [sp, #0]
 8013642:	2300      	movs	r3, #0
 8013644:	2201      	movs	r2, #1
 8013646:	68f8      	ldr	r0, [r7, #12]
 8013648:	f004 f811 	bl	801766e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801364c:	2300      	movs	r3, #0

}
 801364e:	4618      	mov	r0, r3
 8013650:	3710      	adds	r7, #16
 8013652:	46bd      	mov	sp, r7
 8013654:	bd80      	pop	{r7, pc}

08013656 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8013656:	b580      	push	{r7, lr}
 8013658:	b088      	sub	sp, #32
 801365a:	af04      	add	r7, sp, #16
 801365c:	60f8      	str	r0, [r7, #12]
 801365e:	60b9      	str	r1, [r7, #8]
 8013660:	4611      	mov	r1, r2
 8013662:	461a      	mov	r2, r3
 8013664:	460b      	mov	r3, r1
 8013666:	80fb      	strh	r3, [r7, #6]
 8013668:	4613      	mov	r3, r2
 801366a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013672:	2b00      	cmp	r3, #0
 8013674:	d001      	beq.n	801367a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8013676:	2300      	movs	r3, #0
 8013678:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801367a:	7979      	ldrb	r1, [r7, #5]
 801367c:	7e3b      	ldrb	r3, [r7, #24]
 801367e:	9303      	str	r3, [sp, #12]
 8013680:	88fb      	ldrh	r3, [r7, #6]
 8013682:	9302      	str	r3, [sp, #8]
 8013684:	68bb      	ldr	r3, [r7, #8]
 8013686:	9301      	str	r3, [sp, #4]
 8013688:	2301      	movs	r3, #1
 801368a:	9300      	str	r3, [sp, #0]
 801368c:	2302      	movs	r3, #2
 801368e:	2200      	movs	r2, #0
 8013690:	68f8      	ldr	r0, [r7, #12]
 8013692:	f003 ffec 	bl	801766e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8013696:	2300      	movs	r3, #0
}
 8013698:	4618      	mov	r0, r3
 801369a:	3710      	adds	r7, #16
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}

080136a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b088      	sub	sp, #32
 80136a4:	af04      	add	r7, sp, #16
 80136a6:	60f8      	str	r0, [r7, #12]
 80136a8:	60b9      	str	r1, [r7, #8]
 80136aa:	4611      	mov	r1, r2
 80136ac:	461a      	mov	r2, r3
 80136ae:	460b      	mov	r3, r1
 80136b0:	80fb      	strh	r3, [r7, #6]
 80136b2:	4613      	mov	r3, r2
 80136b4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80136b6:	7979      	ldrb	r1, [r7, #5]
 80136b8:	2300      	movs	r3, #0
 80136ba:	9303      	str	r3, [sp, #12]
 80136bc:	88fb      	ldrh	r3, [r7, #6]
 80136be:	9302      	str	r3, [sp, #8]
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	9301      	str	r3, [sp, #4]
 80136c4:	2301      	movs	r3, #1
 80136c6:	9300      	str	r3, [sp, #0]
 80136c8:	2302      	movs	r3, #2
 80136ca:	2201      	movs	r2, #1
 80136cc:	68f8      	ldr	r0, [r7, #12]
 80136ce:	f003 ffce 	bl	801766e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80136d2:	2300      	movs	r3, #0
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3710      	adds	r7, #16
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}

080136dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b086      	sub	sp, #24
 80136e0:	af04      	add	r7, sp, #16
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	4608      	mov	r0, r1
 80136e6:	4611      	mov	r1, r2
 80136e8:	461a      	mov	r2, r3
 80136ea:	4603      	mov	r3, r0
 80136ec:	70fb      	strb	r3, [r7, #3]
 80136ee:	460b      	mov	r3, r1
 80136f0:	70bb      	strb	r3, [r7, #2]
 80136f2:	4613      	mov	r3, r2
 80136f4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80136f6:	7878      	ldrb	r0, [r7, #1]
 80136f8:	78ba      	ldrb	r2, [r7, #2]
 80136fa:	78f9      	ldrb	r1, [r7, #3]
 80136fc:	8b3b      	ldrh	r3, [r7, #24]
 80136fe:	9302      	str	r3, [sp, #8]
 8013700:	7d3b      	ldrb	r3, [r7, #20]
 8013702:	9301      	str	r3, [sp, #4]
 8013704:	7c3b      	ldrb	r3, [r7, #16]
 8013706:	9300      	str	r3, [sp, #0]
 8013708:	4603      	mov	r3, r0
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f003 ff61 	bl	80175d2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8013710:	2300      	movs	r3, #0
}
 8013712:	4618      	mov	r0, r3
 8013714:	3708      	adds	r7, #8
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}

0801371a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801371a:	b580      	push	{r7, lr}
 801371c:	b082      	sub	sp, #8
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
 8013722:	460b      	mov	r3, r1
 8013724:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8013726:	78fb      	ldrb	r3, [r7, #3]
 8013728:	4619      	mov	r1, r3
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f003 ff80 	bl	8017630 <USBH_LL_ClosePipe>

  return USBH_OK;
 8013730:	2300      	movs	r3, #0
}
 8013732:	4618      	mov	r0, r3
 8013734:	3708      	adds	r7, #8
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}

0801373a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801373a:	b580      	push	{r7, lr}
 801373c:	b084      	sub	sp, #16
 801373e:	af00      	add	r7, sp, #0
 8013740:	6078      	str	r0, [r7, #4]
 8013742:	460b      	mov	r3, r1
 8013744:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f000 f836 	bl	80137b8 <USBH_GetFreePipe>
 801374c:	4603      	mov	r3, r0
 801374e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8013750:	89fb      	ldrh	r3, [r7, #14]
 8013752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013756:	4293      	cmp	r3, r2
 8013758:	d00a      	beq.n	8013770 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801375a:	78fa      	ldrb	r2, [r7, #3]
 801375c:	89fb      	ldrh	r3, [r7, #14]
 801375e:	f003 030f 	and.w	r3, r3, #15
 8013762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013766:	6879      	ldr	r1, [r7, #4]
 8013768:	33e0      	adds	r3, #224	; 0xe0
 801376a:	009b      	lsls	r3, r3, #2
 801376c:	440b      	add	r3, r1
 801376e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8013770:	89fb      	ldrh	r3, [r7, #14]
 8013772:	b2db      	uxtb	r3, r3
}
 8013774:	4618      	mov	r0, r3
 8013776:	3710      	adds	r7, #16
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}

0801377c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801377c:	b480      	push	{r7}
 801377e:	b083      	sub	sp, #12
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	460b      	mov	r3, r1
 8013786:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8013788:	78fb      	ldrb	r3, [r7, #3]
 801378a:	2b0a      	cmp	r3, #10
 801378c:	d80d      	bhi.n	80137aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801378e:	78fb      	ldrb	r3, [r7, #3]
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	33e0      	adds	r3, #224	; 0xe0
 8013794:	009b      	lsls	r3, r3, #2
 8013796:	4413      	add	r3, r2
 8013798:	685a      	ldr	r2, [r3, #4]
 801379a:	78fb      	ldrb	r3, [r7, #3]
 801379c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80137a0:	6879      	ldr	r1, [r7, #4]
 80137a2:	33e0      	adds	r3, #224	; 0xe0
 80137a4:	009b      	lsls	r3, r3, #2
 80137a6:	440b      	add	r3, r1
 80137a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80137aa:	2300      	movs	r3, #0
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	370c      	adds	r7, #12
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr

080137b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b085      	sub	sp, #20
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80137c0:	2300      	movs	r3, #0
 80137c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80137c4:	2300      	movs	r3, #0
 80137c6:	73fb      	strb	r3, [r7, #15]
 80137c8:	e00f      	b.n	80137ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80137ca:	7bfb      	ldrb	r3, [r7, #15]
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	33e0      	adds	r3, #224	; 0xe0
 80137d0:	009b      	lsls	r3, r3, #2
 80137d2:	4413      	add	r3, r2
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d102      	bne.n	80137e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80137de:	7bfb      	ldrb	r3, [r7, #15]
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	e007      	b.n	80137f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80137e4:	7bfb      	ldrb	r3, [r7, #15]
 80137e6:	3301      	adds	r3, #1
 80137e8:	73fb      	strb	r3, [r7, #15]
 80137ea:	7bfb      	ldrb	r3, [r7, #15]
 80137ec:	2b0a      	cmp	r3, #10
 80137ee:	d9ec      	bls.n	80137ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80137f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80137f4:	4618      	mov	r0, r3
 80137f6:	3714      	adds	r7, #20
 80137f8:	46bd      	mov	sp, r7
 80137fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fe:	4770      	bx	lr

08013800 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013800:	b480      	push	{r7}
 8013802:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8013804:	bf00      	nop
 8013806:	46bd      	mov	sp, r7
 8013808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380c:	4770      	bx	lr
	...

08013810 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013810:	b480      	push	{r7}
 8013812:	b085      	sub	sp, #20
 8013814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013816:	f3ef 8305 	mrs	r3, IPSR
 801381a:	60bb      	str	r3, [r7, #8]
  return(result);
 801381c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801381e:	2b00      	cmp	r3, #0
 8013820:	d10f      	bne.n	8013842 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013822:	f3ef 8310 	mrs	r3, PRIMASK
 8013826:	607b      	str	r3, [r7, #4]
  return(result);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d105      	bne.n	801383a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801382e:	f3ef 8311 	mrs	r3, BASEPRI
 8013832:	603b      	str	r3, [r7, #0]
  return(result);
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d007      	beq.n	801384a <osKernelInitialize+0x3a>
 801383a:	4b0e      	ldr	r3, [pc, #56]	; (8013874 <osKernelInitialize+0x64>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	2b02      	cmp	r3, #2
 8013840:	d103      	bne.n	801384a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8013842:	f06f 0305 	mvn.w	r3, #5
 8013846:	60fb      	str	r3, [r7, #12]
 8013848:	e00c      	b.n	8013864 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801384a:	4b0a      	ldr	r3, [pc, #40]	; (8013874 <osKernelInitialize+0x64>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d105      	bne.n	801385e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013852:	4b08      	ldr	r3, [pc, #32]	; (8013874 <osKernelInitialize+0x64>)
 8013854:	2201      	movs	r2, #1
 8013856:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013858:	2300      	movs	r3, #0
 801385a:	60fb      	str	r3, [r7, #12]
 801385c:	e002      	b.n	8013864 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801385e:	f04f 33ff 	mov.w	r3, #4294967295
 8013862:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013864:	68fb      	ldr	r3, [r7, #12]
}
 8013866:	4618      	mov	r0, r3
 8013868:	3714      	adds	r7, #20
 801386a:	46bd      	mov	sp, r7
 801386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013870:	4770      	bx	lr
 8013872:	bf00      	nop
 8013874:	20001174 	.word	0x20001174

08013878 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801387e:	f3ef 8305 	mrs	r3, IPSR
 8013882:	60bb      	str	r3, [r7, #8]
  return(result);
 8013884:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013886:	2b00      	cmp	r3, #0
 8013888:	d10f      	bne.n	80138aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801388a:	f3ef 8310 	mrs	r3, PRIMASK
 801388e:	607b      	str	r3, [r7, #4]
  return(result);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d105      	bne.n	80138a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013896:	f3ef 8311 	mrs	r3, BASEPRI
 801389a:	603b      	str	r3, [r7, #0]
  return(result);
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d007      	beq.n	80138b2 <osKernelStart+0x3a>
 80138a2:	4b0f      	ldr	r3, [pc, #60]	; (80138e0 <osKernelStart+0x68>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	2b02      	cmp	r3, #2
 80138a8:	d103      	bne.n	80138b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80138aa:	f06f 0305 	mvn.w	r3, #5
 80138ae:	60fb      	str	r3, [r7, #12]
 80138b0:	e010      	b.n	80138d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80138b2:	4b0b      	ldr	r3, [pc, #44]	; (80138e0 <osKernelStart+0x68>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	2b01      	cmp	r3, #1
 80138b8:	d109      	bne.n	80138ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80138ba:	f7ff ffa1 	bl	8013800 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80138be:	4b08      	ldr	r3, [pc, #32]	; (80138e0 <osKernelStart+0x68>)
 80138c0:	2202      	movs	r2, #2
 80138c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80138c4:	f001 fee2 	bl	801568c <vTaskStartScheduler>
      stat = osOK;
 80138c8:	2300      	movs	r3, #0
 80138ca:	60fb      	str	r3, [r7, #12]
 80138cc:	e002      	b.n	80138d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80138ce:	f04f 33ff 	mov.w	r3, #4294967295
 80138d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80138d4:	68fb      	ldr	r3, [r7, #12]
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3710      	adds	r7, #16
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	bf00      	nop
 80138e0:	20001174 	.word	0x20001174

080138e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b090      	sub	sp, #64	; 0x40
 80138e8:	af04      	add	r7, sp, #16
 80138ea:	60f8      	str	r0, [r7, #12]
 80138ec:	60b9      	str	r1, [r7, #8]
 80138ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80138f0:	2300      	movs	r3, #0
 80138f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80138f4:	f3ef 8305 	mrs	r3, IPSR
 80138f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80138fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	f040 808f 	bne.w	8013a20 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013902:	f3ef 8310 	mrs	r3, PRIMASK
 8013906:	61bb      	str	r3, [r7, #24]
  return(result);
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d105      	bne.n	801391a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801390e:	f3ef 8311 	mrs	r3, BASEPRI
 8013912:	617b      	str	r3, [r7, #20]
  return(result);
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d003      	beq.n	8013922 <osThreadNew+0x3e>
 801391a:	4b44      	ldr	r3, [pc, #272]	; (8013a2c <osThreadNew+0x148>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	2b02      	cmp	r3, #2
 8013920:	d07e      	beq.n	8013a20 <osThreadNew+0x13c>
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d07b      	beq.n	8013a20 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8013928:	2380      	movs	r3, #128	; 0x80
 801392a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801392c:	2318      	movs	r3, #24
 801392e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8013930:	2300      	movs	r3, #0
 8013932:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8013934:	f04f 33ff 	mov.w	r3, #4294967295
 8013938:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d045      	beq.n	80139cc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d002      	beq.n	801394e <osThreadNew+0x6a>
        name = attr->name;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	699b      	ldr	r3, [r3, #24]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d002      	beq.n	801395c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	699b      	ldr	r3, [r3, #24]
 801395a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801395e:	2b00      	cmp	r3, #0
 8013960:	d008      	beq.n	8013974 <osThreadNew+0x90>
 8013962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013964:	2b38      	cmp	r3, #56	; 0x38
 8013966:	d805      	bhi.n	8013974 <osThreadNew+0x90>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	685b      	ldr	r3, [r3, #4]
 801396c:	f003 0301 	and.w	r3, r3, #1
 8013970:	2b00      	cmp	r3, #0
 8013972:	d001      	beq.n	8013978 <osThreadNew+0x94>
        return (NULL);
 8013974:	2300      	movs	r3, #0
 8013976:	e054      	b.n	8013a22 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	695b      	ldr	r3, [r3, #20]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d003      	beq.n	8013988 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	695b      	ldr	r3, [r3, #20]
 8013984:	089b      	lsrs	r3, r3, #2
 8013986:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	689b      	ldr	r3, [r3, #8]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d00e      	beq.n	80139ae <osThreadNew+0xca>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	68db      	ldr	r3, [r3, #12]
 8013994:	2b5f      	cmp	r3, #95	; 0x5f
 8013996:	d90a      	bls.n	80139ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801399c:	2b00      	cmp	r3, #0
 801399e:	d006      	beq.n	80139ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	695b      	ldr	r3, [r3, #20]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d002      	beq.n	80139ae <osThreadNew+0xca>
        mem = 1;
 80139a8:	2301      	movs	r3, #1
 80139aa:	623b      	str	r3, [r7, #32]
 80139ac:	e010      	b.n	80139d0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	689b      	ldr	r3, [r3, #8]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d10c      	bne.n	80139d0 <osThreadNew+0xec>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	68db      	ldr	r3, [r3, #12]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d108      	bne.n	80139d0 <osThreadNew+0xec>
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	691b      	ldr	r3, [r3, #16]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d104      	bne.n	80139d0 <osThreadNew+0xec>
          mem = 0;
 80139c6:	2300      	movs	r3, #0
 80139c8:	623b      	str	r3, [r7, #32]
 80139ca:	e001      	b.n	80139d0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80139cc:	2300      	movs	r3, #0
 80139ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80139d0:	6a3b      	ldr	r3, [r7, #32]
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d110      	bne.n	80139f8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80139da:	687a      	ldr	r2, [r7, #4]
 80139dc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80139de:	9202      	str	r2, [sp, #8]
 80139e0:	9301      	str	r3, [sp, #4]
 80139e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e4:	9300      	str	r3, [sp, #0]
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80139ec:	68f8      	ldr	r0, [r7, #12]
 80139ee:	f001 fbeb 	bl	80151c8 <xTaskCreateStatic>
 80139f2:	4603      	mov	r3, r0
 80139f4:	613b      	str	r3, [r7, #16]
 80139f6:	e013      	b.n	8013a20 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80139f8:	6a3b      	ldr	r3, [r7, #32]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d110      	bne.n	8013a20 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80139fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a00:	b29a      	uxth	r2, r3
 8013a02:	f107 0310 	add.w	r3, r7, #16
 8013a06:	9301      	str	r3, [sp, #4]
 8013a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0a:	9300      	str	r3, [sp, #0]
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a10:	68f8      	ldr	r0, [r7, #12]
 8013a12:	f001 fc39 	bl	8015288 <xTaskCreate>
 8013a16:	4603      	mov	r3, r0
 8013a18:	2b01      	cmp	r3, #1
 8013a1a:	d001      	beq.n	8013a20 <osThreadNew+0x13c>
          hTask = NULL;
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013a20:	693b      	ldr	r3, [r7, #16]
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	3730      	adds	r7, #48	; 0x30
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}
 8013a2a:	bf00      	nop
 8013a2c:	20001174 	.word	0x20001174

08013a30 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b088      	sub	sp, #32
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a3c:	f3ef 8305 	mrs	r3, IPSR
 8013a40:	617b      	str	r3, [r7, #20]
  return(result);
 8013a42:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d10f      	bne.n	8013a68 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a48:	f3ef 8310 	mrs	r3, PRIMASK
 8013a4c:	613b      	str	r3, [r7, #16]
  return(result);
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d105      	bne.n	8013a60 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013a54:	f3ef 8311 	mrs	r3, BASEPRI
 8013a58:	60fb      	str	r3, [r7, #12]
  return(result);
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d007      	beq.n	8013a70 <osThreadSuspend+0x40>
 8013a60:	4b0c      	ldr	r3, [pc, #48]	; (8013a94 <osThreadSuspend+0x64>)
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	2b02      	cmp	r3, #2
 8013a66:	d103      	bne.n	8013a70 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8013a68:	f06f 0305 	mvn.w	r3, #5
 8013a6c:	61fb      	str	r3, [r7, #28]
 8013a6e:	e00b      	b.n	8013a88 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8013a70:	69bb      	ldr	r3, [r7, #24]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d103      	bne.n	8013a7e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8013a76:	f06f 0303 	mvn.w	r3, #3
 8013a7a:	61fb      	str	r3, [r7, #28]
 8013a7c:	e004      	b.n	8013a88 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8013a82:	69b8      	ldr	r0, [r7, #24]
 8013a84:	f001 fd86 	bl	8015594 <vTaskSuspend>
  }

  return (stat);
 8013a88:	69fb      	ldr	r3, [r7, #28]
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3720      	adds	r7, #32
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}
 8013a92:	bf00      	nop
 8013a94:	20001174 	.word	0x20001174

08013a98 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b086      	sub	sp, #24
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013aa0:	f3ef 8305 	mrs	r3, IPSR
 8013aa4:	613b      	str	r3, [r7, #16]
  return(result);
 8013aa6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d10f      	bne.n	8013acc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013aac:	f3ef 8310 	mrs	r3, PRIMASK
 8013ab0:	60fb      	str	r3, [r7, #12]
  return(result);
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d105      	bne.n	8013ac4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013ab8:	f3ef 8311 	mrs	r3, BASEPRI
 8013abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d007      	beq.n	8013ad4 <osDelay+0x3c>
 8013ac4:	4b0a      	ldr	r3, [pc, #40]	; (8013af0 <osDelay+0x58>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2b02      	cmp	r3, #2
 8013aca:	d103      	bne.n	8013ad4 <osDelay+0x3c>
    stat = osErrorISR;
 8013acc:	f06f 0305 	mvn.w	r3, #5
 8013ad0:	617b      	str	r3, [r7, #20]
 8013ad2:	e007      	b.n	8013ae4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d002      	beq.n	8013ae4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8013ade:	6878      	ldr	r0, [r7, #4]
 8013ae0:	f001 fd22 	bl	8015528 <vTaskDelay>
    }
  }

  return (stat);
 8013ae4:	697b      	ldr	r3, [r7, #20]
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	3718      	adds	r7, #24
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}
 8013aee:	bf00      	nop
 8013af0:	20001174 	.word	0x20001174

08013af4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b08a      	sub	sp, #40	; 0x28
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8013afc:	2300      	movs	r3, #0
 8013afe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b00:	f3ef 8305 	mrs	r3, IPSR
 8013b04:	613b      	str	r3, [r7, #16]
  return(result);
 8013b06:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	f040 8085 	bne.w	8013c18 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8013b12:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d105      	bne.n	8013b26 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8013b1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d003      	beq.n	8013b2e <osMutexNew+0x3a>
 8013b26:	4b3f      	ldr	r3, [pc, #252]	; (8013c24 <osMutexNew+0x130>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	2b02      	cmp	r3, #2
 8013b2c:	d074      	beq.n	8013c18 <osMutexNew+0x124>
    if (attr != NULL) {
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d003      	beq.n	8013b3c <osMutexNew+0x48>
      type = attr->attr_bits;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	685b      	ldr	r3, [r3, #4]
 8013b38:	623b      	str	r3, [r7, #32]
 8013b3a:	e001      	b.n	8013b40 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8013b40:	6a3b      	ldr	r3, [r7, #32]
 8013b42:	f003 0301 	and.w	r3, r3, #1
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d002      	beq.n	8013b50 <osMutexNew+0x5c>
      rmtx = 1U;
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	61fb      	str	r3, [r7, #28]
 8013b4e:	e001      	b.n	8013b54 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8013b50:	2300      	movs	r3, #0
 8013b52:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8013b54:	6a3b      	ldr	r3, [r7, #32]
 8013b56:	f003 0308 	and.w	r3, r3, #8
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d15c      	bne.n	8013c18 <osMutexNew+0x124>
      mem = -1;
 8013b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8013b62:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d015      	beq.n	8013b96 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	689b      	ldr	r3, [r3, #8]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d006      	beq.n	8013b80 <osMutexNew+0x8c>
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	68db      	ldr	r3, [r3, #12]
 8013b76:	2b4f      	cmp	r3, #79	; 0x4f
 8013b78:	d902      	bls.n	8013b80 <osMutexNew+0x8c>
          mem = 1;
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	61bb      	str	r3, [r7, #24]
 8013b7e:	e00c      	b.n	8013b9a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	689b      	ldr	r3, [r3, #8]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d108      	bne.n	8013b9a <osMutexNew+0xa6>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d104      	bne.n	8013b9a <osMutexNew+0xa6>
            mem = 0;
 8013b90:	2300      	movs	r3, #0
 8013b92:	61bb      	str	r3, [r7, #24]
 8013b94:	e001      	b.n	8013b9a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8013b96:	2300      	movs	r3, #0
 8013b98:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8013b9a:	69bb      	ldr	r3, [r7, #24]
 8013b9c:	2b01      	cmp	r3, #1
 8013b9e:	d112      	bne.n	8013bc6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8013ba0:	69fb      	ldr	r3, [r7, #28]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d007      	beq.n	8013bb6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	689b      	ldr	r3, [r3, #8]
 8013baa:	4619      	mov	r1, r3
 8013bac:	2004      	movs	r0, #4
 8013bae:	f000 fcbf 	bl	8014530 <xQueueCreateMutexStatic>
 8013bb2:	6278      	str	r0, [r7, #36]	; 0x24
 8013bb4:	e016      	b.n	8013be4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	689b      	ldr	r3, [r3, #8]
 8013bba:	4619      	mov	r1, r3
 8013bbc:	2001      	movs	r0, #1
 8013bbe:	f000 fcb7 	bl	8014530 <xQueueCreateMutexStatic>
 8013bc2:	6278      	str	r0, [r7, #36]	; 0x24
 8013bc4:	e00e      	b.n	8013be4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8013bc6:	69bb      	ldr	r3, [r7, #24]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d10b      	bne.n	8013be4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8013bcc:	69fb      	ldr	r3, [r7, #28]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d004      	beq.n	8013bdc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8013bd2:	2004      	movs	r0, #4
 8013bd4:	f000 fc94 	bl	8014500 <xQueueCreateMutex>
 8013bd8:	6278      	str	r0, [r7, #36]	; 0x24
 8013bda:	e003      	b.n	8013be4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8013bdc:	2001      	movs	r0, #1
 8013bde:	f000 fc8f 	bl	8014500 <xQueueCreateMutex>
 8013be2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8013be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d00c      	beq.n	8013c04 <osMutexNew+0x110>
        if (attr != NULL) {
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d003      	beq.n	8013bf8 <osMutexNew+0x104>
          name = attr->name;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	617b      	str	r3, [r7, #20]
 8013bf6:	e001      	b.n	8013bfc <osMutexNew+0x108>
        } else {
          name = NULL;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8013bfc:	6979      	ldr	r1, [r7, #20]
 8013bfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c00:	f001 fa82 	bl	8015108 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8013c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d006      	beq.n	8013c18 <osMutexNew+0x124>
 8013c0a:	69fb      	ldr	r3, [r7, #28]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d003      	beq.n	8013c18 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8013c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c12:	f043 0301 	orr.w	r3, r3, #1
 8013c16:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8013c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3728      	adds	r7, #40	; 0x28
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	bf00      	nop
 8013c24:	20001174 	.word	0x20001174

08013c28 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b088      	sub	sp, #32
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f023 0301 	bic.w	r3, r3, #1
 8013c38:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f003 0301 	and.w	r3, r3, #1
 8013c40:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8013c42:	2300      	movs	r3, #0
 8013c44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c46:	f3ef 8305 	mrs	r3, IPSR
 8013c4a:	613b      	str	r3, [r7, #16]
  return(result);
 8013c4c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d10f      	bne.n	8013c72 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c52:	f3ef 8310 	mrs	r3, PRIMASK
 8013c56:	60fb      	str	r3, [r7, #12]
  return(result);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d105      	bne.n	8013c6a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8013c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d007      	beq.n	8013c7a <osMutexAcquire+0x52>
 8013c6a:	4b1d      	ldr	r3, [pc, #116]	; (8013ce0 <osMutexAcquire+0xb8>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	2b02      	cmp	r3, #2
 8013c70:	d103      	bne.n	8013c7a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8013c72:	f06f 0305 	mvn.w	r3, #5
 8013c76:	61fb      	str	r3, [r7, #28]
 8013c78:	e02c      	b.n	8013cd4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8013c7a:	69bb      	ldr	r3, [r7, #24]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d103      	bne.n	8013c88 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8013c80:	f06f 0303 	mvn.w	r3, #3
 8013c84:	61fb      	str	r3, [r7, #28]
 8013c86:	e025      	b.n	8013cd4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d011      	beq.n	8013cb2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8013c8e:	6839      	ldr	r1, [r7, #0]
 8013c90:	69b8      	ldr	r0, [r7, #24]
 8013c92:	f000 fc9d 	bl	80145d0 <xQueueTakeMutexRecursive>
 8013c96:	4603      	mov	r3, r0
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	d01b      	beq.n	8013cd4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d003      	beq.n	8013caa <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8013ca2:	f06f 0301 	mvn.w	r3, #1
 8013ca6:	61fb      	str	r3, [r7, #28]
 8013ca8:	e014      	b.n	8013cd4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8013caa:	f06f 0302 	mvn.w	r3, #2
 8013cae:	61fb      	str	r3, [r7, #28]
 8013cb0:	e010      	b.n	8013cd4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8013cb2:	6839      	ldr	r1, [r7, #0]
 8013cb4:	69b8      	ldr	r0, [r7, #24]
 8013cb6:	f000 ff5b 	bl	8014b70 <xQueueSemaphoreTake>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	2b01      	cmp	r3, #1
 8013cbe:	d009      	beq.n	8013cd4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d003      	beq.n	8013cce <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8013cc6:	f06f 0301 	mvn.w	r3, #1
 8013cca:	61fb      	str	r3, [r7, #28]
 8013ccc:	e002      	b.n	8013cd4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8013cce:	f06f 0302 	mvn.w	r3, #2
 8013cd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013cd4:	69fb      	ldr	r3, [r7, #28]
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3720      	adds	r7, #32
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	20001174 	.word	0x20001174

08013ce4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b088      	sub	sp, #32
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f023 0301 	bic.w	r3, r3, #1
 8013cf2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f003 0301 	and.w	r3, r3, #1
 8013cfa:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013d00:	f3ef 8305 	mrs	r3, IPSR
 8013d04:	613b      	str	r3, [r7, #16]
  return(result);
 8013d06:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d10f      	bne.n	8013d2c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8013d10:	60fb      	str	r3, [r7, #12]
  return(result);
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d105      	bne.n	8013d24 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013d18:	f3ef 8311 	mrs	r3, BASEPRI
 8013d1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d007      	beq.n	8013d34 <osMutexRelease+0x50>
 8013d24:	4b16      	ldr	r3, [pc, #88]	; (8013d80 <osMutexRelease+0x9c>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	2b02      	cmp	r3, #2
 8013d2a:	d103      	bne.n	8013d34 <osMutexRelease+0x50>
    stat = osErrorISR;
 8013d2c:	f06f 0305 	mvn.w	r3, #5
 8013d30:	61fb      	str	r3, [r7, #28]
 8013d32:	e01f      	b.n	8013d74 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8013d34:	69bb      	ldr	r3, [r7, #24]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d103      	bne.n	8013d42 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8013d3a:	f06f 0303 	mvn.w	r3, #3
 8013d3e:	61fb      	str	r3, [r7, #28]
 8013d40:	e018      	b.n	8013d74 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d009      	beq.n	8013d5c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8013d48:	69b8      	ldr	r0, [r7, #24]
 8013d4a:	f000 fc0c 	bl	8014566 <xQueueGiveMutexRecursive>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	2b01      	cmp	r3, #1
 8013d52:	d00f      	beq.n	8013d74 <osMutexRelease+0x90>
        stat = osErrorResource;
 8013d54:	f06f 0302 	mvn.w	r3, #2
 8013d58:	61fb      	str	r3, [r7, #28]
 8013d5a:	e00b      	b.n	8013d74 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	2200      	movs	r2, #0
 8013d60:	2100      	movs	r1, #0
 8013d62:	69b8      	ldr	r0, [r7, #24]
 8013d64:	f000 fc6c 	bl	8014640 <xQueueGenericSend>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	2b01      	cmp	r3, #1
 8013d6c:	d002      	beq.n	8013d74 <osMutexRelease+0x90>
        stat = osErrorResource;
 8013d6e:	f06f 0302 	mvn.w	r3, #2
 8013d72:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8013d74:	69fb      	ldr	r3, [r7, #28]
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	3720      	adds	r7, #32
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd80      	pop	{r7, pc}
 8013d7e:	bf00      	nop
 8013d80:	20001174 	.word	0x20001174

08013d84 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b08c      	sub	sp, #48	; 0x30
 8013d88:	af02      	add	r7, sp, #8
 8013d8a:	60f8      	str	r0, [r7, #12]
 8013d8c:	60b9      	str	r1, [r7, #8]
 8013d8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013d90:	2300      	movs	r3, #0
 8013d92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013d94:	f3ef 8305 	mrs	r3, IPSR
 8013d98:	61bb      	str	r3, [r7, #24]
  return(result);
 8013d9a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d170      	bne.n	8013e82 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013da0:	f3ef 8310 	mrs	r3, PRIMASK
 8013da4:	617b      	str	r3, [r7, #20]
  return(result);
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d105      	bne.n	8013db8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013dac:	f3ef 8311 	mrs	r3, BASEPRI
 8013db0:	613b      	str	r3, [r7, #16]
  return(result);
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d003      	beq.n	8013dc0 <osMessageQueueNew+0x3c>
 8013db8:	4b34      	ldr	r3, [pc, #208]	; (8013e8c <osMessageQueueNew+0x108>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2b02      	cmp	r3, #2
 8013dbe:	d060      	beq.n	8013e82 <osMessageQueueNew+0xfe>
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d05d      	beq.n	8013e82 <osMessageQueueNew+0xfe>
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d05a      	beq.n	8013e82 <osMessageQueueNew+0xfe>
    mem = -1;
 8013dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8013dd0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d029      	beq.n	8013e2c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	689b      	ldr	r3, [r3, #8]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d012      	beq.n	8013e06 <osMessageQueueNew+0x82>
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	2b4f      	cmp	r3, #79	; 0x4f
 8013de6:	d90e      	bls.n	8013e06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00a      	beq.n	8013e06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	695a      	ldr	r2, [r3, #20]
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	68b9      	ldr	r1, [r7, #8]
 8013df8:	fb01 f303 	mul.w	r3, r1, r3
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d302      	bcc.n	8013e06 <osMessageQueueNew+0x82>
        mem = 1;
 8013e00:	2301      	movs	r3, #1
 8013e02:	623b      	str	r3, [r7, #32]
 8013e04:	e014      	b.n	8013e30 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	689b      	ldr	r3, [r3, #8]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d110      	bne.n	8013e30 <osMessageQueueNew+0xac>
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	68db      	ldr	r3, [r3, #12]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d10c      	bne.n	8013e30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d108      	bne.n	8013e30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	695b      	ldr	r3, [r3, #20]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d104      	bne.n	8013e30 <osMessageQueueNew+0xac>
          mem = 0;
 8013e26:	2300      	movs	r3, #0
 8013e28:	623b      	str	r3, [r7, #32]
 8013e2a:	e001      	b.n	8013e30 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013e30:	6a3b      	ldr	r3, [r7, #32]
 8013e32:	2b01      	cmp	r3, #1
 8013e34:	d10c      	bne.n	8013e50 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	691a      	ldr	r2, [r3, #16]
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	6899      	ldr	r1, [r3, #8]
 8013e3e:	2300      	movs	r3, #0
 8013e40:	9300      	str	r3, [sp, #0]
 8013e42:	460b      	mov	r3, r1
 8013e44:	68b9      	ldr	r1, [r7, #8]
 8013e46:	68f8      	ldr	r0, [r7, #12]
 8013e48:	f000 fa5a 	bl	8014300 <xQueueGenericCreateStatic>
 8013e4c:	6278      	str	r0, [r7, #36]	; 0x24
 8013e4e:	e008      	b.n	8013e62 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8013e50:	6a3b      	ldr	r3, [r7, #32]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d105      	bne.n	8013e62 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8013e56:	2200      	movs	r2, #0
 8013e58:	68b9      	ldr	r1, [r7, #8]
 8013e5a:	68f8      	ldr	r0, [r7, #12]
 8013e5c:	f000 facd 	bl	80143fa <xQueueGenericCreate>
 8013e60:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d00c      	beq.n	8013e82 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d003      	beq.n	8013e76 <osMessageQueueNew+0xf2>
        name = attr->name;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	61fb      	str	r3, [r7, #28]
 8013e74:	e001      	b.n	8013e7a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8013e76:	2300      	movs	r3, #0
 8013e78:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8013e7a:	69f9      	ldr	r1, [r7, #28]
 8013e7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e7e:	f001 f943 	bl	8015108 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3728      	adds	r7, #40	; 0x28
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	20001174 	.word	0x20001174

08013e90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b08a      	sub	sp, #40	; 0x28
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	60f8      	str	r0, [r7, #12]
 8013e98:	60b9      	str	r1, [r7, #8]
 8013e9a:	603b      	str	r3, [r7, #0]
 8013e9c:	4613      	mov	r3, r2
 8013e9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013ea8:	f3ef 8305 	mrs	r3, IPSR
 8013eac:	61fb      	str	r3, [r7, #28]
  return(result);
 8013eae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d10f      	bne.n	8013ed4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8013eb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8013eba:	69bb      	ldr	r3, [r7, #24]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d105      	bne.n	8013ecc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8013ec4:	617b      	str	r3, [r7, #20]
  return(result);
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d02c      	beq.n	8013f26 <osMessageQueuePut+0x96>
 8013ecc:	4b28      	ldr	r3, [pc, #160]	; (8013f70 <osMessageQueuePut+0xe0>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	2b02      	cmp	r3, #2
 8013ed2:	d128      	bne.n	8013f26 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013ed4:	6a3b      	ldr	r3, [r7, #32]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d005      	beq.n	8013ee6 <osMessageQueuePut+0x56>
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d002      	beq.n	8013ee6 <osMessageQueuePut+0x56>
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d003      	beq.n	8013eee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8013ee6:	f06f 0303 	mvn.w	r3, #3
 8013eea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013eec:	e039      	b.n	8013f62 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013ef2:	f107 0210 	add.w	r2, r7, #16
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	68b9      	ldr	r1, [r7, #8]
 8013efa:	6a38      	ldr	r0, [r7, #32]
 8013efc:	f000 fcaa 	bl	8014854 <xQueueGenericSendFromISR>
 8013f00:	4603      	mov	r3, r0
 8013f02:	2b01      	cmp	r3, #1
 8013f04:	d003      	beq.n	8013f0e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8013f06:	f06f 0302 	mvn.w	r3, #2
 8013f0a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013f0c:	e029      	b.n	8013f62 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d026      	beq.n	8013f62 <osMessageQueuePut+0xd2>
 8013f14:	4b17      	ldr	r3, [pc, #92]	; (8013f74 <osMessageQueuePut+0xe4>)
 8013f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f1a:	601a      	str	r2, [r3, #0]
 8013f1c:	f3bf 8f4f 	dsb	sy
 8013f20:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013f24:	e01d      	b.n	8013f62 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013f26:	6a3b      	ldr	r3, [r7, #32]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d002      	beq.n	8013f32 <osMessageQueuePut+0xa2>
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d103      	bne.n	8013f3a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8013f32:	f06f 0303 	mvn.w	r3, #3
 8013f36:	627b      	str	r3, [r7, #36]	; 0x24
 8013f38:	e014      	b.n	8013f64 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	683a      	ldr	r2, [r7, #0]
 8013f3e:	68b9      	ldr	r1, [r7, #8]
 8013f40:	6a38      	ldr	r0, [r7, #32]
 8013f42:	f000 fb7d 	bl	8014640 <xQueueGenericSend>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d00b      	beq.n	8013f64 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d003      	beq.n	8013f5a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8013f52:	f06f 0301 	mvn.w	r3, #1
 8013f56:	627b      	str	r3, [r7, #36]	; 0x24
 8013f58:	e004      	b.n	8013f64 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8013f5a:	f06f 0302 	mvn.w	r3, #2
 8013f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8013f60:	e000      	b.n	8013f64 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013f62:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013f66:	4618      	mov	r0, r3
 8013f68:	3728      	adds	r7, #40	; 0x28
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}
 8013f6e:	bf00      	nop
 8013f70:	20001174 	.word	0x20001174
 8013f74:	e000ed04 	.word	0xe000ed04

08013f78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b08a      	sub	sp, #40	; 0x28
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	60f8      	str	r0, [r7, #12]
 8013f80:	60b9      	str	r1, [r7, #8]
 8013f82:	607a      	str	r2, [r7, #4]
 8013f84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013f8e:	f3ef 8305 	mrs	r3, IPSR
 8013f92:	61fb      	str	r3, [r7, #28]
  return(result);
 8013f94:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d10f      	bne.n	8013fba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8013f9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d105      	bne.n	8013fb2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8013faa:	617b      	str	r3, [r7, #20]
  return(result);
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d02c      	beq.n	801400c <osMessageQueueGet+0x94>
 8013fb2:	4b28      	ldr	r3, [pc, #160]	; (8014054 <osMessageQueueGet+0xdc>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	2b02      	cmp	r3, #2
 8013fb8:	d128      	bne.n	801400c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013fba:	6a3b      	ldr	r3, [r7, #32]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d005      	beq.n	8013fcc <osMessageQueueGet+0x54>
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d002      	beq.n	8013fcc <osMessageQueueGet+0x54>
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d003      	beq.n	8013fd4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8013fcc:	f06f 0303 	mvn.w	r3, #3
 8013fd0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013fd2:	e038      	b.n	8014046 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013fd8:	f107 0310 	add.w	r3, r7, #16
 8013fdc:	461a      	mov	r2, r3
 8013fde:	68b9      	ldr	r1, [r7, #8]
 8013fe0:	6a38      	ldr	r0, [r7, #32]
 8013fe2:	f000 fedd 	bl	8014da0 <xQueueReceiveFromISR>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	2b01      	cmp	r3, #1
 8013fea:	d003      	beq.n	8013ff4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8013fec:	f06f 0302 	mvn.w	r3, #2
 8013ff0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013ff2:	e028      	b.n	8014046 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d025      	beq.n	8014046 <osMessageQueueGet+0xce>
 8013ffa:	4b17      	ldr	r3, [pc, #92]	; (8014058 <osMessageQueueGet+0xe0>)
 8013ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014000:	601a      	str	r2, [r3, #0]
 8014002:	f3bf 8f4f 	dsb	sy
 8014006:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801400a:	e01c      	b.n	8014046 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801400c:	6a3b      	ldr	r3, [r7, #32]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d002      	beq.n	8014018 <osMessageQueueGet+0xa0>
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d103      	bne.n	8014020 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8014018:	f06f 0303 	mvn.w	r3, #3
 801401c:	627b      	str	r3, [r7, #36]	; 0x24
 801401e:	e013      	b.n	8014048 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014020:	683a      	ldr	r2, [r7, #0]
 8014022:	68b9      	ldr	r1, [r7, #8]
 8014024:	6a38      	ldr	r0, [r7, #32]
 8014026:	f000 fcb9 	bl	801499c <xQueueReceive>
 801402a:	4603      	mov	r3, r0
 801402c:	2b01      	cmp	r3, #1
 801402e:	d00b      	beq.n	8014048 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d003      	beq.n	801403e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8014036:	f06f 0301 	mvn.w	r3, #1
 801403a:	627b      	str	r3, [r7, #36]	; 0x24
 801403c:	e004      	b.n	8014048 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801403e:	f06f 0302 	mvn.w	r3, #2
 8014042:	627b      	str	r3, [r7, #36]	; 0x24
 8014044:	e000      	b.n	8014048 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014046:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8014048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801404a:	4618      	mov	r0, r3
 801404c:	3728      	adds	r7, #40	; 0x28
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}
 8014052:	bf00      	nop
 8014054:	20001174 	.word	0x20001174
 8014058:	e000ed04 	.word	0xe000ed04

0801405c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801405c:	b480      	push	{r7}
 801405e:	b085      	sub	sp, #20
 8014060:	af00      	add	r7, sp, #0
 8014062:	60f8      	str	r0, [r7, #12]
 8014064:	60b9      	str	r1, [r7, #8]
 8014066:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	4a07      	ldr	r2, [pc, #28]	; (8014088 <vApplicationGetIdleTaskMemory+0x2c>)
 801406c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	4a06      	ldr	r2, [pc, #24]	; (801408c <vApplicationGetIdleTaskMemory+0x30>)
 8014072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2280      	movs	r2, #128	; 0x80
 8014078:	601a      	str	r2, [r3, #0]
}
 801407a:	bf00      	nop
 801407c:	3714      	adds	r7, #20
 801407e:	46bd      	mov	sp, r7
 8014080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014084:	4770      	bx	lr
 8014086:	bf00      	nop
 8014088:	20001178 	.word	0x20001178
 801408c:	200011d8 	.word	0x200011d8

08014090 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014090:	b480      	push	{r7}
 8014092:	b085      	sub	sp, #20
 8014094:	af00      	add	r7, sp, #0
 8014096:	60f8      	str	r0, [r7, #12]
 8014098:	60b9      	str	r1, [r7, #8]
 801409a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	4a07      	ldr	r2, [pc, #28]	; (80140bc <vApplicationGetTimerTaskMemory+0x2c>)
 80140a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	4a06      	ldr	r2, [pc, #24]	; (80140c0 <vApplicationGetTimerTaskMemory+0x30>)
 80140a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80140ae:	601a      	str	r2, [r3, #0]
}
 80140b0:	bf00      	nop
 80140b2:	3714      	adds	r7, #20
 80140b4:	46bd      	mov	sp, r7
 80140b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ba:	4770      	bx	lr
 80140bc:	200013d8 	.word	0x200013d8
 80140c0:	20001438 	.word	0x20001438

080140c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80140c4:	b480      	push	{r7}
 80140c6:	b083      	sub	sp, #12
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f103 0208 	add.w	r2, r3, #8
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f04f 32ff 	mov.w	r2, #4294967295
 80140dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f103 0208 	add.w	r2, r3, #8
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f103 0208 	add.w	r2, r3, #8
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2200      	movs	r2, #0
 80140f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80140f8:	bf00      	nop
 80140fa:	370c      	adds	r7, #12
 80140fc:	46bd      	mov	sp, r7
 80140fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014102:	4770      	bx	lr

08014104 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014104:	b480      	push	{r7}
 8014106:	b083      	sub	sp, #12
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2200      	movs	r2, #0
 8014110:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014112:	bf00      	nop
 8014114:	370c      	adds	r7, #12
 8014116:	46bd      	mov	sp, r7
 8014118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411c:	4770      	bx	lr

0801411e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801411e:	b480      	push	{r7}
 8014120:	b085      	sub	sp, #20
 8014122:	af00      	add	r7, sp, #0
 8014124:	6078      	str	r0, [r7, #4]
 8014126:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	68fa      	ldr	r2, [r7, #12]
 8014132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	689a      	ldr	r2, [r3, #8]
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	689b      	ldr	r3, [r3, #8]
 8014140:	683a      	ldr	r2, [r7, #0]
 8014142:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	683a      	ldr	r2, [r7, #0]
 8014148:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	687a      	ldr	r2, [r7, #4]
 801414e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	1c5a      	adds	r2, r3, #1
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	601a      	str	r2, [r3, #0]
}
 801415a:	bf00      	nop
 801415c:	3714      	adds	r7, #20
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr

08014166 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014166:	b480      	push	{r7}
 8014168:	b085      	sub	sp, #20
 801416a:	af00      	add	r7, sp, #0
 801416c:	6078      	str	r0, [r7, #4]
 801416e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	f1b3 3fff 	cmp.w	r3, #4294967295
 801417c:	d103      	bne.n	8014186 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	691b      	ldr	r3, [r3, #16]
 8014182:	60fb      	str	r3, [r7, #12]
 8014184:	e00c      	b.n	80141a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	3308      	adds	r3, #8
 801418a:	60fb      	str	r3, [r7, #12]
 801418c:	e002      	b.n	8014194 <vListInsert+0x2e>
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	60fb      	str	r3, [r7, #12]
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	685b      	ldr	r3, [r3, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	68ba      	ldr	r2, [r7, #8]
 801419c:	429a      	cmp	r2, r3
 801419e:	d2f6      	bcs.n	801418e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	685a      	ldr	r2, [r3, #4]
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	683a      	ldr	r2, [r7, #0]
 80141ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	68fa      	ldr	r2, [r7, #12]
 80141b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	683a      	ldr	r2, [r7, #0]
 80141ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	1c5a      	adds	r2, r3, #1
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	601a      	str	r2, [r3, #0]
}
 80141cc:	bf00      	nop
 80141ce:	3714      	adds	r7, #20
 80141d0:	46bd      	mov	sp, r7
 80141d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d6:	4770      	bx	lr

080141d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80141d8:	b480      	push	{r7}
 80141da:	b085      	sub	sp, #20
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	691b      	ldr	r3, [r3, #16]
 80141e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	685b      	ldr	r3, [r3, #4]
 80141ea:	687a      	ldr	r2, [r7, #4]
 80141ec:	6892      	ldr	r2, [r2, #8]
 80141ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	689b      	ldr	r3, [r3, #8]
 80141f4:	687a      	ldr	r2, [r7, #4]
 80141f6:	6852      	ldr	r2, [r2, #4]
 80141f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	687a      	ldr	r2, [r7, #4]
 8014200:	429a      	cmp	r2, r3
 8014202:	d103      	bne.n	801420c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	689a      	ldr	r2, [r3, #8]
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2200      	movs	r2, #0
 8014210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	1e5a      	subs	r2, r3, #1
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	681b      	ldr	r3, [r3, #0]
}
 8014220:	4618      	mov	r0, r3
 8014222:	3714      	adds	r7, #20
 8014224:	46bd      	mov	sp, r7
 8014226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422a:	4770      	bx	lr

0801422c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d10b      	bne.n	8014258 <xQueueGenericReset+0x2c>
	__asm volatile
 8014240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014244:	b672      	cpsid	i
 8014246:	f383 8811 	msr	BASEPRI, r3
 801424a:	f3bf 8f6f 	isb	sy
 801424e:	f3bf 8f4f 	dsb	sy
 8014252:	b662      	cpsie	i
 8014254:	60bb      	str	r3, [r7, #8]
 8014256:	e7fe      	b.n	8014256 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8014258:	f002 fcee 	bl	8016c38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	681a      	ldr	r2, [r3, #0]
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014264:	68f9      	ldr	r1, [r7, #12]
 8014266:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014268:	fb01 f303 	mul.w	r3, r1, r3
 801426c:	441a      	add	r2, r3
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	2200      	movs	r2, #0
 8014276:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	681a      	ldr	r2, [r3, #0]
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	681a      	ldr	r2, [r3, #0]
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014288:	3b01      	subs	r3, #1
 801428a:	68f9      	ldr	r1, [r7, #12]
 801428c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801428e:	fb01 f303 	mul.w	r3, r1, r3
 8014292:	441a      	add	r2, r3
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	22ff      	movs	r2, #255	; 0xff
 801429c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	22ff      	movs	r2, #255	; 0xff
 80142a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d114      	bne.n	80142d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	691b      	ldr	r3, [r3, #16]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d01a      	beq.n	80142ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	3310      	adds	r3, #16
 80142ba:	4618      	mov	r0, r3
 80142bc:	f001 fcae 	bl	8015c1c <xTaskRemoveFromEventList>
 80142c0:	4603      	mov	r3, r0
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d012      	beq.n	80142ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80142c6:	4b0d      	ldr	r3, [pc, #52]	; (80142fc <xQueueGenericReset+0xd0>)
 80142c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142cc:	601a      	str	r2, [r3, #0]
 80142ce:	f3bf 8f4f 	dsb	sy
 80142d2:	f3bf 8f6f 	isb	sy
 80142d6:	e009      	b.n	80142ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	3310      	adds	r3, #16
 80142dc:	4618      	mov	r0, r3
 80142de:	f7ff fef1 	bl	80140c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	3324      	adds	r3, #36	; 0x24
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7ff feec 	bl	80140c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80142ec:	f002 fcd6 	bl	8016c9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80142f0:	2301      	movs	r3, #1
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3710      	adds	r7, #16
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	e000ed04 	.word	0xe000ed04

08014300 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014300:	b580      	push	{r7, lr}
 8014302:	b08e      	sub	sp, #56	; 0x38
 8014304:	af02      	add	r7, sp, #8
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	60b9      	str	r1, [r7, #8]
 801430a:	607a      	str	r2, [r7, #4]
 801430c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d10b      	bne.n	801432c <xQueueGenericCreateStatic+0x2c>
 8014314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014318:	b672      	cpsid	i
 801431a:	f383 8811 	msr	BASEPRI, r3
 801431e:	f3bf 8f6f 	isb	sy
 8014322:	f3bf 8f4f 	dsb	sy
 8014326:	b662      	cpsie	i
 8014328:	62bb      	str	r3, [r7, #40]	; 0x28
 801432a:	e7fe      	b.n	801432a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d10b      	bne.n	801434a <xQueueGenericCreateStatic+0x4a>
 8014332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014336:	b672      	cpsid	i
 8014338:	f383 8811 	msr	BASEPRI, r3
 801433c:	f3bf 8f6f 	isb	sy
 8014340:	f3bf 8f4f 	dsb	sy
 8014344:	b662      	cpsie	i
 8014346:	627b      	str	r3, [r7, #36]	; 0x24
 8014348:	e7fe      	b.n	8014348 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d002      	beq.n	8014356 <xQueueGenericCreateStatic+0x56>
 8014350:	68bb      	ldr	r3, [r7, #8]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d001      	beq.n	801435a <xQueueGenericCreateStatic+0x5a>
 8014356:	2301      	movs	r3, #1
 8014358:	e000      	b.n	801435c <xQueueGenericCreateStatic+0x5c>
 801435a:	2300      	movs	r3, #0
 801435c:	2b00      	cmp	r3, #0
 801435e:	d10b      	bne.n	8014378 <xQueueGenericCreateStatic+0x78>
 8014360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014364:	b672      	cpsid	i
 8014366:	f383 8811 	msr	BASEPRI, r3
 801436a:	f3bf 8f6f 	isb	sy
 801436e:	f3bf 8f4f 	dsb	sy
 8014372:	b662      	cpsie	i
 8014374:	623b      	str	r3, [r7, #32]
 8014376:	e7fe      	b.n	8014376 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d102      	bne.n	8014384 <xQueueGenericCreateStatic+0x84>
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d101      	bne.n	8014388 <xQueueGenericCreateStatic+0x88>
 8014384:	2301      	movs	r3, #1
 8014386:	e000      	b.n	801438a <xQueueGenericCreateStatic+0x8a>
 8014388:	2300      	movs	r3, #0
 801438a:	2b00      	cmp	r3, #0
 801438c:	d10b      	bne.n	80143a6 <xQueueGenericCreateStatic+0xa6>
 801438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014392:	b672      	cpsid	i
 8014394:	f383 8811 	msr	BASEPRI, r3
 8014398:	f3bf 8f6f 	isb	sy
 801439c:	f3bf 8f4f 	dsb	sy
 80143a0:	b662      	cpsie	i
 80143a2:	61fb      	str	r3, [r7, #28]
 80143a4:	e7fe      	b.n	80143a4 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80143a6:	2350      	movs	r3, #80	; 0x50
 80143a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	2b50      	cmp	r3, #80	; 0x50
 80143ae:	d00b      	beq.n	80143c8 <xQueueGenericCreateStatic+0xc8>
 80143b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143b4:	b672      	cpsid	i
 80143b6:	f383 8811 	msr	BASEPRI, r3
 80143ba:	f3bf 8f6f 	isb	sy
 80143be:	f3bf 8f4f 	dsb	sy
 80143c2:	b662      	cpsie	i
 80143c4:	61bb      	str	r3, [r7, #24]
 80143c6:	e7fe      	b.n	80143c6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80143c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80143ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d00d      	beq.n	80143f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80143d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d6:	2201      	movs	r2, #1
 80143d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80143dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80143e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	4613      	mov	r3, r2
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	68b9      	ldr	r1, [r7, #8]
 80143ea:	68f8      	ldr	r0, [r7, #12]
 80143ec:	f000 f846 	bl	801447c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80143f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3730      	adds	r7, #48	; 0x30
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}

080143fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80143fa:	b580      	push	{r7, lr}
 80143fc:	b08a      	sub	sp, #40	; 0x28
 80143fe:	af02      	add	r7, sp, #8
 8014400:	60f8      	str	r0, [r7, #12]
 8014402:	60b9      	str	r1, [r7, #8]
 8014404:	4613      	mov	r3, r2
 8014406:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d10b      	bne.n	8014426 <xQueueGenericCreate+0x2c>
 801440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014412:	b672      	cpsid	i
 8014414:	f383 8811 	msr	BASEPRI, r3
 8014418:	f3bf 8f6f 	isb	sy
 801441c:	f3bf 8f4f 	dsb	sy
 8014420:	b662      	cpsie	i
 8014422:	613b      	str	r3, [r7, #16]
 8014424:	e7fe      	b.n	8014424 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d102      	bne.n	8014432 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801442c:	2300      	movs	r3, #0
 801442e:	61fb      	str	r3, [r7, #28]
 8014430:	e004      	b.n	801443c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	68ba      	ldr	r2, [r7, #8]
 8014436:	fb02 f303 	mul.w	r3, r2, r3
 801443a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801443c:	69fb      	ldr	r3, [r7, #28]
 801443e:	3350      	adds	r3, #80	; 0x50
 8014440:	4618      	mov	r0, r3
 8014442:	f002 fd1b 	bl	8016e7c <pvPortMalloc>
 8014446:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014448:	69bb      	ldr	r3, [r7, #24]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d011      	beq.n	8014472 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801444e:	69bb      	ldr	r3, [r7, #24]
 8014450:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	3350      	adds	r3, #80	; 0x50
 8014456:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014458:	69bb      	ldr	r3, [r7, #24]
 801445a:	2200      	movs	r2, #0
 801445c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014460:	79fa      	ldrb	r2, [r7, #7]
 8014462:	69bb      	ldr	r3, [r7, #24]
 8014464:	9300      	str	r3, [sp, #0]
 8014466:	4613      	mov	r3, r2
 8014468:	697a      	ldr	r2, [r7, #20]
 801446a:	68b9      	ldr	r1, [r7, #8]
 801446c:	68f8      	ldr	r0, [r7, #12]
 801446e:	f000 f805 	bl	801447c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014472:	69bb      	ldr	r3, [r7, #24]
	}
 8014474:	4618      	mov	r0, r3
 8014476:	3720      	adds	r7, #32
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}

0801447c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b084      	sub	sp, #16
 8014480:	af00      	add	r7, sp, #0
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	60b9      	str	r1, [r7, #8]
 8014486:	607a      	str	r2, [r7, #4]
 8014488:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d103      	bne.n	8014498 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014490:	69bb      	ldr	r3, [r7, #24]
 8014492:	69ba      	ldr	r2, [r7, #24]
 8014494:	601a      	str	r2, [r3, #0]
 8014496:	e002      	b.n	801449e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014498:	69bb      	ldr	r3, [r7, #24]
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801449e:	69bb      	ldr	r3, [r7, #24]
 80144a0:	68fa      	ldr	r2, [r7, #12]
 80144a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80144a4:	69bb      	ldr	r3, [r7, #24]
 80144a6:	68ba      	ldr	r2, [r7, #8]
 80144a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80144aa:	2101      	movs	r1, #1
 80144ac:	69b8      	ldr	r0, [r7, #24]
 80144ae:	f7ff febd 	bl	801422c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80144b2:	69bb      	ldr	r3, [r7, #24]
 80144b4:	78fa      	ldrb	r2, [r7, #3]
 80144b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80144ba:	69bb      	ldr	r3, [r7, #24]
 80144bc:	3348      	adds	r3, #72	; 0x48
 80144be:	4618      	mov	r0, r3
 80144c0:	f7ec fc46 	bl	8000d50 <TimeDoctor_QUEUE_CREATE>
}
 80144c4:	bf00      	nop
 80144c6:	3710      	adds	r7, #16
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}

080144cc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b082      	sub	sp, #8
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d00e      	beq.n	80144f8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2200      	movs	r2, #0
 80144de:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2200      	movs	r2, #0
 80144e4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80144ec:	2300      	movs	r3, #0
 80144ee:	2200      	movs	r2, #0
 80144f0:	2100      	movs	r1, #0
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f000 f8a4 	bl	8014640 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80144f8:	bf00      	nop
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
 8014506:	4603      	mov	r3, r0
 8014508:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801450a:	2301      	movs	r3, #1
 801450c:	617b      	str	r3, [r7, #20]
 801450e:	2300      	movs	r3, #0
 8014510:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014512:	79fb      	ldrb	r3, [r7, #7]
 8014514:	461a      	mov	r2, r3
 8014516:	6939      	ldr	r1, [r7, #16]
 8014518:	6978      	ldr	r0, [r7, #20]
 801451a:	f7ff ff6e 	bl	80143fa <xQueueGenericCreate>
 801451e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014520:	68f8      	ldr	r0, [r7, #12]
 8014522:	f7ff ffd3 	bl	80144cc <prvInitialiseMutex>

		return xNewQueue;
 8014526:	68fb      	ldr	r3, [r7, #12]
	}
 8014528:	4618      	mov	r0, r3
 801452a:	3718      	adds	r7, #24
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8014530:	b580      	push	{r7, lr}
 8014532:	b088      	sub	sp, #32
 8014534:	af02      	add	r7, sp, #8
 8014536:	4603      	mov	r3, r0
 8014538:	6039      	str	r1, [r7, #0]
 801453a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801453c:	2301      	movs	r3, #1
 801453e:	617b      	str	r3, [r7, #20]
 8014540:	2300      	movs	r3, #0
 8014542:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8014544:	79fb      	ldrb	r3, [r7, #7]
 8014546:	9300      	str	r3, [sp, #0]
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	2200      	movs	r2, #0
 801454c:	6939      	ldr	r1, [r7, #16]
 801454e:	6978      	ldr	r0, [r7, #20]
 8014550:	f7ff fed6 	bl	8014300 <xQueueGenericCreateStatic>
 8014554:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014556:	68f8      	ldr	r0, [r7, #12]
 8014558:	f7ff ffb8 	bl	80144cc <prvInitialiseMutex>

		return xNewQueue;
 801455c:	68fb      	ldr	r3, [r7, #12]
	}
 801455e:	4618      	mov	r0, r3
 8014560:	3718      	adds	r7, #24
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}

08014566 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8014566:	b590      	push	{r4, r7, lr}
 8014568:	b087      	sub	sp, #28
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d10b      	bne.n	8014590 <xQueueGiveMutexRecursive+0x2a>
 8014578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801457c:	b672      	cpsid	i
 801457e:	f383 8811 	msr	BASEPRI, r3
 8014582:	f3bf 8f6f 	isb	sy
 8014586:	f3bf 8f4f 	dsb	sy
 801458a:	b662      	cpsie	i
 801458c:	60fb      	str	r3, [r7, #12]
 801458e:	e7fe      	b.n	801458e <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8014590:	693b      	ldr	r3, [r7, #16]
 8014592:	689c      	ldr	r4, [r3, #8]
 8014594:	f001 fd02 	bl	8015f9c <xTaskGetCurrentTaskHandle>
 8014598:	4603      	mov	r3, r0
 801459a:	429c      	cmp	r4, r3
 801459c:	d111      	bne.n	80145c2 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801459e:	693b      	ldr	r3, [r7, #16]
 80145a0:	68db      	ldr	r3, [r3, #12]
 80145a2:	1e5a      	subs	r2, r3, #1
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	68db      	ldr	r3, [r3, #12]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d105      	bne.n	80145bc <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80145b0:	2300      	movs	r3, #0
 80145b2:	2200      	movs	r2, #0
 80145b4:	2100      	movs	r1, #0
 80145b6:	6938      	ldr	r0, [r7, #16]
 80145b8:	f000 f842 	bl	8014640 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80145bc:	2301      	movs	r3, #1
 80145be:	617b      	str	r3, [r7, #20]
 80145c0:	e001      	b.n	80145c6 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80145c2:	2300      	movs	r3, #0
 80145c4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80145c6:	697b      	ldr	r3, [r7, #20]
	}
 80145c8:	4618      	mov	r0, r3
 80145ca:	371c      	adds	r7, #28
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd90      	pop	{r4, r7, pc}

080145d0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80145d0:	b590      	push	{r4, r7, lr}
 80145d2:	b087      	sub	sp, #28
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
 80145d8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80145de:	693b      	ldr	r3, [r7, #16]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d10b      	bne.n	80145fc <xQueueTakeMutexRecursive+0x2c>
 80145e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e8:	b672      	cpsid	i
 80145ea:	f383 8811 	msr	BASEPRI, r3
 80145ee:	f3bf 8f6f 	isb	sy
 80145f2:	f3bf 8f4f 	dsb	sy
 80145f6:	b662      	cpsie	i
 80145f8:	60fb      	str	r3, [r7, #12]
 80145fa:	e7fe      	b.n	80145fa <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80145fc:	693b      	ldr	r3, [r7, #16]
 80145fe:	689c      	ldr	r4, [r3, #8]
 8014600:	f001 fccc 	bl	8015f9c <xTaskGetCurrentTaskHandle>
 8014604:	4603      	mov	r3, r0
 8014606:	429c      	cmp	r4, r3
 8014608:	d107      	bne.n	801461a <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	68db      	ldr	r3, [r3, #12]
 801460e:	1c5a      	adds	r2, r3, #1
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8014614:	2301      	movs	r3, #1
 8014616:	617b      	str	r3, [r7, #20]
 8014618:	e00c      	b.n	8014634 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801461a:	6839      	ldr	r1, [r7, #0]
 801461c:	6938      	ldr	r0, [r7, #16]
 801461e:	f000 faa7 	bl	8014b70 <xQueueSemaphoreTake>
 8014622:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8014624:	697b      	ldr	r3, [r7, #20]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d004      	beq.n	8014634 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	68db      	ldr	r3, [r3, #12]
 801462e:	1c5a      	adds	r2, r3, #1
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8014634:	697b      	ldr	r3, [r7, #20]
	}
 8014636:	4618      	mov	r0, r3
 8014638:	371c      	adds	r7, #28
 801463a:	46bd      	mov	sp, r7
 801463c:	bd90      	pop	{r4, r7, pc}
	...

08014640 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b08e      	sub	sp, #56	; 0x38
 8014644:	af00      	add	r7, sp, #0
 8014646:	60f8      	str	r0, [r7, #12]
 8014648:	60b9      	str	r1, [r7, #8]
 801464a:	607a      	str	r2, [r7, #4]
 801464c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801464e:	2300      	movs	r3, #0
 8014650:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014658:	2b00      	cmp	r3, #0
 801465a:	d10b      	bne.n	8014674 <xQueueGenericSend+0x34>
 801465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014660:	b672      	cpsid	i
 8014662:	f383 8811 	msr	BASEPRI, r3
 8014666:	f3bf 8f6f 	isb	sy
 801466a:	f3bf 8f4f 	dsb	sy
 801466e:	b662      	cpsie	i
 8014670:	62bb      	str	r3, [r7, #40]	; 0x28
 8014672:	e7fe      	b.n	8014672 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d103      	bne.n	8014682 <xQueueGenericSend+0x42>
 801467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801467e:	2b00      	cmp	r3, #0
 8014680:	d101      	bne.n	8014686 <xQueueGenericSend+0x46>
 8014682:	2301      	movs	r3, #1
 8014684:	e000      	b.n	8014688 <xQueueGenericSend+0x48>
 8014686:	2300      	movs	r3, #0
 8014688:	2b00      	cmp	r3, #0
 801468a:	d10b      	bne.n	80146a4 <xQueueGenericSend+0x64>
 801468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014690:	b672      	cpsid	i
 8014692:	f383 8811 	msr	BASEPRI, r3
 8014696:	f3bf 8f6f 	isb	sy
 801469a:	f3bf 8f4f 	dsb	sy
 801469e:	b662      	cpsie	i
 80146a0:	627b      	str	r3, [r7, #36]	; 0x24
 80146a2:	e7fe      	b.n	80146a2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	2b02      	cmp	r3, #2
 80146a8:	d103      	bne.n	80146b2 <xQueueGenericSend+0x72>
 80146aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146ae:	2b01      	cmp	r3, #1
 80146b0:	d101      	bne.n	80146b6 <xQueueGenericSend+0x76>
 80146b2:	2301      	movs	r3, #1
 80146b4:	e000      	b.n	80146b8 <xQueueGenericSend+0x78>
 80146b6:	2300      	movs	r3, #0
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d10b      	bne.n	80146d4 <xQueueGenericSend+0x94>
 80146bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c0:	b672      	cpsid	i
 80146c2:	f383 8811 	msr	BASEPRI, r3
 80146c6:	f3bf 8f6f 	isb	sy
 80146ca:	f3bf 8f4f 	dsb	sy
 80146ce:	b662      	cpsie	i
 80146d0:	623b      	str	r3, [r7, #32]
 80146d2:	e7fe      	b.n	80146d2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80146d4:	f001 fc72 	bl	8015fbc <xTaskGetSchedulerState>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d102      	bne.n	80146e4 <xQueueGenericSend+0xa4>
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d101      	bne.n	80146e8 <xQueueGenericSend+0xa8>
 80146e4:	2301      	movs	r3, #1
 80146e6:	e000      	b.n	80146ea <xQueueGenericSend+0xaa>
 80146e8:	2300      	movs	r3, #0
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d10b      	bne.n	8014706 <xQueueGenericSend+0xc6>
 80146ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f2:	b672      	cpsid	i
 80146f4:	f383 8811 	msr	BASEPRI, r3
 80146f8:	f3bf 8f6f 	isb	sy
 80146fc:	f3bf 8f4f 	dsb	sy
 8014700:	b662      	cpsie	i
 8014702:	61fb      	str	r3, [r7, #28]
 8014704:	e7fe      	b.n	8014704 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014706:	f002 fa97 	bl	8016c38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801470c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014712:	429a      	cmp	r2, r3
 8014714:	d302      	bcc.n	801471c <xQueueGenericSend+0xdc>
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	2b02      	cmp	r3, #2
 801471a:	d131      	bne.n	8014780 <xQueueGenericSend+0x140>
			{
				traceQUEUE_SEND( pxQueue );
 801471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801471e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014724:	4619      	mov	r1, r3
 8014726:	4610      	mov	r0, r2
 8014728:	f7ec fb7a 	bl	8000e20 <TimeDoctor_QUEUE_SEND>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801472c:	683a      	ldr	r2, [r7, #0]
 801472e:	68b9      	ldr	r1, [r7, #8]
 8014730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014732:	f000 fbd8 	bl	8014ee6 <prvCopyDataToQueue>
 8014736:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801473c:	2b00      	cmp	r3, #0
 801473e:	d010      	beq.n	8014762 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014742:	3324      	adds	r3, #36	; 0x24
 8014744:	4618      	mov	r0, r3
 8014746:	f001 fa69 	bl	8015c1c <xTaskRemoveFromEventList>
 801474a:	4603      	mov	r3, r0
 801474c:	2b00      	cmp	r3, #0
 801474e:	d013      	beq.n	8014778 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014750:	4b3f      	ldr	r3, [pc, #252]	; (8014850 <xQueueGenericSend+0x210>)
 8014752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014756:	601a      	str	r2, [r3, #0]
 8014758:	f3bf 8f4f 	dsb	sy
 801475c:	f3bf 8f6f 	isb	sy
 8014760:	e00a      	b.n	8014778 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014764:	2b00      	cmp	r3, #0
 8014766:	d007      	beq.n	8014778 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014768:	4b39      	ldr	r3, [pc, #228]	; (8014850 <xQueueGenericSend+0x210>)
 801476a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801476e:	601a      	str	r2, [r3, #0]
 8014770:	f3bf 8f4f 	dsb	sy
 8014774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014778:	f002 fa90 	bl	8016c9c <vPortExitCritical>
				return pdPASS;
 801477c:	2301      	movs	r3, #1
 801477e:	e063      	b.n	8014848 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d103      	bne.n	801478e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014786:	f002 fa89 	bl	8016c9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801478a:	2300      	movs	r3, #0
 801478c:	e05c      	b.n	8014848 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014790:	2b00      	cmp	r3, #0
 8014792:	d106      	bne.n	80147a2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014794:	f107 0314 	add.w	r3, r7, #20
 8014798:	4618      	mov	r0, r3
 801479a:	f001 faa3 	bl	8015ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801479e:	2301      	movs	r3, #1
 80147a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80147a2:	f002 fa7b 	bl	8016c9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80147a6:	f000 ffe1 	bl	801576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80147aa:	f002 fa45 	bl	8016c38 <vPortEnterCritical>
 80147ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80147b4:	b25b      	sxtb	r3, r3
 80147b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147ba:	d103      	bne.n	80147c4 <xQueueGenericSend+0x184>
 80147bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147be:	2200      	movs	r2, #0
 80147c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80147c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80147ca:	b25b      	sxtb	r3, r3
 80147cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147d0:	d103      	bne.n	80147da <xQueueGenericSend+0x19a>
 80147d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d4:	2200      	movs	r2, #0
 80147d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80147da:	f002 fa5f 	bl	8016c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80147de:	1d3a      	adds	r2, r7, #4
 80147e0:	f107 0314 	add.w	r3, r7, #20
 80147e4:	4611      	mov	r1, r2
 80147e6:	4618      	mov	r0, r3
 80147e8:	f001 fa92 	bl	8015d10 <xTaskCheckForTimeOut>
 80147ec:	4603      	mov	r3, r0
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d124      	bne.n	801483c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80147f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80147f4:	f000 fc6f 	bl	80150d6 <prvIsQueueFull>
 80147f8:	4603      	mov	r3, r0
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d018      	beq.n	8014830 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80147fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014800:	3310      	adds	r3, #16
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	4611      	mov	r1, r2
 8014806:	4618      	mov	r0, r3
 8014808:	f001 f9b6 	bl	8015b78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801480c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801480e:	f000 fbfa 	bl	8015006 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014812:	f000 ffb9 	bl	8015788 <xTaskResumeAll>
 8014816:	4603      	mov	r3, r0
 8014818:	2b00      	cmp	r3, #0
 801481a:	f47f af74 	bne.w	8014706 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801481e:	4b0c      	ldr	r3, [pc, #48]	; (8014850 <xQueueGenericSend+0x210>)
 8014820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014824:	601a      	str	r2, [r3, #0]
 8014826:	f3bf 8f4f 	dsb	sy
 801482a:	f3bf 8f6f 	isb	sy
 801482e:	e76a      	b.n	8014706 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014832:	f000 fbe8 	bl	8015006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014836:	f000 ffa7 	bl	8015788 <xTaskResumeAll>
 801483a:	e764      	b.n	8014706 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801483c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801483e:	f000 fbe2 	bl	8015006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014842:	f000 ffa1 	bl	8015788 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014848:	4618      	mov	r0, r3
 801484a:	3738      	adds	r7, #56	; 0x38
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}
 8014850:	e000ed04 	.word	0xe000ed04

08014854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b08e      	sub	sp, #56	; 0x38
 8014858:	af00      	add	r7, sp, #0
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	60b9      	str	r1, [r7, #8]
 801485e:	607a      	str	r2, [r7, #4]
 8014860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014868:	2b00      	cmp	r3, #0
 801486a:	d10b      	bne.n	8014884 <xQueueGenericSendFromISR+0x30>
 801486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014870:	b672      	cpsid	i
 8014872:	f383 8811 	msr	BASEPRI, r3
 8014876:	f3bf 8f6f 	isb	sy
 801487a:	f3bf 8f4f 	dsb	sy
 801487e:	b662      	cpsie	i
 8014880:	627b      	str	r3, [r7, #36]	; 0x24
 8014882:	e7fe      	b.n	8014882 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d103      	bne.n	8014892 <xQueueGenericSendFromISR+0x3e>
 801488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801488e:	2b00      	cmp	r3, #0
 8014890:	d101      	bne.n	8014896 <xQueueGenericSendFromISR+0x42>
 8014892:	2301      	movs	r3, #1
 8014894:	e000      	b.n	8014898 <xQueueGenericSendFromISR+0x44>
 8014896:	2300      	movs	r3, #0
 8014898:	2b00      	cmp	r3, #0
 801489a:	d10b      	bne.n	80148b4 <xQueueGenericSendFromISR+0x60>
 801489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a0:	b672      	cpsid	i
 80148a2:	f383 8811 	msr	BASEPRI, r3
 80148a6:	f3bf 8f6f 	isb	sy
 80148aa:	f3bf 8f4f 	dsb	sy
 80148ae:	b662      	cpsie	i
 80148b0:	623b      	str	r3, [r7, #32]
 80148b2:	e7fe      	b.n	80148b2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	2b02      	cmp	r3, #2
 80148b8:	d103      	bne.n	80148c2 <xQueueGenericSendFromISR+0x6e>
 80148ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80148be:	2b01      	cmp	r3, #1
 80148c0:	d101      	bne.n	80148c6 <xQueueGenericSendFromISR+0x72>
 80148c2:	2301      	movs	r3, #1
 80148c4:	e000      	b.n	80148c8 <xQueueGenericSendFromISR+0x74>
 80148c6:	2300      	movs	r3, #0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d10b      	bne.n	80148e4 <xQueueGenericSendFromISR+0x90>
 80148cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148d0:	b672      	cpsid	i
 80148d2:	f383 8811 	msr	BASEPRI, r3
 80148d6:	f3bf 8f6f 	isb	sy
 80148da:	f3bf 8f4f 	dsb	sy
 80148de:	b662      	cpsie	i
 80148e0:	61fb      	str	r3, [r7, #28]
 80148e2:	e7fe      	b.n	80148e2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80148e4:	f002 fa88 	bl	8016df8 <vPortValidateInterruptPriority>
	__asm volatile
 80148e8:	f3ef 8211 	mrs	r2, BASEPRI
 80148ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148f0:	b672      	cpsid	i
 80148f2:	f383 8811 	msr	BASEPRI, r3
 80148f6:	f3bf 8f6f 	isb	sy
 80148fa:	f3bf 8f4f 	dsb	sy
 80148fe:	b662      	cpsie	i
 8014900:	61ba      	str	r2, [r7, #24]
 8014902:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014904:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014906:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014910:	429a      	cmp	r2, r3
 8014912:	d302      	bcc.n	801491a <xQueueGenericSendFromISR+0xc6>
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	2b02      	cmp	r3, #2
 8014918:	d134      	bne.n	8014984 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801491c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8014924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014926:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801492c:	4619      	mov	r1, r3
 801492e:	4610      	mov	r0, r2
 8014930:	f7ec fab8 	bl	8000ea4 <TimeDoctor_QUEUE_SEND_FROM_ISR>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014934:	683a      	ldr	r2, [r7, #0]
 8014936:	68b9      	ldr	r1, [r7, #8]
 8014938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801493a:	f000 fad4 	bl	8014ee6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801493e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014946:	d112      	bne.n	801496e <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801494c:	2b00      	cmp	r3, #0
 801494e:	d016      	beq.n	801497e <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014952:	3324      	adds	r3, #36	; 0x24
 8014954:	4618      	mov	r0, r3
 8014956:	f001 f961 	bl	8015c1c <xTaskRemoveFromEventList>
 801495a:	4603      	mov	r3, r0
 801495c:	2b00      	cmp	r3, #0
 801495e:	d00e      	beq.n	801497e <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d00b      	beq.n	801497e <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	2201      	movs	r2, #1
 801496a:	601a      	str	r2, [r3, #0]
 801496c:	e007      	b.n	801497e <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801496e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014972:	3301      	adds	r3, #1
 8014974:	b2db      	uxtb	r3, r3
 8014976:	b25a      	sxtb	r2, r3
 8014978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801497a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801497e:	2301      	movs	r3, #1
 8014980:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8014982:	e001      	b.n	8014988 <xQueueGenericSendFromISR+0x134>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014984:	2300      	movs	r3, #0
 8014986:	637b      	str	r3, [r7, #52]	; 0x34
 8014988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014994:	4618      	mov	r0, r3
 8014996:	3738      	adds	r7, #56	; 0x38
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}

0801499c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b08c      	sub	sp, #48	; 0x30
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	60f8      	str	r0, [r7, #12]
 80149a4:	60b9      	str	r1, [r7, #8]
 80149a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80149a8:	2300      	movs	r3, #0
 80149aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80149b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d10b      	bne.n	80149ce <xQueueReceive+0x32>
	__asm volatile
 80149b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ba:	b672      	cpsid	i
 80149bc:	f383 8811 	msr	BASEPRI, r3
 80149c0:	f3bf 8f6f 	isb	sy
 80149c4:	f3bf 8f4f 	dsb	sy
 80149c8:	b662      	cpsie	i
 80149ca:	623b      	str	r3, [r7, #32]
 80149cc:	e7fe      	b.n	80149cc <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d103      	bne.n	80149dc <xQueueReceive+0x40>
 80149d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d101      	bne.n	80149e0 <xQueueReceive+0x44>
 80149dc:	2301      	movs	r3, #1
 80149de:	e000      	b.n	80149e2 <xQueueReceive+0x46>
 80149e0:	2300      	movs	r3, #0
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d10b      	bne.n	80149fe <xQueueReceive+0x62>
 80149e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ea:	b672      	cpsid	i
 80149ec:	f383 8811 	msr	BASEPRI, r3
 80149f0:	f3bf 8f6f 	isb	sy
 80149f4:	f3bf 8f4f 	dsb	sy
 80149f8:	b662      	cpsie	i
 80149fa:	61fb      	str	r3, [r7, #28]
 80149fc:	e7fe      	b.n	80149fc <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80149fe:	f001 fadd 	bl	8015fbc <xTaskGetSchedulerState>
 8014a02:	4603      	mov	r3, r0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d102      	bne.n	8014a0e <xQueueReceive+0x72>
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d101      	bne.n	8014a12 <xQueueReceive+0x76>
 8014a0e:	2301      	movs	r3, #1
 8014a10:	e000      	b.n	8014a14 <xQueueReceive+0x78>
 8014a12:	2300      	movs	r3, #0
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d10b      	bne.n	8014a30 <xQueueReceive+0x94>
 8014a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a1c:	b672      	cpsid	i
 8014a1e:	f383 8811 	msr	BASEPRI, r3
 8014a22:	f3bf 8f6f 	isb	sy
 8014a26:	f3bf 8f4f 	dsb	sy
 8014a2a:	b662      	cpsie	i
 8014a2c:	61bb      	str	r3, [r7, #24]
 8014a2e:	e7fe      	b.n	8014a2e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014a30:	f002 f902 	bl	8016c38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a38:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d027      	beq.n	8014a90 <xQueueReceive+0xf4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014a40:	68b9      	ldr	r1, [r7, #8]
 8014a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a44:	f000 fab9 	bl	8014fba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8014a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a50:	4619      	mov	r1, r3
 8014a52:	4610      	mov	r0, r2
 8014a54:	f7ec fa68 	bl	8000f28 <TimeDoctor_QUEUE_RECEIVE>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a5a:	1e5a      	subs	r2, r3, #1
 8014a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a5e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a62:	691b      	ldr	r3, [r3, #16]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d00f      	beq.n	8014a88 <xQueueReceive+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a6a:	3310      	adds	r3, #16
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f001 f8d5 	bl	8015c1c <xTaskRemoveFromEventList>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d007      	beq.n	8014a88 <xQueueReceive+0xec>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014a78:	4b3c      	ldr	r3, [pc, #240]	; (8014b6c <xQueueReceive+0x1d0>)
 8014a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a7e:	601a      	str	r2, [r3, #0]
 8014a80:	f3bf 8f4f 	dsb	sy
 8014a84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014a88:	f002 f908 	bl	8016c9c <vPortExitCritical>
				return pdPASS;
 8014a8c:	2301      	movs	r3, #1
 8014a8e:	e069      	b.n	8014b64 <xQueueReceive+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d103      	bne.n	8014a9e <xQueueReceive+0x102>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014a96:	f002 f901 	bl	8016c9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	e062      	b.n	8014b64 <xQueueReceive+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d106      	bne.n	8014ab2 <xQueueReceive+0x116>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014aa4:	f107 0310 	add.w	r3, r7, #16
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f001 f91b 	bl	8015ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014aae:	2301      	movs	r3, #1
 8014ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014ab2:	f002 f8f3 	bl	8016c9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014ab6:	f000 fe59 	bl	801576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014aba:	f002 f8bd 	bl	8016c38 <vPortEnterCritical>
 8014abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014ac4:	b25b      	sxtb	r3, r3
 8014ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aca:	d103      	bne.n	8014ad4 <xQueueReceive+0x138>
 8014acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ace:	2200      	movs	r2, #0
 8014ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014ada:	b25b      	sxtb	r3, r3
 8014adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ae0:	d103      	bne.n	8014aea <xQueueReceive+0x14e>
 8014ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014aea:	f002 f8d7 	bl	8016c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014aee:	1d3a      	adds	r2, r7, #4
 8014af0:	f107 0310 	add.w	r3, r7, #16
 8014af4:	4611      	mov	r1, r2
 8014af6:	4618      	mov	r0, r3
 8014af8:	f001 f90a 	bl	8015d10 <xTaskCheckForTimeOut>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d123      	bne.n	8014b4a <xQueueReceive+0x1ae>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b04:	f000 fad1 	bl	80150aa <prvIsQueueEmpty>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d017      	beq.n	8014b3e <xQueueReceive+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b10:	3324      	adds	r3, #36	; 0x24
 8014b12:	687a      	ldr	r2, [r7, #4]
 8014b14:	4611      	mov	r1, r2
 8014b16:	4618      	mov	r0, r3
 8014b18:	f001 f82e 	bl	8015b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b1e:	f000 fa72 	bl	8015006 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014b22:	f000 fe31 	bl	8015788 <xTaskResumeAll>
 8014b26:	4603      	mov	r3, r0
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d181      	bne.n	8014a30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8014b2c:	4b0f      	ldr	r3, [pc, #60]	; (8014b6c <xQueueReceive+0x1d0>)
 8014b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b32:	601a      	str	r2, [r3, #0]
 8014b34:	f3bf 8f4f 	dsb	sy
 8014b38:	f3bf 8f6f 	isb	sy
 8014b3c:	e778      	b.n	8014a30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b40:	f000 fa61 	bl	8015006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014b44:	f000 fe20 	bl	8015788 <xTaskResumeAll>
 8014b48:	e772      	b.n	8014a30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b4c:	f000 fa5b 	bl	8015006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014b50:	f000 fe1a 	bl	8015788 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b56:	f000 faa8 	bl	80150aa <prvIsQueueEmpty>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	f43f af67 	beq.w	8014a30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014b62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	3730      	adds	r7, #48	; 0x30
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bd80      	pop	{r7, pc}
 8014b6c:	e000ed04 	.word	0xe000ed04

08014b70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b08e      	sub	sp, #56	; 0x38
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
 8014b78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014b82:	2300      	movs	r3, #0
 8014b84:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d10b      	bne.n	8014ba4 <xQueueSemaphoreTake+0x34>
 8014b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b90:	b672      	cpsid	i
 8014b92:	f383 8811 	msr	BASEPRI, r3
 8014b96:	f3bf 8f6f 	isb	sy
 8014b9a:	f3bf 8f4f 	dsb	sy
 8014b9e:	b662      	cpsie	i
 8014ba0:	623b      	str	r3, [r7, #32]
 8014ba2:	e7fe      	b.n	8014ba2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d00b      	beq.n	8014bc4 <xQueueSemaphoreTake+0x54>
 8014bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bb0:	b672      	cpsid	i
 8014bb2:	f383 8811 	msr	BASEPRI, r3
 8014bb6:	f3bf 8f6f 	isb	sy
 8014bba:	f3bf 8f4f 	dsb	sy
 8014bbe:	b662      	cpsie	i
 8014bc0:	61fb      	str	r3, [r7, #28]
 8014bc2:	e7fe      	b.n	8014bc2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014bc4:	f001 f9fa 	bl	8015fbc <xTaskGetSchedulerState>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d102      	bne.n	8014bd4 <xQueueSemaphoreTake+0x64>
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d101      	bne.n	8014bd8 <xQueueSemaphoreTake+0x68>
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	e000      	b.n	8014bda <xQueueSemaphoreTake+0x6a>
 8014bd8:	2300      	movs	r3, #0
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d10b      	bne.n	8014bf6 <xQueueSemaphoreTake+0x86>
 8014bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014be2:	b672      	cpsid	i
 8014be4:	f383 8811 	msr	BASEPRI, r3
 8014be8:	f3bf 8f6f 	isb	sy
 8014bec:	f3bf 8f4f 	dsb	sy
 8014bf0:	b662      	cpsie	i
 8014bf2:	61bb      	str	r3, [r7, #24]
 8014bf4:	e7fe      	b.n	8014bf4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014bf6:	f002 f81f 	bl	8016c38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bfe:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d02c      	beq.n	8014c60 <xQueueSemaphoreTake+0xf0>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8014c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c0e:	4619      	mov	r1, r3
 8014c10:	4610      	mov	r0, r2
 8014c12:	f7ec f989 	bl	8000f28 <TimeDoctor_QUEUE_RECEIVE>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c18:	1e5a      	subs	r2, r3, #1
 8014c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c1c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d104      	bne.n	8014c30 <xQueueSemaphoreTake+0xc0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014c26:	f001 fb43 	bl	80162b0 <pvTaskIncrementMutexHeldCount>
 8014c2a:	4602      	mov	r2, r0
 8014c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c2e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c32:	691b      	ldr	r3, [r3, #16]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d00f      	beq.n	8014c58 <xQueueSemaphoreTake+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c3a:	3310      	adds	r3, #16
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f000 ffed 	bl	8015c1c <xTaskRemoveFromEventList>
 8014c42:	4603      	mov	r3, r0
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d007      	beq.n	8014c58 <xQueueSemaphoreTake+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014c48:	4b54      	ldr	r3, [pc, #336]	; (8014d9c <xQueueSemaphoreTake+0x22c>)
 8014c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c4e:	601a      	str	r2, [r3, #0]
 8014c50:	f3bf 8f4f 	dsb	sy
 8014c54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014c58:	f002 f820 	bl	8016c9c <vPortExitCritical>
				return pdPASS;
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	e098      	b.n	8014d92 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d112      	bne.n	8014c8c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d00b      	beq.n	8014c84 <xQueueSemaphoreTake+0x114>
 8014c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c70:	b672      	cpsid	i
 8014c72:	f383 8811 	msr	BASEPRI, r3
 8014c76:	f3bf 8f6f 	isb	sy
 8014c7a:	f3bf 8f4f 	dsb	sy
 8014c7e:	b662      	cpsie	i
 8014c80:	617b      	str	r3, [r7, #20]
 8014c82:	e7fe      	b.n	8014c82 <xQueueSemaphoreTake+0x112>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014c84:	f002 f80a 	bl	8016c9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014c88:	2300      	movs	r3, #0
 8014c8a:	e082      	b.n	8014d92 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d106      	bne.n	8014ca0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014c92:	f107 030c 	add.w	r3, r7, #12
 8014c96:	4618      	mov	r0, r3
 8014c98:	f001 f824 	bl	8015ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014ca0:	f001 fffc 	bl	8016c9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014ca4:	f000 fd62 	bl	801576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014ca8:	f001 ffc6 	bl	8016c38 <vPortEnterCritical>
 8014cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014cb2:	b25b      	sxtb	r3, r3
 8014cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cb8:	d103      	bne.n	8014cc2 <xQueueSemaphoreTake+0x152>
 8014cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014cc8:	b25b      	sxtb	r3, r3
 8014cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cce:	d103      	bne.n	8014cd8 <xQueueSemaphoreTake+0x168>
 8014cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014cd8:	f001 ffe0 	bl	8016c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014cdc:	463a      	mov	r2, r7
 8014cde:	f107 030c 	add.w	r3, r7, #12
 8014ce2:	4611      	mov	r1, r2
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f001 f813 	bl	8015d10 <xTaskCheckForTimeOut>
 8014cea:	4603      	mov	r3, r0
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d132      	bne.n	8014d56 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014cf2:	f000 f9da 	bl	80150aa <prvIsQueueEmpty>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d026      	beq.n	8014d4a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d109      	bne.n	8014d18 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8014d04:	f001 ff98 	bl	8016c38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d0a:	689b      	ldr	r3, [r3, #8]
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f001 f973 	bl	8015ff8 <xTaskPriorityInherit>
 8014d12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014d14:	f001 ffc2 	bl	8016c9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d1a:	3324      	adds	r3, #36	; 0x24
 8014d1c:	683a      	ldr	r2, [r7, #0]
 8014d1e:	4611      	mov	r1, r2
 8014d20:	4618      	mov	r0, r3
 8014d22:	f000 ff29 	bl	8015b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014d26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d28:	f000 f96d 	bl	8015006 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014d2c:	f000 fd2c 	bl	8015788 <xTaskResumeAll>
 8014d30:	4603      	mov	r3, r0
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	f47f af5f 	bne.w	8014bf6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014d38:	4b18      	ldr	r3, [pc, #96]	; (8014d9c <xQueueSemaphoreTake+0x22c>)
 8014d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d3e:	601a      	str	r2, [r3, #0]
 8014d40:	f3bf 8f4f 	dsb	sy
 8014d44:	f3bf 8f6f 	isb	sy
 8014d48:	e755      	b.n	8014bf6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014d4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d4c:	f000 f95b 	bl	8015006 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014d50:	f000 fd1a 	bl	8015788 <xTaskResumeAll>
 8014d54:	e74f      	b.n	8014bf6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014d56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d58:	f000 f955 	bl	8015006 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014d5c:	f000 fd14 	bl	8015788 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014d60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d62:	f000 f9a2 	bl	80150aa <prvIsQueueEmpty>
 8014d66:	4603      	mov	r3, r0
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	f43f af44 	beq.w	8014bf6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d00d      	beq.n	8014d90 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8014d74:	f001 ff60 	bl	8016c38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014d78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d7a:	f000 f89c 	bl	8014eb6 <prvGetDisinheritPriorityAfterTimeout>
 8014d7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d82:	689b      	ldr	r3, [r3, #8]
 8014d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d86:	4618      	mov	r0, r3
 8014d88:	f001 fa0e 	bl	80161a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014d8c:	f001 ff86 	bl	8016c9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014d90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3738      	adds	r7, #56	; 0x38
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}
 8014d9a:	bf00      	nop
 8014d9c:	e000ed04 	.word	0xe000ed04

08014da0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b08e      	sub	sp, #56	; 0x38
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	60f8      	str	r0, [r7, #12]
 8014da8:	60b9      	str	r1, [r7, #8]
 8014daa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d10b      	bne.n	8014dce <xQueueReceiveFromISR+0x2e>
 8014db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dba:	b672      	cpsid	i
 8014dbc:	f383 8811 	msr	BASEPRI, r3
 8014dc0:	f3bf 8f6f 	isb	sy
 8014dc4:	f3bf 8f4f 	dsb	sy
 8014dc8:	b662      	cpsie	i
 8014dca:	623b      	str	r3, [r7, #32]
 8014dcc:	e7fe      	b.n	8014dcc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d103      	bne.n	8014ddc <xQueueReceiveFromISR+0x3c>
 8014dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d101      	bne.n	8014de0 <xQueueReceiveFromISR+0x40>
 8014ddc:	2301      	movs	r3, #1
 8014dde:	e000      	b.n	8014de2 <xQueueReceiveFromISR+0x42>
 8014de0:	2300      	movs	r3, #0
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d10b      	bne.n	8014dfe <xQueueReceiveFromISR+0x5e>
 8014de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dea:	b672      	cpsid	i
 8014dec:	f383 8811 	msr	BASEPRI, r3
 8014df0:	f3bf 8f6f 	isb	sy
 8014df4:	f3bf 8f4f 	dsb	sy
 8014df8:	b662      	cpsie	i
 8014dfa:	61fb      	str	r3, [r7, #28]
 8014dfc:	e7fe      	b.n	8014dfc <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014dfe:	f001 fffb 	bl	8016df8 <vPortValidateInterruptPriority>
	__asm volatile
 8014e02:	f3ef 8211 	mrs	r2, BASEPRI
 8014e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e0a:	b672      	cpsid	i
 8014e0c:	f383 8811 	msr	BASEPRI, r3
 8014e10:	f3bf 8f6f 	isb	sy
 8014e14:	f3bf 8f4f 	dsb	sy
 8014e18:	b662      	cpsie	i
 8014e1a:	61ba      	str	r2, [r7, #24]
 8014e1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014e1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014e20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d037      	beq.n	8014e9e <xQueueReceiveFromISR+0xfe>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8014e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e40:	4619      	mov	r1, r3
 8014e42:	4610      	mov	r0, r2
 8014e44:	f7ec f8b2 	bl	8000fac <TimeDoctor_QUEUE_RECEIVE_FROM_ISR>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014e48:	68b9      	ldr	r1, [r7, #8]
 8014e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e4c:	f000 f8b5 	bl	8014fba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e52:	1e5a      	subs	r2, r3, #1
 8014e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014e58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e60:	d112      	bne.n	8014e88 <xQueueReceiveFromISR+0xe8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e64:	691b      	ldr	r3, [r3, #16]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d016      	beq.n	8014e98 <xQueueReceiveFromISR+0xf8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e6c:	3310      	adds	r3, #16
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f000 fed4 	bl	8015c1c <xTaskRemoveFromEventList>
 8014e74:	4603      	mov	r3, r0
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d00e      	beq.n	8014e98 <xQueueReceiveFromISR+0xf8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d00b      	beq.n	8014e98 <xQueueReceiveFromISR+0xf8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2201      	movs	r2, #1
 8014e84:	601a      	str	r2, [r3, #0]
 8014e86:	e007      	b.n	8014e98 <xQueueReceiveFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e8c:	3301      	adds	r3, #1
 8014e8e:	b2db      	uxtb	r3, r3
 8014e90:	b25a      	sxtb	r2, r3
 8014e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014e98:	2301      	movs	r3, #1
 8014e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8014e9c:	e001      	b.n	8014ea2 <xQueueReceiveFromISR+0x102>
		}
		else
		{
			xReturn = pdFAIL;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8014ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3738      	adds	r7, #56	; 0x38
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}

08014eb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014eb6:	b480      	push	{r7}
 8014eb8:	b085      	sub	sp, #20
 8014eba:	af00      	add	r7, sp, #0
 8014ebc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d006      	beq.n	8014ed4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014ed0:	60fb      	str	r3, [r7, #12]
 8014ed2:	e001      	b.n	8014ed8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
	}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3714      	adds	r7, #20
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee4:	4770      	bx	lr

08014ee6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014ee6:	b580      	push	{r7, lr}
 8014ee8:	b086      	sub	sp, #24
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	60f8      	str	r0, [r7, #12]
 8014eee:	60b9      	str	r1, [r7, #8]
 8014ef0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014efa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d10d      	bne.n	8014f20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d14d      	bne.n	8014fa8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	689b      	ldr	r3, [r3, #8]
 8014f10:	4618      	mov	r0, r3
 8014f12:	f001 f8d9 	bl	80160c8 <xTaskPriorityDisinherit>
 8014f16:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	609a      	str	r2, [r3, #8]
 8014f1e:	e043      	b.n	8014fa8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d119      	bne.n	8014f5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	6858      	ldr	r0, [r3, #4]
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f2e:	461a      	mov	r2, r3
 8014f30:	68b9      	ldr	r1, [r7, #8]
 8014f32:	f002 fcb7 	bl	80178a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	685a      	ldr	r2, [r3, #4]
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f3e:	441a      	add	r2, r3
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	685a      	ldr	r2, [r3, #4]
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	689b      	ldr	r3, [r3, #8]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d32b      	bcc.n	8014fa8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	681a      	ldr	r2, [r3, #0]
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	605a      	str	r2, [r3, #4]
 8014f58:	e026      	b.n	8014fa8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	68d8      	ldr	r0, [r3, #12]
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f62:	461a      	mov	r2, r3
 8014f64:	68b9      	ldr	r1, [r7, #8]
 8014f66:	f002 fc9d 	bl	80178a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	68da      	ldr	r2, [r3, #12]
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f72:	425b      	negs	r3, r3
 8014f74:	441a      	add	r2, r3
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	68da      	ldr	r2, [r3, #12]
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d207      	bcs.n	8014f96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	689a      	ldr	r2, [r3, #8]
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f8e:	425b      	negs	r3, r3
 8014f90:	441a      	add	r2, r3
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	2b02      	cmp	r3, #2
 8014f9a:	d105      	bne.n	8014fa8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d002      	beq.n	8014fa8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	3b01      	subs	r3, #1
 8014fa6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	1c5a      	adds	r2, r3, #1
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014fb0:	697b      	ldr	r3, [r7, #20]
}
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	3718      	adds	r7, #24
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}

08014fba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014fba:	b580      	push	{r7, lr}
 8014fbc:	b082      	sub	sp, #8
 8014fbe:	af00      	add	r7, sp, #0
 8014fc0:	6078      	str	r0, [r7, #4]
 8014fc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d018      	beq.n	8014ffe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	68da      	ldr	r2, [r3, #12]
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fd4:	441a      	add	r2, r3
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	68da      	ldr	r2, [r3, #12]
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	689b      	ldr	r3, [r3, #8]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d303      	bcc.n	8014fee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	681a      	ldr	r2, [r3, #0]
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	68d9      	ldr	r1, [r3, #12]
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ff6:	461a      	mov	r2, r3
 8014ff8:	6838      	ldr	r0, [r7, #0]
 8014ffa:	f002 fc53 	bl	80178a4 <memcpy>
	}
}
 8014ffe:	bf00      	nop
 8015000:	3708      	adds	r7, #8
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}

08015006 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015006:	b580      	push	{r7, lr}
 8015008:	b084      	sub	sp, #16
 801500a:	af00      	add	r7, sp, #0
 801500c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801500e:	f001 fe13 	bl	8016c38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015018:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801501a:	e011      	b.n	8015040 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015020:	2b00      	cmp	r3, #0
 8015022:	d012      	beq.n	801504a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	3324      	adds	r3, #36	; 0x24
 8015028:	4618      	mov	r0, r3
 801502a:	f000 fdf7 	bl	8015c1c <xTaskRemoveFromEventList>
 801502e:	4603      	mov	r3, r0
 8015030:	2b00      	cmp	r3, #0
 8015032:	d001      	beq.n	8015038 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015034:	f000 fed0 	bl	8015dd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015038:	7bfb      	ldrb	r3, [r7, #15]
 801503a:	3b01      	subs	r3, #1
 801503c:	b2db      	uxtb	r3, r3
 801503e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015044:	2b00      	cmp	r3, #0
 8015046:	dce9      	bgt.n	801501c <prvUnlockQueue+0x16>
 8015048:	e000      	b.n	801504c <prvUnlockQueue+0x46>
					break;
 801504a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	22ff      	movs	r2, #255	; 0xff
 8015050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015054:	f001 fe22 	bl	8016c9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015058:	f001 fdee 	bl	8016c38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015062:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015064:	e011      	b.n	801508a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	691b      	ldr	r3, [r3, #16]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d012      	beq.n	8015094 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	3310      	adds	r3, #16
 8015072:	4618      	mov	r0, r3
 8015074:	f000 fdd2 	bl	8015c1c <xTaskRemoveFromEventList>
 8015078:	4603      	mov	r3, r0
 801507a:	2b00      	cmp	r3, #0
 801507c:	d001      	beq.n	8015082 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801507e:	f000 feab 	bl	8015dd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015082:	7bbb      	ldrb	r3, [r7, #14]
 8015084:	3b01      	subs	r3, #1
 8015086:	b2db      	uxtb	r3, r3
 8015088:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801508a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801508e:	2b00      	cmp	r3, #0
 8015090:	dce9      	bgt.n	8015066 <prvUnlockQueue+0x60>
 8015092:	e000      	b.n	8015096 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015094:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	22ff      	movs	r2, #255	; 0xff
 801509a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801509e:	f001 fdfd 	bl	8016c9c <vPortExitCritical>
}
 80150a2:	bf00      	nop
 80150a4:	3710      	adds	r7, #16
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bd80      	pop	{r7, pc}

080150aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80150aa:	b580      	push	{r7, lr}
 80150ac:	b084      	sub	sp, #16
 80150ae:	af00      	add	r7, sp, #0
 80150b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80150b2:	f001 fdc1 	bl	8016c38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d102      	bne.n	80150c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80150be:	2301      	movs	r3, #1
 80150c0:	60fb      	str	r3, [r7, #12]
 80150c2:	e001      	b.n	80150c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80150c4:	2300      	movs	r3, #0
 80150c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80150c8:	f001 fde8 	bl	8016c9c <vPortExitCritical>

	return xReturn;
 80150cc:	68fb      	ldr	r3, [r7, #12]
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	3710      	adds	r7, #16
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}

080150d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80150d6:	b580      	push	{r7, lr}
 80150d8:	b084      	sub	sp, #16
 80150da:	af00      	add	r7, sp, #0
 80150dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80150de:	f001 fdab 	bl	8016c38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d102      	bne.n	80150f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80150ee:	2301      	movs	r3, #1
 80150f0:	60fb      	str	r3, [r7, #12]
 80150f2:	e001      	b.n	80150f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80150f4:	2300      	movs	r3, #0
 80150f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80150f8:	f001 fdd0 	bl	8016c9c <vPortExitCritical>

	return xReturn;
 80150fc:	68fb      	ldr	r3, [r7, #12]
}
 80150fe:	4618      	mov	r0, r3
 8015100:	3710      	adds	r7, #16
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}
	...

08015108 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015108:	b580      	push	{r7, lr}
 801510a:	b084      	sub	sp, #16
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015112:	2300      	movs	r3, #0
 8015114:	60fb      	str	r3, [r7, #12]
 8015116:	e01a      	b.n	801514e <vQueueAddToRegistry+0x46>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015118:	4a10      	ldr	r2, [pc, #64]	; (801515c <vQueueAddToRegistry+0x54>)
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d111      	bne.n	8015148 <vQueueAddToRegistry+0x40>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015124:	490d      	ldr	r1, [pc, #52]	; (801515c <vQueueAddToRegistry+0x54>)
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	683a      	ldr	r2, [r7, #0]
 801512a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801512e:	4a0b      	ldr	r2, [pc, #44]	; (801515c <vQueueAddToRegistry+0x54>)
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	00db      	lsls	r3, r3, #3
 8015134:	4413      	add	r3, r2
 8015136:	687a      	ldr	r2, [r7, #4]
 8015138:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801513e:	6839      	ldr	r1, [r7, #0]
 8015140:	4618      	mov	r0, r3
 8015142:	f7eb fe4d 	bl	8000de0 <Timedoctor_QUEUE_REGISTRY_ADD>
				break;
 8015146:	e005      	b.n	8015154 <vQueueAddToRegistry+0x4c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	3301      	adds	r3, #1
 801514c:	60fb      	str	r3, [r7, #12]
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	2b07      	cmp	r3, #7
 8015152:	d9e1      	bls.n	8015118 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015154:	bf00      	nop
 8015156:	3710      	adds	r7, #16
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}
 801515c:	2001ba44 	.word	0x2001ba44

08015160 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015160:	b580      	push	{r7, lr}
 8015162:	b086      	sub	sp, #24
 8015164:	af00      	add	r7, sp, #0
 8015166:	60f8      	str	r0, [r7, #12]
 8015168:	60b9      	str	r1, [r7, #8]
 801516a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015170:	f001 fd62 	bl	8016c38 <vPortEnterCritical>
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801517a:	b25b      	sxtb	r3, r3
 801517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015180:	d103      	bne.n	801518a <vQueueWaitForMessageRestricted+0x2a>
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	2200      	movs	r2, #0
 8015186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801518a:	697b      	ldr	r3, [r7, #20]
 801518c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015190:	b25b      	sxtb	r3, r3
 8015192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015196:	d103      	bne.n	80151a0 <vQueueWaitForMessageRestricted+0x40>
 8015198:	697b      	ldr	r3, [r7, #20]
 801519a:	2200      	movs	r2, #0
 801519c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80151a0:	f001 fd7c 	bl	8016c9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80151a4:	697b      	ldr	r3, [r7, #20]
 80151a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d106      	bne.n	80151ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	3324      	adds	r3, #36	; 0x24
 80151b0:	687a      	ldr	r2, [r7, #4]
 80151b2:	68b9      	ldr	r1, [r7, #8]
 80151b4:	4618      	mov	r0, r3
 80151b6:	f000 fd05 	bl	8015bc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80151ba:	6978      	ldr	r0, [r7, #20]
 80151bc:	f7ff ff23 	bl	8015006 <prvUnlockQueue>
	}
 80151c0:	bf00      	nop
 80151c2:	3718      	adds	r7, #24
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b08e      	sub	sp, #56	; 0x38
 80151cc:	af04      	add	r7, sp, #16
 80151ce:	60f8      	str	r0, [r7, #12]
 80151d0:	60b9      	str	r1, [r7, #8]
 80151d2:	607a      	str	r2, [r7, #4]
 80151d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80151d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d10b      	bne.n	80151f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80151dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151e0:	b672      	cpsid	i
 80151e2:	f383 8811 	msr	BASEPRI, r3
 80151e6:	f3bf 8f6f 	isb	sy
 80151ea:	f3bf 8f4f 	dsb	sy
 80151ee:	b662      	cpsie	i
 80151f0:	623b      	str	r3, [r7, #32]
 80151f2:	e7fe      	b.n	80151f2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80151f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d10b      	bne.n	8015212 <xTaskCreateStatic+0x4a>
 80151fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151fe:	b672      	cpsid	i
 8015200:	f383 8811 	msr	BASEPRI, r3
 8015204:	f3bf 8f6f 	isb	sy
 8015208:	f3bf 8f4f 	dsb	sy
 801520c:	b662      	cpsie	i
 801520e:	61fb      	str	r3, [r7, #28]
 8015210:	e7fe      	b.n	8015210 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015212:	2360      	movs	r3, #96	; 0x60
 8015214:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015216:	693b      	ldr	r3, [r7, #16]
 8015218:	2b60      	cmp	r3, #96	; 0x60
 801521a:	d00b      	beq.n	8015234 <xTaskCreateStatic+0x6c>
 801521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015220:	b672      	cpsid	i
 8015222:	f383 8811 	msr	BASEPRI, r3
 8015226:	f3bf 8f6f 	isb	sy
 801522a:	f3bf 8f4f 	dsb	sy
 801522e:	b662      	cpsie	i
 8015230:	61bb      	str	r3, [r7, #24]
 8015232:	e7fe      	b.n	8015232 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015234:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015238:	2b00      	cmp	r3, #0
 801523a:	d01e      	beq.n	801527a <xTaskCreateStatic+0xb2>
 801523c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801523e:	2b00      	cmp	r3, #0
 8015240:	d01b      	beq.n	801527a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015244:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801524a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801524e:	2202      	movs	r2, #2
 8015250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015254:	2300      	movs	r3, #0
 8015256:	9303      	str	r3, [sp, #12]
 8015258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525a:	9302      	str	r3, [sp, #8]
 801525c:	f107 0314 	add.w	r3, r7, #20
 8015260:	9301      	str	r3, [sp, #4]
 8015262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015264:	9300      	str	r3, [sp, #0]
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	687a      	ldr	r2, [r7, #4]
 801526a:	68b9      	ldr	r1, [r7, #8]
 801526c:	68f8      	ldr	r0, [r7, #12]
 801526e:	f000 f850 	bl	8015312 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015274:	f000 f8e0 	bl	8015438 <prvAddNewTaskToReadyList>
 8015278:	e001      	b.n	801527e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801527a:	2300      	movs	r3, #0
 801527c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801527e:	697b      	ldr	r3, [r7, #20]
	}
 8015280:	4618      	mov	r0, r3
 8015282:	3728      	adds	r7, #40	; 0x28
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}

08015288 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015288:	b580      	push	{r7, lr}
 801528a:	b08c      	sub	sp, #48	; 0x30
 801528c:	af04      	add	r7, sp, #16
 801528e:	60f8      	str	r0, [r7, #12]
 8015290:	60b9      	str	r1, [r7, #8]
 8015292:	603b      	str	r3, [r7, #0]
 8015294:	4613      	mov	r3, r2
 8015296:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015298:	88fb      	ldrh	r3, [r7, #6]
 801529a:	009b      	lsls	r3, r3, #2
 801529c:	4618      	mov	r0, r3
 801529e:	f001 fded 	bl	8016e7c <pvPortMalloc>
 80152a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d00e      	beq.n	80152c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80152aa:	2060      	movs	r0, #96	; 0x60
 80152ac:	f001 fde6 	bl	8016e7c <pvPortMalloc>
 80152b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80152b2:	69fb      	ldr	r3, [r7, #28]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d003      	beq.n	80152c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80152b8:	69fb      	ldr	r3, [r7, #28]
 80152ba:	697a      	ldr	r2, [r7, #20]
 80152bc:	631a      	str	r2, [r3, #48]	; 0x30
 80152be:	e005      	b.n	80152cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80152c0:	6978      	ldr	r0, [r7, #20]
 80152c2:	f001 fea7 	bl	8017014 <vPortFree>
 80152c6:	e001      	b.n	80152cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80152c8:	2300      	movs	r3, #0
 80152ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80152cc:	69fb      	ldr	r3, [r7, #28]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d017      	beq.n	8015302 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80152d2:	69fb      	ldr	r3, [r7, #28]
 80152d4:	2200      	movs	r2, #0
 80152d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80152da:	88fa      	ldrh	r2, [r7, #6]
 80152dc:	2300      	movs	r3, #0
 80152de:	9303      	str	r3, [sp, #12]
 80152e0:	69fb      	ldr	r3, [r7, #28]
 80152e2:	9302      	str	r3, [sp, #8]
 80152e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e6:	9301      	str	r3, [sp, #4]
 80152e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ea:	9300      	str	r3, [sp, #0]
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	68b9      	ldr	r1, [r7, #8]
 80152f0:	68f8      	ldr	r0, [r7, #12]
 80152f2:	f000 f80e 	bl	8015312 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80152f6:	69f8      	ldr	r0, [r7, #28]
 80152f8:	f000 f89e 	bl	8015438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80152fc:	2301      	movs	r3, #1
 80152fe:	61bb      	str	r3, [r7, #24]
 8015300:	e002      	b.n	8015308 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015302:	f04f 33ff 	mov.w	r3, #4294967295
 8015306:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015308:	69bb      	ldr	r3, [r7, #24]
	}
 801530a:	4618      	mov	r0, r3
 801530c:	3720      	adds	r7, #32
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015312:	b580      	push	{r7, lr}
 8015314:	b088      	sub	sp, #32
 8015316:	af00      	add	r7, sp, #0
 8015318:	60f8      	str	r0, [r7, #12]
 801531a:	60b9      	str	r1, [r7, #8]
 801531c:	607a      	str	r2, [r7, #4]
 801531e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015322:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	009b      	lsls	r3, r3, #2
 8015328:	461a      	mov	r2, r3
 801532a:	21a5      	movs	r1, #165	; 0xa5
 801532c:	f002 fac5 	bl	80178ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015334:	6879      	ldr	r1, [r7, #4]
 8015336:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801533a:	440b      	add	r3, r1
 801533c:	009b      	lsls	r3, r3, #2
 801533e:	4413      	add	r3, r2
 8015340:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015342:	69bb      	ldr	r3, [r7, #24]
 8015344:	f023 0307 	bic.w	r3, r3, #7
 8015348:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801534a:	69bb      	ldr	r3, [r7, #24]
 801534c:	f003 0307 	and.w	r3, r3, #7
 8015350:	2b00      	cmp	r3, #0
 8015352:	d00b      	beq.n	801536c <prvInitialiseNewTask+0x5a>
 8015354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015358:	b672      	cpsid	i
 801535a:	f383 8811 	msr	BASEPRI, r3
 801535e:	f3bf 8f6f 	isb	sy
 8015362:	f3bf 8f4f 	dsb	sy
 8015366:	b662      	cpsie	i
 8015368:	617b      	str	r3, [r7, #20]
 801536a:	e7fe      	b.n	801536a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d01f      	beq.n	80153b2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015372:	2300      	movs	r3, #0
 8015374:	61fb      	str	r3, [r7, #28]
 8015376:	e012      	b.n	801539e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015378:	68ba      	ldr	r2, [r7, #8]
 801537a:	69fb      	ldr	r3, [r7, #28]
 801537c:	4413      	add	r3, r2
 801537e:	7819      	ldrb	r1, [r3, #0]
 8015380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015382:	69fb      	ldr	r3, [r7, #28]
 8015384:	4413      	add	r3, r2
 8015386:	3334      	adds	r3, #52	; 0x34
 8015388:	460a      	mov	r2, r1
 801538a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801538c:	68ba      	ldr	r2, [r7, #8]
 801538e:	69fb      	ldr	r3, [r7, #28]
 8015390:	4413      	add	r3, r2
 8015392:	781b      	ldrb	r3, [r3, #0]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d006      	beq.n	80153a6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015398:	69fb      	ldr	r3, [r7, #28]
 801539a:	3301      	adds	r3, #1
 801539c:	61fb      	str	r3, [r7, #28]
 801539e:	69fb      	ldr	r3, [r7, #28]
 80153a0:	2b0f      	cmp	r3, #15
 80153a2:	d9e9      	bls.n	8015378 <prvInitialiseNewTask+0x66>
 80153a4:	e000      	b.n	80153a8 <prvInitialiseNewTask+0x96>
			{
				break;
 80153a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80153a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153aa:	2200      	movs	r2, #0
 80153ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80153b0:	e003      	b.n	80153ba <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80153b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b4:	2200      	movs	r2, #0
 80153b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80153ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153bc:	2b37      	cmp	r3, #55	; 0x37
 80153be:	d901      	bls.n	80153c4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80153c0:	2337      	movs	r3, #55	; 0x37
 80153c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80153c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80153ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80153d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d2:	2200      	movs	r2, #0
 80153d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80153d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d8:	3304      	adds	r3, #4
 80153da:	4618      	mov	r0, r3
 80153dc:	f7fe fe92 	bl	8014104 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80153e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e2:	3318      	adds	r3, #24
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7fe fe8d 	bl	8014104 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80153ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80153f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80153f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80153fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8015400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015402:	2200      	movs	r2, #0
 8015404:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015408:	2200      	movs	r2, #0
 801540a:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801540e:	2200      	movs	r2, #0
 8015410:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015414:	683a      	ldr	r2, [r7, #0]
 8015416:	68f9      	ldr	r1, [r7, #12]
 8015418:	69b8      	ldr	r0, [r7, #24]
 801541a:	f001 fb05 	bl	8016a28 <pxPortInitialiseStack>
 801541e:	4602      	mov	r2, r0
 8015420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015422:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015426:	2b00      	cmp	r3, #0
 8015428:	d002      	beq.n	8015430 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801542e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015430:	bf00      	nop
 8015432:	3720      	adds	r7, #32
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}

08015438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015440:	f001 fbfa 	bl	8016c38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015444:	4b31      	ldr	r3, [pc, #196]	; (801550c <prvAddNewTaskToReadyList+0xd4>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	3301      	adds	r3, #1
 801544a:	4a30      	ldr	r2, [pc, #192]	; (801550c <prvAddNewTaskToReadyList+0xd4>)
 801544c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801544e:	4b30      	ldr	r3, [pc, #192]	; (8015510 <prvAddNewTaskToReadyList+0xd8>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d109      	bne.n	801546a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015456:	4a2e      	ldr	r2, [pc, #184]	; (8015510 <prvAddNewTaskToReadyList+0xd8>)
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801545c:	4b2b      	ldr	r3, [pc, #172]	; (801550c <prvAddNewTaskToReadyList+0xd4>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	2b01      	cmp	r3, #1
 8015462:	d110      	bne.n	8015486 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015464:	f000 fcde 	bl	8015e24 <prvInitialiseTaskLists>
 8015468:	e00d      	b.n	8015486 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801546a:	4b2a      	ldr	r3, [pc, #168]	; (8015514 <prvAddNewTaskToReadyList+0xdc>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d109      	bne.n	8015486 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015472:	4b27      	ldr	r3, [pc, #156]	; (8015510 <prvAddNewTaskToReadyList+0xd8>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801547c:	429a      	cmp	r2, r3
 801547e:	d802      	bhi.n	8015486 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015480:	4a23      	ldr	r2, [pc, #140]	; (8015510 <prvAddNewTaskToReadyList+0xd8>)
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015486:	4b24      	ldr	r3, [pc, #144]	; (8015518 <prvAddNewTaskToReadyList+0xe0>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	3301      	adds	r3, #1
 801548c:	4a22      	ldr	r2, [pc, #136]	; (8015518 <prvAddNewTaskToReadyList+0xe0>)
 801548e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015490:	4b21      	ldr	r3, [pc, #132]	; (8015518 <prvAddNewTaskToReadyList+0xe0>)
 8015492:	681a      	ldr	r2, [r3, #0]
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	3334      	adds	r3, #52	; 0x34
 80154a0:	4619      	mov	r1, r3
 80154a2:	4610      	mov	r0, r2
 80154a4:	f7eb fb4a 	bl	8000b3c <TimeDoctor_CREATE>

		prvAddTaskToReadyList( pxNewTCB );
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ac:	4b1b      	ldr	r3, [pc, #108]	; (801551c <prvAddNewTaskToReadyList+0xe4>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d903      	bls.n	80154bc <prvAddNewTaskToReadyList+0x84>
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154b8:	4a18      	ldr	r2, [pc, #96]	; (801551c <prvAddNewTaskToReadyList+0xe4>)
 80154ba:	6013      	str	r3, [r2, #0]
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154c0:	4613      	mov	r3, r2
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	4413      	add	r3, r2
 80154c6:	009b      	lsls	r3, r3, #2
 80154c8:	4a15      	ldr	r2, [pc, #84]	; (8015520 <prvAddNewTaskToReadyList+0xe8>)
 80154ca:	441a      	add	r2, r3
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	3304      	adds	r3, #4
 80154d0:	4619      	mov	r1, r3
 80154d2:	4610      	mov	r0, r2
 80154d4:	f7fe fe23 	bl	801411e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80154d8:	f001 fbe0 	bl	8016c9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80154dc:	4b0d      	ldr	r3, [pc, #52]	; (8015514 <prvAddNewTaskToReadyList+0xdc>)
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d00e      	beq.n	8015502 <prvAddNewTaskToReadyList+0xca>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80154e4:	4b0a      	ldr	r3, [pc, #40]	; (8015510 <prvAddNewTaskToReadyList+0xd8>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d207      	bcs.n	8015502 <prvAddNewTaskToReadyList+0xca>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80154f2:	4b0c      	ldr	r3, [pc, #48]	; (8015524 <prvAddNewTaskToReadyList+0xec>)
 80154f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154f8:	601a      	str	r2, [r3, #0]
 80154fa:	f3bf 8f4f 	dsb	sy
 80154fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015502:	bf00      	nop
 8015504:	3708      	adds	r7, #8
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}
 801550a:	bf00      	nop
 801550c:	20001d0c 	.word	0x20001d0c
 8015510:	20001838 	.word	0x20001838
 8015514:	20001d18 	.word	0x20001d18
 8015518:	20001d28 	.word	0x20001d28
 801551c:	20001d14 	.word	0x20001d14
 8015520:	2000183c 	.word	0x2000183c
 8015524:	e000ed04 	.word	0xe000ed04

08015528 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015528:	b580      	push	{r7, lr}
 801552a:	b084      	sub	sp, #16
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015530:	2300      	movs	r3, #0
 8015532:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d018      	beq.n	801556c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801553a:	4b14      	ldr	r3, [pc, #80]	; (801558c <vTaskDelay+0x64>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d00b      	beq.n	801555a <vTaskDelay+0x32>
 8015542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015546:	b672      	cpsid	i
 8015548:	f383 8811 	msr	BASEPRI, r3
 801554c:	f3bf 8f6f 	isb	sy
 8015550:	f3bf 8f4f 	dsb	sy
 8015554:	b662      	cpsie	i
 8015556:	60bb      	str	r3, [r7, #8]
 8015558:	e7fe      	b.n	8015558 <vTaskDelay+0x30>
			vTaskSuspendAll();
 801555a:	f000 f907 	bl	801576c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801555e:	2100      	movs	r1, #0
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	f000 feb9 	bl	80162d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015566:	f000 f90f 	bl	8015788 <xTaskResumeAll>
 801556a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d107      	bne.n	8015582 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8015572:	4b07      	ldr	r3, [pc, #28]	; (8015590 <vTaskDelay+0x68>)
 8015574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015578:	601a      	str	r2, [r3, #0]
 801557a:	f3bf 8f4f 	dsb	sy
 801557e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015582:	bf00      	nop
 8015584:	3710      	adds	r7, #16
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
 801558a:	bf00      	nop
 801558c:	20001d34 	.word	0x20001d34
 8015590:	e000ed04 	.word	0xe000ed04

08015594 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8015594:	b580      	push	{r7, lr}
 8015596:	b084      	sub	sp, #16
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801559c:	f001 fb4c 	bl	8016c38 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d102      	bne.n	80155ac <vTaskSuspend+0x18>
 80155a6:	4b33      	ldr	r3, [pc, #204]	; (8015674 <vTaskSuspend+0xe0>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	e000      	b.n	80155ae <vTaskSuspend+0x1a>
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80155b4:	4618      	mov	r0, r3
 80155b6:	f7eb fb8d 	bl	8000cd4 <TimeDoctor_TASK_SUSPEND>

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	3304      	adds	r3, #4
 80155be:	4618      	mov	r0, r3
 80155c0:	f7fe fe0a 	bl	80141d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d004      	beq.n	80155d6 <vTaskSuspend+0x42>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	3318      	adds	r3, #24
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7fe fe01 	bl	80141d8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	3304      	adds	r3, #4
 80155da:	4619      	mov	r1, r3
 80155dc:	4826      	ldr	r0, [pc, #152]	; (8015678 <vTaskSuspend+0xe4>)
 80155de:	f7fe fd9e 	bl	801411e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80155e8:	b2db      	uxtb	r3, r3
 80155ea:	2b01      	cmp	r3, #1
 80155ec:	d103      	bne.n	80155f6 <vTaskSuspend+0x62>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	2200      	movs	r2, #0
 80155f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80155f6:	f001 fb51 	bl	8016c9c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80155fa:	4b20      	ldr	r3, [pc, #128]	; (801567c <vTaskSuspend+0xe8>)
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d005      	beq.n	801560e <vTaskSuspend+0x7a>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8015602:	f001 fb19 	bl	8016c38 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8015606:	f000 fca9 	bl	8015f5c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801560a:	f001 fb47 	bl	8016c9c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801560e:	4b19      	ldr	r3, [pc, #100]	; (8015674 <vTaskSuspend+0xe0>)
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	68fa      	ldr	r2, [r7, #12]
 8015614:	429a      	cmp	r2, r3
 8015616:	d128      	bne.n	801566a <vTaskSuspend+0xd6>
		{
			if( xSchedulerRunning != pdFALSE )
 8015618:	4b18      	ldr	r3, [pc, #96]	; (801567c <vTaskSuspend+0xe8>)
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d018      	beq.n	8015652 <vTaskSuspend+0xbe>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8015620:	4b17      	ldr	r3, [pc, #92]	; (8015680 <vTaskSuspend+0xec>)
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d00b      	beq.n	8015640 <vTaskSuspend+0xac>
 8015628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801562c:	b672      	cpsid	i
 801562e:	f383 8811 	msr	BASEPRI, r3
 8015632:	f3bf 8f6f 	isb	sy
 8015636:	f3bf 8f4f 	dsb	sy
 801563a:	b662      	cpsie	i
 801563c:	60bb      	str	r3, [r7, #8]
 801563e:	e7fe      	b.n	801563e <vTaskSuspend+0xaa>
				portYIELD_WITHIN_API();
 8015640:	4b10      	ldr	r3, [pc, #64]	; (8015684 <vTaskSuspend+0xf0>)
 8015642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015646:	601a      	str	r2, [r3, #0]
 8015648:	f3bf 8f4f 	dsb	sy
 801564c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015650:	e00b      	b.n	801566a <vTaskSuspend+0xd6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8015652:	4b09      	ldr	r3, [pc, #36]	; (8015678 <vTaskSuspend+0xe4>)
 8015654:	681a      	ldr	r2, [r3, #0]
 8015656:	4b0c      	ldr	r3, [pc, #48]	; (8015688 <vTaskSuspend+0xf4>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	429a      	cmp	r2, r3
 801565c:	d103      	bne.n	8015666 <vTaskSuspend+0xd2>
					pxCurrentTCB = NULL;
 801565e:	4b05      	ldr	r3, [pc, #20]	; (8015674 <vTaskSuspend+0xe0>)
 8015660:	2200      	movs	r2, #0
 8015662:	601a      	str	r2, [r3, #0]
	}
 8015664:	e001      	b.n	801566a <vTaskSuspend+0xd6>
					vTaskSwitchContext();
 8015666:	f000 f9f7 	bl	8015a58 <vTaskSwitchContext>
	}
 801566a:	bf00      	nop
 801566c:	3710      	adds	r7, #16
 801566e:	46bd      	mov	sp, r7
 8015670:	bd80      	pop	{r7, pc}
 8015672:	bf00      	nop
 8015674:	20001838 	.word	0x20001838
 8015678:	20001cf8 	.word	0x20001cf8
 801567c:	20001d18 	.word	0x20001d18
 8015680:	20001d34 	.word	0x20001d34
 8015684:	e000ed04 	.word	0xe000ed04
 8015688:	20001d0c 	.word	0x20001d0c

0801568c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b08a      	sub	sp, #40	; 0x28
 8015690:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015692:	2300      	movs	r3, #0
 8015694:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015696:	2300      	movs	r3, #0
 8015698:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801569a:	463a      	mov	r2, r7
 801569c:	1d39      	adds	r1, r7, #4
 801569e:	f107 0308 	add.w	r3, r7, #8
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7fe fcda 	bl	801405c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80156a8:	6839      	ldr	r1, [r7, #0]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	68ba      	ldr	r2, [r7, #8]
 80156ae:	9202      	str	r2, [sp, #8]
 80156b0:	9301      	str	r3, [sp, #4]
 80156b2:	2300      	movs	r3, #0
 80156b4:	9300      	str	r3, [sp, #0]
 80156b6:	2300      	movs	r3, #0
 80156b8:	460a      	mov	r2, r1
 80156ba:	4925      	ldr	r1, [pc, #148]	; (8015750 <vTaskStartScheduler+0xc4>)
 80156bc:	4825      	ldr	r0, [pc, #148]	; (8015754 <vTaskStartScheduler+0xc8>)
 80156be:	f7ff fd83 	bl	80151c8 <xTaskCreateStatic>
 80156c2:	4602      	mov	r2, r0
 80156c4:	4b24      	ldr	r3, [pc, #144]	; (8015758 <vTaskStartScheduler+0xcc>)
 80156c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80156c8:	4b23      	ldr	r3, [pc, #140]	; (8015758 <vTaskStartScheduler+0xcc>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d002      	beq.n	80156d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80156d0:	2301      	movs	r3, #1
 80156d2:	617b      	str	r3, [r7, #20]
 80156d4:	e001      	b.n	80156da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80156d6:	2300      	movs	r3, #0
 80156d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80156da:	697b      	ldr	r3, [r7, #20]
 80156dc:	2b01      	cmp	r3, #1
 80156de:	d102      	bne.n	80156e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80156e0:	f000 fe4e 	bl	8016380 <xTimerCreateTimerTask>
 80156e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	2b01      	cmp	r3, #1
 80156ea:	d11d      	bne.n	8015728 <vTaskStartScheduler+0x9c>
 80156ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156f0:	b672      	cpsid	i
 80156f2:	f383 8811 	msr	BASEPRI, r3
 80156f6:	f3bf 8f6f 	isb	sy
 80156fa:	f3bf 8f4f 	dsb	sy
 80156fe:	b662      	cpsie	i
 8015700:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015702:	4b16      	ldr	r3, [pc, #88]	; (801575c <vTaskStartScheduler+0xd0>)
 8015704:	f04f 32ff 	mov.w	r2, #4294967295
 8015708:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801570a:	4b15      	ldr	r3, [pc, #84]	; (8015760 <vTaskStartScheduler+0xd4>)
 801570c:	2201      	movs	r2, #1
 801570e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015710:	4b14      	ldr	r3, [pc, #80]	; (8015764 <vTaskStartScheduler+0xd8>)
 8015712:	2200      	movs	r2, #0
 8015714:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8015716:	4b14      	ldr	r3, [pc, #80]	; (8015768 <vTaskStartScheduler+0xdc>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801571c:	4618      	mov	r0, r3
 801571e:	f7eb fa5d 	bl	8000bdc <TimeDoctor_TASK_SWITCHED_IN>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015722:	f001 fa0d 	bl	8016b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015726:	e00f      	b.n	8015748 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801572e:	d10b      	bne.n	8015748 <vTaskStartScheduler+0xbc>
 8015730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015734:	b672      	cpsid	i
 8015736:	f383 8811 	msr	BASEPRI, r3
 801573a:	f3bf 8f6f 	isb	sy
 801573e:	f3bf 8f4f 	dsb	sy
 8015742:	b662      	cpsie	i
 8015744:	60fb      	str	r3, [r7, #12]
 8015746:	e7fe      	b.n	8015746 <vTaskStartScheduler+0xba>
}
 8015748:	bf00      	nop
 801574a:	3718      	adds	r7, #24
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	08018620 	.word	0x08018620
 8015754:	08015df1 	.word	0x08015df1
 8015758:	20001d30 	.word	0x20001d30
 801575c:	20001d2c 	.word	0x20001d2c
 8015760:	20001d18 	.word	0x20001d18
 8015764:	20001d10 	.word	0x20001d10
 8015768:	20001838 	.word	0x20001838

0801576c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801576c:	b480      	push	{r7}
 801576e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015770:	4b04      	ldr	r3, [pc, #16]	; (8015784 <vTaskSuspendAll+0x18>)
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	3301      	adds	r3, #1
 8015776:	4a03      	ldr	r2, [pc, #12]	; (8015784 <vTaskSuspendAll+0x18>)
 8015778:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801577a:	bf00      	nop
 801577c:	46bd      	mov	sp, r7
 801577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015782:	4770      	bx	lr
 8015784:	20001d34 	.word	0x20001d34

08015788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801578e:	2300      	movs	r3, #0
 8015790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015792:	2300      	movs	r3, #0
 8015794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015796:	4b42      	ldr	r3, [pc, #264]	; (80158a0 <xTaskResumeAll+0x118>)
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d10b      	bne.n	80157b6 <xTaskResumeAll+0x2e>
 801579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157a2:	b672      	cpsid	i
 80157a4:	f383 8811 	msr	BASEPRI, r3
 80157a8:	f3bf 8f6f 	isb	sy
 80157ac:	f3bf 8f4f 	dsb	sy
 80157b0:	b662      	cpsie	i
 80157b2:	603b      	str	r3, [r7, #0]
 80157b4:	e7fe      	b.n	80157b4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80157b6:	f001 fa3f 	bl	8016c38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80157ba:	4b39      	ldr	r3, [pc, #228]	; (80158a0 <xTaskResumeAll+0x118>)
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	3b01      	subs	r3, #1
 80157c0:	4a37      	ldr	r2, [pc, #220]	; (80158a0 <xTaskResumeAll+0x118>)
 80157c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80157c4:	4b36      	ldr	r3, [pc, #216]	; (80158a0 <xTaskResumeAll+0x118>)
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d162      	bne.n	8015892 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80157cc:	4b35      	ldr	r3, [pc, #212]	; (80158a4 <xTaskResumeAll+0x11c>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d05e      	beq.n	8015892 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80157d4:	e02f      	b.n	8015836 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80157d6:	4b34      	ldr	r3, [pc, #208]	; (80158a8 <xTaskResumeAll+0x120>)
 80157d8:	68db      	ldr	r3, [r3, #12]
 80157da:	68db      	ldr	r3, [r3, #12]
 80157dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	3318      	adds	r3, #24
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7fe fcf8 	bl	80141d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	3304      	adds	r3, #4
 80157ec:	4618      	mov	r0, r3
 80157ee:	f7fe fcf3 	bl	80141d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157f6:	4b2d      	ldr	r3, [pc, #180]	; (80158ac <xTaskResumeAll+0x124>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d903      	bls.n	8015806 <xTaskResumeAll+0x7e>
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015802:	4a2a      	ldr	r2, [pc, #168]	; (80158ac <xTaskResumeAll+0x124>)
 8015804:	6013      	str	r3, [r2, #0]
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801580a:	4613      	mov	r3, r2
 801580c:	009b      	lsls	r3, r3, #2
 801580e:	4413      	add	r3, r2
 8015810:	009b      	lsls	r3, r3, #2
 8015812:	4a27      	ldr	r2, [pc, #156]	; (80158b0 <xTaskResumeAll+0x128>)
 8015814:	441a      	add	r2, r3
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	3304      	adds	r3, #4
 801581a:	4619      	mov	r1, r3
 801581c:	4610      	mov	r0, r2
 801581e:	f7fe fc7e 	bl	801411e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015826:	4b23      	ldr	r3, [pc, #140]	; (80158b4 <xTaskResumeAll+0x12c>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801582c:	429a      	cmp	r2, r3
 801582e:	d302      	bcc.n	8015836 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015830:	4b21      	ldr	r3, [pc, #132]	; (80158b8 <xTaskResumeAll+0x130>)
 8015832:	2201      	movs	r2, #1
 8015834:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015836:	4b1c      	ldr	r3, [pc, #112]	; (80158a8 <xTaskResumeAll+0x120>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d1cb      	bne.n	80157d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d001      	beq.n	8015848 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015844:	f000 fb8a 	bl	8015f5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015848:	4b1c      	ldr	r3, [pc, #112]	; (80158bc <xTaskResumeAll+0x134>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d010      	beq.n	8015876 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015854:	f000 f846 	bl	80158e4 <xTaskIncrementTick>
 8015858:	4603      	mov	r3, r0
 801585a:	2b00      	cmp	r3, #0
 801585c:	d002      	beq.n	8015864 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801585e:	4b16      	ldr	r3, [pc, #88]	; (80158b8 <xTaskResumeAll+0x130>)
 8015860:	2201      	movs	r2, #1
 8015862:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	3b01      	subs	r3, #1
 8015868:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d1f1      	bne.n	8015854 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8015870:	4b12      	ldr	r3, [pc, #72]	; (80158bc <xTaskResumeAll+0x134>)
 8015872:	2200      	movs	r2, #0
 8015874:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015876:	4b10      	ldr	r3, [pc, #64]	; (80158b8 <xTaskResumeAll+0x130>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d009      	beq.n	8015892 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801587e:	2301      	movs	r3, #1
 8015880:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015882:	4b0f      	ldr	r3, [pc, #60]	; (80158c0 <xTaskResumeAll+0x138>)
 8015884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015888:	601a      	str	r2, [r3, #0]
 801588a:	f3bf 8f4f 	dsb	sy
 801588e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015892:	f001 fa03 	bl	8016c9c <vPortExitCritical>

	return xAlreadyYielded;
 8015896:	68bb      	ldr	r3, [r7, #8]
}
 8015898:	4618      	mov	r0, r3
 801589a:	3710      	adds	r7, #16
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}
 80158a0:	20001d34 	.word	0x20001d34
 80158a4:	20001d0c 	.word	0x20001d0c
 80158a8:	20001ccc 	.word	0x20001ccc
 80158ac:	20001d14 	.word	0x20001d14
 80158b0:	2000183c 	.word	0x2000183c
 80158b4:	20001838 	.word	0x20001838
 80158b8:	20001d20 	.word	0x20001d20
 80158bc:	20001d1c 	.word	0x20001d1c
 80158c0:	e000ed04 	.word	0xe000ed04

080158c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80158c4:	b480      	push	{r7}
 80158c6:	b083      	sub	sp, #12
 80158c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80158ca:	4b05      	ldr	r3, [pc, #20]	; (80158e0 <xTaskGetTickCount+0x1c>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80158d0:	687b      	ldr	r3, [r7, #4]
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	370c      	adds	r7, #12
 80158d6:	46bd      	mov	sp, r7
 80158d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158dc:	4770      	bx	lr
 80158de:	bf00      	nop
 80158e0:	20001d10 	.word	0x20001d10

080158e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b086      	sub	sp, #24
 80158e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80158ea:	2300      	movs	r3, #0
 80158ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80158ee:	4b4f      	ldr	r3, [pc, #316]	; (8015a2c <xTaskIncrementTick+0x148>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	f040 808a 	bne.w	8015a0c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80158f8:	4b4d      	ldr	r3, [pc, #308]	; (8015a30 <xTaskIncrementTick+0x14c>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	3301      	adds	r3, #1
 80158fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015900:	4a4b      	ldr	r2, [pc, #300]	; (8015a30 <xTaskIncrementTick+0x14c>)
 8015902:	693b      	ldr	r3, [r7, #16]
 8015904:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015906:	693b      	ldr	r3, [r7, #16]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d121      	bne.n	8015950 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801590c:	4b49      	ldr	r3, [pc, #292]	; (8015a34 <xTaskIncrementTick+0x150>)
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d00b      	beq.n	801592e <xTaskIncrementTick+0x4a>
 8015916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801591a:	b672      	cpsid	i
 801591c:	f383 8811 	msr	BASEPRI, r3
 8015920:	f3bf 8f6f 	isb	sy
 8015924:	f3bf 8f4f 	dsb	sy
 8015928:	b662      	cpsie	i
 801592a:	603b      	str	r3, [r7, #0]
 801592c:	e7fe      	b.n	801592c <xTaskIncrementTick+0x48>
 801592e:	4b41      	ldr	r3, [pc, #260]	; (8015a34 <xTaskIncrementTick+0x150>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	60fb      	str	r3, [r7, #12]
 8015934:	4b40      	ldr	r3, [pc, #256]	; (8015a38 <xTaskIncrementTick+0x154>)
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	4a3e      	ldr	r2, [pc, #248]	; (8015a34 <xTaskIncrementTick+0x150>)
 801593a:	6013      	str	r3, [r2, #0]
 801593c:	4a3e      	ldr	r2, [pc, #248]	; (8015a38 <xTaskIncrementTick+0x154>)
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	6013      	str	r3, [r2, #0]
 8015942:	4b3e      	ldr	r3, [pc, #248]	; (8015a3c <xTaskIncrementTick+0x158>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	3301      	adds	r3, #1
 8015948:	4a3c      	ldr	r2, [pc, #240]	; (8015a3c <xTaskIncrementTick+0x158>)
 801594a:	6013      	str	r3, [r2, #0]
 801594c:	f000 fb06 	bl	8015f5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015950:	4b3b      	ldr	r3, [pc, #236]	; (8015a40 <xTaskIncrementTick+0x15c>)
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	693a      	ldr	r2, [r7, #16]
 8015956:	429a      	cmp	r2, r3
 8015958:	d349      	bcc.n	80159ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801595a:	4b36      	ldr	r3, [pc, #216]	; (8015a34 <xTaskIncrementTick+0x150>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d104      	bne.n	801596e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015964:	4b36      	ldr	r3, [pc, #216]	; (8015a40 <xTaskIncrementTick+0x15c>)
 8015966:	f04f 32ff 	mov.w	r2, #4294967295
 801596a:	601a      	str	r2, [r3, #0]
					break;
 801596c:	e03f      	b.n	80159ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801596e:	4b31      	ldr	r3, [pc, #196]	; (8015a34 <xTaskIncrementTick+0x150>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	68db      	ldr	r3, [r3, #12]
 8015974:	68db      	ldr	r3, [r3, #12]
 8015976:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	685b      	ldr	r3, [r3, #4]
 801597c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801597e:	693a      	ldr	r2, [r7, #16]
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	429a      	cmp	r2, r3
 8015984:	d203      	bcs.n	801598e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015986:	4a2e      	ldr	r2, [pc, #184]	; (8015a40 <xTaskIncrementTick+0x15c>)
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801598c:	e02f      	b.n	80159ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801598e:	68bb      	ldr	r3, [r7, #8]
 8015990:	3304      	adds	r3, #4
 8015992:	4618      	mov	r0, r3
 8015994:	f7fe fc20 	bl	80141d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015998:	68bb      	ldr	r3, [r7, #8]
 801599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801599c:	2b00      	cmp	r3, #0
 801599e:	d004      	beq.n	80159aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	3318      	adds	r3, #24
 80159a4:	4618      	mov	r0, r3
 80159a6:	f7fe fc17 	bl	80141d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80159aa:	68bb      	ldr	r3, [r7, #8]
 80159ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159ae:	4b25      	ldr	r3, [pc, #148]	; (8015a44 <xTaskIncrementTick+0x160>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d903      	bls.n	80159be <xTaskIncrementTick+0xda>
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159ba:	4a22      	ldr	r2, [pc, #136]	; (8015a44 <xTaskIncrementTick+0x160>)
 80159bc:	6013      	str	r3, [r2, #0]
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159c2:	4613      	mov	r3, r2
 80159c4:	009b      	lsls	r3, r3, #2
 80159c6:	4413      	add	r3, r2
 80159c8:	009b      	lsls	r3, r3, #2
 80159ca:	4a1f      	ldr	r2, [pc, #124]	; (8015a48 <xTaskIncrementTick+0x164>)
 80159cc:	441a      	add	r2, r3
 80159ce:	68bb      	ldr	r3, [r7, #8]
 80159d0:	3304      	adds	r3, #4
 80159d2:	4619      	mov	r1, r3
 80159d4:	4610      	mov	r0, r2
 80159d6:	f7fe fba2 	bl	801411e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159de:	4b1b      	ldr	r3, [pc, #108]	; (8015a4c <xTaskIncrementTick+0x168>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159e4:	429a      	cmp	r2, r3
 80159e6:	d3b8      	bcc.n	801595a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80159e8:	2301      	movs	r3, #1
 80159ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80159ec:	e7b5      	b.n	801595a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80159ee:	4b17      	ldr	r3, [pc, #92]	; (8015a4c <xTaskIncrementTick+0x168>)
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159f4:	4914      	ldr	r1, [pc, #80]	; (8015a48 <xTaskIncrementTick+0x164>)
 80159f6:	4613      	mov	r3, r2
 80159f8:	009b      	lsls	r3, r3, #2
 80159fa:	4413      	add	r3, r2
 80159fc:	009b      	lsls	r3, r3, #2
 80159fe:	440b      	add	r3, r1
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	2b01      	cmp	r3, #1
 8015a04:	d907      	bls.n	8015a16 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8015a06:	2301      	movs	r3, #1
 8015a08:	617b      	str	r3, [r7, #20]
 8015a0a:	e004      	b.n	8015a16 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015a0c:	4b10      	ldr	r3, [pc, #64]	; (8015a50 <xTaskIncrementTick+0x16c>)
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	3301      	adds	r3, #1
 8015a12:	4a0f      	ldr	r2, [pc, #60]	; (8015a50 <xTaskIncrementTick+0x16c>)
 8015a14:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015a16:	4b0f      	ldr	r3, [pc, #60]	; (8015a54 <xTaskIncrementTick+0x170>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d001      	beq.n	8015a22 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8015a1e:	2301      	movs	r3, #1
 8015a20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015a22:	697b      	ldr	r3, [r7, #20]
}
 8015a24:	4618      	mov	r0, r3
 8015a26:	3718      	adds	r7, #24
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}
 8015a2c:	20001d34 	.word	0x20001d34
 8015a30:	20001d10 	.word	0x20001d10
 8015a34:	20001cc4 	.word	0x20001cc4
 8015a38:	20001cc8 	.word	0x20001cc8
 8015a3c:	20001d24 	.word	0x20001d24
 8015a40:	20001d2c 	.word	0x20001d2c
 8015a44:	20001d14 	.word	0x20001d14
 8015a48:	2000183c 	.word	0x2000183c
 8015a4c:	20001838 	.word	0x20001838
 8015a50:	20001d1c 	.word	0x20001d1c
 8015a54:	20001d20 	.word	0x20001d20

08015a58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b086      	sub	sp, #24
 8015a5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015a5e:	4b41      	ldr	r3, [pc, #260]	; (8015b64 <vTaskSwitchContext+0x10c>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d003      	beq.n	8015a6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015a66:	4b40      	ldr	r3, [pc, #256]	; (8015b68 <vTaskSwitchContext+0x110>)
 8015a68:	2201      	movs	r2, #1
 8015a6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015a6c:	e075      	b.n	8015b5a <vTaskSwitchContext+0x102>
		xYieldPending = pdFALSE;
 8015a6e:	4b3e      	ldr	r3, [pc, #248]	; (8015b68 <vTaskSwitchContext+0x110>)
 8015a70:	2200      	movs	r2, #0
 8015a72:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8015a74:	4b3d      	ldr	r3, [pc, #244]	; (8015b6c <vTaskSwitchContext+0x114>)
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7eb f8ec 	bl	8000c58 <TimeDoctor_TASK_SWITCHED_OUT>
		taskCHECK_FOR_STACK_OVERFLOW();
 8015a80:	4b3a      	ldr	r3, [pc, #232]	; (8015b6c <vTaskSwitchContext+0x114>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a86:	613b      	str	r3, [r7, #16]
 8015a88:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8015a8c:	60fb      	str	r3, [r7, #12]
 8015a8e:	693b      	ldr	r3, [r7, #16]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	68fa      	ldr	r2, [r7, #12]
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d111      	bne.n	8015abc <vTaskSwitchContext+0x64>
 8015a98:	693b      	ldr	r3, [r7, #16]
 8015a9a:	3304      	adds	r3, #4
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	68fa      	ldr	r2, [r7, #12]
 8015aa0:	429a      	cmp	r2, r3
 8015aa2:	d10b      	bne.n	8015abc <vTaskSwitchContext+0x64>
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	3308      	adds	r3, #8
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	68fa      	ldr	r2, [r7, #12]
 8015aac:	429a      	cmp	r2, r3
 8015aae:	d105      	bne.n	8015abc <vTaskSwitchContext+0x64>
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	330c      	adds	r3, #12
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	68fa      	ldr	r2, [r7, #12]
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d008      	beq.n	8015ace <vTaskSwitchContext+0x76>
 8015abc:	4b2b      	ldr	r3, [pc, #172]	; (8015b6c <vTaskSwitchContext+0x114>)
 8015abe:	681a      	ldr	r2, [r3, #0]
 8015ac0:	4b2a      	ldr	r3, [pc, #168]	; (8015b6c <vTaskSwitchContext+0x114>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	3334      	adds	r3, #52	; 0x34
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	4610      	mov	r0, r2
 8015aca:	f7eb fab8 	bl	800103e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ace:	4b28      	ldr	r3, [pc, #160]	; (8015b70 <vTaskSwitchContext+0x118>)
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	617b      	str	r3, [r7, #20]
 8015ad4:	e011      	b.n	8015afa <vTaskSwitchContext+0xa2>
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d10b      	bne.n	8015af4 <vTaskSwitchContext+0x9c>
 8015adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ae0:	b672      	cpsid	i
 8015ae2:	f383 8811 	msr	BASEPRI, r3
 8015ae6:	f3bf 8f6f 	isb	sy
 8015aea:	f3bf 8f4f 	dsb	sy
 8015aee:	b662      	cpsie	i
 8015af0:	607b      	str	r3, [r7, #4]
 8015af2:	e7fe      	b.n	8015af2 <vTaskSwitchContext+0x9a>
 8015af4:	697b      	ldr	r3, [r7, #20]
 8015af6:	3b01      	subs	r3, #1
 8015af8:	617b      	str	r3, [r7, #20]
 8015afa:	491e      	ldr	r1, [pc, #120]	; (8015b74 <vTaskSwitchContext+0x11c>)
 8015afc:	697a      	ldr	r2, [r7, #20]
 8015afe:	4613      	mov	r3, r2
 8015b00:	009b      	lsls	r3, r3, #2
 8015b02:	4413      	add	r3, r2
 8015b04:	009b      	lsls	r3, r3, #2
 8015b06:	440b      	add	r3, r1
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d0e3      	beq.n	8015ad6 <vTaskSwitchContext+0x7e>
 8015b0e:	697a      	ldr	r2, [r7, #20]
 8015b10:	4613      	mov	r3, r2
 8015b12:	009b      	lsls	r3, r3, #2
 8015b14:	4413      	add	r3, r2
 8015b16:	009b      	lsls	r3, r3, #2
 8015b18:	4a16      	ldr	r2, [pc, #88]	; (8015b74 <vTaskSwitchContext+0x11c>)
 8015b1a:	4413      	add	r3, r2
 8015b1c:	60bb      	str	r3, [r7, #8]
 8015b1e:	68bb      	ldr	r3, [r7, #8]
 8015b20:	685b      	ldr	r3, [r3, #4]
 8015b22:	685a      	ldr	r2, [r3, #4]
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	605a      	str	r2, [r3, #4]
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	685a      	ldr	r2, [r3, #4]
 8015b2c:	68bb      	ldr	r3, [r7, #8]
 8015b2e:	3308      	adds	r3, #8
 8015b30:	429a      	cmp	r2, r3
 8015b32:	d104      	bne.n	8015b3e <vTaskSwitchContext+0xe6>
 8015b34:	68bb      	ldr	r3, [r7, #8]
 8015b36:	685b      	ldr	r3, [r3, #4]
 8015b38:	685a      	ldr	r2, [r3, #4]
 8015b3a:	68bb      	ldr	r3, [r7, #8]
 8015b3c:	605a      	str	r2, [r3, #4]
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	685b      	ldr	r3, [r3, #4]
 8015b42:	68db      	ldr	r3, [r3, #12]
 8015b44:	4a09      	ldr	r2, [pc, #36]	; (8015b6c <vTaskSwitchContext+0x114>)
 8015b46:	6013      	str	r3, [r2, #0]
 8015b48:	4a09      	ldr	r2, [pc, #36]	; (8015b70 <vTaskSwitchContext+0x118>)
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8015b4e:	4b07      	ldr	r3, [pc, #28]	; (8015b6c <vTaskSwitchContext+0x114>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7eb f841 	bl	8000bdc <TimeDoctor_TASK_SWITCHED_IN>
}
 8015b5a:	bf00      	nop
 8015b5c:	3718      	adds	r7, #24
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}
 8015b62:	bf00      	nop
 8015b64:	20001d34 	.word	0x20001d34
 8015b68:	20001d20 	.word	0x20001d20
 8015b6c:	20001838 	.word	0x20001838
 8015b70:	20001d14 	.word	0x20001d14
 8015b74:	2000183c 	.word	0x2000183c

08015b78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b084      	sub	sp, #16
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d10b      	bne.n	8015ba0 <vTaskPlaceOnEventList+0x28>
 8015b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b8c:	b672      	cpsid	i
 8015b8e:	f383 8811 	msr	BASEPRI, r3
 8015b92:	f3bf 8f6f 	isb	sy
 8015b96:	f3bf 8f4f 	dsb	sy
 8015b9a:	b662      	cpsie	i
 8015b9c:	60fb      	str	r3, [r7, #12]
 8015b9e:	e7fe      	b.n	8015b9e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015ba0:	4b07      	ldr	r3, [pc, #28]	; (8015bc0 <vTaskPlaceOnEventList+0x48>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	3318      	adds	r3, #24
 8015ba6:	4619      	mov	r1, r3
 8015ba8:	6878      	ldr	r0, [r7, #4]
 8015baa:	f7fe fadc 	bl	8014166 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015bae:	2101      	movs	r1, #1
 8015bb0:	6838      	ldr	r0, [r7, #0]
 8015bb2:	f000 fb91 	bl	80162d8 <prvAddCurrentTaskToDelayedList>
}
 8015bb6:	bf00      	nop
 8015bb8:	3710      	adds	r7, #16
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	20001838 	.word	0x20001838

08015bc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b086      	sub	sp, #24
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	60f8      	str	r0, [r7, #12]
 8015bcc:	60b9      	str	r1, [r7, #8]
 8015bce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d10b      	bne.n	8015bee <vTaskPlaceOnEventListRestricted+0x2a>
 8015bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bda:	b672      	cpsid	i
 8015bdc:	f383 8811 	msr	BASEPRI, r3
 8015be0:	f3bf 8f6f 	isb	sy
 8015be4:	f3bf 8f4f 	dsb	sy
 8015be8:	b662      	cpsie	i
 8015bea:	617b      	str	r3, [r7, #20]
 8015bec:	e7fe      	b.n	8015bec <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015bee:	4b0a      	ldr	r3, [pc, #40]	; (8015c18 <vTaskPlaceOnEventListRestricted+0x54>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	3318      	adds	r3, #24
 8015bf4:	4619      	mov	r1, r3
 8015bf6:	68f8      	ldr	r0, [r7, #12]
 8015bf8:	f7fe fa91 	bl	801411e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d002      	beq.n	8015c08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8015c02:	f04f 33ff 	mov.w	r3, #4294967295
 8015c06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015c08:	6879      	ldr	r1, [r7, #4]
 8015c0a:	68b8      	ldr	r0, [r7, #8]
 8015c0c:	f000 fb64 	bl	80162d8 <prvAddCurrentTaskToDelayedList>
	}
 8015c10:	bf00      	nop
 8015c12:	3718      	adds	r7, #24
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bd80      	pop	{r7, pc}
 8015c18:	20001838 	.word	0x20001838

08015c1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b086      	sub	sp, #24
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	68db      	ldr	r3, [r3, #12]
 8015c28:	68db      	ldr	r3, [r3, #12]
 8015c2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d10b      	bne.n	8015c4a <xTaskRemoveFromEventList+0x2e>
 8015c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c36:	b672      	cpsid	i
 8015c38:	f383 8811 	msr	BASEPRI, r3
 8015c3c:	f3bf 8f6f 	isb	sy
 8015c40:	f3bf 8f4f 	dsb	sy
 8015c44:	b662      	cpsie	i
 8015c46:	60fb      	str	r3, [r7, #12]
 8015c48:	e7fe      	b.n	8015c48 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	3318      	adds	r3, #24
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f7fe fac2 	bl	80141d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c54:	4b1d      	ldr	r3, [pc, #116]	; (8015ccc <xTaskRemoveFromEventList+0xb0>)
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d11d      	bne.n	8015c98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015c5c:	693b      	ldr	r3, [r7, #16]
 8015c5e:	3304      	adds	r3, #4
 8015c60:	4618      	mov	r0, r3
 8015c62:	f7fe fab9 	bl	80141d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015c66:	693b      	ldr	r3, [r7, #16]
 8015c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c6a:	4b19      	ldr	r3, [pc, #100]	; (8015cd0 <xTaskRemoveFromEventList+0xb4>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d903      	bls.n	8015c7a <xTaskRemoveFromEventList+0x5e>
 8015c72:	693b      	ldr	r3, [r7, #16]
 8015c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c76:	4a16      	ldr	r2, [pc, #88]	; (8015cd0 <xTaskRemoveFromEventList+0xb4>)
 8015c78:	6013      	str	r3, [r2, #0]
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c7e:	4613      	mov	r3, r2
 8015c80:	009b      	lsls	r3, r3, #2
 8015c82:	4413      	add	r3, r2
 8015c84:	009b      	lsls	r3, r3, #2
 8015c86:	4a13      	ldr	r2, [pc, #76]	; (8015cd4 <xTaskRemoveFromEventList+0xb8>)
 8015c88:	441a      	add	r2, r3
 8015c8a:	693b      	ldr	r3, [r7, #16]
 8015c8c:	3304      	adds	r3, #4
 8015c8e:	4619      	mov	r1, r3
 8015c90:	4610      	mov	r0, r2
 8015c92:	f7fe fa44 	bl	801411e <vListInsertEnd>
 8015c96:	e005      	b.n	8015ca4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	3318      	adds	r3, #24
 8015c9c:	4619      	mov	r1, r3
 8015c9e:	480e      	ldr	r0, [pc, #56]	; (8015cd8 <xTaskRemoveFromEventList+0xbc>)
 8015ca0:	f7fe fa3d 	bl	801411e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ca8:	4b0c      	ldr	r3, [pc, #48]	; (8015cdc <xTaskRemoveFromEventList+0xc0>)
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	d905      	bls.n	8015cbe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015cb6:	4b0a      	ldr	r3, [pc, #40]	; (8015ce0 <xTaskRemoveFromEventList+0xc4>)
 8015cb8:	2201      	movs	r2, #1
 8015cba:	601a      	str	r2, [r3, #0]
 8015cbc:	e001      	b.n	8015cc2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015cc2:	697b      	ldr	r3, [r7, #20]
}
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	3718      	adds	r7, #24
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}
 8015ccc:	20001d34 	.word	0x20001d34
 8015cd0:	20001d14 	.word	0x20001d14
 8015cd4:	2000183c 	.word	0x2000183c
 8015cd8:	20001ccc 	.word	0x20001ccc
 8015cdc:	20001838 	.word	0x20001838
 8015ce0:	20001d20 	.word	0x20001d20

08015ce4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b083      	sub	sp, #12
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015cec:	4b06      	ldr	r3, [pc, #24]	; (8015d08 <vTaskInternalSetTimeOutState+0x24>)
 8015cee:	681a      	ldr	r2, [r3, #0]
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015cf4:	4b05      	ldr	r3, [pc, #20]	; (8015d0c <vTaskInternalSetTimeOutState+0x28>)
 8015cf6:	681a      	ldr	r2, [r3, #0]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	605a      	str	r2, [r3, #4]
}
 8015cfc:	bf00      	nop
 8015cfe:	370c      	adds	r7, #12
 8015d00:	46bd      	mov	sp, r7
 8015d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d06:	4770      	bx	lr
 8015d08:	20001d24 	.word	0x20001d24
 8015d0c:	20001d10 	.word	0x20001d10

08015d10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b088      	sub	sp, #32
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
 8015d18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d10b      	bne.n	8015d38 <xTaskCheckForTimeOut+0x28>
 8015d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d24:	b672      	cpsid	i
 8015d26:	f383 8811 	msr	BASEPRI, r3
 8015d2a:	f3bf 8f6f 	isb	sy
 8015d2e:	f3bf 8f4f 	dsb	sy
 8015d32:	b662      	cpsie	i
 8015d34:	613b      	str	r3, [r7, #16]
 8015d36:	e7fe      	b.n	8015d36 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8015d38:	683b      	ldr	r3, [r7, #0]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d10b      	bne.n	8015d56 <xTaskCheckForTimeOut+0x46>
 8015d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d42:	b672      	cpsid	i
 8015d44:	f383 8811 	msr	BASEPRI, r3
 8015d48:	f3bf 8f6f 	isb	sy
 8015d4c:	f3bf 8f4f 	dsb	sy
 8015d50:	b662      	cpsie	i
 8015d52:	60fb      	str	r3, [r7, #12]
 8015d54:	e7fe      	b.n	8015d54 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8015d56:	f000 ff6f 	bl	8016c38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015d5a:	4b1d      	ldr	r3, [pc, #116]	; (8015dd0 <xTaskCheckForTimeOut+0xc0>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	69ba      	ldr	r2, [r7, #24]
 8015d66:	1ad3      	subs	r3, r2, r3
 8015d68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015d6a:	683b      	ldr	r3, [r7, #0]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d72:	d102      	bne.n	8015d7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015d74:	2300      	movs	r3, #0
 8015d76:	61fb      	str	r3, [r7, #28]
 8015d78:	e023      	b.n	8015dc2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681a      	ldr	r2, [r3, #0]
 8015d7e:	4b15      	ldr	r3, [pc, #84]	; (8015dd4 <xTaskCheckForTimeOut+0xc4>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d007      	beq.n	8015d96 <xTaskCheckForTimeOut+0x86>
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	685b      	ldr	r3, [r3, #4]
 8015d8a:	69ba      	ldr	r2, [r7, #24]
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d302      	bcc.n	8015d96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015d90:	2301      	movs	r3, #1
 8015d92:	61fb      	str	r3, [r7, #28]
 8015d94:	e015      	b.n	8015dc2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015d96:	683b      	ldr	r3, [r7, #0]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	697a      	ldr	r2, [r7, #20]
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d20b      	bcs.n	8015db8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	681a      	ldr	r2, [r3, #0]
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	1ad2      	subs	r2, r2, r3
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f7ff ff99 	bl	8015ce4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015db2:	2300      	movs	r3, #0
 8015db4:	61fb      	str	r3, [r7, #28]
 8015db6:	e004      	b.n	8015dc2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	2200      	movs	r2, #0
 8015dbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015dc2:	f000 ff6b 	bl	8016c9c <vPortExitCritical>

	return xReturn;
 8015dc6:	69fb      	ldr	r3, [r7, #28]
}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	3720      	adds	r7, #32
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}
 8015dd0:	20001d10 	.word	0x20001d10
 8015dd4:	20001d24 	.word	0x20001d24

08015dd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015dd8:	b480      	push	{r7}
 8015dda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015ddc:	4b03      	ldr	r3, [pc, #12]	; (8015dec <vTaskMissedYield+0x14>)
 8015dde:	2201      	movs	r2, #1
 8015de0:	601a      	str	r2, [r3, #0]
}
 8015de2:	bf00      	nop
 8015de4:	46bd      	mov	sp, r7
 8015de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dea:	4770      	bx	lr
 8015dec:	20001d20 	.word	0x20001d20

08015df0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b082      	sub	sp, #8
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015df8:	f000 f854 	bl	8015ea4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015dfc:	4b07      	ldr	r3, [pc, #28]	; (8015e1c <prvIdleTask+0x2c>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	2b01      	cmp	r3, #1
 8015e02:	d907      	bls.n	8015e14 <prvIdleTask+0x24>
			{
				taskYIELD();
 8015e04:	4b06      	ldr	r3, [pc, #24]	; (8015e20 <prvIdleTask+0x30>)
 8015e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e0a:	601a      	str	r2, [r3, #0]
 8015e0c:	f3bf 8f4f 	dsb	sy
 8015e10:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8015e14:	f7eb f90c 	bl	8001030 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8015e18:	e7ee      	b.n	8015df8 <prvIdleTask+0x8>
 8015e1a:	bf00      	nop
 8015e1c:	2000183c 	.word	0x2000183c
 8015e20:	e000ed04 	.word	0xe000ed04

08015e24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	607b      	str	r3, [r7, #4]
 8015e2e:	e00c      	b.n	8015e4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	4613      	mov	r3, r2
 8015e34:	009b      	lsls	r3, r3, #2
 8015e36:	4413      	add	r3, r2
 8015e38:	009b      	lsls	r3, r3, #2
 8015e3a:	4a12      	ldr	r2, [pc, #72]	; (8015e84 <prvInitialiseTaskLists+0x60>)
 8015e3c:	4413      	add	r3, r2
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f7fe f940 	bl	80140c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	3301      	adds	r3, #1
 8015e48:	607b      	str	r3, [r7, #4]
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	2b37      	cmp	r3, #55	; 0x37
 8015e4e:	d9ef      	bls.n	8015e30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015e50:	480d      	ldr	r0, [pc, #52]	; (8015e88 <prvInitialiseTaskLists+0x64>)
 8015e52:	f7fe f937 	bl	80140c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015e56:	480d      	ldr	r0, [pc, #52]	; (8015e8c <prvInitialiseTaskLists+0x68>)
 8015e58:	f7fe f934 	bl	80140c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015e5c:	480c      	ldr	r0, [pc, #48]	; (8015e90 <prvInitialiseTaskLists+0x6c>)
 8015e5e:	f7fe f931 	bl	80140c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015e62:	480c      	ldr	r0, [pc, #48]	; (8015e94 <prvInitialiseTaskLists+0x70>)
 8015e64:	f7fe f92e 	bl	80140c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015e68:	480b      	ldr	r0, [pc, #44]	; (8015e98 <prvInitialiseTaskLists+0x74>)
 8015e6a:	f7fe f92b 	bl	80140c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015e6e:	4b0b      	ldr	r3, [pc, #44]	; (8015e9c <prvInitialiseTaskLists+0x78>)
 8015e70:	4a05      	ldr	r2, [pc, #20]	; (8015e88 <prvInitialiseTaskLists+0x64>)
 8015e72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015e74:	4b0a      	ldr	r3, [pc, #40]	; (8015ea0 <prvInitialiseTaskLists+0x7c>)
 8015e76:	4a05      	ldr	r2, [pc, #20]	; (8015e8c <prvInitialiseTaskLists+0x68>)
 8015e78:	601a      	str	r2, [r3, #0]
}
 8015e7a:	bf00      	nop
 8015e7c:	3708      	adds	r7, #8
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop
 8015e84:	2000183c 	.word	0x2000183c
 8015e88:	20001c9c 	.word	0x20001c9c
 8015e8c:	20001cb0 	.word	0x20001cb0
 8015e90:	20001ccc 	.word	0x20001ccc
 8015e94:	20001ce0 	.word	0x20001ce0
 8015e98:	20001cf8 	.word	0x20001cf8
 8015e9c:	20001cc4 	.word	0x20001cc4
 8015ea0:	20001cc8 	.word	0x20001cc8

08015ea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015eaa:	e019      	b.n	8015ee0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015eac:	f000 fec4 	bl	8016c38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015eb0:	4b0f      	ldr	r3, [pc, #60]	; (8015ef0 <prvCheckTasksWaitingTermination+0x4c>)
 8015eb2:	68db      	ldr	r3, [r3, #12]
 8015eb4:	68db      	ldr	r3, [r3, #12]
 8015eb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	3304      	adds	r3, #4
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f7fe f98b 	bl	80141d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015ec2:	4b0c      	ldr	r3, [pc, #48]	; (8015ef4 <prvCheckTasksWaitingTermination+0x50>)
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	3b01      	subs	r3, #1
 8015ec8:	4a0a      	ldr	r2, [pc, #40]	; (8015ef4 <prvCheckTasksWaitingTermination+0x50>)
 8015eca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015ecc:	4b0a      	ldr	r3, [pc, #40]	; (8015ef8 <prvCheckTasksWaitingTermination+0x54>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	3b01      	subs	r3, #1
 8015ed2:	4a09      	ldr	r2, [pc, #36]	; (8015ef8 <prvCheckTasksWaitingTermination+0x54>)
 8015ed4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015ed6:	f000 fee1 	bl	8016c9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	f000 f80e 	bl	8015efc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015ee0:	4b05      	ldr	r3, [pc, #20]	; (8015ef8 <prvCheckTasksWaitingTermination+0x54>)
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d1e1      	bne.n	8015eac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015ee8:	bf00      	nop
 8015eea:	3708      	adds	r7, #8
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}
 8015ef0:	20001ce0 	.word	0x20001ce0
 8015ef4:	20001d0c 	.word	0x20001d0c
 8015ef8:	20001cf4 	.word	0x20001cf4

08015efc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b084      	sub	sp, #16
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d108      	bne.n	8015f20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f12:	4618      	mov	r0, r3
 8015f14:	f001 f87e 	bl	8017014 <vPortFree>
				vPortFree( pxTCB );
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f001 f87b 	bl	8017014 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015f1e:	e019      	b.n	8015f54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015f26:	2b01      	cmp	r3, #1
 8015f28:	d103      	bne.n	8015f32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f001 f872 	bl	8017014 <vPortFree>
	}
 8015f30:	e010      	b.n	8015f54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015f38:	2b02      	cmp	r3, #2
 8015f3a:	d00b      	beq.n	8015f54 <prvDeleteTCB+0x58>
 8015f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f40:	b672      	cpsid	i
 8015f42:	f383 8811 	msr	BASEPRI, r3
 8015f46:	f3bf 8f6f 	isb	sy
 8015f4a:	f3bf 8f4f 	dsb	sy
 8015f4e:	b662      	cpsie	i
 8015f50:	60fb      	str	r3, [r7, #12]
 8015f52:	e7fe      	b.n	8015f52 <prvDeleteTCB+0x56>
	}
 8015f54:	bf00      	nop
 8015f56:	3710      	adds	r7, #16
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}

08015f5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015f5c:	b480      	push	{r7}
 8015f5e:	b083      	sub	sp, #12
 8015f60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015f62:	4b0c      	ldr	r3, [pc, #48]	; (8015f94 <prvResetNextTaskUnblockTime+0x38>)
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d104      	bne.n	8015f76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015f6c:	4b0a      	ldr	r3, [pc, #40]	; (8015f98 <prvResetNextTaskUnblockTime+0x3c>)
 8015f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8015f72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015f74:	e008      	b.n	8015f88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f76:	4b07      	ldr	r3, [pc, #28]	; (8015f94 <prvResetNextTaskUnblockTime+0x38>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	68db      	ldr	r3, [r3, #12]
 8015f7c:	68db      	ldr	r3, [r3, #12]
 8015f7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	4a04      	ldr	r2, [pc, #16]	; (8015f98 <prvResetNextTaskUnblockTime+0x3c>)
 8015f86:	6013      	str	r3, [r2, #0]
}
 8015f88:	bf00      	nop
 8015f8a:	370c      	adds	r7, #12
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f92:	4770      	bx	lr
 8015f94:	20001cc4 	.word	0x20001cc4
 8015f98:	20001d2c 	.word	0x20001d2c

08015f9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8015f9c:	b480      	push	{r7}
 8015f9e:	b083      	sub	sp, #12
 8015fa0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8015fa2:	4b05      	ldr	r3, [pc, #20]	; (8015fb8 <xTaskGetCurrentTaskHandle+0x1c>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015fa8:	687b      	ldr	r3, [r7, #4]
	}
 8015faa:	4618      	mov	r0, r3
 8015fac:	370c      	adds	r7, #12
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb4:	4770      	bx	lr
 8015fb6:	bf00      	nop
 8015fb8:	20001838 	.word	0x20001838

08015fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b083      	sub	sp, #12
 8015fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015fc2:	4b0b      	ldr	r3, [pc, #44]	; (8015ff0 <xTaskGetSchedulerState+0x34>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d102      	bne.n	8015fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015fca:	2301      	movs	r3, #1
 8015fcc:	607b      	str	r3, [r7, #4]
 8015fce:	e008      	b.n	8015fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015fd0:	4b08      	ldr	r3, [pc, #32]	; (8015ff4 <xTaskGetSchedulerState+0x38>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d102      	bne.n	8015fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015fd8:	2302      	movs	r3, #2
 8015fda:	607b      	str	r3, [r7, #4]
 8015fdc:	e001      	b.n	8015fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015fe2:	687b      	ldr	r3, [r7, #4]
	}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	370c      	adds	r7, #12
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr
 8015ff0:	20001d18 	.word	0x20001d18
 8015ff4:	20001d34 	.word	0x20001d34

08015ff8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016004:	2300      	movs	r3, #0
 8016006:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d051      	beq.n	80160b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016012:	4b2a      	ldr	r3, [pc, #168]	; (80160bc <xTaskPriorityInherit+0xc4>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016018:	429a      	cmp	r2, r3
 801601a:	d241      	bcs.n	80160a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	699b      	ldr	r3, [r3, #24]
 8016020:	2b00      	cmp	r3, #0
 8016022:	db06      	blt.n	8016032 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016024:	4b25      	ldr	r3, [pc, #148]	; (80160bc <xTaskPriorityInherit+0xc4>)
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801602a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	6959      	ldr	r1, [r3, #20]
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801603a:	4613      	mov	r3, r2
 801603c:	009b      	lsls	r3, r3, #2
 801603e:	4413      	add	r3, r2
 8016040:	009b      	lsls	r3, r3, #2
 8016042:	4a1f      	ldr	r2, [pc, #124]	; (80160c0 <xTaskPriorityInherit+0xc8>)
 8016044:	4413      	add	r3, r2
 8016046:	4299      	cmp	r1, r3
 8016048:	d122      	bne.n	8016090 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801604a:	68bb      	ldr	r3, [r7, #8]
 801604c:	3304      	adds	r3, #4
 801604e:	4618      	mov	r0, r3
 8016050:	f7fe f8c2 	bl	80141d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016054:	4b19      	ldr	r3, [pc, #100]	; (80160bc <xTaskPriorityInherit+0xc4>)
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801605e:	68bb      	ldr	r3, [r7, #8]
 8016060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016062:	4b18      	ldr	r3, [pc, #96]	; (80160c4 <xTaskPriorityInherit+0xcc>)
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	429a      	cmp	r2, r3
 8016068:	d903      	bls.n	8016072 <xTaskPriorityInherit+0x7a>
 801606a:	68bb      	ldr	r3, [r7, #8]
 801606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801606e:	4a15      	ldr	r2, [pc, #84]	; (80160c4 <xTaskPriorityInherit+0xcc>)
 8016070:	6013      	str	r3, [r2, #0]
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016076:	4613      	mov	r3, r2
 8016078:	009b      	lsls	r3, r3, #2
 801607a:	4413      	add	r3, r2
 801607c:	009b      	lsls	r3, r3, #2
 801607e:	4a10      	ldr	r2, [pc, #64]	; (80160c0 <xTaskPriorityInherit+0xc8>)
 8016080:	441a      	add	r2, r3
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	3304      	adds	r3, #4
 8016086:	4619      	mov	r1, r3
 8016088:	4610      	mov	r0, r2
 801608a:	f7fe f848 	bl	801411e <vListInsertEnd>
 801608e:	e004      	b.n	801609a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016090:	4b0a      	ldr	r3, [pc, #40]	; (80160bc <xTaskPriorityInherit+0xc4>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016096:	68bb      	ldr	r3, [r7, #8]
 8016098:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801609a:	2301      	movs	r3, #1
 801609c:	60fb      	str	r3, [r7, #12]
 801609e:	e008      	b.n	80160b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80160a4:	4b05      	ldr	r3, [pc, #20]	; (80160bc <xTaskPriorityInherit+0xc4>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160aa:	429a      	cmp	r2, r3
 80160ac:	d201      	bcs.n	80160b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80160ae:	2301      	movs	r3, #1
 80160b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80160b2:	68fb      	ldr	r3, [r7, #12]
	}
 80160b4:	4618      	mov	r0, r3
 80160b6:	3710      	adds	r7, #16
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}
 80160bc:	20001838 	.word	0x20001838
 80160c0:	2000183c 	.word	0x2000183c
 80160c4:	20001d14 	.word	0x20001d14

080160c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b086      	sub	sp, #24
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80160d4:	2300      	movs	r3, #0
 80160d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d058      	beq.n	8016190 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80160de:	4b2f      	ldr	r3, [pc, #188]	; (801619c <xTaskPriorityDisinherit+0xd4>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	693a      	ldr	r2, [r7, #16]
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d00b      	beq.n	8016100 <xTaskPriorityDisinherit+0x38>
 80160e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ec:	b672      	cpsid	i
 80160ee:	f383 8811 	msr	BASEPRI, r3
 80160f2:	f3bf 8f6f 	isb	sy
 80160f6:	f3bf 8f4f 	dsb	sy
 80160fa:	b662      	cpsie	i
 80160fc:	60fb      	str	r3, [r7, #12]
 80160fe:	e7fe      	b.n	80160fe <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8016100:	693b      	ldr	r3, [r7, #16]
 8016102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016104:	2b00      	cmp	r3, #0
 8016106:	d10b      	bne.n	8016120 <xTaskPriorityDisinherit+0x58>
 8016108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801610c:	b672      	cpsid	i
 801610e:	f383 8811 	msr	BASEPRI, r3
 8016112:	f3bf 8f6f 	isb	sy
 8016116:	f3bf 8f4f 	dsb	sy
 801611a:	b662      	cpsie	i
 801611c:	60bb      	str	r3, [r7, #8]
 801611e:	e7fe      	b.n	801611e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8016120:	693b      	ldr	r3, [r7, #16]
 8016122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016124:	1e5a      	subs	r2, r3, #1
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801612e:	693b      	ldr	r3, [r7, #16]
 8016130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016132:	429a      	cmp	r2, r3
 8016134:	d02c      	beq.n	8016190 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016136:	693b      	ldr	r3, [r7, #16]
 8016138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801613a:	2b00      	cmp	r3, #0
 801613c:	d128      	bne.n	8016190 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	3304      	adds	r3, #4
 8016142:	4618      	mov	r0, r3
 8016144:	f7fe f848 	bl	80141d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016148:	693b      	ldr	r3, [r7, #16]
 801614a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801614c:	693b      	ldr	r3, [r7, #16]
 801614e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016150:	693b      	ldr	r3, [r7, #16]
 8016152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016154:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801615c:	693b      	ldr	r3, [r7, #16]
 801615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016160:	4b0f      	ldr	r3, [pc, #60]	; (80161a0 <xTaskPriorityDisinherit+0xd8>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	429a      	cmp	r2, r3
 8016166:	d903      	bls.n	8016170 <xTaskPriorityDisinherit+0xa8>
 8016168:	693b      	ldr	r3, [r7, #16]
 801616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801616c:	4a0c      	ldr	r2, [pc, #48]	; (80161a0 <xTaskPriorityDisinherit+0xd8>)
 801616e:	6013      	str	r3, [r2, #0]
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016174:	4613      	mov	r3, r2
 8016176:	009b      	lsls	r3, r3, #2
 8016178:	4413      	add	r3, r2
 801617a:	009b      	lsls	r3, r3, #2
 801617c:	4a09      	ldr	r2, [pc, #36]	; (80161a4 <xTaskPriorityDisinherit+0xdc>)
 801617e:	441a      	add	r2, r3
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	3304      	adds	r3, #4
 8016184:	4619      	mov	r1, r3
 8016186:	4610      	mov	r0, r2
 8016188:	f7fd ffc9 	bl	801411e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801618c:	2301      	movs	r3, #1
 801618e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016190:	697b      	ldr	r3, [r7, #20]
	}
 8016192:	4618      	mov	r0, r3
 8016194:	3718      	adds	r7, #24
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}
 801619a:	bf00      	nop
 801619c:	20001838 	.word	0x20001838
 80161a0:	20001d14 	.word	0x20001d14
 80161a4:	2000183c 	.word	0x2000183c

080161a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b088      	sub	sp, #32
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80161b6:	2301      	movs	r3, #1
 80161b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d06c      	beq.n	801629a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80161c0:	69bb      	ldr	r3, [r7, #24]
 80161c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d10b      	bne.n	80161e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 80161c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161cc:	b672      	cpsid	i
 80161ce:	f383 8811 	msr	BASEPRI, r3
 80161d2:	f3bf 8f6f 	isb	sy
 80161d6:	f3bf 8f4f 	dsb	sy
 80161da:	b662      	cpsie	i
 80161dc:	60fb      	str	r3, [r7, #12]
 80161de:	e7fe      	b.n	80161de <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80161e0:	69bb      	ldr	r3, [r7, #24]
 80161e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80161e4:	683a      	ldr	r2, [r7, #0]
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d902      	bls.n	80161f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80161ea:	683b      	ldr	r3, [r7, #0]
 80161ec:	61fb      	str	r3, [r7, #28]
 80161ee:	e002      	b.n	80161f6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80161f0:	69bb      	ldr	r3, [r7, #24]
 80161f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80161f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80161f6:	69bb      	ldr	r3, [r7, #24]
 80161f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161fa:	69fa      	ldr	r2, [r7, #28]
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d04c      	beq.n	801629a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016200:	69bb      	ldr	r3, [r7, #24]
 8016202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016204:	697a      	ldr	r2, [r7, #20]
 8016206:	429a      	cmp	r2, r3
 8016208:	d147      	bne.n	801629a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801620a:	4b26      	ldr	r3, [pc, #152]	; (80162a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	69ba      	ldr	r2, [r7, #24]
 8016210:	429a      	cmp	r2, r3
 8016212:	d10b      	bne.n	801622c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8016214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016218:	b672      	cpsid	i
 801621a:	f383 8811 	msr	BASEPRI, r3
 801621e:	f3bf 8f6f 	isb	sy
 8016222:	f3bf 8f4f 	dsb	sy
 8016226:	b662      	cpsie	i
 8016228:	60bb      	str	r3, [r7, #8]
 801622a:	e7fe      	b.n	801622a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801622c:	69bb      	ldr	r3, [r7, #24]
 801622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016230:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016232:	69bb      	ldr	r3, [r7, #24]
 8016234:	69fa      	ldr	r2, [r7, #28]
 8016236:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016238:	69bb      	ldr	r3, [r7, #24]
 801623a:	699b      	ldr	r3, [r3, #24]
 801623c:	2b00      	cmp	r3, #0
 801623e:	db04      	blt.n	801624a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016240:	69fb      	ldr	r3, [r7, #28]
 8016242:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016246:	69bb      	ldr	r3, [r7, #24]
 8016248:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801624a:	69bb      	ldr	r3, [r7, #24]
 801624c:	6959      	ldr	r1, [r3, #20]
 801624e:	693a      	ldr	r2, [r7, #16]
 8016250:	4613      	mov	r3, r2
 8016252:	009b      	lsls	r3, r3, #2
 8016254:	4413      	add	r3, r2
 8016256:	009b      	lsls	r3, r3, #2
 8016258:	4a13      	ldr	r2, [pc, #76]	; (80162a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801625a:	4413      	add	r3, r2
 801625c:	4299      	cmp	r1, r3
 801625e:	d11c      	bne.n	801629a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016260:	69bb      	ldr	r3, [r7, #24]
 8016262:	3304      	adds	r3, #4
 8016264:	4618      	mov	r0, r3
 8016266:	f7fd ffb7 	bl	80141d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801626a:	69bb      	ldr	r3, [r7, #24]
 801626c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801626e:	4b0f      	ldr	r3, [pc, #60]	; (80162ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	429a      	cmp	r2, r3
 8016274:	d903      	bls.n	801627e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8016276:	69bb      	ldr	r3, [r7, #24]
 8016278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801627a:	4a0c      	ldr	r2, [pc, #48]	; (80162ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801627c:	6013      	str	r3, [r2, #0]
 801627e:	69bb      	ldr	r3, [r7, #24]
 8016280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016282:	4613      	mov	r3, r2
 8016284:	009b      	lsls	r3, r3, #2
 8016286:	4413      	add	r3, r2
 8016288:	009b      	lsls	r3, r3, #2
 801628a:	4a07      	ldr	r2, [pc, #28]	; (80162a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801628c:	441a      	add	r2, r3
 801628e:	69bb      	ldr	r3, [r7, #24]
 8016290:	3304      	adds	r3, #4
 8016292:	4619      	mov	r1, r3
 8016294:	4610      	mov	r0, r2
 8016296:	f7fd ff42 	bl	801411e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801629a:	bf00      	nop
 801629c:	3720      	adds	r7, #32
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}
 80162a2:	bf00      	nop
 80162a4:	20001838 	.word	0x20001838
 80162a8:	2000183c 	.word	0x2000183c
 80162ac:	20001d14 	.word	0x20001d14

080162b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80162b0:	b480      	push	{r7}
 80162b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80162b4:	4b07      	ldr	r3, [pc, #28]	; (80162d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d004      	beq.n	80162c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80162bc:	4b05      	ldr	r3, [pc, #20]	; (80162d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80162c2:	3201      	adds	r2, #1
 80162c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80162c6:	4b03      	ldr	r3, [pc, #12]	; (80162d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80162c8:	681b      	ldr	r3, [r3, #0]
	}
 80162ca:	4618      	mov	r0, r3
 80162cc:	46bd      	mov	sp, r7
 80162ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d2:	4770      	bx	lr
 80162d4:	20001838 	.word	0x20001838

080162d8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b084      	sub	sp, #16
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
 80162e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80162e2:	4b21      	ldr	r3, [pc, #132]	; (8016368 <prvAddCurrentTaskToDelayedList+0x90>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80162e8:	4b20      	ldr	r3, [pc, #128]	; (801636c <prvAddCurrentTaskToDelayedList+0x94>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	3304      	adds	r3, #4
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7fd ff72 	bl	80141d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162fa:	d10a      	bne.n	8016312 <prvAddCurrentTaskToDelayedList+0x3a>
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d007      	beq.n	8016312 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016302:	4b1a      	ldr	r3, [pc, #104]	; (801636c <prvAddCurrentTaskToDelayedList+0x94>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	3304      	adds	r3, #4
 8016308:	4619      	mov	r1, r3
 801630a:	4819      	ldr	r0, [pc, #100]	; (8016370 <prvAddCurrentTaskToDelayedList+0x98>)
 801630c:	f7fd ff07 	bl	801411e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016310:	e026      	b.n	8016360 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016312:	68fa      	ldr	r2, [r7, #12]
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	4413      	add	r3, r2
 8016318:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801631a:	4b14      	ldr	r3, [pc, #80]	; (801636c <prvAddCurrentTaskToDelayedList+0x94>)
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	68ba      	ldr	r2, [r7, #8]
 8016320:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016322:	68ba      	ldr	r2, [r7, #8]
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	429a      	cmp	r2, r3
 8016328:	d209      	bcs.n	801633e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801632a:	4b12      	ldr	r3, [pc, #72]	; (8016374 <prvAddCurrentTaskToDelayedList+0x9c>)
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	4b0f      	ldr	r3, [pc, #60]	; (801636c <prvAddCurrentTaskToDelayedList+0x94>)
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	3304      	adds	r3, #4
 8016334:	4619      	mov	r1, r3
 8016336:	4610      	mov	r0, r2
 8016338:	f7fd ff15 	bl	8014166 <vListInsert>
}
 801633c:	e010      	b.n	8016360 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801633e:	4b0e      	ldr	r3, [pc, #56]	; (8016378 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016340:	681a      	ldr	r2, [r3, #0]
 8016342:	4b0a      	ldr	r3, [pc, #40]	; (801636c <prvAddCurrentTaskToDelayedList+0x94>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	3304      	adds	r3, #4
 8016348:	4619      	mov	r1, r3
 801634a:	4610      	mov	r0, r2
 801634c:	f7fd ff0b 	bl	8014166 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016350:	4b0a      	ldr	r3, [pc, #40]	; (801637c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	68ba      	ldr	r2, [r7, #8]
 8016356:	429a      	cmp	r2, r3
 8016358:	d202      	bcs.n	8016360 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801635a:	4a08      	ldr	r2, [pc, #32]	; (801637c <prvAddCurrentTaskToDelayedList+0xa4>)
 801635c:	68bb      	ldr	r3, [r7, #8]
 801635e:	6013      	str	r3, [r2, #0]
}
 8016360:	bf00      	nop
 8016362:	3710      	adds	r7, #16
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	20001d10 	.word	0x20001d10
 801636c:	20001838 	.word	0x20001838
 8016370:	20001cf8 	.word	0x20001cf8
 8016374:	20001cc8 	.word	0x20001cc8
 8016378:	20001cc4 	.word	0x20001cc4
 801637c:	20001d2c 	.word	0x20001d2c

08016380 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b08a      	sub	sp, #40	; 0x28
 8016384:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016386:	2300      	movs	r3, #0
 8016388:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801638a:	f000 fb0d 	bl	80169a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801638e:	4b1d      	ldr	r3, [pc, #116]	; (8016404 <xTimerCreateTimerTask+0x84>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d021      	beq.n	80163da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016396:	2300      	movs	r3, #0
 8016398:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801639a:	2300      	movs	r3, #0
 801639c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801639e:	1d3a      	adds	r2, r7, #4
 80163a0:	f107 0108 	add.w	r1, r7, #8
 80163a4:	f107 030c 	add.w	r3, r7, #12
 80163a8:	4618      	mov	r0, r3
 80163aa:	f7fd fe71 	bl	8014090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80163ae:	6879      	ldr	r1, [r7, #4]
 80163b0:	68bb      	ldr	r3, [r7, #8]
 80163b2:	68fa      	ldr	r2, [r7, #12]
 80163b4:	9202      	str	r2, [sp, #8]
 80163b6:	9301      	str	r3, [sp, #4]
 80163b8:	2302      	movs	r3, #2
 80163ba:	9300      	str	r3, [sp, #0]
 80163bc:	2300      	movs	r3, #0
 80163be:	460a      	mov	r2, r1
 80163c0:	4911      	ldr	r1, [pc, #68]	; (8016408 <xTimerCreateTimerTask+0x88>)
 80163c2:	4812      	ldr	r0, [pc, #72]	; (801640c <xTimerCreateTimerTask+0x8c>)
 80163c4:	f7fe ff00 	bl	80151c8 <xTaskCreateStatic>
 80163c8:	4602      	mov	r2, r0
 80163ca:	4b11      	ldr	r3, [pc, #68]	; (8016410 <xTimerCreateTimerTask+0x90>)
 80163cc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80163ce:	4b10      	ldr	r3, [pc, #64]	; (8016410 <xTimerCreateTimerTask+0x90>)
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d001      	beq.n	80163da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80163d6:	2301      	movs	r3, #1
 80163d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80163da:	697b      	ldr	r3, [r7, #20]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d10b      	bne.n	80163f8 <xTimerCreateTimerTask+0x78>
 80163e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163e4:	b672      	cpsid	i
 80163e6:	f383 8811 	msr	BASEPRI, r3
 80163ea:	f3bf 8f6f 	isb	sy
 80163ee:	f3bf 8f4f 	dsb	sy
 80163f2:	b662      	cpsie	i
 80163f4:	613b      	str	r3, [r7, #16]
 80163f6:	e7fe      	b.n	80163f6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 80163f8:	697b      	ldr	r3, [r7, #20]
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3718      	adds	r7, #24
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
 8016402:	bf00      	nop
 8016404:	20001d68 	.word	0x20001d68
 8016408:	08018628 	.word	0x08018628
 801640c:	0801654d 	.word	0x0801654d
 8016410:	20001d6c 	.word	0x20001d6c

08016414 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b08a      	sub	sp, #40	; 0x28
 8016418:	af00      	add	r7, sp, #0
 801641a:	60f8      	str	r0, [r7, #12]
 801641c:	60b9      	str	r1, [r7, #8]
 801641e:	607a      	str	r2, [r7, #4]
 8016420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016422:	2300      	movs	r3, #0
 8016424:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d10b      	bne.n	8016444 <xTimerGenericCommand+0x30>
 801642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016430:	b672      	cpsid	i
 8016432:	f383 8811 	msr	BASEPRI, r3
 8016436:	f3bf 8f6f 	isb	sy
 801643a:	f3bf 8f4f 	dsb	sy
 801643e:	b662      	cpsie	i
 8016440:	623b      	str	r3, [r7, #32]
 8016442:	e7fe      	b.n	8016442 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016444:	4b19      	ldr	r3, [pc, #100]	; (80164ac <xTimerGenericCommand+0x98>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d02a      	beq.n	80164a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016458:	68bb      	ldr	r3, [r7, #8]
 801645a:	2b05      	cmp	r3, #5
 801645c:	dc18      	bgt.n	8016490 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801645e:	f7ff fdad 	bl	8015fbc <xTaskGetSchedulerState>
 8016462:	4603      	mov	r3, r0
 8016464:	2b02      	cmp	r3, #2
 8016466:	d109      	bne.n	801647c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016468:	4b10      	ldr	r3, [pc, #64]	; (80164ac <xTimerGenericCommand+0x98>)
 801646a:	6818      	ldr	r0, [r3, #0]
 801646c:	f107 0110 	add.w	r1, r7, #16
 8016470:	2300      	movs	r3, #0
 8016472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016474:	f7fe f8e4 	bl	8014640 <xQueueGenericSend>
 8016478:	6278      	str	r0, [r7, #36]	; 0x24
 801647a:	e012      	b.n	80164a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801647c:	4b0b      	ldr	r3, [pc, #44]	; (80164ac <xTimerGenericCommand+0x98>)
 801647e:	6818      	ldr	r0, [r3, #0]
 8016480:	f107 0110 	add.w	r1, r7, #16
 8016484:	2300      	movs	r3, #0
 8016486:	2200      	movs	r2, #0
 8016488:	f7fe f8da 	bl	8014640 <xQueueGenericSend>
 801648c:	6278      	str	r0, [r7, #36]	; 0x24
 801648e:	e008      	b.n	80164a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016490:	4b06      	ldr	r3, [pc, #24]	; (80164ac <xTimerGenericCommand+0x98>)
 8016492:	6818      	ldr	r0, [r3, #0]
 8016494:	f107 0110 	add.w	r1, r7, #16
 8016498:	2300      	movs	r3, #0
 801649a:	683a      	ldr	r2, [r7, #0]
 801649c:	f7fe f9da 	bl	8014854 <xQueueGenericSendFromISR>
 80164a0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80164a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	3728      	adds	r7, #40	; 0x28
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}
 80164ac:	20001d68 	.word	0x20001d68

080164b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b088      	sub	sp, #32
 80164b4:	af02      	add	r7, sp, #8
 80164b6:	6078      	str	r0, [r7, #4]
 80164b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164ba:	4b23      	ldr	r3, [pc, #140]	; (8016548 <prvProcessExpiredTimer+0x98>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	68db      	ldr	r3, [r3, #12]
 80164c0:	68db      	ldr	r3, [r3, #12]
 80164c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80164c4:	697b      	ldr	r3, [r7, #20]
 80164c6:	3304      	adds	r3, #4
 80164c8:	4618      	mov	r0, r3
 80164ca:	f7fd fe85 	bl	80141d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80164ce:	697b      	ldr	r3, [r7, #20]
 80164d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80164d4:	f003 0304 	and.w	r3, r3, #4
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d023      	beq.n	8016524 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	699a      	ldr	r2, [r3, #24]
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	18d1      	adds	r1, r2, r3
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	683a      	ldr	r2, [r7, #0]
 80164e8:	6978      	ldr	r0, [r7, #20]
 80164ea:	f000 f8d3 	bl	8016694 <prvInsertTimerInActiveList>
 80164ee:	4603      	mov	r3, r0
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d020      	beq.n	8016536 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80164f4:	2300      	movs	r3, #0
 80164f6:	9300      	str	r3, [sp, #0]
 80164f8:	2300      	movs	r3, #0
 80164fa:	687a      	ldr	r2, [r7, #4]
 80164fc:	2100      	movs	r1, #0
 80164fe:	6978      	ldr	r0, [r7, #20]
 8016500:	f7ff ff88 	bl	8016414 <xTimerGenericCommand>
 8016504:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016506:	693b      	ldr	r3, [r7, #16]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d114      	bne.n	8016536 <prvProcessExpiredTimer+0x86>
 801650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016510:	b672      	cpsid	i
 8016512:	f383 8811 	msr	BASEPRI, r3
 8016516:	f3bf 8f6f 	isb	sy
 801651a:	f3bf 8f4f 	dsb	sy
 801651e:	b662      	cpsie	i
 8016520:	60fb      	str	r3, [r7, #12]
 8016522:	e7fe      	b.n	8016522 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016524:	697b      	ldr	r3, [r7, #20]
 8016526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801652a:	f023 0301 	bic.w	r3, r3, #1
 801652e:	b2da      	uxtb	r2, r3
 8016530:	697b      	ldr	r3, [r7, #20]
 8016532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016536:	697b      	ldr	r3, [r7, #20]
 8016538:	6a1b      	ldr	r3, [r3, #32]
 801653a:	6978      	ldr	r0, [r7, #20]
 801653c:	4798      	blx	r3
}
 801653e:	bf00      	nop
 8016540:	3718      	adds	r7, #24
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}
 8016546:	bf00      	nop
 8016548:	20001d60 	.word	0x20001d60

0801654c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b084      	sub	sp, #16
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016554:	f107 0308 	add.w	r3, r7, #8
 8016558:	4618      	mov	r0, r3
 801655a:	f000 f857 	bl	801660c <prvGetNextExpireTime>
 801655e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	4619      	mov	r1, r3
 8016564:	68f8      	ldr	r0, [r7, #12]
 8016566:	f000 f803 	bl	8016570 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801656a:	f000 f8d5 	bl	8016718 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801656e:	e7f1      	b.n	8016554 <prvTimerTask+0x8>

08016570 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b084      	sub	sp, #16
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801657a:	f7ff f8f7 	bl	801576c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801657e:	f107 0308 	add.w	r3, r7, #8
 8016582:	4618      	mov	r0, r3
 8016584:	f000 f866 	bl	8016654 <prvSampleTimeNow>
 8016588:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801658a:	68bb      	ldr	r3, [r7, #8]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d130      	bne.n	80165f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d10a      	bne.n	80165ac <prvProcessTimerOrBlockTask+0x3c>
 8016596:	687a      	ldr	r2, [r7, #4]
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	429a      	cmp	r2, r3
 801659c:	d806      	bhi.n	80165ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801659e:	f7ff f8f3 	bl	8015788 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80165a2:	68f9      	ldr	r1, [r7, #12]
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	f7ff ff83 	bl	80164b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80165aa:	e024      	b.n	80165f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80165ac:	683b      	ldr	r3, [r7, #0]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d008      	beq.n	80165c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80165b2:	4b13      	ldr	r3, [pc, #76]	; (8016600 <prvProcessTimerOrBlockTask+0x90>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d101      	bne.n	80165c0 <prvProcessTimerOrBlockTask+0x50>
 80165bc:	2301      	movs	r3, #1
 80165be:	e000      	b.n	80165c2 <prvProcessTimerOrBlockTask+0x52>
 80165c0:	2300      	movs	r3, #0
 80165c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80165c4:	4b0f      	ldr	r3, [pc, #60]	; (8016604 <prvProcessTimerOrBlockTask+0x94>)
 80165c6:	6818      	ldr	r0, [r3, #0]
 80165c8:	687a      	ldr	r2, [r7, #4]
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	1ad3      	subs	r3, r2, r3
 80165ce:	683a      	ldr	r2, [r7, #0]
 80165d0:	4619      	mov	r1, r3
 80165d2:	f7fe fdc5 	bl	8015160 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80165d6:	f7ff f8d7 	bl	8015788 <xTaskResumeAll>
 80165da:	4603      	mov	r3, r0
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d10a      	bne.n	80165f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80165e0:	4b09      	ldr	r3, [pc, #36]	; (8016608 <prvProcessTimerOrBlockTask+0x98>)
 80165e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165e6:	601a      	str	r2, [r3, #0]
 80165e8:	f3bf 8f4f 	dsb	sy
 80165ec:	f3bf 8f6f 	isb	sy
}
 80165f0:	e001      	b.n	80165f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80165f2:	f7ff f8c9 	bl	8015788 <xTaskResumeAll>
}
 80165f6:	bf00      	nop
 80165f8:	3710      	adds	r7, #16
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	20001d64 	.word	0x20001d64
 8016604:	20001d68 	.word	0x20001d68
 8016608:	e000ed04 	.word	0xe000ed04

0801660c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801660c:	b480      	push	{r7}
 801660e:	b085      	sub	sp, #20
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016614:	4b0e      	ldr	r3, [pc, #56]	; (8016650 <prvGetNextExpireTime+0x44>)
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d101      	bne.n	8016622 <prvGetNextExpireTime+0x16>
 801661e:	2201      	movs	r2, #1
 8016620:	e000      	b.n	8016624 <prvGetNextExpireTime+0x18>
 8016622:	2200      	movs	r2, #0
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d105      	bne.n	801663c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016630:	4b07      	ldr	r3, [pc, #28]	; (8016650 <prvGetNextExpireTime+0x44>)
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	68db      	ldr	r3, [r3, #12]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	60fb      	str	r3, [r7, #12]
 801663a:	e001      	b.n	8016640 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801663c:	2300      	movs	r3, #0
 801663e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016640:	68fb      	ldr	r3, [r7, #12]
}
 8016642:	4618      	mov	r0, r3
 8016644:	3714      	adds	r7, #20
 8016646:	46bd      	mov	sp, r7
 8016648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664c:	4770      	bx	lr
 801664e:	bf00      	nop
 8016650:	20001d60 	.word	0x20001d60

08016654 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b084      	sub	sp, #16
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801665c:	f7ff f932 	bl	80158c4 <xTaskGetTickCount>
 8016660:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016662:	4b0b      	ldr	r3, [pc, #44]	; (8016690 <prvSampleTimeNow+0x3c>)
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	68fa      	ldr	r2, [r7, #12]
 8016668:	429a      	cmp	r2, r3
 801666a:	d205      	bcs.n	8016678 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801666c:	f000 f936 	bl	80168dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	2201      	movs	r2, #1
 8016674:	601a      	str	r2, [r3, #0]
 8016676:	e002      	b.n	801667e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2200      	movs	r2, #0
 801667c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801667e:	4a04      	ldr	r2, [pc, #16]	; (8016690 <prvSampleTimeNow+0x3c>)
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016684:	68fb      	ldr	r3, [r7, #12]
}
 8016686:	4618      	mov	r0, r3
 8016688:	3710      	adds	r7, #16
 801668a:	46bd      	mov	sp, r7
 801668c:	bd80      	pop	{r7, pc}
 801668e:	bf00      	nop
 8016690:	20001d70 	.word	0x20001d70

08016694 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b086      	sub	sp, #24
 8016698:	af00      	add	r7, sp, #0
 801669a:	60f8      	str	r0, [r7, #12]
 801669c:	60b9      	str	r1, [r7, #8]
 801669e:	607a      	str	r2, [r7, #4]
 80166a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80166a2:	2300      	movs	r3, #0
 80166a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	68ba      	ldr	r2, [r7, #8]
 80166aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	68fa      	ldr	r2, [r7, #12]
 80166b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80166b2:	68ba      	ldr	r2, [r7, #8]
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d812      	bhi.n	80166e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80166ba:	687a      	ldr	r2, [r7, #4]
 80166bc:	683b      	ldr	r3, [r7, #0]
 80166be:	1ad2      	subs	r2, r2, r3
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	699b      	ldr	r3, [r3, #24]
 80166c4:	429a      	cmp	r2, r3
 80166c6:	d302      	bcc.n	80166ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80166c8:	2301      	movs	r3, #1
 80166ca:	617b      	str	r3, [r7, #20]
 80166cc:	e01b      	b.n	8016706 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80166ce:	4b10      	ldr	r3, [pc, #64]	; (8016710 <prvInsertTimerInActiveList+0x7c>)
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	3304      	adds	r3, #4
 80166d6:	4619      	mov	r1, r3
 80166d8:	4610      	mov	r0, r2
 80166da:	f7fd fd44 	bl	8014166 <vListInsert>
 80166de:	e012      	b.n	8016706 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80166e0:	687a      	ldr	r2, [r7, #4]
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d206      	bcs.n	80166f6 <prvInsertTimerInActiveList+0x62>
 80166e8:	68ba      	ldr	r2, [r7, #8]
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	429a      	cmp	r2, r3
 80166ee:	d302      	bcc.n	80166f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80166f0:	2301      	movs	r3, #1
 80166f2:	617b      	str	r3, [r7, #20]
 80166f4:	e007      	b.n	8016706 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80166f6:	4b07      	ldr	r3, [pc, #28]	; (8016714 <prvInsertTimerInActiveList+0x80>)
 80166f8:	681a      	ldr	r2, [r3, #0]
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	3304      	adds	r3, #4
 80166fe:	4619      	mov	r1, r3
 8016700:	4610      	mov	r0, r2
 8016702:	f7fd fd30 	bl	8014166 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8016706:	697b      	ldr	r3, [r7, #20]
}
 8016708:	4618      	mov	r0, r3
 801670a:	3718      	adds	r7, #24
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}
 8016710:	20001d64 	.word	0x20001d64
 8016714:	20001d60 	.word	0x20001d60

08016718 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b08e      	sub	sp, #56	; 0x38
 801671c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801671e:	e0cc      	b.n	80168ba <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2b00      	cmp	r3, #0
 8016724:	da19      	bge.n	801675a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016726:	1d3b      	adds	r3, r7, #4
 8016728:	3304      	adds	r3, #4
 801672a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801672e:	2b00      	cmp	r3, #0
 8016730:	d10b      	bne.n	801674a <prvProcessReceivedCommands+0x32>
 8016732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016736:	b672      	cpsid	i
 8016738:	f383 8811 	msr	BASEPRI, r3
 801673c:	f3bf 8f6f 	isb	sy
 8016740:	f3bf 8f4f 	dsb	sy
 8016744:	b662      	cpsie	i
 8016746:	61fb      	str	r3, [r7, #28]
 8016748:	e7fe      	b.n	8016748 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016750:	6850      	ldr	r0, [r2, #4]
 8016752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016754:	6892      	ldr	r2, [r2, #8]
 8016756:	4611      	mov	r1, r2
 8016758:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	2b00      	cmp	r3, #0
 801675e:	f2c0 80ab 	blt.w	80168b8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016768:	695b      	ldr	r3, [r3, #20]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d004      	beq.n	8016778 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016770:	3304      	adds	r3, #4
 8016772:	4618      	mov	r0, r3
 8016774:	f7fd fd30 	bl	80141d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016778:	463b      	mov	r3, r7
 801677a:	4618      	mov	r0, r3
 801677c:	f7ff ff6a 	bl	8016654 <prvSampleTimeNow>
 8016780:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	2b09      	cmp	r3, #9
 8016786:	f200 8098 	bhi.w	80168ba <prvProcessReceivedCommands+0x1a2>
 801678a:	a201      	add	r2, pc, #4	; (adr r2, 8016790 <prvProcessReceivedCommands+0x78>)
 801678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016790:	080167b9 	.word	0x080167b9
 8016794:	080167b9 	.word	0x080167b9
 8016798:	080167b9 	.word	0x080167b9
 801679c:	0801682f 	.word	0x0801682f
 80167a0:	08016843 	.word	0x08016843
 80167a4:	0801688f 	.word	0x0801688f
 80167a8:	080167b9 	.word	0x080167b9
 80167ac:	080167b9 	.word	0x080167b9
 80167b0:	0801682f 	.word	0x0801682f
 80167b4:	08016843 	.word	0x08016843
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80167b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80167be:	f043 0301 	orr.w	r3, r3, #1
 80167c2:	b2da      	uxtb	r2, r3
 80167c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80167ca:	68ba      	ldr	r2, [r7, #8]
 80167cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ce:	699b      	ldr	r3, [r3, #24]
 80167d0:	18d1      	adds	r1, r2, r3
 80167d2:	68bb      	ldr	r3, [r7, #8]
 80167d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167d8:	f7ff ff5c 	bl	8016694 <prvInsertTimerInActiveList>
 80167dc:	4603      	mov	r3, r0
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d06b      	beq.n	80168ba <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80167e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167e4:	6a1b      	ldr	r3, [r3, #32]
 80167e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80167ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80167f0:	f003 0304 	and.w	r3, r3, #4
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d060      	beq.n	80168ba <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80167f8:	68ba      	ldr	r2, [r7, #8]
 80167fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167fc:	699b      	ldr	r3, [r3, #24]
 80167fe:	441a      	add	r2, r3
 8016800:	2300      	movs	r3, #0
 8016802:	9300      	str	r3, [sp, #0]
 8016804:	2300      	movs	r3, #0
 8016806:	2100      	movs	r1, #0
 8016808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801680a:	f7ff fe03 	bl	8016414 <xTimerGenericCommand>
 801680e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016810:	6a3b      	ldr	r3, [r7, #32]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d151      	bne.n	80168ba <prvProcessReceivedCommands+0x1a2>
 8016816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801681a:	b672      	cpsid	i
 801681c:	f383 8811 	msr	BASEPRI, r3
 8016820:	f3bf 8f6f 	isb	sy
 8016824:	f3bf 8f4f 	dsb	sy
 8016828:	b662      	cpsie	i
 801682a:	61bb      	str	r3, [r7, #24]
 801682c:	e7fe      	b.n	801682c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016834:	f023 0301 	bic.w	r3, r3, #1
 8016838:	b2da      	uxtb	r2, r3
 801683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801683c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8016840:	e03b      	b.n	80168ba <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016848:	f043 0301 	orr.w	r3, r3, #1
 801684c:	b2da      	uxtb	r2, r3
 801684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016850:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016854:	68ba      	ldr	r2, [r7, #8]
 8016856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016858:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801685c:	699b      	ldr	r3, [r3, #24]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d10b      	bne.n	801687a <prvProcessReceivedCommands+0x162>
 8016862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016866:	b672      	cpsid	i
 8016868:	f383 8811 	msr	BASEPRI, r3
 801686c:	f3bf 8f6f 	isb	sy
 8016870:	f3bf 8f4f 	dsb	sy
 8016874:	b662      	cpsie	i
 8016876:	617b      	str	r3, [r7, #20]
 8016878:	e7fe      	b.n	8016878 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801687c:	699a      	ldr	r2, [r3, #24]
 801687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016880:	18d1      	adds	r1, r2, r3
 8016882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016888:	f7ff ff04 	bl	8016694 <prvInsertTimerInActiveList>
					break;
 801688c:	e015      	b.n	80168ba <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016894:	f003 0302 	and.w	r3, r3, #2
 8016898:	2b00      	cmp	r3, #0
 801689a:	d103      	bne.n	80168a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801689c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801689e:	f000 fbb9 	bl	8017014 <vPortFree>
 80168a2:	e00a      	b.n	80168ba <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80168a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80168aa:	f023 0301 	bic.w	r3, r3, #1
 80168ae:	b2da      	uxtb	r2, r3
 80168b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80168b6:	e000      	b.n	80168ba <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80168b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80168ba:	4b07      	ldr	r3, [pc, #28]	; (80168d8 <prvProcessReceivedCommands+0x1c0>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	1d39      	adds	r1, r7, #4
 80168c0:	2200      	movs	r2, #0
 80168c2:	4618      	mov	r0, r3
 80168c4:	f7fe f86a 	bl	801499c <xQueueReceive>
 80168c8:	4603      	mov	r3, r0
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	f47f af28 	bne.w	8016720 <prvProcessReceivedCommands+0x8>
	}
}
 80168d0:	bf00      	nop
 80168d2:	3730      	adds	r7, #48	; 0x30
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}
 80168d8:	20001d68 	.word	0x20001d68

080168dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b088      	sub	sp, #32
 80168e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80168e2:	e049      	b.n	8016978 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80168e4:	4b2e      	ldr	r3, [pc, #184]	; (80169a0 <prvSwitchTimerLists+0xc4>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	68db      	ldr	r3, [r3, #12]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168ee:	4b2c      	ldr	r3, [pc, #176]	; (80169a0 <prvSwitchTimerLists+0xc4>)
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	68db      	ldr	r3, [r3, #12]
 80168f4:	68db      	ldr	r3, [r3, #12]
 80168f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	3304      	adds	r3, #4
 80168fc:	4618      	mov	r0, r3
 80168fe:	f7fd fc6b 	bl	80141d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	6a1b      	ldr	r3, [r3, #32]
 8016906:	68f8      	ldr	r0, [r7, #12]
 8016908:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016910:	f003 0304 	and.w	r3, r3, #4
 8016914:	2b00      	cmp	r3, #0
 8016916:	d02f      	beq.n	8016978 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	699b      	ldr	r3, [r3, #24]
 801691c:	693a      	ldr	r2, [r7, #16]
 801691e:	4413      	add	r3, r2
 8016920:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016922:	68ba      	ldr	r2, [r7, #8]
 8016924:	693b      	ldr	r3, [r7, #16]
 8016926:	429a      	cmp	r2, r3
 8016928:	d90e      	bls.n	8016948 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	68ba      	ldr	r2, [r7, #8]
 801692e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	68fa      	ldr	r2, [r7, #12]
 8016934:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016936:	4b1a      	ldr	r3, [pc, #104]	; (80169a0 <prvSwitchTimerLists+0xc4>)
 8016938:	681a      	ldr	r2, [r3, #0]
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	3304      	adds	r3, #4
 801693e:	4619      	mov	r1, r3
 8016940:	4610      	mov	r0, r2
 8016942:	f7fd fc10 	bl	8014166 <vListInsert>
 8016946:	e017      	b.n	8016978 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016948:	2300      	movs	r3, #0
 801694a:	9300      	str	r3, [sp, #0]
 801694c:	2300      	movs	r3, #0
 801694e:	693a      	ldr	r2, [r7, #16]
 8016950:	2100      	movs	r1, #0
 8016952:	68f8      	ldr	r0, [r7, #12]
 8016954:	f7ff fd5e 	bl	8016414 <xTimerGenericCommand>
 8016958:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d10b      	bne.n	8016978 <prvSwitchTimerLists+0x9c>
 8016960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016964:	b672      	cpsid	i
 8016966:	f383 8811 	msr	BASEPRI, r3
 801696a:	f3bf 8f6f 	isb	sy
 801696e:	f3bf 8f4f 	dsb	sy
 8016972:	b662      	cpsie	i
 8016974:	603b      	str	r3, [r7, #0]
 8016976:	e7fe      	b.n	8016976 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016978:	4b09      	ldr	r3, [pc, #36]	; (80169a0 <prvSwitchTimerLists+0xc4>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d1b0      	bne.n	80168e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016982:	4b07      	ldr	r3, [pc, #28]	; (80169a0 <prvSwitchTimerLists+0xc4>)
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016988:	4b06      	ldr	r3, [pc, #24]	; (80169a4 <prvSwitchTimerLists+0xc8>)
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	4a04      	ldr	r2, [pc, #16]	; (80169a0 <prvSwitchTimerLists+0xc4>)
 801698e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016990:	4a04      	ldr	r2, [pc, #16]	; (80169a4 <prvSwitchTimerLists+0xc8>)
 8016992:	697b      	ldr	r3, [r7, #20]
 8016994:	6013      	str	r3, [r2, #0]
}
 8016996:	bf00      	nop
 8016998:	3718      	adds	r7, #24
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
 801699e:	bf00      	nop
 80169a0:	20001d60 	.word	0x20001d60
 80169a4:	20001d64 	.word	0x20001d64

080169a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b082      	sub	sp, #8
 80169ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80169ae:	f000 f943 	bl	8016c38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80169b2:	4b15      	ldr	r3, [pc, #84]	; (8016a08 <prvCheckForValidListAndQueue+0x60>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d120      	bne.n	80169fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80169ba:	4814      	ldr	r0, [pc, #80]	; (8016a0c <prvCheckForValidListAndQueue+0x64>)
 80169bc:	f7fd fb82 	bl	80140c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80169c0:	4813      	ldr	r0, [pc, #76]	; (8016a10 <prvCheckForValidListAndQueue+0x68>)
 80169c2:	f7fd fb7f 	bl	80140c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80169c6:	4b13      	ldr	r3, [pc, #76]	; (8016a14 <prvCheckForValidListAndQueue+0x6c>)
 80169c8:	4a10      	ldr	r2, [pc, #64]	; (8016a0c <prvCheckForValidListAndQueue+0x64>)
 80169ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80169cc:	4b12      	ldr	r3, [pc, #72]	; (8016a18 <prvCheckForValidListAndQueue+0x70>)
 80169ce:	4a10      	ldr	r2, [pc, #64]	; (8016a10 <prvCheckForValidListAndQueue+0x68>)
 80169d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80169d2:	2300      	movs	r3, #0
 80169d4:	9300      	str	r3, [sp, #0]
 80169d6:	4b11      	ldr	r3, [pc, #68]	; (8016a1c <prvCheckForValidListAndQueue+0x74>)
 80169d8:	4a11      	ldr	r2, [pc, #68]	; (8016a20 <prvCheckForValidListAndQueue+0x78>)
 80169da:	2110      	movs	r1, #16
 80169dc:	200a      	movs	r0, #10
 80169de:	f7fd fc8f 	bl	8014300 <xQueueGenericCreateStatic>
 80169e2:	4602      	mov	r2, r0
 80169e4:	4b08      	ldr	r3, [pc, #32]	; (8016a08 <prvCheckForValidListAndQueue+0x60>)
 80169e6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80169e8:	4b07      	ldr	r3, [pc, #28]	; (8016a08 <prvCheckForValidListAndQueue+0x60>)
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d005      	beq.n	80169fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80169f0:	4b05      	ldr	r3, [pc, #20]	; (8016a08 <prvCheckForValidListAndQueue+0x60>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	490b      	ldr	r1, [pc, #44]	; (8016a24 <prvCheckForValidListAndQueue+0x7c>)
 80169f6:	4618      	mov	r0, r3
 80169f8:	f7fe fb86 	bl	8015108 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80169fc:	f000 f94e 	bl	8016c9c <vPortExitCritical>
}
 8016a00:	bf00      	nop
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}
 8016a06:	bf00      	nop
 8016a08:	20001d68 	.word	0x20001d68
 8016a0c:	20001d38 	.word	0x20001d38
 8016a10:	20001d4c 	.word	0x20001d4c
 8016a14:	20001d60 	.word	0x20001d60
 8016a18:	20001d64 	.word	0x20001d64
 8016a1c:	20001e14 	.word	0x20001e14
 8016a20:	20001d74 	.word	0x20001d74
 8016a24:	08018630 	.word	0x08018630

08016a28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016a28:	b480      	push	{r7}
 8016a2a:	b085      	sub	sp, #20
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	60f8      	str	r0, [r7, #12]
 8016a30:	60b9      	str	r1, [r7, #8]
 8016a32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	3b04      	subs	r3, #4
 8016a38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	3b04      	subs	r3, #4
 8016a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016a48:	68bb      	ldr	r3, [r7, #8]
 8016a4a:	f023 0201 	bic.w	r2, r3, #1
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	3b04      	subs	r3, #4
 8016a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016a58:	4a0c      	ldr	r2, [pc, #48]	; (8016a8c <pxPortInitialiseStack+0x64>)
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	3b14      	subs	r3, #20
 8016a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016a64:	687a      	ldr	r2, [r7, #4]
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	3b04      	subs	r3, #4
 8016a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	f06f 0202 	mvn.w	r2, #2
 8016a76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	3b20      	subs	r3, #32
 8016a7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
}
 8016a80:	4618      	mov	r0, r3
 8016a82:	3714      	adds	r7, #20
 8016a84:	46bd      	mov	sp, r7
 8016a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8a:	4770      	bx	lr
 8016a8c:	08016a91 	.word	0x08016a91

08016a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016a90:	b480      	push	{r7}
 8016a92:	b085      	sub	sp, #20
 8016a94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016a96:	2300      	movs	r3, #0
 8016a98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016a9a:	4b13      	ldr	r3, [pc, #76]	; (8016ae8 <prvTaskExitError+0x58>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016aa2:	d00b      	beq.n	8016abc <prvTaskExitError+0x2c>
 8016aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa8:	b672      	cpsid	i
 8016aaa:	f383 8811 	msr	BASEPRI, r3
 8016aae:	f3bf 8f6f 	isb	sy
 8016ab2:	f3bf 8f4f 	dsb	sy
 8016ab6:	b662      	cpsie	i
 8016ab8:	60fb      	str	r3, [r7, #12]
 8016aba:	e7fe      	b.n	8016aba <prvTaskExitError+0x2a>
 8016abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac0:	b672      	cpsid	i
 8016ac2:	f383 8811 	msr	BASEPRI, r3
 8016ac6:	f3bf 8f6f 	isb	sy
 8016aca:	f3bf 8f4f 	dsb	sy
 8016ace:	b662      	cpsie	i
 8016ad0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016ad2:	bf00      	nop
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d0fc      	beq.n	8016ad4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016ada:	bf00      	nop
 8016adc:	3714      	adds	r7, #20
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae4:	4770      	bx	lr
 8016ae6:	bf00      	nop
 8016ae8:	20000094 	.word	0x20000094
 8016aec:	00000000 	.word	0x00000000

08016af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016af0:	4b07      	ldr	r3, [pc, #28]	; (8016b10 <pxCurrentTCBConst2>)
 8016af2:	6819      	ldr	r1, [r3, #0]
 8016af4:	6808      	ldr	r0, [r1, #0]
 8016af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016afa:	f380 8809 	msr	PSP, r0
 8016afe:	f3bf 8f6f 	isb	sy
 8016b02:	f04f 0000 	mov.w	r0, #0
 8016b06:	f380 8811 	msr	BASEPRI, r0
 8016b0a:	4770      	bx	lr
 8016b0c:	f3af 8000 	nop.w

08016b10 <pxCurrentTCBConst2>:
 8016b10:	20001838 	.word	0x20001838
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016b14:	bf00      	nop
 8016b16:	bf00      	nop

08016b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016b18:	4808      	ldr	r0, [pc, #32]	; (8016b3c <prvPortStartFirstTask+0x24>)
 8016b1a:	6800      	ldr	r0, [r0, #0]
 8016b1c:	6800      	ldr	r0, [r0, #0]
 8016b1e:	f380 8808 	msr	MSP, r0
 8016b22:	f04f 0000 	mov.w	r0, #0
 8016b26:	f380 8814 	msr	CONTROL, r0
 8016b2a:	b662      	cpsie	i
 8016b2c:	b661      	cpsie	f
 8016b2e:	f3bf 8f4f 	dsb	sy
 8016b32:	f3bf 8f6f 	isb	sy
 8016b36:	df00      	svc	0
 8016b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016b3a:	bf00      	nop
 8016b3c:	e000ed08 	.word	0xe000ed08

08016b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b084      	sub	sp, #16
 8016b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016b46:	4b36      	ldr	r3, [pc, #216]	; (8016c20 <xPortStartScheduler+0xe0>)
 8016b48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	781b      	ldrb	r3, [r3, #0]
 8016b4e:	b2db      	uxtb	r3, r3
 8016b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	22ff      	movs	r2, #255	; 0xff
 8016b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	781b      	ldrb	r3, [r3, #0]
 8016b5c:	b2db      	uxtb	r3, r3
 8016b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016b60:	78fb      	ldrb	r3, [r7, #3]
 8016b62:	b2db      	uxtb	r3, r3
 8016b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016b68:	b2da      	uxtb	r2, r3
 8016b6a:	4b2e      	ldr	r3, [pc, #184]	; (8016c24 <xPortStartScheduler+0xe4>)
 8016b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016b6e:	4b2e      	ldr	r3, [pc, #184]	; (8016c28 <xPortStartScheduler+0xe8>)
 8016b70:	2207      	movs	r2, #7
 8016b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016b74:	e009      	b.n	8016b8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016b76:	4b2c      	ldr	r3, [pc, #176]	; (8016c28 <xPortStartScheduler+0xe8>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	3b01      	subs	r3, #1
 8016b7c:	4a2a      	ldr	r2, [pc, #168]	; (8016c28 <xPortStartScheduler+0xe8>)
 8016b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016b80:	78fb      	ldrb	r3, [r7, #3]
 8016b82:	b2db      	uxtb	r3, r3
 8016b84:	005b      	lsls	r3, r3, #1
 8016b86:	b2db      	uxtb	r3, r3
 8016b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016b8a:	78fb      	ldrb	r3, [r7, #3]
 8016b8c:	b2db      	uxtb	r3, r3
 8016b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b92:	2b80      	cmp	r3, #128	; 0x80
 8016b94:	d0ef      	beq.n	8016b76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016b96:	4b24      	ldr	r3, [pc, #144]	; (8016c28 <xPortStartScheduler+0xe8>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	f1c3 0307 	rsb	r3, r3, #7
 8016b9e:	2b04      	cmp	r3, #4
 8016ba0:	d00b      	beq.n	8016bba <xPortStartScheduler+0x7a>
 8016ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ba6:	b672      	cpsid	i
 8016ba8:	f383 8811 	msr	BASEPRI, r3
 8016bac:	f3bf 8f6f 	isb	sy
 8016bb0:	f3bf 8f4f 	dsb	sy
 8016bb4:	b662      	cpsie	i
 8016bb6:	60bb      	str	r3, [r7, #8]
 8016bb8:	e7fe      	b.n	8016bb8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016bba:	4b1b      	ldr	r3, [pc, #108]	; (8016c28 <xPortStartScheduler+0xe8>)
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	021b      	lsls	r3, r3, #8
 8016bc0:	4a19      	ldr	r2, [pc, #100]	; (8016c28 <xPortStartScheduler+0xe8>)
 8016bc2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016bc4:	4b18      	ldr	r3, [pc, #96]	; (8016c28 <xPortStartScheduler+0xe8>)
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016bcc:	4a16      	ldr	r2, [pc, #88]	; (8016c28 <xPortStartScheduler+0xe8>)
 8016bce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	b2da      	uxtb	r2, r3
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016bd8:	4b14      	ldr	r3, [pc, #80]	; (8016c2c <xPortStartScheduler+0xec>)
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	4a13      	ldr	r2, [pc, #76]	; (8016c2c <xPortStartScheduler+0xec>)
 8016bde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016be2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016be4:	4b11      	ldr	r3, [pc, #68]	; (8016c2c <xPortStartScheduler+0xec>)
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	4a10      	ldr	r2, [pc, #64]	; (8016c2c <xPortStartScheduler+0xec>)
 8016bea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016bee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016bf0:	f000 f8d4 	bl	8016d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016bf4:	4b0e      	ldr	r3, [pc, #56]	; (8016c30 <xPortStartScheduler+0xf0>)
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016bfa:	f000 f8f3 	bl	8016de4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016bfe:	4b0d      	ldr	r3, [pc, #52]	; (8016c34 <xPortStartScheduler+0xf4>)
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	4a0c      	ldr	r2, [pc, #48]	; (8016c34 <xPortStartScheduler+0xf4>)
 8016c04:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016c08:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016c0a:	f7ff ff85 	bl	8016b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016c0e:	f7fe ff23 	bl	8015a58 <vTaskSwitchContext>
	prvTaskExitError();
 8016c12:	f7ff ff3d 	bl	8016a90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016c16:	2300      	movs	r3, #0
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3710      	adds	r7, #16
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}
 8016c20:	e000e400 	.word	0xe000e400
 8016c24:	20001e64 	.word	0x20001e64
 8016c28:	20001e68 	.word	0x20001e68
 8016c2c:	e000ed20 	.word	0xe000ed20
 8016c30:	20000094 	.word	0x20000094
 8016c34:	e000ef34 	.word	0xe000ef34

08016c38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016c38:	b480      	push	{r7}
 8016c3a:	b083      	sub	sp, #12
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c42:	b672      	cpsid	i
 8016c44:	f383 8811 	msr	BASEPRI, r3
 8016c48:	f3bf 8f6f 	isb	sy
 8016c4c:	f3bf 8f4f 	dsb	sy
 8016c50:	b662      	cpsie	i
 8016c52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016c54:	4b0f      	ldr	r3, [pc, #60]	; (8016c94 <vPortEnterCritical+0x5c>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	3301      	adds	r3, #1
 8016c5a:	4a0e      	ldr	r2, [pc, #56]	; (8016c94 <vPortEnterCritical+0x5c>)
 8016c5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016c5e:	4b0d      	ldr	r3, [pc, #52]	; (8016c94 <vPortEnterCritical+0x5c>)
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	2b01      	cmp	r3, #1
 8016c64:	d110      	bne.n	8016c88 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016c66:	4b0c      	ldr	r3, [pc, #48]	; (8016c98 <vPortEnterCritical+0x60>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	b2db      	uxtb	r3, r3
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d00b      	beq.n	8016c88 <vPortEnterCritical+0x50>
 8016c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c74:	b672      	cpsid	i
 8016c76:	f383 8811 	msr	BASEPRI, r3
 8016c7a:	f3bf 8f6f 	isb	sy
 8016c7e:	f3bf 8f4f 	dsb	sy
 8016c82:	b662      	cpsie	i
 8016c84:	603b      	str	r3, [r7, #0]
 8016c86:	e7fe      	b.n	8016c86 <vPortEnterCritical+0x4e>
	}
}
 8016c88:	bf00      	nop
 8016c8a:	370c      	adds	r7, #12
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c92:	4770      	bx	lr
 8016c94:	20000094 	.word	0x20000094
 8016c98:	e000ed04 	.word	0xe000ed04

08016c9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016c9c:	b480      	push	{r7}
 8016c9e:	b083      	sub	sp, #12
 8016ca0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016ca2:	4b12      	ldr	r3, [pc, #72]	; (8016cec <vPortExitCritical+0x50>)
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d10b      	bne.n	8016cc2 <vPortExitCritical+0x26>
 8016caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cae:	b672      	cpsid	i
 8016cb0:	f383 8811 	msr	BASEPRI, r3
 8016cb4:	f3bf 8f6f 	isb	sy
 8016cb8:	f3bf 8f4f 	dsb	sy
 8016cbc:	b662      	cpsie	i
 8016cbe:	607b      	str	r3, [r7, #4]
 8016cc0:	e7fe      	b.n	8016cc0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8016cc2:	4b0a      	ldr	r3, [pc, #40]	; (8016cec <vPortExitCritical+0x50>)
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	3b01      	subs	r3, #1
 8016cc8:	4a08      	ldr	r2, [pc, #32]	; (8016cec <vPortExitCritical+0x50>)
 8016cca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016ccc:	4b07      	ldr	r3, [pc, #28]	; (8016cec <vPortExitCritical+0x50>)
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d104      	bne.n	8016cde <vPortExitCritical+0x42>
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016cd8:	683b      	ldr	r3, [r7, #0]
 8016cda:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8016cde:	bf00      	nop
 8016ce0:	370c      	adds	r7, #12
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce8:	4770      	bx	lr
 8016cea:	bf00      	nop
 8016cec:	20000094 	.word	0x20000094

08016cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016cf0:	f3ef 8009 	mrs	r0, PSP
 8016cf4:	f3bf 8f6f 	isb	sy
 8016cf8:	4b15      	ldr	r3, [pc, #84]	; (8016d50 <pxCurrentTCBConst>)
 8016cfa:	681a      	ldr	r2, [r3, #0]
 8016cfc:	f01e 0f10 	tst.w	lr, #16
 8016d00:	bf08      	it	eq
 8016d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d0a:	6010      	str	r0, [r2, #0]
 8016d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016d14:	b672      	cpsid	i
 8016d16:	f380 8811 	msr	BASEPRI, r0
 8016d1a:	f3bf 8f4f 	dsb	sy
 8016d1e:	f3bf 8f6f 	isb	sy
 8016d22:	b662      	cpsie	i
 8016d24:	f7fe fe98 	bl	8015a58 <vTaskSwitchContext>
 8016d28:	f04f 0000 	mov.w	r0, #0
 8016d2c:	f380 8811 	msr	BASEPRI, r0
 8016d30:	bc09      	pop	{r0, r3}
 8016d32:	6819      	ldr	r1, [r3, #0]
 8016d34:	6808      	ldr	r0, [r1, #0]
 8016d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d3a:	f01e 0f10 	tst.w	lr, #16
 8016d3e:	bf08      	it	eq
 8016d40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016d44:	f380 8809 	msr	PSP, r0
 8016d48:	f3bf 8f6f 	isb	sy
 8016d4c:	4770      	bx	lr
 8016d4e:	bf00      	nop

08016d50 <pxCurrentTCBConst>:
 8016d50:	20001838 	.word	0x20001838
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016d54:	bf00      	nop
 8016d56:	bf00      	nop

08016d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8016d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d62:	b672      	cpsid	i
 8016d64:	f383 8811 	msr	BASEPRI, r3
 8016d68:	f3bf 8f6f 	isb	sy
 8016d6c:	f3bf 8f4f 	dsb	sy
 8016d70:	b662      	cpsie	i
 8016d72:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016d74:	f7fe fdb6 	bl	80158e4 <xTaskIncrementTick>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d003      	beq.n	8016d86 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016d7e:	4b06      	ldr	r3, [pc, #24]	; (8016d98 <SysTick_Handler+0x40>)
 8016d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d84:	601a      	str	r2, [r3, #0]
 8016d86:	2300      	movs	r3, #0
 8016d88:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8016d90:	bf00      	nop
 8016d92:	3708      	adds	r7, #8
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd80      	pop	{r7, pc}
 8016d98:	e000ed04 	.word	0xe000ed04

08016d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016d9c:	b480      	push	{r7}
 8016d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016da0:	4b0b      	ldr	r3, [pc, #44]	; (8016dd0 <vPortSetupTimerInterrupt+0x34>)
 8016da2:	2200      	movs	r2, #0
 8016da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016da6:	4b0b      	ldr	r3, [pc, #44]	; (8016dd4 <vPortSetupTimerInterrupt+0x38>)
 8016da8:	2200      	movs	r2, #0
 8016daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016dac:	4b0a      	ldr	r3, [pc, #40]	; (8016dd8 <vPortSetupTimerInterrupt+0x3c>)
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	4a0a      	ldr	r2, [pc, #40]	; (8016ddc <vPortSetupTimerInterrupt+0x40>)
 8016db2:	fba2 2303 	umull	r2, r3, r2, r3
 8016db6:	099b      	lsrs	r3, r3, #6
 8016db8:	4a09      	ldr	r2, [pc, #36]	; (8016de0 <vPortSetupTimerInterrupt+0x44>)
 8016dba:	3b01      	subs	r3, #1
 8016dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016dbe:	4b04      	ldr	r3, [pc, #16]	; (8016dd0 <vPortSetupTimerInterrupt+0x34>)
 8016dc0:	2207      	movs	r2, #7
 8016dc2:	601a      	str	r2, [r3, #0]
}
 8016dc4:	bf00      	nop
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dcc:	4770      	bx	lr
 8016dce:	bf00      	nop
 8016dd0:	e000e010 	.word	0xe000e010
 8016dd4:	e000e018 	.word	0xe000e018
 8016dd8:	20000000 	.word	0x20000000
 8016ddc:	10624dd3 	.word	0x10624dd3
 8016de0:	e000e014 	.word	0xe000e014

08016de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016de4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016df4 <vPortEnableVFP+0x10>
 8016de8:	6801      	ldr	r1, [r0, #0]
 8016dea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016dee:	6001      	str	r1, [r0, #0]
 8016df0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016df2:	bf00      	nop
 8016df4:	e000ed88 	.word	0xe000ed88

08016df8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016df8:	b480      	push	{r7}
 8016dfa:	b085      	sub	sp, #20
 8016dfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016dfe:	f3ef 8305 	mrs	r3, IPSR
 8016e02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	2b0f      	cmp	r3, #15
 8016e08:	d915      	bls.n	8016e36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016e0a:	4a18      	ldr	r2, [pc, #96]	; (8016e6c <vPortValidateInterruptPriority+0x74>)
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	4413      	add	r3, r2
 8016e10:	781b      	ldrb	r3, [r3, #0]
 8016e12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016e14:	4b16      	ldr	r3, [pc, #88]	; (8016e70 <vPortValidateInterruptPriority+0x78>)
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	7afa      	ldrb	r2, [r7, #11]
 8016e1a:	429a      	cmp	r2, r3
 8016e1c:	d20b      	bcs.n	8016e36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8016e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e22:	b672      	cpsid	i
 8016e24:	f383 8811 	msr	BASEPRI, r3
 8016e28:	f3bf 8f6f 	isb	sy
 8016e2c:	f3bf 8f4f 	dsb	sy
 8016e30:	b662      	cpsie	i
 8016e32:	607b      	str	r3, [r7, #4]
 8016e34:	e7fe      	b.n	8016e34 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016e36:	4b0f      	ldr	r3, [pc, #60]	; (8016e74 <vPortValidateInterruptPriority+0x7c>)
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016e3e:	4b0e      	ldr	r3, [pc, #56]	; (8016e78 <vPortValidateInterruptPriority+0x80>)
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	429a      	cmp	r2, r3
 8016e44:	d90b      	bls.n	8016e5e <vPortValidateInterruptPriority+0x66>
 8016e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e4a:	b672      	cpsid	i
 8016e4c:	f383 8811 	msr	BASEPRI, r3
 8016e50:	f3bf 8f6f 	isb	sy
 8016e54:	f3bf 8f4f 	dsb	sy
 8016e58:	b662      	cpsie	i
 8016e5a:	603b      	str	r3, [r7, #0]
 8016e5c:	e7fe      	b.n	8016e5c <vPortValidateInterruptPriority+0x64>
	}
 8016e5e:	bf00      	nop
 8016e60:	3714      	adds	r7, #20
 8016e62:	46bd      	mov	sp, r7
 8016e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e68:	4770      	bx	lr
 8016e6a:	bf00      	nop
 8016e6c:	e000e3f0 	.word	0xe000e3f0
 8016e70:	20001e64 	.word	0x20001e64
 8016e74:	e000ed0c 	.word	0xe000ed0c
 8016e78:	20001e68 	.word	0x20001e68

08016e7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b08a      	sub	sp, #40	; 0x28
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016e84:	2300      	movs	r3, #0
 8016e86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016e88:	f7fe fc70 	bl	801576c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016e8c:	4b5c      	ldr	r3, [pc, #368]	; (8017000 <pvPortMalloc+0x184>)
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d101      	bne.n	8016e98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016e94:	f000 f91a 	bl	80170cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016e98:	4b5a      	ldr	r3, [pc, #360]	; (8017004 <pvPortMalloc+0x188>)
 8016e9a:	681a      	ldr	r2, [r3, #0]
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	4013      	ands	r3, r2
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	f040 8090 	bne.w	8016fc6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d01e      	beq.n	8016eea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8016eac:	2208      	movs	r2, #8
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	4413      	add	r3, r2
 8016eb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f003 0307 	and.w	r3, r3, #7
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d015      	beq.n	8016eea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	f023 0307 	bic.w	r3, r3, #7
 8016ec4:	3308      	adds	r3, #8
 8016ec6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f003 0307 	and.w	r3, r3, #7
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d00b      	beq.n	8016eea <pvPortMalloc+0x6e>
 8016ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ed6:	b672      	cpsid	i
 8016ed8:	f383 8811 	msr	BASEPRI, r3
 8016edc:	f3bf 8f6f 	isb	sy
 8016ee0:	f3bf 8f4f 	dsb	sy
 8016ee4:	b662      	cpsie	i
 8016ee6:	617b      	str	r3, [r7, #20]
 8016ee8:	e7fe      	b.n	8016ee8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d06a      	beq.n	8016fc6 <pvPortMalloc+0x14a>
 8016ef0:	4b45      	ldr	r3, [pc, #276]	; (8017008 <pvPortMalloc+0x18c>)
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	687a      	ldr	r2, [r7, #4]
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d865      	bhi.n	8016fc6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016efa:	4b44      	ldr	r3, [pc, #272]	; (801700c <pvPortMalloc+0x190>)
 8016efc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016efe:	4b43      	ldr	r3, [pc, #268]	; (801700c <pvPortMalloc+0x190>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016f04:	e004      	b.n	8016f10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f12:	685b      	ldr	r3, [r3, #4]
 8016f14:	687a      	ldr	r2, [r7, #4]
 8016f16:	429a      	cmp	r2, r3
 8016f18:	d903      	bls.n	8016f22 <pvPortMalloc+0xa6>
 8016f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d1f1      	bne.n	8016f06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016f22:	4b37      	ldr	r3, [pc, #220]	; (8017000 <pvPortMalloc+0x184>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f28:	429a      	cmp	r2, r3
 8016f2a:	d04c      	beq.n	8016fc6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016f2c:	6a3b      	ldr	r3, [r7, #32]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	2208      	movs	r2, #8
 8016f32:	4413      	add	r3, r2
 8016f34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f38:	681a      	ldr	r2, [r3, #0]
 8016f3a:	6a3b      	ldr	r3, [r7, #32]
 8016f3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f40:	685a      	ldr	r2, [r3, #4]
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	1ad2      	subs	r2, r2, r3
 8016f46:	2308      	movs	r3, #8
 8016f48:	005b      	lsls	r3, r3, #1
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	d920      	bls.n	8016f90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	4413      	add	r3, r2
 8016f54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016f56:	69bb      	ldr	r3, [r7, #24]
 8016f58:	f003 0307 	and.w	r3, r3, #7
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d00b      	beq.n	8016f78 <pvPortMalloc+0xfc>
 8016f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f64:	b672      	cpsid	i
 8016f66:	f383 8811 	msr	BASEPRI, r3
 8016f6a:	f3bf 8f6f 	isb	sy
 8016f6e:	f3bf 8f4f 	dsb	sy
 8016f72:	b662      	cpsie	i
 8016f74:	613b      	str	r3, [r7, #16]
 8016f76:	e7fe      	b.n	8016f76 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f7a:	685a      	ldr	r2, [r3, #4]
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	1ad2      	subs	r2, r2, r3
 8016f80:	69bb      	ldr	r3, [r7, #24]
 8016f82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f86:	687a      	ldr	r2, [r7, #4]
 8016f88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016f8a:	69b8      	ldr	r0, [r7, #24]
 8016f8c:	f000 f900 	bl	8017190 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016f90:	4b1d      	ldr	r3, [pc, #116]	; (8017008 <pvPortMalloc+0x18c>)
 8016f92:	681a      	ldr	r2, [r3, #0]
 8016f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	1ad3      	subs	r3, r2, r3
 8016f9a:	4a1b      	ldr	r2, [pc, #108]	; (8017008 <pvPortMalloc+0x18c>)
 8016f9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016f9e:	4b1a      	ldr	r3, [pc, #104]	; (8017008 <pvPortMalloc+0x18c>)
 8016fa0:	681a      	ldr	r2, [r3, #0]
 8016fa2:	4b1b      	ldr	r3, [pc, #108]	; (8017010 <pvPortMalloc+0x194>)
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	429a      	cmp	r2, r3
 8016fa8:	d203      	bcs.n	8016fb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016faa:	4b17      	ldr	r3, [pc, #92]	; (8017008 <pvPortMalloc+0x18c>)
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	4a18      	ldr	r2, [pc, #96]	; (8017010 <pvPortMalloc+0x194>)
 8016fb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb4:	685a      	ldr	r2, [r3, #4]
 8016fb6:	4b13      	ldr	r3, [pc, #76]	; (8017004 <pvPortMalloc+0x188>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	431a      	orrs	r2, r3
 8016fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016fc6:	f7fe fbdf 	bl	8015788 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8016fca:	69fb      	ldr	r3, [r7, #28]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d101      	bne.n	8016fd4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8016fd0:	f7ea f840 	bl	8001054 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016fd4:	69fb      	ldr	r3, [r7, #28]
 8016fd6:	f003 0307 	and.w	r3, r3, #7
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d00b      	beq.n	8016ff6 <pvPortMalloc+0x17a>
 8016fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fe2:	b672      	cpsid	i
 8016fe4:	f383 8811 	msr	BASEPRI, r3
 8016fe8:	f3bf 8f6f 	isb	sy
 8016fec:	f3bf 8f4f 	dsb	sy
 8016ff0:	b662      	cpsie	i
 8016ff2:	60fb      	str	r3, [r7, #12]
 8016ff4:	e7fe      	b.n	8016ff4 <pvPortMalloc+0x178>
	return pvReturn;
 8016ff6:	69fb      	ldr	r3, [r7, #28]
}
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	3728      	adds	r7, #40	; 0x28
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bd80      	pop	{r7, pc}
 8017000:	20009e74 	.word	0x20009e74
 8017004:	20009e80 	.word	0x20009e80
 8017008:	20009e78 	.word	0x20009e78
 801700c:	20009e6c 	.word	0x20009e6c
 8017010:	20009e7c 	.word	0x20009e7c

08017014 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b086      	sub	sp, #24
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d04a      	beq.n	80170bc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017026:	2308      	movs	r3, #8
 8017028:	425b      	negs	r3, r3
 801702a:	697a      	ldr	r2, [r7, #20]
 801702c:	4413      	add	r3, r2
 801702e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017034:	693b      	ldr	r3, [r7, #16]
 8017036:	685a      	ldr	r2, [r3, #4]
 8017038:	4b22      	ldr	r3, [pc, #136]	; (80170c4 <vPortFree+0xb0>)
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	4013      	ands	r3, r2
 801703e:	2b00      	cmp	r3, #0
 8017040:	d10b      	bne.n	801705a <vPortFree+0x46>
 8017042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017046:	b672      	cpsid	i
 8017048:	f383 8811 	msr	BASEPRI, r3
 801704c:	f3bf 8f6f 	isb	sy
 8017050:	f3bf 8f4f 	dsb	sy
 8017054:	b662      	cpsie	i
 8017056:	60fb      	str	r3, [r7, #12]
 8017058:	e7fe      	b.n	8017058 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801705a:	693b      	ldr	r3, [r7, #16]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d00b      	beq.n	801707a <vPortFree+0x66>
 8017062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017066:	b672      	cpsid	i
 8017068:	f383 8811 	msr	BASEPRI, r3
 801706c:	f3bf 8f6f 	isb	sy
 8017070:	f3bf 8f4f 	dsb	sy
 8017074:	b662      	cpsie	i
 8017076:	60bb      	str	r3, [r7, #8]
 8017078:	e7fe      	b.n	8017078 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801707a:	693b      	ldr	r3, [r7, #16]
 801707c:	685a      	ldr	r2, [r3, #4]
 801707e:	4b11      	ldr	r3, [pc, #68]	; (80170c4 <vPortFree+0xb0>)
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	4013      	ands	r3, r2
 8017084:	2b00      	cmp	r3, #0
 8017086:	d019      	beq.n	80170bc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017088:	693b      	ldr	r3, [r7, #16]
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d115      	bne.n	80170bc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017090:	693b      	ldr	r3, [r7, #16]
 8017092:	685a      	ldr	r2, [r3, #4]
 8017094:	4b0b      	ldr	r3, [pc, #44]	; (80170c4 <vPortFree+0xb0>)
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	43db      	mvns	r3, r3
 801709a:	401a      	ands	r2, r3
 801709c:	693b      	ldr	r3, [r7, #16]
 801709e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80170a0:	f7fe fb64 	bl	801576c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80170a4:	693b      	ldr	r3, [r7, #16]
 80170a6:	685a      	ldr	r2, [r3, #4]
 80170a8:	4b07      	ldr	r3, [pc, #28]	; (80170c8 <vPortFree+0xb4>)
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	4413      	add	r3, r2
 80170ae:	4a06      	ldr	r2, [pc, #24]	; (80170c8 <vPortFree+0xb4>)
 80170b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80170b2:	6938      	ldr	r0, [r7, #16]
 80170b4:	f000 f86c 	bl	8017190 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80170b8:	f7fe fb66 	bl	8015788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80170bc:	bf00      	nop
 80170be:	3718      	adds	r7, #24
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}
 80170c4:	20009e80 	.word	0x20009e80
 80170c8:	20009e78 	.word	0x20009e78

080170cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80170cc:	b480      	push	{r7}
 80170ce:	b085      	sub	sp, #20
 80170d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80170d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80170d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80170d8:	4b27      	ldr	r3, [pc, #156]	; (8017178 <prvHeapInit+0xac>)
 80170da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	f003 0307 	and.w	r3, r3, #7
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d00c      	beq.n	8017100 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	3307      	adds	r3, #7
 80170ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	f023 0307 	bic.w	r3, r3, #7
 80170f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80170f4:	68ba      	ldr	r2, [r7, #8]
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	1ad3      	subs	r3, r2, r3
 80170fa:	4a1f      	ldr	r2, [pc, #124]	; (8017178 <prvHeapInit+0xac>)
 80170fc:	4413      	add	r3, r2
 80170fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017104:	4a1d      	ldr	r2, [pc, #116]	; (801717c <prvHeapInit+0xb0>)
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801710a:	4b1c      	ldr	r3, [pc, #112]	; (801717c <prvHeapInit+0xb0>)
 801710c:	2200      	movs	r2, #0
 801710e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	68ba      	ldr	r2, [r7, #8]
 8017114:	4413      	add	r3, r2
 8017116:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017118:	2208      	movs	r2, #8
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	1a9b      	subs	r3, r3, r2
 801711e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	f023 0307 	bic.w	r3, r3, #7
 8017126:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	4a15      	ldr	r2, [pc, #84]	; (8017180 <prvHeapInit+0xb4>)
 801712c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801712e:	4b14      	ldr	r3, [pc, #80]	; (8017180 <prvHeapInit+0xb4>)
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	2200      	movs	r2, #0
 8017134:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017136:	4b12      	ldr	r3, [pc, #72]	; (8017180 <prvHeapInit+0xb4>)
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	2200      	movs	r2, #0
 801713c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	68fa      	ldr	r2, [r7, #12]
 8017146:	1ad2      	subs	r2, r2, r3
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801714c:	4b0c      	ldr	r3, [pc, #48]	; (8017180 <prvHeapInit+0xb4>)
 801714e:	681a      	ldr	r2, [r3, #0]
 8017150:	683b      	ldr	r3, [r7, #0]
 8017152:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	4a0a      	ldr	r2, [pc, #40]	; (8017184 <prvHeapInit+0xb8>)
 801715a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	685b      	ldr	r3, [r3, #4]
 8017160:	4a09      	ldr	r2, [pc, #36]	; (8017188 <prvHeapInit+0xbc>)
 8017162:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017164:	4b09      	ldr	r3, [pc, #36]	; (801718c <prvHeapInit+0xc0>)
 8017166:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801716a:	601a      	str	r2, [r3, #0]
}
 801716c:	bf00      	nop
 801716e:	3714      	adds	r7, #20
 8017170:	46bd      	mov	sp, r7
 8017172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017176:	4770      	bx	lr
 8017178:	20001e6c 	.word	0x20001e6c
 801717c:	20009e6c 	.word	0x20009e6c
 8017180:	20009e74 	.word	0x20009e74
 8017184:	20009e7c 	.word	0x20009e7c
 8017188:	20009e78 	.word	0x20009e78
 801718c:	20009e80 	.word	0x20009e80

08017190 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017190:	b480      	push	{r7}
 8017192:	b085      	sub	sp, #20
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017198:	4b28      	ldr	r3, [pc, #160]	; (801723c <prvInsertBlockIntoFreeList+0xac>)
 801719a:	60fb      	str	r3, [r7, #12]
 801719c:	e002      	b.n	80171a4 <prvInsertBlockIntoFreeList+0x14>
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	60fb      	str	r3, [r7, #12]
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	687a      	ldr	r2, [r7, #4]
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d8f7      	bhi.n	801719e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	685b      	ldr	r3, [r3, #4]
 80171b6:	68ba      	ldr	r2, [r7, #8]
 80171b8:	4413      	add	r3, r2
 80171ba:	687a      	ldr	r2, [r7, #4]
 80171bc:	429a      	cmp	r2, r3
 80171be:	d108      	bne.n	80171d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	685a      	ldr	r2, [r3, #4]
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	685b      	ldr	r3, [r3, #4]
 80171c8:	441a      	add	r2, r3
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	685b      	ldr	r3, [r3, #4]
 80171da:	68ba      	ldr	r2, [r7, #8]
 80171dc:	441a      	add	r2, r3
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	429a      	cmp	r2, r3
 80171e4:	d118      	bne.n	8017218 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	681a      	ldr	r2, [r3, #0]
 80171ea:	4b15      	ldr	r3, [pc, #84]	; (8017240 <prvInsertBlockIntoFreeList+0xb0>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d00d      	beq.n	801720e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	685a      	ldr	r2, [r3, #4]
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	685b      	ldr	r3, [r3, #4]
 80171fc:	441a      	add	r2, r3
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	681a      	ldr	r2, [r3, #0]
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	601a      	str	r2, [r3, #0]
 801720c:	e008      	b.n	8017220 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801720e:	4b0c      	ldr	r3, [pc, #48]	; (8017240 <prvInsertBlockIntoFreeList+0xb0>)
 8017210:	681a      	ldr	r2, [r3, #0]
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	601a      	str	r2, [r3, #0]
 8017216:	e003      	b.n	8017220 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	681a      	ldr	r2, [r3, #0]
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017220:	68fa      	ldr	r2, [r7, #12]
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	429a      	cmp	r2, r3
 8017226:	d002      	beq.n	801722e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	687a      	ldr	r2, [r7, #4]
 801722c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801722e:	bf00      	nop
 8017230:	3714      	adds	r7, #20
 8017232:	46bd      	mov	sp, r7
 8017234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017238:	4770      	bx	lr
 801723a:	bf00      	nop
 801723c:	20009e6c 	.word	0x20009e6c
 8017240:	20009e74 	.word	0x20009e74

08017244 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017244:	b580      	push	{r7, lr}
 8017246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017248:	2201      	movs	r2, #1
 801724a:	490e      	ldr	r1, [pc, #56]	; (8017284 <MX_USB_HOST_Init+0x40>)
 801724c:	480e      	ldr	r0, [pc, #56]	; (8017288 <MX_USB_HOST_Init+0x44>)
 801724e:	f7fa fd4d 	bl	8011cec <USBH_Init>
 8017252:	4603      	mov	r3, r0
 8017254:	2b00      	cmp	r3, #0
 8017256:	d001      	beq.n	801725c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017258:	f7eb fbd8 	bl	8002a0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801725c:	490b      	ldr	r1, [pc, #44]	; (801728c <MX_USB_HOST_Init+0x48>)
 801725e:	480a      	ldr	r0, [pc, #40]	; (8017288 <MX_USB_HOST_Init+0x44>)
 8017260:	f7fa fdf4 	bl	8011e4c <USBH_RegisterClass>
 8017264:	4603      	mov	r3, r0
 8017266:	2b00      	cmp	r3, #0
 8017268:	d001      	beq.n	801726e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801726a:	f7eb fbcf 	bl	8002a0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801726e:	4806      	ldr	r0, [pc, #24]	; (8017288 <MX_USB_HOST_Init+0x44>)
 8017270:	f7fa fe78 	bl	8011f64 <USBH_Start>
 8017274:	4603      	mov	r3, r0
 8017276:	2b00      	cmp	r3, #0
 8017278:	d001      	beq.n	801727e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801727a:	f7eb fbc7 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801727e:	bf00      	nop
 8017280:	bd80      	pop	{r7, pc}
 8017282:	bf00      	nop
 8017284:	08017291 	.word	0x08017291
 8017288:	2001ba84 	.word	0x2001ba84
 801728c:	20000074 	.word	0x20000074

08017290 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017290:	b480      	push	{r7}
 8017292:	b083      	sub	sp, #12
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
 8017298:	460b      	mov	r3, r1
 801729a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801729c:	78fb      	ldrb	r3, [r7, #3]
 801729e:	3b01      	subs	r3, #1
 80172a0:	2b04      	cmp	r3, #4
 80172a2:	d819      	bhi.n	80172d8 <USBH_UserProcess+0x48>
 80172a4:	a201      	add	r2, pc, #4	; (adr r2, 80172ac <USBH_UserProcess+0x1c>)
 80172a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172aa:	bf00      	nop
 80172ac:	080172d9 	.word	0x080172d9
 80172b0:	080172c9 	.word	0x080172c9
 80172b4:	080172d9 	.word	0x080172d9
 80172b8:	080172d1 	.word	0x080172d1
 80172bc:	080172c1 	.word	0x080172c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80172c0:	4b09      	ldr	r3, [pc, #36]	; (80172e8 <USBH_UserProcess+0x58>)
 80172c2:	2203      	movs	r2, #3
 80172c4:	701a      	strb	r2, [r3, #0]
  break;
 80172c6:	e008      	b.n	80172da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80172c8:	4b07      	ldr	r3, [pc, #28]	; (80172e8 <USBH_UserProcess+0x58>)
 80172ca:	2202      	movs	r2, #2
 80172cc:	701a      	strb	r2, [r3, #0]
  break;
 80172ce:	e004      	b.n	80172da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80172d0:	4b05      	ldr	r3, [pc, #20]	; (80172e8 <USBH_UserProcess+0x58>)
 80172d2:	2201      	movs	r2, #1
 80172d4:	701a      	strb	r2, [r3, #0]
  break;
 80172d6:	e000      	b.n	80172da <USBH_UserProcess+0x4a>

  default:
  break;
 80172d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80172da:	bf00      	nop
 80172dc:	370c      	adds	r7, #12
 80172de:	46bd      	mov	sp, r7
 80172e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop
 80172e8:	20009e84 	.word	0x20009e84

080172ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b08a      	sub	sp, #40	; 0x28
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80172f4:	f107 0314 	add.w	r3, r7, #20
 80172f8:	2200      	movs	r2, #0
 80172fa:	601a      	str	r2, [r3, #0]
 80172fc:	605a      	str	r2, [r3, #4]
 80172fe:	609a      	str	r2, [r3, #8]
 8017300:	60da      	str	r2, [r3, #12]
 8017302:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801730c:	d13c      	bne.n	8017388 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801730e:	4b20      	ldr	r3, [pc, #128]	; (8017390 <HAL_HCD_MspInit+0xa4>)
 8017310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017312:	4a1f      	ldr	r2, [pc, #124]	; (8017390 <HAL_HCD_MspInit+0xa4>)
 8017314:	f043 0301 	orr.w	r3, r3, #1
 8017318:	6313      	str	r3, [r2, #48]	; 0x30
 801731a:	4b1d      	ldr	r3, [pc, #116]	; (8017390 <HAL_HCD_MspInit+0xa4>)
 801731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801731e:	f003 0301 	and.w	r3, r3, #1
 8017322:	613b      	str	r3, [r7, #16]
 8017324:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8017326:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801732a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801732c:	2302      	movs	r3, #2
 801732e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017330:	2300      	movs	r3, #0
 8017332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017334:	2303      	movs	r3, #3
 8017336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017338:	230a      	movs	r3, #10
 801733a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801733c:	f107 0314 	add.w	r3, r7, #20
 8017340:	4619      	mov	r1, r3
 8017342:	4814      	ldr	r0, [pc, #80]	; (8017394 <HAL_HCD_MspInit+0xa8>)
 8017344:	f7f1 fe70 	bl	8009028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017348:	4b11      	ldr	r3, [pc, #68]	; (8017390 <HAL_HCD_MspInit+0xa4>)
 801734a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801734c:	4a10      	ldr	r2, [pc, #64]	; (8017390 <HAL_HCD_MspInit+0xa4>)
 801734e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017352:	6353      	str	r3, [r2, #52]	; 0x34
 8017354:	4b0e      	ldr	r3, [pc, #56]	; (8017390 <HAL_HCD_MspInit+0xa4>)
 8017356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801735c:	60fb      	str	r3, [r7, #12]
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	4b0b      	ldr	r3, [pc, #44]	; (8017390 <HAL_HCD_MspInit+0xa4>)
 8017362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017364:	4a0a      	ldr	r2, [pc, #40]	; (8017390 <HAL_HCD_MspInit+0xa4>)
 8017366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801736a:	6453      	str	r3, [r2, #68]	; 0x44
 801736c:	4b08      	ldr	r3, [pc, #32]	; (8017390 <HAL_HCD_MspInit+0xa4>)
 801736e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017374:	60bb      	str	r3, [r7, #8]
 8017376:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017378:	2200      	movs	r2, #0
 801737a:	2100      	movs	r1, #0
 801737c:	2043      	movs	r0, #67	; 0x43
 801737e:	f7f0 fd55 	bl	8007e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017382:	2043      	movs	r0, #67	; 0x43
 8017384:	f7f0 fd6e 	bl	8007e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017388:	bf00      	nop
 801738a:	3728      	adds	r7, #40	; 0x28
 801738c:	46bd      	mov	sp, r7
 801738e:	bd80      	pop	{r7, pc}
 8017390:	40023800 	.word	0x40023800
 8017394:	40020000 	.word	0x40020000

08017398 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b082      	sub	sp, #8
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7fb fa89 	bl	80128be <USBH_LL_IncTimer>
}
 80173ac:	bf00      	nop
 80173ae:	3708      	adds	r7, #8
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}

080173b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b082      	sub	sp, #8
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80173c2:	4618      	mov	r0, r3
 80173c4:	f7fb facd 	bl	8012962 <USBH_LL_Connect>
}
 80173c8:	bf00      	nop
 80173ca:	3708      	adds	r7, #8
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}

080173d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80173de:	4618      	mov	r0, r3
 80173e0:	f7fb fae2 	bl	80129a8 <USBH_LL_Disconnect>
}
 80173e4:	bf00      	nop
 80173e6:	3708      	adds	r7, #8
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd80      	pop	{r7, pc}

080173ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b082      	sub	sp, #8
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
 80173f4:	460b      	mov	r3, r1
 80173f6:	70fb      	strb	r3, [r7, #3]
 80173f8:	4613      	mov	r3, r2
 80173fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017402:	4618      	mov	r0, r3
 8017404:	f7fb fb19 	bl	8012a3a <USBH_LL_NotifyURBChange>
#endif
}
 8017408:	bf00      	nop
 801740a:	3708      	adds	r7, #8
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}

08017410 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b082      	sub	sp, #8
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801741e:	4618      	mov	r0, r3
 8017420:	f7fb fa77 	bl	8012912 <USBH_LL_PortEnabled>
}
 8017424:	bf00      	nop
 8017426:	3708      	adds	r7, #8
 8017428:	46bd      	mov	sp, r7
 801742a:	bd80      	pop	{r7, pc}

0801742c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b082      	sub	sp, #8
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801743a:	4618      	mov	r0, r3
 801743c:	f7fb fa83 	bl	8012946 <USBH_LL_PortDisabled>
}
 8017440:	bf00      	nop
 8017442:	3708      	adds	r7, #8
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}

08017448 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b082      	sub	sp, #8
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8017456:	2b01      	cmp	r3, #1
 8017458:	d12a      	bne.n	80174b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801745a:	4a18      	ldr	r2, [pc, #96]	; (80174bc <USBH_LL_Init+0x74>)
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	4a15      	ldr	r2, [pc, #84]	; (80174bc <USBH_LL_Init+0x74>)
 8017466:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801746a:	4b14      	ldr	r3, [pc, #80]	; (80174bc <USBH_LL_Init+0x74>)
 801746c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017470:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8017472:	4b12      	ldr	r3, [pc, #72]	; (80174bc <USBH_LL_Init+0x74>)
 8017474:	2208      	movs	r2, #8
 8017476:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8017478:	4b10      	ldr	r3, [pc, #64]	; (80174bc <USBH_LL_Init+0x74>)
 801747a:	2201      	movs	r2, #1
 801747c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801747e:	4b0f      	ldr	r3, [pc, #60]	; (80174bc <USBH_LL_Init+0x74>)
 8017480:	2200      	movs	r2, #0
 8017482:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8017484:	4b0d      	ldr	r3, [pc, #52]	; (80174bc <USBH_LL_Init+0x74>)
 8017486:	2202      	movs	r2, #2
 8017488:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801748a:	4b0c      	ldr	r3, [pc, #48]	; (80174bc <USBH_LL_Init+0x74>)
 801748c:	2200      	movs	r2, #0
 801748e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8017490:	480a      	ldr	r0, [pc, #40]	; (80174bc <USBH_LL_Init+0x74>)
 8017492:	f7f2 f8af 	bl	80095f4 <HAL_HCD_Init>
 8017496:	4603      	mov	r3, r0
 8017498:	2b00      	cmp	r3, #0
 801749a:	d001      	beq.n	80174a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801749c:	f7eb fab6 	bl	8002a0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80174a0:	4806      	ldr	r0, [pc, #24]	; (80174bc <USBH_LL_Init+0x74>)
 80174a2:	f7f2 fcb3 	bl	8009e0c <HAL_HCD_GetCurrentFrame>
 80174a6:	4603      	mov	r3, r0
 80174a8:	4619      	mov	r1, r3
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f7fb f9f8 	bl	80128a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80174b0:	2300      	movs	r3, #0
}
 80174b2:	4618      	mov	r0, r3
 80174b4:	3708      	adds	r7, #8
 80174b6:	46bd      	mov	sp, r7
 80174b8:	bd80      	pop	{r7, pc}
 80174ba:	bf00      	nop
 80174bc:	2001be68 	.word	0x2001be68

080174c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b084      	sub	sp, #16
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174c8:	2300      	movs	r3, #0
 80174ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80174cc:	2300      	movs	r3, #0
 80174ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80174d6:	4618      	mov	r0, r3
 80174d8:	f7f2 fc20 	bl	8009d1c <HAL_HCD_Start>
 80174dc:	4603      	mov	r3, r0
 80174de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80174e0:	7bfb      	ldrb	r3, [r7, #15]
 80174e2:	4618      	mov	r0, r3
 80174e4:	f000 f95c 	bl	80177a0 <USBH_Get_USB_Status>
 80174e8:	4603      	mov	r3, r0
 80174ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80174ee:	4618      	mov	r0, r3
 80174f0:	3710      	adds	r7, #16
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd80      	pop	{r7, pc}

080174f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80174f6:	b580      	push	{r7, lr}
 80174f8:	b084      	sub	sp, #16
 80174fa:	af00      	add	r7, sp, #0
 80174fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174fe:	2300      	movs	r3, #0
 8017500:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017502:	2300      	movs	r3, #0
 8017504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801750c:	4618      	mov	r0, r3
 801750e:	f7f2 fc28 	bl	8009d62 <HAL_HCD_Stop>
 8017512:	4603      	mov	r3, r0
 8017514:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017516:	7bfb      	ldrb	r3, [r7, #15]
 8017518:	4618      	mov	r0, r3
 801751a:	f000 f941 	bl	80177a0 <USBH_Get_USB_Status>
 801751e:	4603      	mov	r3, r0
 8017520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017522:	7bbb      	ldrb	r3, [r7, #14]
}
 8017524:	4618      	mov	r0, r3
 8017526:	3710      	adds	r7, #16
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}

0801752c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b084      	sub	sp, #16
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8017534:	2301      	movs	r3, #1
 8017536:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801753e:	4618      	mov	r0, r3
 8017540:	f7f2 fc72 	bl	8009e28 <HAL_HCD_GetCurrentSpeed>
 8017544:	4603      	mov	r3, r0
 8017546:	2b01      	cmp	r3, #1
 8017548:	d007      	beq.n	801755a <USBH_LL_GetSpeed+0x2e>
 801754a:	2b01      	cmp	r3, #1
 801754c:	d302      	bcc.n	8017554 <USBH_LL_GetSpeed+0x28>
 801754e:	2b02      	cmp	r3, #2
 8017550:	d006      	beq.n	8017560 <USBH_LL_GetSpeed+0x34>
 8017552:	e008      	b.n	8017566 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8017554:	2300      	movs	r3, #0
 8017556:	73fb      	strb	r3, [r7, #15]
    break;
 8017558:	e008      	b.n	801756c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801755a:	2301      	movs	r3, #1
 801755c:	73fb      	strb	r3, [r7, #15]
    break;
 801755e:	e005      	b.n	801756c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8017560:	2302      	movs	r3, #2
 8017562:	73fb      	strb	r3, [r7, #15]
    break;
 8017564:	e002      	b.n	801756c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8017566:	2301      	movs	r3, #1
 8017568:	73fb      	strb	r3, [r7, #15]
    break;
 801756a:	bf00      	nop
  }
  return  speed;
 801756c:	7bfb      	ldrb	r3, [r7, #15]
}
 801756e:	4618      	mov	r0, r3
 8017570:	3710      	adds	r7, #16
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}

08017576 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8017576:	b580      	push	{r7, lr}
 8017578:	b084      	sub	sp, #16
 801757a:	af00      	add	r7, sp, #0
 801757c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801757e:	2300      	movs	r3, #0
 8017580:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017582:	2300      	movs	r3, #0
 8017584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801758c:	4618      	mov	r0, r3
 801758e:	f7f2 fc05 	bl	8009d9c <HAL_HCD_ResetPort>
 8017592:	4603      	mov	r3, r0
 8017594:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017596:	7bfb      	ldrb	r3, [r7, #15]
 8017598:	4618      	mov	r0, r3
 801759a:	f000 f901 	bl	80177a0 <USBH_Get_USB_Status>
 801759e:	4603      	mov	r3, r0
 80175a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80175a4:	4618      	mov	r0, r3
 80175a6:	3710      	adds	r7, #16
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}

080175ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b082      	sub	sp, #8
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
 80175b4:	460b      	mov	r3, r1
 80175b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80175be:	78fa      	ldrb	r2, [r7, #3]
 80175c0:	4611      	mov	r1, r2
 80175c2:	4618      	mov	r0, r3
 80175c4:	f7f2 fc0d 	bl	8009de2 <HAL_HCD_HC_GetXferCount>
 80175c8:	4603      	mov	r3, r0
}
 80175ca:	4618      	mov	r0, r3
 80175cc:	3708      	adds	r7, #8
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}

080175d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80175d2:	b590      	push	{r4, r7, lr}
 80175d4:	b089      	sub	sp, #36	; 0x24
 80175d6:	af04      	add	r7, sp, #16
 80175d8:	6078      	str	r0, [r7, #4]
 80175da:	4608      	mov	r0, r1
 80175dc:	4611      	mov	r1, r2
 80175de:	461a      	mov	r2, r3
 80175e0:	4603      	mov	r3, r0
 80175e2:	70fb      	strb	r3, [r7, #3]
 80175e4:	460b      	mov	r3, r1
 80175e6:	70bb      	strb	r3, [r7, #2]
 80175e8:	4613      	mov	r3, r2
 80175ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175ec:	2300      	movs	r3, #0
 80175ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80175f0:	2300      	movs	r3, #0
 80175f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80175fa:	787c      	ldrb	r4, [r7, #1]
 80175fc:	78ba      	ldrb	r2, [r7, #2]
 80175fe:	78f9      	ldrb	r1, [r7, #3]
 8017600:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017602:	9302      	str	r3, [sp, #8]
 8017604:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017608:	9301      	str	r3, [sp, #4]
 801760a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801760e:	9300      	str	r3, [sp, #0]
 8017610:	4623      	mov	r3, r4
 8017612:	f7f2 f851 	bl	80096b8 <HAL_HCD_HC_Init>
 8017616:	4603      	mov	r3, r0
 8017618:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801761a:	7bfb      	ldrb	r3, [r7, #15]
 801761c:	4618      	mov	r0, r3
 801761e:	f000 f8bf 	bl	80177a0 <USBH_Get_USB_Status>
 8017622:	4603      	mov	r3, r0
 8017624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017626:	7bbb      	ldrb	r3, [r7, #14]
}
 8017628:	4618      	mov	r0, r3
 801762a:	3714      	adds	r7, #20
 801762c:	46bd      	mov	sp, r7
 801762e:	bd90      	pop	{r4, r7, pc}

08017630 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b084      	sub	sp, #16
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
 8017638:	460b      	mov	r3, r1
 801763a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801763c:	2300      	movs	r3, #0
 801763e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017640:	2300      	movs	r3, #0
 8017642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801764a:	78fa      	ldrb	r2, [r7, #3]
 801764c:	4611      	mov	r1, r2
 801764e:	4618      	mov	r0, r3
 8017650:	f7f2 f8ca 	bl	80097e8 <HAL_HCD_HC_Halt>
 8017654:	4603      	mov	r3, r0
 8017656:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017658:	7bfb      	ldrb	r3, [r7, #15]
 801765a:	4618      	mov	r0, r3
 801765c:	f000 f8a0 	bl	80177a0 <USBH_Get_USB_Status>
 8017660:	4603      	mov	r3, r0
 8017662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017664:	7bbb      	ldrb	r3, [r7, #14]
}
 8017666:	4618      	mov	r0, r3
 8017668:	3710      	adds	r7, #16
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}

0801766e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801766e:	b590      	push	{r4, r7, lr}
 8017670:	b089      	sub	sp, #36	; 0x24
 8017672:	af04      	add	r7, sp, #16
 8017674:	6078      	str	r0, [r7, #4]
 8017676:	4608      	mov	r0, r1
 8017678:	4611      	mov	r1, r2
 801767a:	461a      	mov	r2, r3
 801767c:	4603      	mov	r3, r0
 801767e:	70fb      	strb	r3, [r7, #3]
 8017680:	460b      	mov	r3, r1
 8017682:	70bb      	strb	r3, [r7, #2]
 8017684:	4613      	mov	r3, r2
 8017686:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017688:	2300      	movs	r3, #0
 801768a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801768c:	2300      	movs	r3, #0
 801768e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8017696:	787c      	ldrb	r4, [r7, #1]
 8017698:	78ba      	ldrb	r2, [r7, #2]
 801769a:	78f9      	ldrb	r1, [r7, #3]
 801769c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80176a0:	9303      	str	r3, [sp, #12]
 80176a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80176a4:	9302      	str	r3, [sp, #8]
 80176a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176a8:	9301      	str	r3, [sp, #4]
 80176aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80176ae:	9300      	str	r3, [sp, #0]
 80176b0:	4623      	mov	r3, r4
 80176b2:	f7f2 f8bd 	bl	8009830 <HAL_HCD_HC_SubmitRequest>
 80176b6:	4603      	mov	r3, r0
 80176b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80176ba:	7bfb      	ldrb	r3, [r7, #15]
 80176bc:	4618      	mov	r0, r3
 80176be:	f000 f86f 	bl	80177a0 <USBH_Get_USB_Status>
 80176c2:	4603      	mov	r3, r0
 80176c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80176c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80176c8:	4618      	mov	r0, r3
 80176ca:	3714      	adds	r7, #20
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bd90      	pop	{r4, r7, pc}

080176d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b082      	sub	sp, #8
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
 80176d8:	460b      	mov	r3, r1
 80176da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80176e2:	78fa      	ldrb	r2, [r7, #3]
 80176e4:	4611      	mov	r1, r2
 80176e6:	4618      	mov	r0, r3
 80176e8:	f7f2 fb66 	bl	8009db8 <HAL_HCD_HC_GetURBState>
 80176ec:	4603      	mov	r3, r0
}
 80176ee:	4618      	mov	r0, r3
 80176f0:	3708      	adds	r7, #8
 80176f2:	46bd      	mov	sp, r7
 80176f4:	bd80      	pop	{r7, pc}

080176f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80176f6:	b580      	push	{r7, lr}
 80176f8:	b082      	sub	sp, #8
 80176fa:	af00      	add	r7, sp, #0
 80176fc:	6078      	str	r0, [r7, #4]
 80176fe:	460b      	mov	r3, r1
 8017700:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8017708:	2b01      	cmp	r3, #1
 801770a:	d103      	bne.n	8017714 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801770c:	78fb      	ldrb	r3, [r7, #3]
 801770e:	4618      	mov	r0, r3
 8017710:	f000 f872 	bl	80177f8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8017714:	20c8      	movs	r0, #200	; 0xc8
 8017716:	f7f0 f827 	bl	8007768 <HAL_Delay>
  return USBH_OK;
 801771a:	2300      	movs	r3, #0
}
 801771c:	4618      	mov	r0, r3
 801771e:	3708      	adds	r7, #8
 8017720:	46bd      	mov	sp, r7
 8017722:	bd80      	pop	{r7, pc}

08017724 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8017724:	b480      	push	{r7}
 8017726:	b085      	sub	sp, #20
 8017728:	af00      	add	r7, sp, #0
 801772a:	6078      	str	r0, [r7, #4]
 801772c:	460b      	mov	r3, r1
 801772e:	70fb      	strb	r3, [r7, #3]
 8017730:	4613      	mov	r3, r2
 8017732:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801773a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801773c:	78fa      	ldrb	r2, [r7, #3]
 801773e:	68f9      	ldr	r1, [r7, #12]
 8017740:	4613      	mov	r3, r2
 8017742:	009b      	lsls	r3, r3, #2
 8017744:	4413      	add	r3, r2
 8017746:	00db      	lsls	r3, r3, #3
 8017748:	440b      	add	r3, r1
 801774a:	333b      	adds	r3, #59	; 0x3b
 801774c:	781b      	ldrb	r3, [r3, #0]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d00a      	beq.n	8017768 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8017752:	78fa      	ldrb	r2, [r7, #3]
 8017754:	68f9      	ldr	r1, [r7, #12]
 8017756:	4613      	mov	r3, r2
 8017758:	009b      	lsls	r3, r3, #2
 801775a:	4413      	add	r3, r2
 801775c:	00db      	lsls	r3, r3, #3
 801775e:	440b      	add	r3, r1
 8017760:	3350      	adds	r3, #80	; 0x50
 8017762:	78ba      	ldrb	r2, [r7, #2]
 8017764:	701a      	strb	r2, [r3, #0]
 8017766:	e009      	b.n	801777c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8017768:	78fa      	ldrb	r2, [r7, #3]
 801776a:	68f9      	ldr	r1, [r7, #12]
 801776c:	4613      	mov	r3, r2
 801776e:	009b      	lsls	r3, r3, #2
 8017770:	4413      	add	r3, r2
 8017772:	00db      	lsls	r3, r3, #3
 8017774:	440b      	add	r3, r1
 8017776:	3351      	adds	r3, #81	; 0x51
 8017778:	78ba      	ldrb	r2, [r7, #2]
 801777a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801777c:	2300      	movs	r3, #0
}
 801777e:	4618      	mov	r0, r3
 8017780:	3714      	adds	r7, #20
 8017782:	46bd      	mov	sp, r7
 8017784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017788:	4770      	bx	lr

0801778a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801778a:	b580      	push	{r7, lr}
 801778c:	b082      	sub	sp, #8
 801778e:	af00      	add	r7, sp, #0
 8017790:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8017792:	6878      	ldr	r0, [r7, #4]
 8017794:	f7ef ffe8 	bl	8007768 <HAL_Delay>
}
 8017798:	bf00      	nop
 801779a:	3708      	adds	r7, #8
 801779c:	46bd      	mov	sp, r7
 801779e:	bd80      	pop	{r7, pc}

080177a0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80177a0:	b480      	push	{r7}
 80177a2:	b085      	sub	sp, #20
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	4603      	mov	r3, r0
 80177a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80177aa:	2300      	movs	r3, #0
 80177ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80177ae:	79fb      	ldrb	r3, [r7, #7]
 80177b0:	2b03      	cmp	r3, #3
 80177b2:	d817      	bhi.n	80177e4 <USBH_Get_USB_Status+0x44>
 80177b4:	a201      	add	r2, pc, #4	; (adr r2, 80177bc <USBH_Get_USB_Status+0x1c>)
 80177b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177ba:	bf00      	nop
 80177bc:	080177cd 	.word	0x080177cd
 80177c0:	080177d3 	.word	0x080177d3
 80177c4:	080177d9 	.word	0x080177d9
 80177c8:	080177df 	.word	0x080177df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80177cc:	2300      	movs	r3, #0
 80177ce:	73fb      	strb	r3, [r7, #15]
    break;
 80177d0:	e00b      	b.n	80177ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80177d2:	2302      	movs	r3, #2
 80177d4:	73fb      	strb	r3, [r7, #15]
    break;
 80177d6:	e008      	b.n	80177ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80177d8:	2301      	movs	r3, #1
 80177da:	73fb      	strb	r3, [r7, #15]
    break;
 80177dc:	e005      	b.n	80177ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80177de:	2302      	movs	r3, #2
 80177e0:	73fb      	strb	r3, [r7, #15]
    break;
 80177e2:	e002      	b.n	80177ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80177e4:	2302      	movs	r3, #2
 80177e6:	73fb      	strb	r3, [r7, #15]
    break;
 80177e8:	bf00      	nop
  }
  return usb_status;
 80177ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80177ec:	4618      	mov	r0, r3
 80177ee:	3714      	adds	r7, #20
 80177f0:	46bd      	mov	sp, r7
 80177f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f6:	4770      	bx	lr

080177f8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b084      	sub	sp, #16
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	4603      	mov	r3, r0
 8017800:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8017802:	79fb      	ldrb	r3, [r7, #7]
 8017804:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8017806:	79fb      	ldrb	r3, [r7, #7]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d102      	bne.n	8017812 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801780c:	2301      	movs	r3, #1
 801780e:	73fb      	strb	r3, [r7, #15]
 8017810:	e001      	b.n	8017816 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8017812:	2300      	movs	r3, #0
 8017814:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8017816:	7bfb      	ldrb	r3, [r7, #15]
 8017818:	461a      	mov	r2, r3
 801781a:	2120      	movs	r1, #32
 801781c:	4803      	ldr	r0, [pc, #12]	; (801782c <MX_DriverVbusFS+0x34>)
 801781e:	f7f1 feb7 	bl	8009590 <HAL_GPIO_WritePin>
}
 8017822:	bf00      	nop
 8017824:	3710      	adds	r7, #16
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}
 801782a:	bf00      	nop
 801782c:	40020c00 	.word	0x40020c00

08017830 <__errno>:
 8017830:	4b01      	ldr	r3, [pc, #4]	; (8017838 <__errno+0x8>)
 8017832:	6818      	ldr	r0, [r3, #0]
 8017834:	4770      	bx	lr
 8017836:	bf00      	nop
 8017838:	20000098 	.word	0x20000098

0801783c <__libc_init_array>:
 801783c:	b570      	push	{r4, r5, r6, lr}
 801783e:	4e0d      	ldr	r6, [pc, #52]	; (8017874 <__libc_init_array+0x38>)
 8017840:	4c0d      	ldr	r4, [pc, #52]	; (8017878 <__libc_init_array+0x3c>)
 8017842:	1ba4      	subs	r4, r4, r6
 8017844:	10a4      	asrs	r4, r4, #2
 8017846:	2500      	movs	r5, #0
 8017848:	42a5      	cmp	r5, r4
 801784a:	d109      	bne.n	8017860 <__libc_init_array+0x24>
 801784c:	4e0b      	ldr	r6, [pc, #44]	; (801787c <__libc_init_array+0x40>)
 801784e:	4c0c      	ldr	r4, [pc, #48]	; (8017880 <__libc_init_array+0x44>)
 8017850:	f000 fdfc 	bl	801844c <_init>
 8017854:	1ba4      	subs	r4, r4, r6
 8017856:	10a4      	asrs	r4, r4, #2
 8017858:	2500      	movs	r5, #0
 801785a:	42a5      	cmp	r5, r4
 801785c:	d105      	bne.n	801786a <__libc_init_array+0x2e>
 801785e:	bd70      	pop	{r4, r5, r6, pc}
 8017860:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017864:	4798      	blx	r3
 8017866:	3501      	adds	r5, #1
 8017868:	e7ee      	b.n	8017848 <__libc_init_array+0xc>
 801786a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801786e:	4798      	blx	r3
 8017870:	3501      	adds	r5, #1
 8017872:	e7f2      	b.n	801785a <__libc_init_array+0x1e>
 8017874:	0801a230 	.word	0x0801a230
 8017878:	0801a230 	.word	0x0801a230
 801787c:	0801a230 	.word	0x0801a230
 8017880:	0801a234 	.word	0x0801a234

08017884 <malloc>:
 8017884:	4b02      	ldr	r3, [pc, #8]	; (8017890 <malloc+0xc>)
 8017886:	4601      	mov	r1, r0
 8017888:	6818      	ldr	r0, [r3, #0]
 801788a:	f000 b86d 	b.w	8017968 <_malloc_r>
 801788e:	bf00      	nop
 8017890:	20000098 	.word	0x20000098

08017894 <free>:
 8017894:	4b02      	ldr	r3, [pc, #8]	; (80178a0 <free+0xc>)
 8017896:	4601      	mov	r1, r0
 8017898:	6818      	ldr	r0, [r3, #0]
 801789a:	f000 b817 	b.w	80178cc <_free_r>
 801789e:	bf00      	nop
 80178a0:	20000098 	.word	0x20000098

080178a4 <memcpy>:
 80178a4:	b510      	push	{r4, lr}
 80178a6:	1e43      	subs	r3, r0, #1
 80178a8:	440a      	add	r2, r1
 80178aa:	4291      	cmp	r1, r2
 80178ac:	d100      	bne.n	80178b0 <memcpy+0xc>
 80178ae:	bd10      	pop	{r4, pc}
 80178b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80178b8:	e7f7      	b.n	80178aa <memcpy+0x6>

080178ba <memset>:
 80178ba:	4402      	add	r2, r0
 80178bc:	4603      	mov	r3, r0
 80178be:	4293      	cmp	r3, r2
 80178c0:	d100      	bne.n	80178c4 <memset+0xa>
 80178c2:	4770      	bx	lr
 80178c4:	f803 1b01 	strb.w	r1, [r3], #1
 80178c8:	e7f9      	b.n	80178be <memset+0x4>
	...

080178cc <_free_r>:
 80178cc:	b538      	push	{r3, r4, r5, lr}
 80178ce:	4605      	mov	r5, r0
 80178d0:	2900      	cmp	r1, #0
 80178d2:	d045      	beq.n	8017960 <_free_r+0x94>
 80178d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80178d8:	1f0c      	subs	r4, r1, #4
 80178da:	2b00      	cmp	r3, #0
 80178dc:	bfb8      	it	lt
 80178de:	18e4      	addlt	r4, r4, r3
 80178e0:	f000 f8cc 	bl	8017a7c <__malloc_lock>
 80178e4:	4a1f      	ldr	r2, [pc, #124]	; (8017964 <_free_r+0x98>)
 80178e6:	6813      	ldr	r3, [r2, #0]
 80178e8:	4610      	mov	r0, r2
 80178ea:	b933      	cbnz	r3, 80178fa <_free_r+0x2e>
 80178ec:	6063      	str	r3, [r4, #4]
 80178ee:	6014      	str	r4, [r2, #0]
 80178f0:	4628      	mov	r0, r5
 80178f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80178f6:	f000 b8c2 	b.w	8017a7e <__malloc_unlock>
 80178fa:	42a3      	cmp	r3, r4
 80178fc:	d90c      	bls.n	8017918 <_free_r+0x4c>
 80178fe:	6821      	ldr	r1, [r4, #0]
 8017900:	1862      	adds	r2, r4, r1
 8017902:	4293      	cmp	r3, r2
 8017904:	bf04      	itt	eq
 8017906:	681a      	ldreq	r2, [r3, #0]
 8017908:	685b      	ldreq	r3, [r3, #4]
 801790a:	6063      	str	r3, [r4, #4]
 801790c:	bf04      	itt	eq
 801790e:	1852      	addeq	r2, r2, r1
 8017910:	6022      	streq	r2, [r4, #0]
 8017912:	6004      	str	r4, [r0, #0]
 8017914:	e7ec      	b.n	80178f0 <_free_r+0x24>
 8017916:	4613      	mov	r3, r2
 8017918:	685a      	ldr	r2, [r3, #4]
 801791a:	b10a      	cbz	r2, 8017920 <_free_r+0x54>
 801791c:	42a2      	cmp	r2, r4
 801791e:	d9fa      	bls.n	8017916 <_free_r+0x4a>
 8017920:	6819      	ldr	r1, [r3, #0]
 8017922:	1858      	adds	r0, r3, r1
 8017924:	42a0      	cmp	r0, r4
 8017926:	d10b      	bne.n	8017940 <_free_r+0x74>
 8017928:	6820      	ldr	r0, [r4, #0]
 801792a:	4401      	add	r1, r0
 801792c:	1858      	adds	r0, r3, r1
 801792e:	4282      	cmp	r2, r0
 8017930:	6019      	str	r1, [r3, #0]
 8017932:	d1dd      	bne.n	80178f0 <_free_r+0x24>
 8017934:	6810      	ldr	r0, [r2, #0]
 8017936:	6852      	ldr	r2, [r2, #4]
 8017938:	605a      	str	r2, [r3, #4]
 801793a:	4401      	add	r1, r0
 801793c:	6019      	str	r1, [r3, #0]
 801793e:	e7d7      	b.n	80178f0 <_free_r+0x24>
 8017940:	d902      	bls.n	8017948 <_free_r+0x7c>
 8017942:	230c      	movs	r3, #12
 8017944:	602b      	str	r3, [r5, #0]
 8017946:	e7d3      	b.n	80178f0 <_free_r+0x24>
 8017948:	6820      	ldr	r0, [r4, #0]
 801794a:	1821      	adds	r1, r4, r0
 801794c:	428a      	cmp	r2, r1
 801794e:	bf04      	itt	eq
 8017950:	6811      	ldreq	r1, [r2, #0]
 8017952:	6852      	ldreq	r2, [r2, #4]
 8017954:	6062      	str	r2, [r4, #4]
 8017956:	bf04      	itt	eq
 8017958:	1809      	addeq	r1, r1, r0
 801795a:	6021      	streq	r1, [r4, #0]
 801795c:	605c      	str	r4, [r3, #4]
 801795e:	e7c7      	b.n	80178f0 <_free_r+0x24>
 8017960:	bd38      	pop	{r3, r4, r5, pc}
 8017962:	bf00      	nop
 8017964:	20009e88 	.word	0x20009e88

08017968 <_malloc_r>:
 8017968:	b570      	push	{r4, r5, r6, lr}
 801796a:	1ccd      	adds	r5, r1, #3
 801796c:	f025 0503 	bic.w	r5, r5, #3
 8017970:	3508      	adds	r5, #8
 8017972:	2d0c      	cmp	r5, #12
 8017974:	bf38      	it	cc
 8017976:	250c      	movcc	r5, #12
 8017978:	2d00      	cmp	r5, #0
 801797a:	4606      	mov	r6, r0
 801797c:	db01      	blt.n	8017982 <_malloc_r+0x1a>
 801797e:	42a9      	cmp	r1, r5
 8017980:	d903      	bls.n	801798a <_malloc_r+0x22>
 8017982:	230c      	movs	r3, #12
 8017984:	6033      	str	r3, [r6, #0]
 8017986:	2000      	movs	r0, #0
 8017988:	bd70      	pop	{r4, r5, r6, pc}
 801798a:	f000 f877 	bl	8017a7c <__malloc_lock>
 801798e:	4a21      	ldr	r2, [pc, #132]	; (8017a14 <_malloc_r+0xac>)
 8017990:	6814      	ldr	r4, [r2, #0]
 8017992:	4621      	mov	r1, r4
 8017994:	b991      	cbnz	r1, 80179bc <_malloc_r+0x54>
 8017996:	4c20      	ldr	r4, [pc, #128]	; (8017a18 <_malloc_r+0xb0>)
 8017998:	6823      	ldr	r3, [r4, #0]
 801799a:	b91b      	cbnz	r3, 80179a4 <_malloc_r+0x3c>
 801799c:	4630      	mov	r0, r6
 801799e:	f000 f83d 	bl	8017a1c <_sbrk_r>
 80179a2:	6020      	str	r0, [r4, #0]
 80179a4:	4629      	mov	r1, r5
 80179a6:	4630      	mov	r0, r6
 80179a8:	f000 f838 	bl	8017a1c <_sbrk_r>
 80179ac:	1c43      	adds	r3, r0, #1
 80179ae:	d124      	bne.n	80179fa <_malloc_r+0x92>
 80179b0:	230c      	movs	r3, #12
 80179b2:	6033      	str	r3, [r6, #0]
 80179b4:	4630      	mov	r0, r6
 80179b6:	f000 f862 	bl	8017a7e <__malloc_unlock>
 80179ba:	e7e4      	b.n	8017986 <_malloc_r+0x1e>
 80179bc:	680b      	ldr	r3, [r1, #0]
 80179be:	1b5b      	subs	r3, r3, r5
 80179c0:	d418      	bmi.n	80179f4 <_malloc_r+0x8c>
 80179c2:	2b0b      	cmp	r3, #11
 80179c4:	d90f      	bls.n	80179e6 <_malloc_r+0x7e>
 80179c6:	600b      	str	r3, [r1, #0]
 80179c8:	50cd      	str	r5, [r1, r3]
 80179ca:	18cc      	adds	r4, r1, r3
 80179cc:	4630      	mov	r0, r6
 80179ce:	f000 f856 	bl	8017a7e <__malloc_unlock>
 80179d2:	f104 000b 	add.w	r0, r4, #11
 80179d6:	1d23      	adds	r3, r4, #4
 80179d8:	f020 0007 	bic.w	r0, r0, #7
 80179dc:	1ac3      	subs	r3, r0, r3
 80179de:	d0d3      	beq.n	8017988 <_malloc_r+0x20>
 80179e0:	425a      	negs	r2, r3
 80179e2:	50e2      	str	r2, [r4, r3]
 80179e4:	e7d0      	b.n	8017988 <_malloc_r+0x20>
 80179e6:	428c      	cmp	r4, r1
 80179e8:	684b      	ldr	r3, [r1, #4]
 80179ea:	bf16      	itet	ne
 80179ec:	6063      	strne	r3, [r4, #4]
 80179ee:	6013      	streq	r3, [r2, #0]
 80179f0:	460c      	movne	r4, r1
 80179f2:	e7eb      	b.n	80179cc <_malloc_r+0x64>
 80179f4:	460c      	mov	r4, r1
 80179f6:	6849      	ldr	r1, [r1, #4]
 80179f8:	e7cc      	b.n	8017994 <_malloc_r+0x2c>
 80179fa:	1cc4      	adds	r4, r0, #3
 80179fc:	f024 0403 	bic.w	r4, r4, #3
 8017a00:	42a0      	cmp	r0, r4
 8017a02:	d005      	beq.n	8017a10 <_malloc_r+0xa8>
 8017a04:	1a21      	subs	r1, r4, r0
 8017a06:	4630      	mov	r0, r6
 8017a08:	f000 f808 	bl	8017a1c <_sbrk_r>
 8017a0c:	3001      	adds	r0, #1
 8017a0e:	d0cf      	beq.n	80179b0 <_malloc_r+0x48>
 8017a10:	6025      	str	r5, [r4, #0]
 8017a12:	e7db      	b.n	80179cc <_malloc_r+0x64>
 8017a14:	20009e88 	.word	0x20009e88
 8017a18:	20009e8c 	.word	0x20009e8c

08017a1c <_sbrk_r>:
 8017a1c:	b538      	push	{r3, r4, r5, lr}
 8017a1e:	4c06      	ldr	r4, [pc, #24]	; (8017a38 <_sbrk_r+0x1c>)
 8017a20:	2300      	movs	r3, #0
 8017a22:	4605      	mov	r5, r0
 8017a24:	4608      	mov	r0, r1
 8017a26:	6023      	str	r3, [r4, #0]
 8017a28:	f7eb ffca 	bl	80039c0 <_sbrk>
 8017a2c:	1c43      	adds	r3, r0, #1
 8017a2e:	d102      	bne.n	8017a36 <_sbrk_r+0x1a>
 8017a30:	6823      	ldr	r3, [r4, #0]
 8017a32:	b103      	cbz	r3, 8017a36 <_sbrk_r+0x1a>
 8017a34:	602b      	str	r3, [r5, #0]
 8017a36:	bd38      	pop	{r3, r4, r5, pc}
 8017a38:	2001c12c 	.word	0x2001c12c

08017a3c <siprintf>:
 8017a3c:	b40e      	push	{r1, r2, r3}
 8017a3e:	b500      	push	{lr}
 8017a40:	b09c      	sub	sp, #112	; 0x70
 8017a42:	ab1d      	add	r3, sp, #116	; 0x74
 8017a44:	9002      	str	r0, [sp, #8]
 8017a46:	9006      	str	r0, [sp, #24]
 8017a48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017a4c:	4809      	ldr	r0, [pc, #36]	; (8017a74 <siprintf+0x38>)
 8017a4e:	9107      	str	r1, [sp, #28]
 8017a50:	9104      	str	r1, [sp, #16]
 8017a52:	4909      	ldr	r1, [pc, #36]	; (8017a78 <siprintf+0x3c>)
 8017a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a58:	9105      	str	r1, [sp, #20]
 8017a5a:	6800      	ldr	r0, [r0, #0]
 8017a5c:	9301      	str	r3, [sp, #4]
 8017a5e:	a902      	add	r1, sp, #8
 8017a60:	f000 f868 	bl	8017b34 <_svfiprintf_r>
 8017a64:	9b02      	ldr	r3, [sp, #8]
 8017a66:	2200      	movs	r2, #0
 8017a68:	701a      	strb	r2, [r3, #0]
 8017a6a:	b01c      	add	sp, #112	; 0x70
 8017a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a70:	b003      	add	sp, #12
 8017a72:	4770      	bx	lr
 8017a74:	20000098 	.word	0x20000098
 8017a78:	ffff0208 	.word	0xffff0208

08017a7c <__malloc_lock>:
 8017a7c:	4770      	bx	lr

08017a7e <__malloc_unlock>:
 8017a7e:	4770      	bx	lr

08017a80 <__ssputs_r>:
 8017a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a84:	688e      	ldr	r6, [r1, #8]
 8017a86:	429e      	cmp	r6, r3
 8017a88:	4682      	mov	sl, r0
 8017a8a:	460c      	mov	r4, r1
 8017a8c:	4690      	mov	r8, r2
 8017a8e:	4699      	mov	r9, r3
 8017a90:	d837      	bhi.n	8017b02 <__ssputs_r+0x82>
 8017a92:	898a      	ldrh	r2, [r1, #12]
 8017a94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017a98:	d031      	beq.n	8017afe <__ssputs_r+0x7e>
 8017a9a:	6825      	ldr	r5, [r4, #0]
 8017a9c:	6909      	ldr	r1, [r1, #16]
 8017a9e:	1a6f      	subs	r7, r5, r1
 8017aa0:	6965      	ldr	r5, [r4, #20]
 8017aa2:	2302      	movs	r3, #2
 8017aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017aa8:	fb95 f5f3 	sdiv	r5, r5, r3
 8017aac:	f109 0301 	add.w	r3, r9, #1
 8017ab0:	443b      	add	r3, r7
 8017ab2:	429d      	cmp	r5, r3
 8017ab4:	bf38      	it	cc
 8017ab6:	461d      	movcc	r5, r3
 8017ab8:	0553      	lsls	r3, r2, #21
 8017aba:	d530      	bpl.n	8017b1e <__ssputs_r+0x9e>
 8017abc:	4629      	mov	r1, r5
 8017abe:	f7ff ff53 	bl	8017968 <_malloc_r>
 8017ac2:	4606      	mov	r6, r0
 8017ac4:	b950      	cbnz	r0, 8017adc <__ssputs_r+0x5c>
 8017ac6:	230c      	movs	r3, #12
 8017ac8:	f8ca 3000 	str.w	r3, [sl]
 8017acc:	89a3      	ldrh	r3, [r4, #12]
 8017ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ad2:	81a3      	strh	r3, [r4, #12]
 8017ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017adc:	463a      	mov	r2, r7
 8017ade:	6921      	ldr	r1, [r4, #16]
 8017ae0:	f7ff fee0 	bl	80178a4 <memcpy>
 8017ae4:	89a3      	ldrh	r3, [r4, #12]
 8017ae6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017aee:	81a3      	strh	r3, [r4, #12]
 8017af0:	6126      	str	r6, [r4, #16]
 8017af2:	6165      	str	r5, [r4, #20]
 8017af4:	443e      	add	r6, r7
 8017af6:	1bed      	subs	r5, r5, r7
 8017af8:	6026      	str	r6, [r4, #0]
 8017afa:	60a5      	str	r5, [r4, #8]
 8017afc:	464e      	mov	r6, r9
 8017afe:	454e      	cmp	r6, r9
 8017b00:	d900      	bls.n	8017b04 <__ssputs_r+0x84>
 8017b02:	464e      	mov	r6, r9
 8017b04:	4632      	mov	r2, r6
 8017b06:	4641      	mov	r1, r8
 8017b08:	6820      	ldr	r0, [r4, #0]
 8017b0a:	f000 fa93 	bl	8018034 <memmove>
 8017b0e:	68a3      	ldr	r3, [r4, #8]
 8017b10:	1b9b      	subs	r3, r3, r6
 8017b12:	60a3      	str	r3, [r4, #8]
 8017b14:	6823      	ldr	r3, [r4, #0]
 8017b16:	441e      	add	r6, r3
 8017b18:	6026      	str	r6, [r4, #0]
 8017b1a:	2000      	movs	r0, #0
 8017b1c:	e7dc      	b.n	8017ad8 <__ssputs_r+0x58>
 8017b1e:	462a      	mov	r2, r5
 8017b20:	f000 faa1 	bl	8018066 <_realloc_r>
 8017b24:	4606      	mov	r6, r0
 8017b26:	2800      	cmp	r0, #0
 8017b28:	d1e2      	bne.n	8017af0 <__ssputs_r+0x70>
 8017b2a:	6921      	ldr	r1, [r4, #16]
 8017b2c:	4650      	mov	r0, sl
 8017b2e:	f7ff fecd 	bl	80178cc <_free_r>
 8017b32:	e7c8      	b.n	8017ac6 <__ssputs_r+0x46>

08017b34 <_svfiprintf_r>:
 8017b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b38:	461d      	mov	r5, r3
 8017b3a:	898b      	ldrh	r3, [r1, #12]
 8017b3c:	061f      	lsls	r7, r3, #24
 8017b3e:	b09d      	sub	sp, #116	; 0x74
 8017b40:	4680      	mov	r8, r0
 8017b42:	460c      	mov	r4, r1
 8017b44:	4616      	mov	r6, r2
 8017b46:	d50f      	bpl.n	8017b68 <_svfiprintf_r+0x34>
 8017b48:	690b      	ldr	r3, [r1, #16]
 8017b4a:	b96b      	cbnz	r3, 8017b68 <_svfiprintf_r+0x34>
 8017b4c:	2140      	movs	r1, #64	; 0x40
 8017b4e:	f7ff ff0b 	bl	8017968 <_malloc_r>
 8017b52:	6020      	str	r0, [r4, #0]
 8017b54:	6120      	str	r0, [r4, #16]
 8017b56:	b928      	cbnz	r0, 8017b64 <_svfiprintf_r+0x30>
 8017b58:	230c      	movs	r3, #12
 8017b5a:	f8c8 3000 	str.w	r3, [r8]
 8017b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8017b62:	e0c8      	b.n	8017cf6 <_svfiprintf_r+0x1c2>
 8017b64:	2340      	movs	r3, #64	; 0x40
 8017b66:	6163      	str	r3, [r4, #20]
 8017b68:	2300      	movs	r3, #0
 8017b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8017b6c:	2320      	movs	r3, #32
 8017b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b72:	2330      	movs	r3, #48	; 0x30
 8017b74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b78:	9503      	str	r5, [sp, #12]
 8017b7a:	f04f 0b01 	mov.w	fp, #1
 8017b7e:	4637      	mov	r7, r6
 8017b80:	463d      	mov	r5, r7
 8017b82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017b86:	b10b      	cbz	r3, 8017b8c <_svfiprintf_r+0x58>
 8017b88:	2b25      	cmp	r3, #37	; 0x25
 8017b8a:	d13e      	bne.n	8017c0a <_svfiprintf_r+0xd6>
 8017b8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8017b90:	d00b      	beq.n	8017baa <_svfiprintf_r+0x76>
 8017b92:	4653      	mov	r3, sl
 8017b94:	4632      	mov	r2, r6
 8017b96:	4621      	mov	r1, r4
 8017b98:	4640      	mov	r0, r8
 8017b9a:	f7ff ff71 	bl	8017a80 <__ssputs_r>
 8017b9e:	3001      	adds	r0, #1
 8017ba0:	f000 80a4 	beq.w	8017cec <_svfiprintf_r+0x1b8>
 8017ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ba6:	4453      	add	r3, sl
 8017ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8017baa:	783b      	ldrb	r3, [r7, #0]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	f000 809d 	beq.w	8017cec <_svfiprintf_r+0x1b8>
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8017bb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bbc:	9304      	str	r3, [sp, #16]
 8017bbe:	9307      	str	r3, [sp, #28]
 8017bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8017bc6:	462f      	mov	r7, r5
 8017bc8:	2205      	movs	r2, #5
 8017bca:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017bce:	4850      	ldr	r0, [pc, #320]	; (8017d10 <_svfiprintf_r+0x1dc>)
 8017bd0:	f7e8 fb1e 	bl	8000210 <memchr>
 8017bd4:	9b04      	ldr	r3, [sp, #16]
 8017bd6:	b9d0      	cbnz	r0, 8017c0e <_svfiprintf_r+0xda>
 8017bd8:	06d9      	lsls	r1, r3, #27
 8017bda:	bf44      	itt	mi
 8017bdc:	2220      	movmi	r2, #32
 8017bde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017be2:	071a      	lsls	r2, r3, #28
 8017be4:	bf44      	itt	mi
 8017be6:	222b      	movmi	r2, #43	; 0x2b
 8017be8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017bec:	782a      	ldrb	r2, [r5, #0]
 8017bee:	2a2a      	cmp	r2, #42	; 0x2a
 8017bf0:	d015      	beq.n	8017c1e <_svfiprintf_r+0xea>
 8017bf2:	9a07      	ldr	r2, [sp, #28]
 8017bf4:	462f      	mov	r7, r5
 8017bf6:	2000      	movs	r0, #0
 8017bf8:	250a      	movs	r5, #10
 8017bfa:	4639      	mov	r1, r7
 8017bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c00:	3b30      	subs	r3, #48	; 0x30
 8017c02:	2b09      	cmp	r3, #9
 8017c04:	d94d      	bls.n	8017ca2 <_svfiprintf_r+0x16e>
 8017c06:	b1b8      	cbz	r0, 8017c38 <_svfiprintf_r+0x104>
 8017c08:	e00f      	b.n	8017c2a <_svfiprintf_r+0xf6>
 8017c0a:	462f      	mov	r7, r5
 8017c0c:	e7b8      	b.n	8017b80 <_svfiprintf_r+0x4c>
 8017c0e:	4a40      	ldr	r2, [pc, #256]	; (8017d10 <_svfiprintf_r+0x1dc>)
 8017c10:	1a80      	subs	r0, r0, r2
 8017c12:	fa0b f000 	lsl.w	r0, fp, r0
 8017c16:	4318      	orrs	r0, r3
 8017c18:	9004      	str	r0, [sp, #16]
 8017c1a:	463d      	mov	r5, r7
 8017c1c:	e7d3      	b.n	8017bc6 <_svfiprintf_r+0x92>
 8017c1e:	9a03      	ldr	r2, [sp, #12]
 8017c20:	1d11      	adds	r1, r2, #4
 8017c22:	6812      	ldr	r2, [r2, #0]
 8017c24:	9103      	str	r1, [sp, #12]
 8017c26:	2a00      	cmp	r2, #0
 8017c28:	db01      	blt.n	8017c2e <_svfiprintf_r+0xfa>
 8017c2a:	9207      	str	r2, [sp, #28]
 8017c2c:	e004      	b.n	8017c38 <_svfiprintf_r+0x104>
 8017c2e:	4252      	negs	r2, r2
 8017c30:	f043 0302 	orr.w	r3, r3, #2
 8017c34:	9207      	str	r2, [sp, #28]
 8017c36:	9304      	str	r3, [sp, #16]
 8017c38:	783b      	ldrb	r3, [r7, #0]
 8017c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8017c3c:	d10c      	bne.n	8017c58 <_svfiprintf_r+0x124>
 8017c3e:	787b      	ldrb	r3, [r7, #1]
 8017c40:	2b2a      	cmp	r3, #42	; 0x2a
 8017c42:	d133      	bne.n	8017cac <_svfiprintf_r+0x178>
 8017c44:	9b03      	ldr	r3, [sp, #12]
 8017c46:	1d1a      	adds	r2, r3, #4
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	9203      	str	r2, [sp, #12]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	bfb8      	it	lt
 8017c50:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c54:	3702      	adds	r7, #2
 8017c56:	9305      	str	r3, [sp, #20]
 8017c58:	4d2e      	ldr	r5, [pc, #184]	; (8017d14 <_svfiprintf_r+0x1e0>)
 8017c5a:	7839      	ldrb	r1, [r7, #0]
 8017c5c:	2203      	movs	r2, #3
 8017c5e:	4628      	mov	r0, r5
 8017c60:	f7e8 fad6 	bl	8000210 <memchr>
 8017c64:	b138      	cbz	r0, 8017c76 <_svfiprintf_r+0x142>
 8017c66:	2340      	movs	r3, #64	; 0x40
 8017c68:	1b40      	subs	r0, r0, r5
 8017c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8017c6e:	9b04      	ldr	r3, [sp, #16]
 8017c70:	4303      	orrs	r3, r0
 8017c72:	3701      	adds	r7, #1
 8017c74:	9304      	str	r3, [sp, #16]
 8017c76:	7839      	ldrb	r1, [r7, #0]
 8017c78:	4827      	ldr	r0, [pc, #156]	; (8017d18 <_svfiprintf_r+0x1e4>)
 8017c7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c7e:	2206      	movs	r2, #6
 8017c80:	1c7e      	adds	r6, r7, #1
 8017c82:	f7e8 fac5 	bl	8000210 <memchr>
 8017c86:	2800      	cmp	r0, #0
 8017c88:	d038      	beq.n	8017cfc <_svfiprintf_r+0x1c8>
 8017c8a:	4b24      	ldr	r3, [pc, #144]	; (8017d1c <_svfiprintf_r+0x1e8>)
 8017c8c:	bb13      	cbnz	r3, 8017cd4 <_svfiprintf_r+0x1a0>
 8017c8e:	9b03      	ldr	r3, [sp, #12]
 8017c90:	3307      	adds	r3, #7
 8017c92:	f023 0307 	bic.w	r3, r3, #7
 8017c96:	3308      	adds	r3, #8
 8017c98:	9303      	str	r3, [sp, #12]
 8017c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c9c:	444b      	add	r3, r9
 8017c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8017ca0:	e76d      	b.n	8017b7e <_svfiprintf_r+0x4a>
 8017ca2:	fb05 3202 	mla	r2, r5, r2, r3
 8017ca6:	2001      	movs	r0, #1
 8017ca8:	460f      	mov	r7, r1
 8017caa:	e7a6      	b.n	8017bfa <_svfiprintf_r+0xc6>
 8017cac:	2300      	movs	r3, #0
 8017cae:	3701      	adds	r7, #1
 8017cb0:	9305      	str	r3, [sp, #20]
 8017cb2:	4619      	mov	r1, r3
 8017cb4:	250a      	movs	r5, #10
 8017cb6:	4638      	mov	r0, r7
 8017cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cbc:	3a30      	subs	r2, #48	; 0x30
 8017cbe:	2a09      	cmp	r2, #9
 8017cc0:	d903      	bls.n	8017cca <_svfiprintf_r+0x196>
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d0c8      	beq.n	8017c58 <_svfiprintf_r+0x124>
 8017cc6:	9105      	str	r1, [sp, #20]
 8017cc8:	e7c6      	b.n	8017c58 <_svfiprintf_r+0x124>
 8017cca:	fb05 2101 	mla	r1, r5, r1, r2
 8017cce:	2301      	movs	r3, #1
 8017cd0:	4607      	mov	r7, r0
 8017cd2:	e7f0      	b.n	8017cb6 <_svfiprintf_r+0x182>
 8017cd4:	ab03      	add	r3, sp, #12
 8017cd6:	9300      	str	r3, [sp, #0]
 8017cd8:	4622      	mov	r2, r4
 8017cda:	4b11      	ldr	r3, [pc, #68]	; (8017d20 <_svfiprintf_r+0x1ec>)
 8017cdc:	a904      	add	r1, sp, #16
 8017cde:	4640      	mov	r0, r8
 8017ce0:	f3af 8000 	nop.w
 8017ce4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017ce8:	4681      	mov	r9, r0
 8017cea:	d1d6      	bne.n	8017c9a <_svfiprintf_r+0x166>
 8017cec:	89a3      	ldrh	r3, [r4, #12]
 8017cee:	065b      	lsls	r3, r3, #25
 8017cf0:	f53f af35 	bmi.w	8017b5e <_svfiprintf_r+0x2a>
 8017cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017cf6:	b01d      	add	sp, #116	; 0x74
 8017cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cfc:	ab03      	add	r3, sp, #12
 8017cfe:	9300      	str	r3, [sp, #0]
 8017d00:	4622      	mov	r2, r4
 8017d02:	4b07      	ldr	r3, [pc, #28]	; (8017d20 <_svfiprintf_r+0x1ec>)
 8017d04:	a904      	add	r1, sp, #16
 8017d06:	4640      	mov	r0, r8
 8017d08:	f000 f882 	bl	8017e10 <_printf_i>
 8017d0c:	e7ea      	b.n	8017ce4 <_svfiprintf_r+0x1b0>
 8017d0e:	bf00      	nop
 8017d10:	0801a1ec 	.word	0x0801a1ec
 8017d14:	0801a1f2 	.word	0x0801a1f2
 8017d18:	0801a1f6 	.word	0x0801a1f6
 8017d1c:	00000000 	.word	0x00000000
 8017d20:	08017a81 	.word	0x08017a81

08017d24 <_printf_common>:
 8017d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d28:	4691      	mov	r9, r2
 8017d2a:	461f      	mov	r7, r3
 8017d2c:	688a      	ldr	r2, [r1, #8]
 8017d2e:	690b      	ldr	r3, [r1, #16]
 8017d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017d34:	4293      	cmp	r3, r2
 8017d36:	bfb8      	it	lt
 8017d38:	4613      	movlt	r3, r2
 8017d3a:	f8c9 3000 	str.w	r3, [r9]
 8017d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017d42:	4606      	mov	r6, r0
 8017d44:	460c      	mov	r4, r1
 8017d46:	b112      	cbz	r2, 8017d4e <_printf_common+0x2a>
 8017d48:	3301      	adds	r3, #1
 8017d4a:	f8c9 3000 	str.w	r3, [r9]
 8017d4e:	6823      	ldr	r3, [r4, #0]
 8017d50:	0699      	lsls	r1, r3, #26
 8017d52:	bf42      	ittt	mi
 8017d54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017d58:	3302      	addmi	r3, #2
 8017d5a:	f8c9 3000 	strmi.w	r3, [r9]
 8017d5e:	6825      	ldr	r5, [r4, #0]
 8017d60:	f015 0506 	ands.w	r5, r5, #6
 8017d64:	d107      	bne.n	8017d76 <_printf_common+0x52>
 8017d66:	f104 0a19 	add.w	sl, r4, #25
 8017d6a:	68e3      	ldr	r3, [r4, #12]
 8017d6c:	f8d9 2000 	ldr.w	r2, [r9]
 8017d70:	1a9b      	subs	r3, r3, r2
 8017d72:	42ab      	cmp	r3, r5
 8017d74:	dc28      	bgt.n	8017dc8 <_printf_common+0xa4>
 8017d76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017d7a:	6822      	ldr	r2, [r4, #0]
 8017d7c:	3300      	adds	r3, #0
 8017d7e:	bf18      	it	ne
 8017d80:	2301      	movne	r3, #1
 8017d82:	0692      	lsls	r2, r2, #26
 8017d84:	d42d      	bmi.n	8017de2 <_printf_common+0xbe>
 8017d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017d8a:	4639      	mov	r1, r7
 8017d8c:	4630      	mov	r0, r6
 8017d8e:	47c0      	blx	r8
 8017d90:	3001      	adds	r0, #1
 8017d92:	d020      	beq.n	8017dd6 <_printf_common+0xb2>
 8017d94:	6823      	ldr	r3, [r4, #0]
 8017d96:	68e5      	ldr	r5, [r4, #12]
 8017d98:	f8d9 2000 	ldr.w	r2, [r9]
 8017d9c:	f003 0306 	and.w	r3, r3, #6
 8017da0:	2b04      	cmp	r3, #4
 8017da2:	bf08      	it	eq
 8017da4:	1aad      	subeq	r5, r5, r2
 8017da6:	68a3      	ldr	r3, [r4, #8]
 8017da8:	6922      	ldr	r2, [r4, #16]
 8017daa:	bf0c      	ite	eq
 8017dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017db0:	2500      	movne	r5, #0
 8017db2:	4293      	cmp	r3, r2
 8017db4:	bfc4      	itt	gt
 8017db6:	1a9b      	subgt	r3, r3, r2
 8017db8:	18ed      	addgt	r5, r5, r3
 8017dba:	f04f 0900 	mov.w	r9, #0
 8017dbe:	341a      	adds	r4, #26
 8017dc0:	454d      	cmp	r5, r9
 8017dc2:	d11a      	bne.n	8017dfa <_printf_common+0xd6>
 8017dc4:	2000      	movs	r0, #0
 8017dc6:	e008      	b.n	8017dda <_printf_common+0xb6>
 8017dc8:	2301      	movs	r3, #1
 8017dca:	4652      	mov	r2, sl
 8017dcc:	4639      	mov	r1, r7
 8017dce:	4630      	mov	r0, r6
 8017dd0:	47c0      	blx	r8
 8017dd2:	3001      	adds	r0, #1
 8017dd4:	d103      	bne.n	8017dde <_printf_common+0xba>
 8017dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8017dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dde:	3501      	adds	r5, #1
 8017de0:	e7c3      	b.n	8017d6a <_printf_common+0x46>
 8017de2:	18e1      	adds	r1, r4, r3
 8017de4:	1c5a      	adds	r2, r3, #1
 8017de6:	2030      	movs	r0, #48	; 0x30
 8017de8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017dec:	4422      	add	r2, r4
 8017dee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017df2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017df6:	3302      	adds	r3, #2
 8017df8:	e7c5      	b.n	8017d86 <_printf_common+0x62>
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	4622      	mov	r2, r4
 8017dfe:	4639      	mov	r1, r7
 8017e00:	4630      	mov	r0, r6
 8017e02:	47c0      	blx	r8
 8017e04:	3001      	adds	r0, #1
 8017e06:	d0e6      	beq.n	8017dd6 <_printf_common+0xb2>
 8017e08:	f109 0901 	add.w	r9, r9, #1
 8017e0c:	e7d8      	b.n	8017dc0 <_printf_common+0x9c>
	...

08017e10 <_printf_i>:
 8017e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017e18:	460c      	mov	r4, r1
 8017e1a:	7e09      	ldrb	r1, [r1, #24]
 8017e1c:	b085      	sub	sp, #20
 8017e1e:	296e      	cmp	r1, #110	; 0x6e
 8017e20:	4617      	mov	r7, r2
 8017e22:	4606      	mov	r6, r0
 8017e24:	4698      	mov	r8, r3
 8017e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017e28:	f000 80b3 	beq.w	8017f92 <_printf_i+0x182>
 8017e2c:	d822      	bhi.n	8017e74 <_printf_i+0x64>
 8017e2e:	2963      	cmp	r1, #99	; 0x63
 8017e30:	d036      	beq.n	8017ea0 <_printf_i+0x90>
 8017e32:	d80a      	bhi.n	8017e4a <_printf_i+0x3a>
 8017e34:	2900      	cmp	r1, #0
 8017e36:	f000 80b9 	beq.w	8017fac <_printf_i+0x19c>
 8017e3a:	2958      	cmp	r1, #88	; 0x58
 8017e3c:	f000 8083 	beq.w	8017f46 <_printf_i+0x136>
 8017e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017e44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017e48:	e032      	b.n	8017eb0 <_printf_i+0xa0>
 8017e4a:	2964      	cmp	r1, #100	; 0x64
 8017e4c:	d001      	beq.n	8017e52 <_printf_i+0x42>
 8017e4e:	2969      	cmp	r1, #105	; 0x69
 8017e50:	d1f6      	bne.n	8017e40 <_printf_i+0x30>
 8017e52:	6820      	ldr	r0, [r4, #0]
 8017e54:	6813      	ldr	r3, [r2, #0]
 8017e56:	0605      	lsls	r5, r0, #24
 8017e58:	f103 0104 	add.w	r1, r3, #4
 8017e5c:	d52a      	bpl.n	8017eb4 <_printf_i+0xa4>
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	6011      	str	r1, [r2, #0]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	da03      	bge.n	8017e6e <_printf_i+0x5e>
 8017e66:	222d      	movs	r2, #45	; 0x2d
 8017e68:	425b      	negs	r3, r3
 8017e6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017e6e:	486f      	ldr	r0, [pc, #444]	; (801802c <_printf_i+0x21c>)
 8017e70:	220a      	movs	r2, #10
 8017e72:	e039      	b.n	8017ee8 <_printf_i+0xd8>
 8017e74:	2973      	cmp	r1, #115	; 0x73
 8017e76:	f000 809d 	beq.w	8017fb4 <_printf_i+0x1a4>
 8017e7a:	d808      	bhi.n	8017e8e <_printf_i+0x7e>
 8017e7c:	296f      	cmp	r1, #111	; 0x6f
 8017e7e:	d020      	beq.n	8017ec2 <_printf_i+0xb2>
 8017e80:	2970      	cmp	r1, #112	; 0x70
 8017e82:	d1dd      	bne.n	8017e40 <_printf_i+0x30>
 8017e84:	6823      	ldr	r3, [r4, #0]
 8017e86:	f043 0320 	orr.w	r3, r3, #32
 8017e8a:	6023      	str	r3, [r4, #0]
 8017e8c:	e003      	b.n	8017e96 <_printf_i+0x86>
 8017e8e:	2975      	cmp	r1, #117	; 0x75
 8017e90:	d017      	beq.n	8017ec2 <_printf_i+0xb2>
 8017e92:	2978      	cmp	r1, #120	; 0x78
 8017e94:	d1d4      	bne.n	8017e40 <_printf_i+0x30>
 8017e96:	2378      	movs	r3, #120	; 0x78
 8017e98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017e9c:	4864      	ldr	r0, [pc, #400]	; (8018030 <_printf_i+0x220>)
 8017e9e:	e055      	b.n	8017f4c <_printf_i+0x13c>
 8017ea0:	6813      	ldr	r3, [r2, #0]
 8017ea2:	1d19      	adds	r1, r3, #4
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	6011      	str	r1, [r2, #0]
 8017ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017eb0:	2301      	movs	r3, #1
 8017eb2:	e08c      	b.n	8017fce <_printf_i+0x1be>
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	6011      	str	r1, [r2, #0]
 8017eb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017ebc:	bf18      	it	ne
 8017ebe:	b21b      	sxthne	r3, r3
 8017ec0:	e7cf      	b.n	8017e62 <_printf_i+0x52>
 8017ec2:	6813      	ldr	r3, [r2, #0]
 8017ec4:	6825      	ldr	r5, [r4, #0]
 8017ec6:	1d18      	adds	r0, r3, #4
 8017ec8:	6010      	str	r0, [r2, #0]
 8017eca:	0628      	lsls	r0, r5, #24
 8017ecc:	d501      	bpl.n	8017ed2 <_printf_i+0xc2>
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	e002      	b.n	8017ed8 <_printf_i+0xc8>
 8017ed2:	0668      	lsls	r0, r5, #25
 8017ed4:	d5fb      	bpl.n	8017ece <_printf_i+0xbe>
 8017ed6:	881b      	ldrh	r3, [r3, #0]
 8017ed8:	4854      	ldr	r0, [pc, #336]	; (801802c <_printf_i+0x21c>)
 8017eda:	296f      	cmp	r1, #111	; 0x6f
 8017edc:	bf14      	ite	ne
 8017ede:	220a      	movne	r2, #10
 8017ee0:	2208      	moveq	r2, #8
 8017ee2:	2100      	movs	r1, #0
 8017ee4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017ee8:	6865      	ldr	r5, [r4, #4]
 8017eea:	60a5      	str	r5, [r4, #8]
 8017eec:	2d00      	cmp	r5, #0
 8017eee:	f2c0 8095 	blt.w	801801c <_printf_i+0x20c>
 8017ef2:	6821      	ldr	r1, [r4, #0]
 8017ef4:	f021 0104 	bic.w	r1, r1, #4
 8017ef8:	6021      	str	r1, [r4, #0]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d13d      	bne.n	8017f7a <_printf_i+0x16a>
 8017efe:	2d00      	cmp	r5, #0
 8017f00:	f040 808e 	bne.w	8018020 <_printf_i+0x210>
 8017f04:	4665      	mov	r5, ip
 8017f06:	2a08      	cmp	r2, #8
 8017f08:	d10b      	bne.n	8017f22 <_printf_i+0x112>
 8017f0a:	6823      	ldr	r3, [r4, #0]
 8017f0c:	07db      	lsls	r3, r3, #31
 8017f0e:	d508      	bpl.n	8017f22 <_printf_i+0x112>
 8017f10:	6923      	ldr	r3, [r4, #16]
 8017f12:	6862      	ldr	r2, [r4, #4]
 8017f14:	429a      	cmp	r2, r3
 8017f16:	bfde      	ittt	le
 8017f18:	2330      	movle	r3, #48	; 0x30
 8017f1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017f1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017f22:	ebac 0305 	sub.w	r3, ip, r5
 8017f26:	6123      	str	r3, [r4, #16]
 8017f28:	f8cd 8000 	str.w	r8, [sp]
 8017f2c:	463b      	mov	r3, r7
 8017f2e:	aa03      	add	r2, sp, #12
 8017f30:	4621      	mov	r1, r4
 8017f32:	4630      	mov	r0, r6
 8017f34:	f7ff fef6 	bl	8017d24 <_printf_common>
 8017f38:	3001      	adds	r0, #1
 8017f3a:	d14d      	bne.n	8017fd8 <_printf_i+0x1c8>
 8017f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8017f40:	b005      	add	sp, #20
 8017f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f46:	4839      	ldr	r0, [pc, #228]	; (801802c <_printf_i+0x21c>)
 8017f48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017f4c:	6813      	ldr	r3, [r2, #0]
 8017f4e:	6821      	ldr	r1, [r4, #0]
 8017f50:	1d1d      	adds	r5, r3, #4
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	6015      	str	r5, [r2, #0]
 8017f56:	060a      	lsls	r2, r1, #24
 8017f58:	d50b      	bpl.n	8017f72 <_printf_i+0x162>
 8017f5a:	07ca      	lsls	r2, r1, #31
 8017f5c:	bf44      	itt	mi
 8017f5e:	f041 0120 	orrmi.w	r1, r1, #32
 8017f62:	6021      	strmi	r1, [r4, #0]
 8017f64:	b91b      	cbnz	r3, 8017f6e <_printf_i+0x15e>
 8017f66:	6822      	ldr	r2, [r4, #0]
 8017f68:	f022 0220 	bic.w	r2, r2, #32
 8017f6c:	6022      	str	r2, [r4, #0]
 8017f6e:	2210      	movs	r2, #16
 8017f70:	e7b7      	b.n	8017ee2 <_printf_i+0xd2>
 8017f72:	064d      	lsls	r5, r1, #25
 8017f74:	bf48      	it	mi
 8017f76:	b29b      	uxthmi	r3, r3
 8017f78:	e7ef      	b.n	8017f5a <_printf_i+0x14a>
 8017f7a:	4665      	mov	r5, ip
 8017f7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8017f80:	fb02 3311 	mls	r3, r2, r1, r3
 8017f84:	5cc3      	ldrb	r3, [r0, r3]
 8017f86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017f8a:	460b      	mov	r3, r1
 8017f8c:	2900      	cmp	r1, #0
 8017f8e:	d1f5      	bne.n	8017f7c <_printf_i+0x16c>
 8017f90:	e7b9      	b.n	8017f06 <_printf_i+0xf6>
 8017f92:	6813      	ldr	r3, [r2, #0]
 8017f94:	6825      	ldr	r5, [r4, #0]
 8017f96:	6961      	ldr	r1, [r4, #20]
 8017f98:	1d18      	adds	r0, r3, #4
 8017f9a:	6010      	str	r0, [r2, #0]
 8017f9c:	0628      	lsls	r0, r5, #24
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	d501      	bpl.n	8017fa6 <_printf_i+0x196>
 8017fa2:	6019      	str	r1, [r3, #0]
 8017fa4:	e002      	b.n	8017fac <_printf_i+0x19c>
 8017fa6:	066a      	lsls	r2, r5, #25
 8017fa8:	d5fb      	bpl.n	8017fa2 <_printf_i+0x192>
 8017faa:	8019      	strh	r1, [r3, #0]
 8017fac:	2300      	movs	r3, #0
 8017fae:	6123      	str	r3, [r4, #16]
 8017fb0:	4665      	mov	r5, ip
 8017fb2:	e7b9      	b.n	8017f28 <_printf_i+0x118>
 8017fb4:	6813      	ldr	r3, [r2, #0]
 8017fb6:	1d19      	adds	r1, r3, #4
 8017fb8:	6011      	str	r1, [r2, #0]
 8017fba:	681d      	ldr	r5, [r3, #0]
 8017fbc:	6862      	ldr	r2, [r4, #4]
 8017fbe:	2100      	movs	r1, #0
 8017fc0:	4628      	mov	r0, r5
 8017fc2:	f7e8 f925 	bl	8000210 <memchr>
 8017fc6:	b108      	cbz	r0, 8017fcc <_printf_i+0x1bc>
 8017fc8:	1b40      	subs	r0, r0, r5
 8017fca:	6060      	str	r0, [r4, #4]
 8017fcc:	6863      	ldr	r3, [r4, #4]
 8017fce:	6123      	str	r3, [r4, #16]
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017fd6:	e7a7      	b.n	8017f28 <_printf_i+0x118>
 8017fd8:	6923      	ldr	r3, [r4, #16]
 8017fda:	462a      	mov	r2, r5
 8017fdc:	4639      	mov	r1, r7
 8017fde:	4630      	mov	r0, r6
 8017fe0:	47c0      	blx	r8
 8017fe2:	3001      	adds	r0, #1
 8017fe4:	d0aa      	beq.n	8017f3c <_printf_i+0x12c>
 8017fe6:	6823      	ldr	r3, [r4, #0]
 8017fe8:	079b      	lsls	r3, r3, #30
 8017fea:	d413      	bmi.n	8018014 <_printf_i+0x204>
 8017fec:	68e0      	ldr	r0, [r4, #12]
 8017fee:	9b03      	ldr	r3, [sp, #12]
 8017ff0:	4298      	cmp	r0, r3
 8017ff2:	bfb8      	it	lt
 8017ff4:	4618      	movlt	r0, r3
 8017ff6:	e7a3      	b.n	8017f40 <_printf_i+0x130>
 8017ff8:	2301      	movs	r3, #1
 8017ffa:	464a      	mov	r2, r9
 8017ffc:	4639      	mov	r1, r7
 8017ffe:	4630      	mov	r0, r6
 8018000:	47c0      	blx	r8
 8018002:	3001      	adds	r0, #1
 8018004:	d09a      	beq.n	8017f3c <_printf_i+0x12c>
 8018006:	3501      	adds	r5, #1
 8018008:	68e3      	ldr	r3, [r4, #12]
 801800a:	9a03      	ldr	r2, [sp, #12]
 801800c:	1a9b      	subs	r3, r3, r2
 801800e:	42ab      	cmp	r3, r5
 8018010:	dcf2      	bgt.n	8017ff8 <_printf_i+0x1e8>
 8018012:	e7eb      	b.n	8017fec <_printf_i+0x1dc>
 8018014:	2500      	movs	r5, #0
 8018016:	f104 0919 	add.w	r9, r4, #25
 801801a:	e7f5      	b.n	8018008 <_printf_i+0x1f8>
 801801c:	2b00      	cmp	r3, #0
 801801e:	d1ac      	bne.n	8017f7a <_printf_i+0x16a>
 8018020:	7803      	ldrb	r3, [r0, #0]
 8018022:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018026:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801802a:	e76c      	b.n	8017f06 <_printf_i+0xf6>
 801802c:	0801a1fd 	.word	0x0801a1fd
 8018030:	0801a20e 	.word	0x0801a20e

08018034 <memmove>:
 8018034:	4288      	cmp	r0, r1
 8018036:	b510      	push	{r4, lr}
 8018038:	eb01 0302 	add.w	r3, r1, r2
 801803c:	d807      	bhi.n	801804e <memmove+0x1a>
 801803e:	1e42      	subs	r2, r0, #1
 8018040:	4299      	cmp	r1, r3
 8018042:	d00a      	beq.n	801805a <memmove+0x26>
 8018044:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018048:	f802 4f01 	strb.w	r4, [r2, #1]!
 801804c:	e7f8      	b.n	8018040 <memmove+0xc>
 801804e:	4283      	cmp	r3, r0
 8018050:	d9f5      	bls.n	801803e <memmove+0xa>
 8018052:	1881      	adds	r1, r0, r2
 8018054:	1ad2      	subs	r2, r2, r3
 8018056:	42d3      	cmn	r3, r2
 8018058:	d100      	bne.n	801805c <memmove+0x28>
 801805a:	bd10      	pop	{r4, pc}
 801805c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018060:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018064:	e7f7      	b.n	8018056 <memmove+0x22>

08018066 <_realloc_r>:
 8018066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018068:	4607      	mov	r7, r0
 801806a:	4614      	mov	r4, r2
 801806c:	460e      	mov	r6, r1
 801806e:	b921      	cbnz	r1, 801807a <_realloc_r+0x14>
 8018070:	4611      	mov	r1, r2
 8018072:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018076:	f7ff bc77 	b.w	8017968 <_malloc_r>
 801807a:	b922      	cbnz	r2, 8018086 <_realloc_r+0x20>
 801807c:	f7ff fc26 	bl	80178cc <_free_r>
 8018080:	4625      	mov	r5, r4
 8018082:	4628      	mov	r0, r5
 8018084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018086:	f000 f814 	bl	80180b2 <_malloc_usable_size_r>
 801808a:	42a0      	cmp	r0, r4
 801808c:	d20f      	bcs.n	80180ae <_realloc_r+0x48>
 801808e:	4621      	mov	r1, r4
 8018090:	4638      	mov	r0, r7
 8018092:	f7ff fc69 	bl	8017968 <_malloc_r>
 8018096:	4605      	mov	r5, r0
 8018098:	2800      	cmp	r0, #0
 801809a:	d0f2      	beq.n	8018082 <_realloc_r+0x1c>
 801809c:	4631      	mov	r1, r6
 801809e:	4622      	mov	r2, r4
 80180a0:	f7ff fc00 	bl	80178a4 <memcpy>
 80180a4:	4631      	mov	r1, r6
 80180a6:	4638      	mov	r0, r7
 80180a8:	f7ff fc10 	bl	80178cc <_free_r>
 80180ac:	e7e9      	b.n	8018082 <_realloc_r+0x1c>
 80180ae:	4635      	mov	r5, r6
 80180b0:	e7e7      	b.n	8018082 <_realloc_r+0x1c>

080180b2 <_malloc_usable_size_r>:
 80180b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180b6:	1f18      	subs	r0, r3, #4
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	bfbc      	itt	lt
 80180bc:	580b      	ldrlt	r3, [r1, r0]
 80180be:	18c0      	addlt	r0, r0, r3
 80180c0:	4770      	bx	lr
	...

080180c4 <log10f>:
 80180c4:	b510      	push	{r4, lr}
 80180c6:	ed2d 8b02 	vpush	{d8}
 80180ca:	b08a      	sub	sp, #40	; 0x28
 80180cc:	eeb0 8a40 	vmov.f32	s16, s0
 80180d0:	f000 f86e 	bl	80181b0 <__ieee754_log10f>
 80180d4:	4b31      	ldr	r3, [pc, #196]	; (801819c <log10f+0xd8>)
 80180d6:	f993 4000 	ldrsb.w	r4, [r3]
 80180da:	1c63      	adds	r3, r4, #1
 80180dc:	d059      	beq.n	8018192 <log10f+0xce>
 80180de:	eeb4 8a48 	vcmp.f32	s16, s16
 80180e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180e6:	d654      	bvs.n	8018192 <log10f+0xce>
 80180e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80180ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180f0:	d84f      	bhi.n	8018192 <log10f+0xce>
 80180f2:	4b2b      	ldr	r3, [pc, #172]	; (80181a0 <log10f+0xdc>)
 80180f4:	9301      	str	r3, [sp, #4]
 80180f6:	ee18 0a10 	vmov	r0, s16
 80180fa:	2300      	movs	r3, #0
 80180fc:	9308      	str	r3, [sp, #32]
 80180fe:	f7e8 fa3b 	bl	8000578 <__aeabi_f2d>
 8018102:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801810a:	b994      	cbnz	r4, 8018132 <log10f+0x6e>
 801810c:	4b25      	ldr	r3, [pc, #148]	; (80181a4 <log10f+0xe0>)
 801810e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018112:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801811a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801811e:	d025      	beq.n	801816c <log10f+0xa8>
 8018120:	2301      	movs	r3, #1
 8018122:	2c02      	cmp	r4, #2
 8018124:	9300      	str	r3, [sp, #0]
 8018126:	d116      	bne.n	8018156 <log10f+0x92>
 8018128:	f7ff fb82 	bl	8017830 <__errno>
 801812c:	2321      	movs	r3, #33	; 0x21
 801812e:	6003      	str	r3, [r0, #0]
 8018130:	e016      	b.n	8018160 <log10f+0x9c>
 8018132:	4b1d      	ldr	r3, [pc, #116]	; (80181a8 <log10f+0xe4>)
 8018134:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018138:	2200      	movs	r2, #0
 801813a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801813e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018142:	d1ed      	bne.n	8018120 <log10f+0x5c>
 8018144:	2302      	movs	r3, #2
 8018146:	429c      	cmp	r4, r3
 8018148:	9300      	str	r3, [sp, #0]
 801814a:	d111      	bne.n	8018170 <log10f+0xac>
 801814c:	f7ff fb70 	bl	8017830 <__errno>
 8018150:	2322      	movs	r3, #34	; 0x22
 8018152:	6003      	str	r3, [r0, #0]
 8018154:	e011      	b.n	801817a <log10f+0xb6>
 8018156:	4668      	mov	r0, sp
 8018158:	f000 f880 	bl	801825c <matherr>
 801815c:	2800      	cmp	r0, #0
 801815e:	d0e3      	beq.n	8018128 <log10f+0x64>
 8018160:	4812      	ldr	r0, [pc, #72]	; (80181ac <log10f+0xe8>)
 8018162:	f000 f87d 	bl	8018260 <nan>
 8018166:	ed8d 0b06 	vstr	d0, [sp, #24]
 801816a:	e006      	b.n	801817a <log10f+0xb6>
 801816c:	2302      	movs	r3, #2
 801816e:	9300      	str	r3, [sp, #0]
 8018170:	4668      	mov	r0, sp
 8018172:	f000 f873 	bl	801825c <matherr>
 8018176:	2800      	cmp	r0, #0
 8018178:	d0e8      	beq.n	801814c <log10f+0x88>
 801817a:	9b08      	ldr	r3, [sp, #32]
 801817c:	b11b      	cbz	r3, 8018186 <log10f+0xc2>
 801817e:	f7ff fb57 	bl	8017830 <__errno>
 8018182:	9b08      	ldr	r3, [sp, #32]
 8018184:	6003      	str	r3, [r0, #0]
 8018186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801818a:	f7e8 fa4d 	bl	8000628 <__aeabi_d2f>
 801818e:	ee00 0a10 	vmov	s0, r0
 8018192:	b00a      	add	sp, #40	; 0x28
 8018194:	ecbd 8b02 	vpop	{d8}
 8018198:	bd10      	pop	{r4, pc}
 801819a:	bf00      	nop
 801819c:	200000fc 	.word	0x200000fc
 80181a0:	0801a21f 	.word	0x0801a21f
 80181a4:	c7efffff 	.word	0xc7efffff
 80181a8:	fff00000 	.word	0xfff00000
 80181ac:	0801a1f1 	.word	0x0801a1f1

080181b0 <__ieee754_log10f>:
 80181b0:	b508      	push	{r3, lr}
 80181b2:	ee10 2a10 	vmov	r2, s0
 80181b6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80181ba:	ed2d 8b02 	vpush	{d8}
 80181be:	d108      	bne.n	80181d2 <__ieee754_log10f+0x22>
 80181c0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8018244 <__ieee754_log10f+0x94>
 80181c4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8018248 <__ieee754_log10f+0x98>
 80181c8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80181cc:	ecbd 8b02 	vpop	{d8}
 80181d0:	bd08      	pop	{r3, pc}
 80181d2:	2a00      	cmp	r2, #0
 80181d4:	da02      	bge.n	80181dc <__ieee754_log10f+0x2c>
 80181d6:	ee30 7a40 	vsub.f32	s14, s0, s0
 80181da:	e7f3      	b.n	80181c4 <__ieee754_log10f+0x14>
 80181dc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80181e0:	db02      	blt.n	80181e8 <__ieee754_log10f+0x38>
 80181e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80181e6:	e7f1      	b.n	80181cc <__ieee754_log10f+0x1c>
 80181e8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80181ec:	bfbf      	itttt	lt
 80181ee:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 801824c <__ieee754_log10f+0x9c>
 80181f2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80181f6:	f06f 0118 	mvnlt.w	r1, #24
 80181fa:	ee17 2a90 	vmovlt	r2, s15
 80181fe:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8018202:	bfa8      	it	ge
 8018204:	2100      	movge	r1, #0
 8018206:	3b7f      	subs	r3, #127	; 0x7f
 8018208:	440b      	add	r3, r1
 801820a:	0fd9      	lsrs	r1, r3, #31
 801820c:	440b      	add	r3, r1
 801820e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8018212:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8018216:	ee07 3a90 	vmov	s15, r3
 801821a:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 801821e:	ee00 3a10 	vmov	s0, r3
 8018222:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018226:	f000 f823 	bl	8018270 <__ieee754_logf>
 801822a:	eddf 7a09 	vldr	s15, [pc, #36]	; 8018250 <__ieee754_log10f+0xa0>
 801822e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018232:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018254 <__ieee754_log10f+0xa4>
 8018236:	eea8 0a27 	vfma.f32	s0, s16, s15
 801823a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8018258 <__ieee754_log10f+0xa8>
 801823e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8018242:	e7c3      	b.n	80181cc <__ieee754_log10f+0x1c>
 8018244:	cc000000 	.word	0xcc000000
 8018248:	00000000 	.word	0x00000000
 801824c:	4c000000 	.word	0x4c000000
 8018250:	3ede5bd9 	.word	0x3ede5bd9
 8018254:	355427db 	.word	0x355427db
 8018258:	3e9a2080 	.word	0x3e9a2080

0801825c <matherr>:
 801825c:	2000      	movs	r0, #0
 801825e:	4770      	bx	lr

08018260 <nan>:
 8018260:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018268 <nan+0x8>
 8018264:	4770      	bx	lr
 8018266:	bf00      	nop
 8018268:	00000000 	.word	0x00000000
 801826c:	7ff80000 	.word	0x7ff80000

08018270 <__ieee754_logf>:
 8018270:	ee10 3a10 	vmov	r3, s0
 8018274:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8018278:	d106      	bne.n	8018288 <__ieee754_logf+0x18>
 801827a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8018410 <__ieee754_logf+0x1a0>
 801827e:	eddf 7a65 	vldr	s15, [pc, #404]	; 8018414 <__ieee754_logf+0x1a4>
 8018282:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8018286:	4770      	bx	lr
 8018288:	2b00      	cmp	r3, #0
 801828a:	da02      	bge.n	8018292 <__ieee754_logf+0x22>
 801828c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018290:	e7f5      	b.n	801827e <__ieee754_logf+0xe>
 8018292:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018296:	db02      	blt.n	801829e <__ieee754_logf+0x2e>
 8018298:	ee30 0a00 	vadd.f32	s0, s0, s0
 801829c:	4770      	bx	lr
 801829e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80182a2:	bfbf      	itttt	lt
 80182a4:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8018418 <__ieee754_logf+0x1a8>
 80182a8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80182ac:	f06f 0118 	mvnlt.w	r1, #24
 80182b0:	ee17 3a90 	vmovlt	r3, s15
 80182b4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80182b8:	bfa8      	it	ge
 80182ba:	2100      	movge	r1, #0
 80182bc:	3a7f      	subs	r2, #127	; 0x7f
 80182be:	440a      	add	r2, r1
 80182c0:	4956      	ldr	r1, [pc, #344]	; (801841c <__ieee754_logf+0x1ac>)
 80182c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80182c6:	4419      	add	r1, r3
 80182c8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80182cc:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 80182d0:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80182d4:	4319      	orrs	r1, r3
 80182d6:	ee07 1a90 	vmov	s15, r1
 80182da:	f103 010f 	add.w	r1, r3, #15
 80182de:	f3c1 0116 	ubfx	r1, r1, #0, #23
 80182e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80182e6:	290f      	cmp	r1, #15
 80182e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80182ec:	dc31      	bgt.n	8018352 <__ieee754_logf+0xe2>
 80182ee:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80182f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182f6:	d10f      	bne.n	8018318 <__ieee754_logf+0xa8>
 80182f8:	2a00      	cmp	r2, #0
 80182fa:	f000 8085 	beq.w	8018408 <__ieee754_logf+0x198>
 80182fe:	ee07 2a90 	vmov	s15, r2
 8018302:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8018420 <__ieee754_logf+0x1b0>
 8018306:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8018424 <__ieee754_logf+0x1b4>
 801830a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801830e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018312:	eea7 0a87 	vfma.f32	s0, s15, s14
 8018316:	4770      	bx	lr
 8018318:	eddf 7a43 	vldr	s15, [pc, #268]	; 8018428 <__ieee754_logf+0x1b8>
 801831c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018320:	eea0 7a67 	vfms.f32	s14, s0, s15
 8018324:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018328:	ee27 7a27 	vmul.f32	s14, s14, s15
 801832c:	b912      	cbnz	r2, 8018334 <__ieee754_logf+0xc4>
 801832e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018332:	4770      	bx	lr
 8018334:	ee07 2a90 	vmov	s15, r2
 8018338:	eddf 6a39 	vldr	s13, [pc, #228]	; 8018420 <__ieee754_logf+0x1b0>
 801833c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018340:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018344:	ee37 0a40 	vsub.f32	s0, s14, s0
 8018348:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8018424 <__ieee754_logf+0x1b4>
 801834c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8018350:	4770      	bx	lr
 8018352:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8018356:	ee70 7a27 	vadd.f32	s15, s0, s15
 801835a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801842c <__ieee754_logf+0x1bc>
 801835e:	eddf 4a34 	vldr	s9, [pc, #208]	; 8018430 <__ieee754_logf+0x1c0>
 8018362:	4934      	ldr	r1, [pc, #208]	; (8018434 <__ieee754_logf+0x1c4>)
 8018364:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8018368:	4419      	add	r1, r3
 801836a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801836e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8018372:	430b      	orrs	r3, r1
 8018374:	2b00      	cmp	r3, #0
 8018376:	ee07 2a90 	vmov	s15, r2
 801837a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801837e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018382:	ee25 7a05 	vmul.f32	s14, s10, s10
 8018386:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8018438 <__ieee754_logf+0x1c8>
 801838a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801838e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 801843c <__ieee754_logf+0x1cc>
 8018392:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018396:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8018440 <__ieee754_logf+0x1d0>
 801839a:	eee7 7a24 	vfma.f32	s15, s14, s9
 801839e:	eddf 4a29 	vldr	s9, [pc, #164]	; 8018444 <__ieee754_logf+0x1d4>
 80183a2:	eee7 4a87 	vfma.f32	s9, s15, s14
 80183a6:	eddf 7a28 	vldr	s15, [pc, #160]	; 8018448 <__ieee754_logf+0x1d8>
 80183aa:	eee4 7a87 	vfma.f32	s15, s9, s14
 80183ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 80183b2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80183b6:	dd1c      	ble.n	80183f2 <__ieee754_logf+0x182>
 80183b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80183bc:	ee20 7a07 	vmul.f32	s14, s0, s14
 80183c0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80183c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80183c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80183cc:	b922      	cbnz	r2, 80183d8 <__ieee754_logf+0x168>
 80183ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80183d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80183d6:	4770      	bx	lr
 80183d8:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8018420 <__ieee754_logf+0x1b0>
 80183dc:	eee6 7a86 	vfma.f32	s15, s13, s12
 80183e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80183e4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80183e8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8018424 <__ieee754_logf+0x1b4>
 80183ec:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80183f0:	4770      	bx	lr
 80183f2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80183f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80183fa:	2a00      	cmp	r2, #0
 80183fc:	d0e9      	beq.n	80183d2 <__ieee754_logf+0x162>
 80183fe:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8018420 <__ieee754_logf+0x1b0>
 8018402:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8018406:	e7ed      	b.n	80183e4 <__ieee754_logf+0x174>
 8018408:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8018414 <__ieee754_logf+0x1a4>
 801840c:	4770      	bx	lr
 801840e:	bf00      	nop
 8018410:	cc000000 	.word	0xcc000000
 8018414:	00000000 	.word	0x00000000
 8018418:	4c000000 	.word	0x4c000000
 801841c:	004afb20 	.word	0x004afb20
 8018420:	3717f7d1 	.word	0x3717f7d1
 8018424:	3f317180 	.word	0x3f317180
 8018428:	3eaaaaab 	.word	0x3eaaaaab
 801842c:	3e1cd04f 	.word	0x3e1cd04f
 8018430:	3e178897 	.word	0x3e178897
 8018434:	ffcf5c30 	.word	0xffcf5c30
 8018438:	3e638e29 	.word	0x3e638e29
 801843c:	3ecccccd 	.word	0x3ecccccd
 8018440:	3e3a3325 	.word	0x3e3a3325
 8018444:	3e924925 	.word	0x3e924925
 8018448:	3f2aaaab 	.word	0x3f2aaaab

0801844c <_init>:
 801844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801844e:	bf00      	nop
 8018450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018452:	bc08      	pop	{r3}
 8018454:	469e      	mov	lr, r3
 8018456:	4770      	bx	lr

08018458 <_fini>:
 8018458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801845a:	bf00      	nop
 801845c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801845e:	bc08      	pop	{r3}
 8018460:	469e      	mov	lr, r3
 8018462:	4770      	bx	lr
