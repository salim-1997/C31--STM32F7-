
C31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f708  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  0800f8d8  0800f8d8  0001f8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113c0  080113c0  00030050  2**0
                  CONTENTS
  4 .ARM          00000008  080113c0  080113c0  000213c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113c8  080113c8  00030050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113c8  080113c8  000213c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080113cc  080113cc  000213cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080113d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028bc  20000050  08011420  00030050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000290c  08011420  0003290c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000375a7  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006529  00000000  00000000  00067627  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002d68  00000000  00000000  0006db50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002a88  00000000  00000000  000708b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031046  00000000  00000000  00073340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026b25  00000000  00000000  000a4386  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126963  00000000  00000000  000caeab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f180e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c1a0  00000000  00000000  001f188c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000050 	.word	0x20000050
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f8c0 	.word	0x0800f8c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000054 	.word	0x20000054
 800020c:	0800f8c0 	.word	0x0800f8c0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/* USER CODE BEGIN 0 */
#define AUDIO_IN_SAMPLES 1600
uint16_t audio_in_buffer[AUDIO_IN_SAMPLES * 2 ]; // L+R interleaved

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 800052a:	2000      	movs	r0, #0
 800052c:	f003 fd52 	bl	8003fd4 <BSP_LED_On>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <BSP_AUDIO_IN_TransferComplete_CallBack>:
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 8000538:	2000      	movs	r0, #0
 800053a:	f003 fd63 	bl	8004004 <BSP_LED_Off>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}

08000542 <BSP_AUDIO_IN_Error_CallBack>:
void BSP_AUDIO_IN_Error_CallBack(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
__HAL_DBGMCU_FREEZE_TIM6();
 8000556:	4b36      	ldr	r3, [pc, #216]	; (8000630 <main+0xe0>)
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	4a35      	ldr	r2, [pc, #212]	; (8000630 <main+0xe0>)
 800055c:	f043 0310 	orr.w	r3, r3, #16
 8000560:	6093      	str	r3, [r2, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f005 f90d 	bl	8005780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f86b 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f001 f83d 	bl	80015e8 <MX_GPIO_Init>
  MX_ADC3_Init();
 800056e:	f000 f925 	bl	80007bc <MX_ADC3_Init>
  MX_CRC_Init();
 8000572:	f000 f975 	bl	8000860 <MX_CRC_Init>
  MX_DCMI_Init();
 8000576:	f000 f995 	bl	80008a4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800057a:	f000 f9c7 	bl	800090c <MX_DMA2D_Init>
  //MX_ETH_Init();
  MX_FMC_Init();
 800057e:	f000 ffe3 	bl	8001548 <MX_FMC_Init>
  MX_I2C1_Init();
 8000582:	f000 f9f5 	bl	8000970 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000586:	f000 fa33 	bl	80009f0 <MX_I2C3_Init>
  MX_LTDC_Init();
 800058a:	f000 fa71 	bl	8000a70 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800058e:	f000 fb25 	bl	8000bdc <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000592:	f000 fb4f 	bl	8000c34 <MX_RTC_Init>
  MX_SAI2_Init();
 8000596:	f000 fbf3 	bl	8000d80 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800059a:	f000 fc99 	bl	8000ed0 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 800059e:	f000 fcc7 	bl	8000f30 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005a2:	f000 fd71 	bl	8001088 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005a6:	f000 fde5 	bl	8001174 <MX_TIM3_Init>
  MX_TIM5_Init();
 80005aa:	f000 fe5b 	bl	8001264 <MX_TIM5_Init>
  MX_TIM8_Init();
 80005ae:	f000 fed1 	bl	8001354 <MX_TIM8_Init>
  MX_TIM12_Init();
 80005b2:	f000 ff23 	bl	80013fc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 ff67 	bl	8001488 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005ba:	f000 ff95 	bl	80014e8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80005be:	f004 fa73 	bl	8004aa8 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80005c2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80005c6:	2000      	movs	r0, #0
 80005c8:	f004 fb06 	bl	8004bd8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80005cc:	4819      	ldr	r0, [pc, #100]	; (8000634 <main+0xe4>)
 80005ce:	f004 fbaf 	bl	8004d30 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80005d2:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80005d6:	f004 fb5f 	bl	8004c98 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80005da:	4816      	ldr	r0, [pc, #88]	; (8000634 <main+0xe4>)
 80005dc:	f004 fb74 	bl	8004cc8 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2, "Hello World !!!", CENTER_MODE);
 80005e0:	f004 fae6 	bl	8004bb0 <BSP_LCD_GetYSize>
 80005e4:	4603      	mov	r3, r0
 80005e6:	085b      	lsrs	r3, r3, #1
 80005e8:	b299      	uxth	r1, r3
 80005ea:	2301      	movs	r3, #1
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <main+0xe8>)
 80005ee:	2000      	movs	r0, #0
 80005f0:	f004 fc0a 	bl	8004e08 <BSP_LCD_DisplayStringAt>

  uint8_t ok;
  ok = BSP_AUDIO_IN_Init(4800, 16, 2);
 80005f4:	2202      	movs	r2, #2
 80005f6:	2110      	movs	r1, #16
 80005f8:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80005fc:	f004 f82b 	bl	8004656 <BSP_AUDIO_IN_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	77fb      	strb	r3, [r7, #31]
  if (ok != AUDIO_OK){
 8000604:	7ffb      	ldrb	r3, [r7, #31]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <main+0xbe>
	  Error_Handler();
 800060a:	f001 f9e3 	bl	80019d4 <Error_Handler>
  }
  ok = BSP_AUDIO_IN_Record(audio_in_buffer, AUDIO_IN_SAMPLES);
 800060e:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <main+0xec>)
 8000614:	f004 f89e 	bl	8004754 <BSP_AUDIO_IN_Record>
 8000618:	4603      	mov	r3, r0
 800061a:	77fb      	strb	r3, [r7, #31]
  if (ok != AUDIO_OK){
 800061c:	7ffb      	ldrb	r3, [r7, #31]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <main+0xd6>
  	  Error_Handler();
 8000622:	f001 f9d7 	bl	80019d4 <Error_Handler>
    }
while(1){
	//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_1);
	HAL_Delay(250);
 8000626:	20fa      	movs	r0, #250	; 0xfa
 8000628:	f005 f8d8 	bl	80057dc <HAL_Delay>
 800062c:	e7fb      	b.n	8000626 <main+0xd6>
 800062e:	bf00      	nop
 8000630:	e0042000 	.word	0xe0042000
 8000634:	ff0000ff 	.word	0xff0000ff
 8000638:	0800f8d8 	.word	0x0800f8d8
 800063c:	200009dc 	.word	0x200009dc

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b0b4      	sub	sp, #208	; 0xd0
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00f f92d 	bl	800f8ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2284      	movs	r2, #132	; 0x84
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f00f f91e 	bl	800f8ae <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000672:	f009 faf3 	bl	8009c5c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b4e      	ldr	r3, [pc, #312]	; (80007b0 <SystemClock_Config+0x170>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a4d      	ldr	r2, [pc, #308]	; (80007b0 <SystemClock_Config+0x170>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	4b4b      	ldr	r3, [pc, #300]	; (80007b0 <SystemClock_Config+0x170>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068e:	4b49      	ldr	r3, [pc, #292]	; (80007b4 <SystemClock_Config+0x174>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a48      	ldr	r2, [pc, #288]	; (80007b4 <SystemClock_Config+0x174>)
 8000694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000698:	6013      	str	r3, [r2, #0]
 800069a:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <SystemClock_Config+0x174>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006a6:	2309      	movs	r3, #9
 80006a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006c8:	2319      	movs	r3, #25
 80006ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006dc:	2309      	movs	r3, #9
 80006de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f009 fbda 	bl	8009ea0 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006f2:	f001 f96f 	bl	80019d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f6:	f009 fac1 	bl	8009c7c <HAL_PWREx_EnableOverDrive>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000700:	f001 f968 	bl	80019d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000716:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000726:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800072a:	2106      	movs	r1, #6
 800072c:	4618      	mov	r0, r3
 800072e:	f009 fe5b 	bl	800a3e8 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000738:	f001 f94c 	bl	80019d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <SystemClock_Config+0x178>)
 800073e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000750:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000754:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000756:	2305      	movs	r3, #5
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800075e:	2303      	movs	r3, #3
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800076a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000776:	2300      	movs	r3, #0
 8000778:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800077a:	2300      	movs	r3, #0
 800077c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800077e:	2300      	movs	r3, #0
 8000780:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000782:	2300      	movs	r3, #0
 8000784:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000786:	2300      	movs	r3, #0
 8000788:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800078a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800078e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	4618      	mov	r0, r3
 8000798:	f00a f82a 	bl	800a7f0 <HAL_RCCEx_PeriphCLKConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x166>
  {
    Error_Handler();
 80007a2:	f001 f917 	bl	80019d4 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	37d0      	adds	r7, #208	; 0xd0
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000
 80007b8:	01314868 	.word	0x01314868

080007bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007c2:	463b      	mov	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_ADC3_Init+0x98>)
 80007d0:	4a21      	ldr	r2, [pc, #132]	; (8000858 <MX_ADC3_Init+0x9c>)
 80007d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_ADC3_Init+0x98>)
 80007d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_ADC3_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_ADC3_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_ADC3_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_ADC3_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_ADC3_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_ADC3_Init+0x98>)
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <MX_ADC3_Init+0xa0>)
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_ADC3_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_ADC3_Init+0x98>)
 800080a:	2201      	movs	r2, #1
 800080c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_ADC3_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_ADC3_Init+0x98>)
 8000818:	2201      	movs	r2, #1
 800081a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_ADC3_Init+0x98>)
 800081e:	f004 ffff 	bl	8005820 <HAL_ADC_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000828:	f001 f8d4 	bl	80019d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800082c:	2304      	movs	r3, #4
 800082e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000830:	2301      	movs	r3, #1
 8000832:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_ADC3_Init+0x98>)
 800083e:	f005 f833 	bl	80058a8 <HAL_ADC_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000848:	f001 f8c4 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000864 	.word	0x20000864
 8000858:	40012200 	.word	0x40012200
 800085c:	0f000001 	.word	0x0f000001

08000860 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_CRC_Init+0x3c>)
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <MX_CRC_Init+0x40>)
 8000868:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_CRC_Init+0x3c>)
 800086c:	2200      	movs	r2, #0
 800086e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_CRC_Init+0x3c>)
 8000872:	2200      	movs	r2, #0
 8000874:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_CRC_Init+0x3c>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_CRC_Init+0x3c>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_CRC_Init+0x3c>)
 8000884:	2201      	movs	r2, #1
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_CRC_Init+0x3c>)
 800088a:	f005 fb33 	bl	8005ef4 <HAL_CRC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000894:	f001 f89e 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000718 	.word	0x20000718
 80008a0:	40023000 	.word	0x40023000

080008a4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_DCMI_Init+0x60>)
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <MX_DCMI_Init+0x64>)
 80008ac:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_DCMI_Init+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_DCMI_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_DCMI_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_DCMI_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_DCMI_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_DCMI_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_DCMI_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_DCMI_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_DCMI_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_DCMI_Init+0x60>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_DCMI_Init+0x60>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_DCMI_Init+0x60>)
 80008f2:	f005 fbe9 	bl	80060c8 <HAL_DCMI_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80008fc:	f001 f86a 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200008ac 	.word	0x200008ac
 8000908:	50050000 	.word	0x50050000

0800090c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_DMA2D_Init+0x5c>)
 8000912:	4a16      	ldr	r2, [pc, #88]	; (800096c <MX_DMA2D_Init+0x60>)
 8000914:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_DMA2D_Init+0x5c>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_DMA2D_Init+0x5c>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_DMA2D_Init+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_DMA2D_Init+0x5c>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_DMA2D_Init+0x5c>)
 8000930:	2200      	movs	r2, #0
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_DMA2D_Init+0x5c>)
 8000936:	2200      	movs	r2, #0
 8000938:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_DMA2D_Init+0x5c>)
 800093c:	2200      	movs	r2, #0
 800093e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <MX_DMA2D_Init+0x5c>)
 8000942:	f006 f80f 	bl	8006964 <HAL_DMA2D_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800094c:	f001 f842 	bl	80019d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000950:	2101      	movs	r1, #1
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_DMA2D_Init+0x5c>)
 8000954:	f006 fa74 	bl	8006e40 <HAL_DMA2D_ConfigLayer>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800095e:	f001 f839 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000235c 	.word	0x2000235c
 800096c:	4002b000 	.word	0x4002b000

08000970 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_I2C1_Init+0x74>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <MX_I2C1_Init+0x78>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_I2C1_Init+0x74>)
 800097c:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <MX_I2C1_Init+0x7c>)
 800097e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_I2C1_Init+0x74>)
 8000988:	2201      	movs	r2, #1
 800098a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_I2C1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_I2C1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_I2C1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <MX_I2C1_Init+0x74>)
 80009ac:	f008 f82e 	bl	8008a0c <HAL_I2C_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009b6:	f001 f80d 	bl	80019d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <MX_I2C1_Init+0x74>)
 80009be:	f008 fd3d 	bl	800943c <HAL_I2CEx_ConfigAnalogFilter>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009c8:	f001 f804 	bl	80019d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009cc:	2100      	movs	r1, #0
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_I2C1_Init+0x74>)
 80009d0:	f008 fd7f 	bl	80094d2 <HAL_I2CEx_ConfigDigitalFilter>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 fffb 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200006cc 	.word	0x200006cc
 80009e8:	40005400 	.word	0x40005400
 80009ec:	00c0eaff 	.word	0x00c0eaff

080009f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C3_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C3_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C3_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C3_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C3_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C3_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C3_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C3_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C3_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C3_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C3_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C3_Init+0x74>)
 8000a2c:	f007 ffee 	bl	8008a0c <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 ffcd 	bl	80019d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C3_Init+0x74>)
 8000a3e:	f008 fcfd 	bl	800943c <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 ffc4 	bl	80019d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C3_Init+0x74>)
 8000a50:	f008 fd3f 	bl	80094d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 ffbb 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000570 	.word	0x20000570
 8000a68:	40005c00 	.word	0x40005c00
 8000a6c:	00c0eaff 	.word	0x00c0eaff

08000a70 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b09a      	sub	sp, #104	; 0x68
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a7a:	2234      	movs	r2, #52	; 0x34
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00e ff15 	bl	800f8ae <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2234      	movs	r2, #52	; 0x34
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00e ff0f 	bl	800f8ae <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a90:	4b50      	ldr	r3, [pc, #320]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000a92:	4a51      	ldr	r2, [pc, #324]	; (8000bd8 <MX_LTDC_Init+0x168>)
 8000a94:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a96:	4b4f      	ldr	r3, [pc, #316]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000aa2:	4b4c      	ldr	r3, [pc, #304]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000aae:	4b49      	ldr	r3, [pc, #292]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000ab0:	2228      	movs	r2, #40	; 0x28
 8000ab2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ab4:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000ab6:	2209      	movs	r2, #9
 8000ab8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000aba:	4b46      	ldr	r3, [pc, #280]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000abc:	2235      	movs	r2, #53	; 0x35
 8000abe:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ac0:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000ac2:	220b      	movs	r2, #11
 8000ac4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ac6:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000ac8:	f240 2215 	movw	r2, #533	; 0x215
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000ace:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000ad0:	f240 121b 	movw	r2, #283	; 0x11b
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000ad6:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000ad8:	f240 2235 	movw	r2, #565	; 0x235
 8000adc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ade:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000ae0:	f240 121d 	movw	r2, #285	; 0x11d
 8000ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ae6:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000aee:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000af6:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000afe:	4835      	ldr	r0, [pc, #212]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000b00:	f008 fd34 	bl	800956c <HAL_LTDC_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000b0a:	f000 ff63 	bl	80019d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000b12:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000b1c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b20:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b22:	2302      	movs	r3, #2
 8000b24:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000b26:	23ff      	movs	r3, #255	; 0xff
 8000b28:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b32:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b34:	2307      	movs	r3, #7
 8000b36:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b38:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b3c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000b3e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b42:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000b44:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b48:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000b66:	f008 fe93 	bl	8009890 <HAL_LTDC_ConfigLayer>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000b70:	f000 ff30 	bl	80019d4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b90:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b92:	2305      	movs	r3, #5
 8000b94:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <MX_LTDC_Init+0x164>)
 8000bbc:	f008 fe68 	bl	8009890 <HAL_LTDC_ConfigLayer>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000bc6:	f000 ff05 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3768      	adds	r7, #104	; 0x68
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200007bc 	.word	0x200007bc
 8000bd8:	40016800 	.word	0x40016800

08000bdc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <MX_QUADSPI_Init+0x54>)
 8000be4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000be8:	22ff      	movs	r2, #255	; 0xff
 8000bea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c18:	f009 f880 	bl	8009d1c <HAL_QSPI_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c22:	f000 fed7 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20002498 	.word	0x20002498
 8000c30:	a0001000 	.word	0xa0001000

08000c34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b092      	sub	sp, #72	; 0x48
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	222c      	movs	r2, #44	; 0x2c
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f00e fe29 	bl	800f8ae <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c5c:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c5e:	4a47      	ldr	r2, [pc, #284]	; (8000d7c <MX_RTC_Init+0x148>)
 8000c60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c62:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c68:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c6a:	227f      	movs	r2, #127	; 0x7f
 8000c6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c6e:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c70:	22ff      	movs	r2, #255	; 0xff
 8000c72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c74:	4b40      	ldr	r3, [pc, #256]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c7a:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c80:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c86:	483c      	ldr	r0, [pc, #240]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c88:	f00a fbe0 	bl	800b44c <HAL_RTC_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000c92:	f000 fe9f 	bl	80019d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	482f      	ldr	r0, [pc, #188]	; (8000d78 <MX_RTC_Init+0x144>)
 8000cba:	f00a fc43 	bl	800b544 <HAL_RTC_SetTime>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000cc4:	f000 fe86 	bl	80019d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4823      	ldr	r0, [pc, #140]	; (8000d78 <MX_RTC_Init+0x144>)
 8000cea:	f00a fce9 	bl	800b6c0 <HAL_RTC_SetDate>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000cf4:	f000 fe6e 	bl	80019d4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4812      	ldr	r0, [pc, #72]	; (8000d78 <MX_RTC_Init+0x144>)
 8000d30:	f00a fd6e 	bl	800b810 <HAL_RTC_SetAlarm>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000d3a:	f000 fe4b 	bl	80019d4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	2201      	movs	r2, #1
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <MX_RTC_Init+0x144>)
 8000d4c:	f00a fd60 	bl	800b810 <HAL_RTC_SetAlarm>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000d56:	f000 fe3d 	bl	80019d4 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <MX_RTC_Init+0x144>)
 8000d60:	f00a fee0 	bl	800bb24 <HAL_RTCEx_SetTimeStamp>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000d6a:	f000 fe33 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3748      	adds	r7, #72	; 0x48
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000097c 	.word	0x2000097c
 8000d7c:	40002800 	.word	0x40002800

08000d80 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d84:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000d86:	4a4e      	ldr	r2, [pc, #312]	; (8000ec0 <MX_SAI2_Init+0x140>)
 8000d88:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d8a:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d90:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d96:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000d98:	2240      	movs	r2, #64	; 0x40
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d9c:	4b47      	ldr	r3, [pc, #284]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000da2:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000da8:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dae:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000db4:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dba:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000dc0:	4b3e      	ldr	r3, [pc, #248]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000dc2:	4a40      	ldr	r2, [pc, #256]	; (8000ec4 <MX_SAI2_Init+0x144>)
 8000dc4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dcc:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dd2:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dd8:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000dde:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000de0:	2208      	movs	r2, #8
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000de4:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000dea:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000df0:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000e08:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000e14:	4829      	ldr	r0, [pc, #164]	; (8000ebc <MX_SAI2_Init+0x13c>)
 8000e16:	f00a fedb 	bl	800bbd0 <HAL_SAI_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000e20:	f000 fdd8 	bl	80019d4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e26:	4a29      	ldr	r2, [pc, #164]	; (8000ecc <MX_SAI2_Init+0x14c>)
 8000e28:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e2a:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e32:	2203      	movs	r2, #3
 8000e34:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e38:	2240      	movs	r2, #64	; 0x40
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e74:	2208      	movs	r2, #8
 8000e76:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <MX_SAI2_Init+0x148>)
 8000eaa:	f00a fe91 	bl	800bbd0 <HAL_SAI_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000eb4:	f000 fd8e 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000648 	.word	0x20000648
 8000ec0:	40015c04 	.word	0x40015c04
 8000ec4:	0002ee00 	.word	0x0002ee00
 8000ec8:	200004e8 	.word	0x200004e8
 8000ecc:	40015c24 	.word	0x40015c24

08000ed0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000ed6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000eda:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_SPDIFRX_Init+0x5c>)
 8000f1a:	f00b f9f9 	bl	800c310 <HAL_SPDIFRX_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000f24:	f000 fd56 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200005fc 	.word	0x200005fc

08000f30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b09a      	sub	sp, #104	; 0x68
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	222c      	movs	r2, #44	; 0x2c
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00e fc9f 	bl	800f8ae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f70:	4b43      	ldr	r3, [pc, #268]	; (8001080 <MX_TIM1_Init+0x150>)
 8000f72:	4a44      	ldr	r2, [pc, #272]	; (8001084 <MX_TIM1_Init+0x154>)
 8000f74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f76:	4b42      	ldr	r3, [pc, #264]	; (8001080 <MX_TIM1_Init+0x150>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b40      	ldr	r3, [pc, #256]	; (8001080 <MX_TIM1_Init+0x150>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <MX_TIM1_Init+0x150>)
 8000f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b3d      	ldr	r3, [pc, #244]	; (8001080 <MX_TIM1_Init+0x150>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f90:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <MX_TIM1_Init+0x150>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <MX_TIM1_Init+0x150>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f9c:	4838      	ldr	r0, [pc, #224]	; (8001080 <MX_TIM1_Init+0x150>)
 8000f9e:	f00b fa13 	bl	800c3c8 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fa8:	f000 fd14 	bl	80019d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4831      	ldr	r0, [pc, #196]	; (8001080 <MX_TIM1_Init+0x150>)
 8000fba:	f00b fcbd 	bl	800c938 <HAL_TIM_ConfigClockSource>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fc4:	f000 fd06 	bl	80019d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fc8:	482d      	ldr	r0, [pc, #180]	; (8001080 <MX_TIM1_Init+0x150>)
 8000fca:	f00b fa53 	bl	800c474 <HAL_TIM_PWM_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fd4:	f000 fcfe 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4825      	ldr	r0, [pc, #148]	; (8001080 <MX_TIM1_Init+0x150>)
 8000fec:	f00c f91e 	bl	800d22c <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000ff6:	f000 fced 	bl	80019d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffa:	2360      	movs	r3, #96	; 0x60
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001002:	2300      	movs	r3, #0
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001006:	2300      	movs	r3, #0
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001016:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	4818      	ldr	r0, [pc, #96]	; (8001080 <MX_TIM1_Init+0x150>)
 8001020:	f00b fb72 	bl	800c708 <HAL_TIM_PWM_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800102a:	f000 fcd3 	bl	80019d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001046:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001050:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4619      	mov	r1, r3
 8001062:	4807      	ldr	r0, [pc, #28]	; (8001080 <MX_TIM1_Init+0x150>)
 8001064:	f00c f970 	bl	800d348 <HAL_TIMEx_ConfigBreakDeadTime>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800106e:	f000 fcb1 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001072:	4803      	ldr	r0, [pc, #12]	; (8001080 <MX_TIM1_Init+0x150>)
 8001074:	f001 f932 	bl	80022dc <HAL_TIM_MspPostInit>

}
 8001078:	bf00      	nop
 800107a:	3768      	adds	r7, #104	; 0x68
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000099c 	.word	0x2000099c
 8001084:	40010000 	.word	0x40010000

08001088 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	; 0x38
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
 80010b6:	615a      	str	r2, [r3, #20]
 80010b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <MX_TIM2_Init+0xe8>)
 80010bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <MX_TIM2_Init+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <MX_TIM2_Init+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <MX_TIM2_Init+0xe8>)
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <MX_TIM2_Init+0xe8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <MX_TIM2_Init+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e2:	4823      	ldr	r0, [pc, #140]	; (8001170 <MX_TIM2_Init+0xe8>)
 80010e4:	f00b f970 	bl	800c3c8 <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f000 fc71 	bl	80019d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fc:	4619      	mov	r1, r3
 80010fe:	481c      	ldr	r0, [pc, #112]	; (8001170 <MX_TIM2_Init+0xe8>)
 8001100:	f00b fc1a 	bl	800c938 <HAL_TIM_ConfigClockSource>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800110a:	f000 fc63 	bl	80019d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800110e:	4818      	ldr	r0, [pc, #96]	; (8001170 <MX_TIM2_Init+0xe8>)
 8001110:	f00b f9b0 	bl	800c474 <HAL_TIM_PWM_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800111a:	f000 fc5b 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4810      	ldr	r0, [pc, #64]	; (8001170 <MX_TIM2_Init+0xe8>)
 800112e:	f00c f87d 	bl	800d22c <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001138:	f000 fc4c 	bl	80019d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113c:	2360      	movs	r3, #96	; 0x60
 800113e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	4807      	ldr	r0, [pc, #28]	; (8001170 <MX_TIM2_Init+0xe8>)
 8001154:	f00b fad8 	bl	800c708 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800115e:	f000 fc39 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <MX_TIM2_Init+0xe8>)
 8001164:	f001 f8ba 	bl	80022dc <HAL_TIM_MspPostInit>

}
 8001168:	bf00      	nop
 800116a:	3738      	adds	r7, #56	; 0x38
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000239c 	.word	0x2000239c

08001174 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	615a      	str	r2, [r3, #20]
 80011a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_TIM3_Init+0xe8>)
 80011a8:	4a2d      	ldr	r2, [pc, #180]	; (8001260 <MX_TIM3_Init+0xec>)
 80011aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <MX_TIM3_Init+0xe8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_TIM3_Init+0xe8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <MX_TIM3_Init+0xe8>)
 80011ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_TIM3_Init+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <MX_TIM3_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011cc:	4823      	ldr	r0, [pc, #140]	; (800125c <MX_TIM3_Init+0xe8>)
 80011ce:	f00b f8fb 	bl	800c3c8 <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011d8:	f000 fbfc 	bl	80019d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e6:	4619      	mov	r1, r3
 80011e8:	481c      	ldr	r0, [pc, #112]	; (800125c <MX_TIM3_Init+0xe8>)
 80011ea:	f00b fba5 	bl	800c938 <HAL_TIM_ConfigClockSource>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011f4:	f000 fbee 	bl	80019d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f8:	4818      	ldr	r0, [pc, #96]	; (800125c <MX_TIM3_Init+0xe8>)
 80011fa:	f00b f93b 	bl	800c474 <HAL_TIM_PWM_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001204:	f000 fbe6 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <MX_TIM3_Init+0xe8>)
 8001218:	f00c f808 	bl	800d22c <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001222:	f000 fbd7 	bl	80019d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001226:	2360      	movs	r3, #96	; 0x60
 8001228:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM3_Init+0xe8>)
 800123e:	f00b fa63 	bl	800c708 <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001248:	f000 fbc4 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800124c:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM3_Init+0xe8>)
 800124e:	f001 f845 	bl	80022dc <HAL_TIM_MspPostInit>

}
 8001252:	bf00      	nop
 8001254:	3738      	adds	r7, #56	; 0x38
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000077c 	.word	0x2000077c
 8001260:	40000400 	.word	0x40000400

08001264 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	; 0x38
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	615a      	str	r2, [r3, #20]
 8001294:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_TIM5_Init+0xe8>)
 8001298:	4a2d      	ldr	r2, [pc, #180]	; (8001350 <MX_TIM5_Init+0xec>)
 800129a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <MX_TIM5_Init+0xe8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_TIM5_Init+0xe8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_TIM5_Init+0xe8>)
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295
 80012ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_TIM5_Init+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_TIM5_Init+0xe8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012bc:	4823      	ldr	r0, [pc, #140]	; (800134c <MX_TIM5_Init+0xe8>)
 80012be:	f00b f883 	bl	800c3c8 <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80012c8:	f000 fb84 	bl	80019d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d6:	4619      	mov	r1, r3
 80012d8:	481c      	ldr	r0, [pc, #112]	; (800134c <MX_TIM5_Init+0xe8>)
 80012da:	f00b fb2d 	bl	800c938 <HAL_TIM_ConfigClockSource>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80012e4:	f000 fb76 	bl	80019d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <MX_TIM5_Init+0xe8>)
 80012ea:	f00b f8c3 	bl	800c474 <HAL_TIM_PWM_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80012f4:	f000 fb6e 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_TIM5_Init+0xe8>)
 8001308:	f00b ff90 	bl	800d22c <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001312:	f000 fb5f 	bl	80019d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	2360      	movs	r3, #96	; 0x60
 8001318:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	220c      	movs	r2, #12
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_TIM5_Init+0xe8>)
 800132e:	f00b f9eb 	bl	800c708 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001338:	f000 fb4c 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <MX_TIM5_Init+0xe8>)
 800133e:	f000 ffcd 	bl	80022dc <HAL_TIM_MspPostInit>

}
 8001342:	bf00      	nop
 8001344:	3738      	adds	r7, #56	; 0x38
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000073c 	.word	0x2000073c
 8001350:	40000c00 	.word	0x40000c00

08001354 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <MX_TIM8_Init+0xa0>)
 8001374:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <MX_TIM8_Init+0xa4>)
 8001376:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <MX_TIM8_Init+0xa0>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <MX_TIM8_Init+0xa0>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <MX_TIM8_Init+0xa0>)
 8001386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800138a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_TIM8_Init+0xa0>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_TIM8_Init+0xa0>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <MX_TIM8_Init+0xa0>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800139e:	4815      	ldr	r0, [pc, #84]	; (80013f4 <MX_TIM8_Init+0xa0>)
 80013a0:	f00b f812 	bl	800c3c8 <HAL_TIM_Base_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80013aa:	f000 fb13 	bl	80019d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	480e      	ldr	r0, [pc, #56]	; (80013f4 <MX_TIM8_Init+0xa0>)
 80013bc:	f00b fabc 	bl	800c938 <HAL_TIM_ConfigClockSource>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80013c6:	f000 fb05 	bl	80019d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_TIM8_Init+0xa0>)
 80013dc:	f00b ff26 	bl	800d22c <HAL_TIMEx_MasterConfigSynchronization>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80013e6:	f000 faf5 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	3720      	adds	r7, #32
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200005bc 	.word	0x200005bc
 80013f8:	40010400 	.word	0x40010400

080013fc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_TIM12_Init+0x84>)
 8001416:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <MX_TIM12_Init+0x88>)
 8001418:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_TIM12_Init+0x84>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_TIM12_Init+0x84>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_TIM12_Init+0x84>)
 8001428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800142c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_TIM12_Init+0x84>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_TIM12_Init+0x84>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800143a:	4811      	ldr	r0, [pc, #68]	; (8001480 <MX_TIM12_Init+0x84>)
 800143c:	f00b f81a 	bl	800c474 <HAL_TIM_PWM_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001446:	f000 fac5 	bl	80019d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144a:	2360      	movs	r3, #96	; 0x60
 800144c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	4619      	mov	r1, r3
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <MX_TIM12_Init+0x84>)
 8001462:	f00b f951 	bl	800c708 <HAL_TIM_PWM_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800146c:	f000 fab2 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001470:	4803      	ldr	r0, [pc, #12]	; (8001480 <MX_TIM12_Init+0x84>)
 8001472:	f000 ff33 	bl	80022dc <HAL_TIM_MspPostInit>

}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200023dc 	.word	0x200023dc
 8001484:	40001800 	.word	0x40001800

08001488 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 800148e:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <MX_USART1_UART_Init+0x5c>)
 8001490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_USART1_UART_Init+0x58>)
 80014cc:	f00b ffd8 	bl	800d480 <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014d6:	f000 fa7d 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200008fc 	.word	0x200008fc
 80014e4:	40011000 	.word	0x40011000

080014e8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_USART6_UART_Init+0x58>)
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <MX_USART6_UART_Init+0x5c>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_USART6_UART_Init+0x58>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_USART6_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_USART6_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_USART6_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USART6_UART_Init+0x58>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_USART6_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USART6_UART_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_USART6_UART_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USART6_UART_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_USART6_UART_Init+0x58>)
 800152c:	f00b ffa8 	bl	800d480 <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001536:	f000 fa4d 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200022dc 	.word	0x200022dc
 8001544:	40011400 	.word	0x40011400

08001548 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	615a      	str	r2, [r3, #20]
 800155e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <MX_FMC_Init+0x98>)
 8001562:	4a20      	ldr	r2, [pc, #128]	; (80015e4 <MX_FMC_Init+0x9c>)
 8001564:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <MX_FMC_Init+0x98>)
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <MX_FMC_Init+0x98>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_FMC_Init+0x98>)
 8001574:	2204      	movs	r2, #4
 8001576:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <MX_FMC_Init+0x98>)
 800157a:	2210      	movs	r2, #16
 800157c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_FMC_Init+0x98>)
 8001580:	2240      	movs	r2, #64	; 0x40
 8001582:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_FMC_Init+0x98>)
 8001586:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800158a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_FMC_Init+0x98>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_FMC_Init+0x98>)
 8001594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001598:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_FMC_Init+0x98>)
 800159c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_FMC_Init+0x98>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80015ac:	2307      	movs	r3, #7
 80015ae:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80015b0:	2304      	movs	r3, #4
 80015b2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80015b4:	2307      	movs	r3, #7
 80015b6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80015b8:	2303      	movs	r3, #3
 80015ba:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80015bc:	2302      	movs	r3, #2
 80015be:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_FMC_Init+0x98>)
 80015ca:	f00a fe22 	bl	800c212 <HAL_SDRAM_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80015d4:	f000 f9fe 	bl	80019d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80015d8:	bf00      	nop
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000241c 	.word	0x2000241c
 80015e4:	a0000140 	.word	0xa0000140

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b090      	sub	sp, #64	; 0x40
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fe:	4baf      	ldr	r3, [pc, #700]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4aae      	ldr	r2, [pc, #696]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4bac      	ldr	r3, [pc, #688]	; (80018bc <MX_GPIO_Init+0x2d4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001616:	4ba9      	ldr	r3, [pc, #676]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4aa8      	ldr	r2, [pc, #672]	; (80018bc <MX_GPIO_Init+0x2d4>)
 800161c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4ba6      	ldr	r3, [pc, #664]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4ba3      	ldr	r3, [pc, #652]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4aa2      	ldr	r2, [pc, #648]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4ba0      	ldr	r3, [pc, #640]	; (80018bc <MX_GPIO_Init+0x2d4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	623b      	str	r3, [r7, #32]
 8001644:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001646:	4b9d      	ldr	r3, [pc, #628]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a9c      	ldr	r2, [pc, #624]	; (80018bc <MX_GPIO_Init+0x2d4>)
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b9a      	ldr	r3, [pc, #616]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	4b97      	ldr	r3, [pc, #604]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a96      	ldr	r2, [pc, #600]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b94      	ldr	r3, [pc, #592]	; (80018bc <MX_GPIO_Init+0x2d4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b91      	ldr	r3, [pc, #580]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a90      	ldr	r2, [pc, #576]	; (80018bc <MX_GPIO_Init+0x2d4>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b8e      	ldr	r3, [pc, #568]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800168e:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a8a      	ldr	r2, [pc, #552]	; (80018bc <MX_GPIO_Init+0x2d4>)
 8001694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b88      	ldr	r3, [pc, #544]	; (80018bc <MX_GPIO_Init+0x2d4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016a6:	4b85      	ldr	r3, [pc, #532]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a84      	ldr	r2, [pc, #528]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b82      	ldr	r3, [pc, #520]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016be:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a7e      	ldr	r2, [pc, #504]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016d6:	4b79      	ldr	r3, [pc, #484]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a78      	ldr	r2, [pc, #480]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016dc:	f043 0320 	orr.w	r3, r3, #32
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b76      	ldr	r3, [pc, #472]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	4b73      	ldr	r3, [pc, #460]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a72      	ldr	r2, [pc, #456]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b70      	ldr	r3, [pc, #448]	; (80018bc <MX_GPIO_Init+0x2d4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001706:	2201      	movs	r2, #1
 8001708:	2120      	movs	r1, #32
 800170a:	486d      	ldr	r0, [pc, #436]	; (80018c0 <MX_GPIO_Init+0x2d8>)
 800170c:	f005 ff7a 	bl	8007604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	210e      	movs	r1, #14
 8001714:	486b      	ldr	r0, [pc, #428]	; (80018c4 <MX_GPIO_Init+0x2dc>)
 8001716:	f005 ff75 	bl	8007604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800171a:	2201      	movs	r2, #1
 800171c:	2108      	movs	r1, #8
 800171e:	486a      	ldr	r0, [pc, #424]	; (80018c8 <MX_GPIO_Init+0x2e0>)
 8001720:	f005 ff70 	bl	8007604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	4866      	ldr	r0, [pc, #408]	; (80018c4 <MX_GPIO_Init+0x2dc>)
 800172c:	f005 ff6a 	bl	8007604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001736:	4865      	ldr	r0, [pc, #404]	; (80018cc <MX_GPIO_Init+0x2e4>)
 8001738:	f005 ff64 	bl	8007604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	21c8      	movs	r1, #200	; 0xc8
 8001740:	4863      	ldr	r0, [pc, #396]	; (80018d0 <MX_GPIO_Init+0x2e8>)
 8001742:	f005 ff5f 	bl	8007604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001746:	2308      	movs	r3, #8
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001756:	4619      	mov	r1, r3
 8001758:	485e      	ldr	r0, [pc, #376]	; (80018d4 <MX_GPIO_Init+0x2ec>)
 800175a:	f005 fc9f 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800175e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001770:	230a      	movs	r3, #10
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001778:	4619      	mov	r1, r3
 800177a:	4857      	ldr	r0, [pc, #348]	; (80018d8 <MX_GPIO_Init+0x2f0>)
 800177c:	f005 fc8e 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001780:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001792:	230c      	movs	r3, #12
 8001794:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179a:	4619      	mov	r1, r3
 800179c:	484f      	ldr	r0, [pc, #316]	; (80018dc <MX_GPIO_Init+0x2f4>)
 800179e:	f005 fc7d 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80017a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b4:	4619      	mov	r1, r3
 80017b6:	484a      	ldr	r0, [pc, #296]	; (80018e0 <MX_GPIO_Init+0x2f8>)
 80017b8:	f005 fc70 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80017bc:	2340      	movs	r3, #64	; 0x40
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017c0:	4b48      	ldr	r3, [pc, #288]	; (80018e4 <MX_GPIO_Init+0x2fc>)
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017cc:	4619      	mov	r1, r3
 80017ce:	483c      	ldr	r0, [pc, #240]	; (80018c0 <MX_GPIO_Init+0x2d8>)
 80017d0:	f005 fc64 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80017d4:	2320      	movs	r3, #32
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e8:	4619      	mov	r1, r3
 80017ea:	4835      	ldr	r0, [pc, #212]	; (80018c0 <MX_GPIO_Init+0x2d8>)
 80017ec:	f005 fc56 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 80017f0:	f241 030e 	movw	r3, #4110	; 0x100e
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001806:	4619      	mov	r1, r3
 8001808:	482e      	ldr	r0, [pc, #184]	; (80018c4 <MX_GPIO_Init+0x2dc>)
 800180a:	f005 fc47 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800180e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001820:	4619      	mov	r1, r3
 8001822:	482e      	ldr	r0, [pc, #184]	; (80018dc <MX_GPIO_Init+0x2f4>)
 8001824:	f005 fc3a 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001828:	2308      	movs	r3, #8
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183c:	4619      	mov	r1, r3
 800183e:	4822      	ldr	r0, [pc, #136]	; (80018c8 <MX_GPIO_Init+0x2e0>)
 8001840:	f005 fc2c 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001844:	2310      	movs	r3, #16
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001854:	4619      	mov	r1, r3
 8001856:	481a      	ldr	r0, [pc, #104]	; (80018c0 <MX_GPIO_Init+0x2d8>)
 8001858:	f005 fc20 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800185c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001862:	2300      	movs	r3, #0
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186e:	4619      	mov	r1, r3
 8001870:	4816      	ldr	r0, [pc, #88]	; (80018cc <MX_GPIO_Init+0x2e4>)
 8001872:	f005 fc13 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188c:	4619      	mov	r1, r3
 800188e:	480f      	ldr	r0, [pc, #60]	; (80018cc <MX_GPIO_Init+0x2e4>)
 8001890:	f005 fc04 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_GPIO_Init+0x2fc>)
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a6:	4619      	mov	r1, r3
 80018a8:	4806      	ldr	r0, [pc, #24]	; (80018c4 <MX_GPIO_Init+0x2dc>)
 80018aa:	f005 fbf7 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80018ae:	2310      	movs	r3, #16
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e016      	b.n	80018e8 <MX_GPIO_Init+0x300>
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020c00 	.word	0x40020c00
 80018c4:	40022000 	.word	0x40022000
 80018c8:	40022800 	.word	0x40022800
 80018cc:	40021c00 	.word	0x40021c00
 80018d0:	40021800 	.word	0x40021800
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40022400 	.word	0x40022400
 80018e4:	10120000 	.word	0x10120000
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018ee:	230a      	movs	r3, #10
 80018f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f6:	4619      	mov	r1, r3
 80018f8:	4828      	ldr	r0, [pc, #160]	; (800199c <MX_GPIO_Init+0x3b4>)
 80018fa:	f005 fbcf 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80018fe:	23c8      	movs	r3, #200	; 0xc8
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800190e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001912:	4619      	mov	r1, r3
 8001914:	4822      	ldr	r0, [pc, #136]	; (80019a0 <MX_GPIO_Init+0x3b8>)
 8001916:	f005 fbc1 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800191a:	2305      	movs	r3, #5
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800192a:	230a      	movs	r3, #10
 800192c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001932:	4619      	mov	r1, r3
 8001934:	481b      	ldr	r0, [pc, #108]	; (80019a4 <MX_GPIO_Init+0x3bc>)
 8001936:	f005 fbb1 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800193a:	2304      	movs	r3, #4
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194a:	4619      	mov	r1, r3
 800194c:	4814      	ldr	r0, [pc, #80]	; (80019a0 <MX_GPIO_Init+0x3b8>)
 800194e:	f005 fba5 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001952:	2328      	movs	r3, #40	; 0x28
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001962:	230a      	movs	r3, #10
 8001964:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196a:	4619      	mov	r1, r3
 800196c:	480e      	ldr	r0, [pc, #56]	; (80019a8 <MX_GPIO_Init+0x3c0>)
 800196e:	f005 fb95 	bl	800709c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001972:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001984:	2305      	movs	r3, #5
 8001986:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198c:	4619      	mov	r1, r3
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <MX_GPIO_Init+0x3c4>)
 8001990:	f005 fb84 	bl	800709c <HAL_GPIO_Init>

}
 8001994:	bf00      	nop
 8001996:	3740      	adds	r7, #64	; 0x40
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021c00 	.word	0x40021c00
 80019a0:	40021800 	.word	0x40021800
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020400 	.word	0x40020400

080019b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d101      	bne.n	80019c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019c2:	f003 feeb 	bl	800579c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40001000 	.word	0x40001000

080019d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_MspInit+0x4c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_MspInit+0x4c>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_MspInit+0x4c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_MspInit+0x4c>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	210f      	movs	r1, #15
 8001a1e:	f06f 0001 	mvn.w	r0, #1
 8001a22:	f004 fa3d 	bl	8005ea0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800

08001a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <HAL_ADC_MspInit+0xa4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d13c      	bne.n	8001ad0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a56:	4b21      	ldr	r3, [pc, #132]	; (8001adc <HAL_ADC_MspInit+0xa8>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	4a20      	ldr	r2, [pc, #128]	; (8001adc <HAL_ADC_MspInit+0xa8>)
 8001a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a60:	6453      	str	r3, [r2, #68]	; 0x44
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <HAL_ADC_MspInit+0xa8>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_ADC_MspInit+0xa8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_ADC_MspInit+0xa8>)
 8001a74:	f043 0320 	orr.w	r3, r3, #32
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_ADC_MspInit+0xa8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_ADC_MspInit+0xa8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a14      	ldr	r2, [pc, #80]	; (8001adc <HAL_ADC_MspInit+0xa8>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_ADC_MspInit+0xa8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001a9e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001aa2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <HAL_ADC_MspInit+0xac>)
 8001ab4:	f005 faf2 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001abc:	2303      	movs	r3, #3
 8001abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <HAL_ADC_MspInit+0xb0>)
 8001acc:	f005 fae6 	bl	800709c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40012200 	.word	0x40012200
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40021400 	.word	0x40021400
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_CRC_MspInit+0x38>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d10b      	bne.n	8001b12 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_CRC_MspInit+0x3c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_CRC_MspInit+0x3c>)
 8001b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_CRC_MspInit+0x3c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023000 	.word	0x40023000
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08e      	sub	sp, #56	; 0x38
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a50      	ldr	r2, [pc, #320]	; (8001c88 <HAL_DCMI_MspInit+0x160>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	f040 809a 	bne.w	8001c80 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	4a4e      	ldr	r2, [pc, #312]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6353      	str	r3, [r2, #52]	; 0x34
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	623b      	str	r3, [r7, #32]
 8001b62:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b64:	4b49      	ldr	r3, [pc, #292]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	4a48      	ldr	r2, [pc, #288]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001b6a:	f043 0310 	orr.w	r3, r3, #16
 8001b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b70:	4b46      	ldr	r3, [pc, #280]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4a42      	ldr	r2, [pc, #264]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001b82:	f043 0308 	orr.w	r3, r3, #8
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
 8001b88:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b94:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	4a3c      	ldr	r2, [pc, #240]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bac:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4a36      	ldr	r2, [pc, #216]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb8:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	4a30      	ldr	r2, [pc, #192]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_DCMI_MspInit+0x164>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001bdc:	2360      	movs	r3, #96	; 0x60
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bec:	230d      	movs	r3, #13
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4826      	ldr	r0, [pc, #152]	; (8001c90 <HAL_DCMI_MspInit+0x168>)
 8001bf8:	f005 fa50 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c0c:	230d      	movs	r3, #13
 8001c0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	4619      	mov	r1, r3
 8001c16:	481f      	ldr	r0, [pc, #124]	; (8001c94 <HAL_DCMI_MspInit+0x16c>)
 8001c18:	f005 fa40 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c2e:	230d      	movs	r3, #13
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c36:	4619      	mov	r1, r3
 8001c38:	4817      	ldr	r0, [pc, #92]	; (8001c98 <HAL_DCMI_MspInit+0x170>)
 8001c3a:	f005 fa2f 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001c3e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c50:	230d      	movs	r3, #13
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4810      	ldr	r0, [pc, #64]	; (8001c9c <HAL_DCMI_MspInit+0x174>)
 8001c5c:	f005 fa1e 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001c60:	2350      	movs	r3, #80	; 0x50
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c70:	230d      	movs	r3, #13
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <HAL_DCMI_MspInit+0x178>)
 8001c7c:	f005 fa0e 	bl	800709c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001c80:	bf00      	nop
 8001c82:	3738      	adds	r7, #56	; 0x38
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	50050000 	.word	0x50050000
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40020c00 	.word	0x40020c00
 8001c98:	40021800 	.word	0x40021800
 8001c9c:	40021c00 	.word	0x40021c00
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <HAL_DMA2D_MspInit+0x44>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d113      	bne.n	8001cde <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_DMA2D_MspInit+0x48>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <HAL_DMA2D_MspInit+0x48>)
 8001cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_DMA2D_MspInit+0x48>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	205a      	movs	r0, #90	; 0x5a
 8001cd4:	f004 f8e4 	bl	8005ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001cd8:	205a      	movs	r0, #90	; 0x5a
 8001cda:	f004 f8fd 	bl	8005ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	4002b000 	.word	0x4002b000
 8001cec:	40023800 	.word	0x40023800

08001cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	; 0x30
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2f      	ldr	r2, [pc, #188]	; (8001dcc <HAL_I2C_MspInit+0xdc>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d129      	bne.n	8001d66 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a2e      	ldr	r2, [pc, #184]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001d2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d30:	2312      	movs	r3, #18
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4823      	ldr	r0, [pc, #140]	; (8001dd4 <HAL_I2C_MspInit+0xe4>)
 8001d48:	f005 f9a8 	bl	800709c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001d52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d56:	6413      	str	r3, [r2, #64]	; 0x40
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d64:	e02d      	b.n	8001dc2 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_I2C_MspInit+0xe8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d128      	bne.n	8001dc2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001d88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8e:	2312      	movs	r3, #18
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d96:	2303      	movs	r3, #3
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4619      	mov	r1, r3
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <HAL_I2C_MspInit+0xec>)
 8001da6:	f005 f979 	bl	800709c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001db0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_I2C_MspInit+0xe0>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
}
 8001dc2:	bf00      	nop
 8001dc4:	3730      	adds	r7, #48	; 0x30
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40005400 	.word	0x40005400
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020400 	.word	0x40020400
 8001dd8:	40005c00 	.word	0x40005c00
 8001ddc:	40021c00 	.word	0x40021c00

08001de0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <HAL_I2C_MspDeInit+0x64>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d110      	bne.n	8001e14 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_I2C_MspDeInit+0x68>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <HAL_I2C_MspDeInit+0x68>)
 8001df8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8001dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e02:	4812      	ldr	r0, [pc, #72]	; (8001e4c <HAL_I2C_MspDeInit+0x6c>)
 8001e04:	f005 faf4 	bl	80073f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8001e08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e0c:	480f      	ldr	r0, [pc, #60]	; (8001e4c <HAL_I2C_MspDeInit+0x6c>)
 8001e0e:	f005 faef 	bl	80073f0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001e12:	e013      	b.n	8001e3c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <HAL_I2C_MspDeInit+0x70>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10e      	bne.n	8001e3c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_I2C_MspDeInit+0x68>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_I2C_MspDeInit+0x68>)
 8001e24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	4809      	ldr	r0, [pc, #36]	; (8001e54 <HAL_I2C_MspDeInit+0x74>)
 8001e2e:	f005 fadf 	bl	80073f0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e36:	4807      	ldr	r0, [pc, #28]	; (8001e54 <HAL_I2C_MspDeInit+0x74>)
 8001e38:	f005 fada 	bl	80073f0 <HAL_GPIO_DeInit>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40005400 	.word	0x40005400
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40005c00 	.word	0x40005c00
 8001e54:	40021c00 	.word	0x40021c00

08001e58 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08e      	sub	sp, #56	; 0x38
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a55      	ldr	r2, [pc, #340]	; (8001fcc <HAL_LTDC_MspInit+0x174>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	f040 80a3 	bne.w	8001fc2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001e7c:	4b54      	ldr	r3, [pc, #336]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	4a53      	ldr	r2, [pc, #332]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001e82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e86:	6453      	str	r3, [r2, #68]	; 0x44
 8001e88:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e94:	4b4e      	ldr	r3, [pc, #312]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	4a4d      	ldr	r2, [pc, #308]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea0:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001eac:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	4a47      	ldr	r2, [pc, #284]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb8:	4b45      	ldr	r3, [pc, #276]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ec4:	4b42      	ldr	r3, [pc, #264]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4a41      	ldr	r2, [pc, #260]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ece:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed0:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001edc:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	4a3b      	ldr	r2, [pc, #236]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee8:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ef4:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4a35      	ldr	r2, [pc, #212]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6313      	str	r3, [r2, #48]	; 0x30
 8001f00:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <HAL_LTDC_MspInit+0x178>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001f0c:	2310      	movs	r3, #16
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f1c:	230e      	movs	r3, #14
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	482b      	ldr	r0, [pc, #172]	; (8001fd4 <HAL_LTDC_MspInit+0x17c>)
 8001f28:	f005 f8b8 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001f2c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f3e:	230e      	movs	r3, #14
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f46:	4619      	mov	r1, r3
 8001f48:	4823      	ldr	r0, [pc, #140]	; (8001fd8 <HAL_LTDC_MspInit+0x180>)
 8001f4a:	f005 f8a7 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001f4e:	23f7      	movs	r3, #247	; 0xf7
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f5e:	230e      	movs	r3, #14
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f66:	4619      	mov	r1, r3
 8001f68:	481c      	ldr	r0, [pc, #112]	; (8001fdc <HAL_LTDC_MspInit+0x184>)
 8001f6a:	f005 f897 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f80:	2309      	movs	r3, #9
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4815      	ldr	r0, [pc, #84]	; (8001fe0 <HAL_LTDC_MspInit+0x188>)
 8001f8c:	f005 f886 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001f90:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fa2:	230e      	movs	r3, #14
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001faa:	4619      	mov	r1, r3
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <HAL_LTDC_MspInit+0x18c>)
 8001fae:	f005 f875 	bl	800709c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2058      	movs	r0, #88	; 0x58
 8001fb8:	f003 ff72 	bl	8005ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001fbc:	2058      	movs	r0, #88	; 0x58
 8001fbe:	f003 ff8b 	bl	8005ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3738      	adds	r7, #56	; 0x38
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40016800 	.word	0x40016800
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40022400 	.word	0x40022400
 8001fdc:	40022800 	.word	0x40022800
 8001fe0:	40021800 	.word	0x40021800
 8001fe4:	40022000 	.word	0x40022000

08001fe8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	; 0x30
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a3b      	ldr	r2, [pc, #236]	; (80020f4 <HAL_QSPI_MspInit+0x10c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d170      	bne.n	80020ec <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	4a3a      	ldr	r2, [pc, #232]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6393      	str	r3, [r2, #56]	; 0x38
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 8002018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002022:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 8002028:	f043 0310 	orr.w	r3, r3, #16
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a2e      	ldr	r2, [pc, #184]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002052:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a28      	ldr	r2, [pc, #160]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_QSPI_MspInit+0x110>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800206a:	2304      	movs	r3, #4
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800207a:	2309      	movs	r3, #9
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	4619      	mov	r1, r3
 8002084:	481d      	ldr	r0, [pc, #116]	; (80020fc <HAL_QSPI_MspInit+0x114>)
 8002086:	f005 f809 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800208a:	2340      	movs	r3, #64	; 0x40
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800209a:	230a      	movs	r3, #10
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800209e:	f107 031c 	add.w	r3, r7, #28
 80020a2:	4619      	mov	r1, r3
 80020a4:	4816      	ldr	r0, [pc, #88]	; (8002100 <HAL_QSPI_MspInit+0x118>)
 80020a6:	f004 fff9 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020aa:	2304      	movs	r3, #4
 80020ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020ba:	2309      	movs	r3, #9
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4619      	mov	r1, r3
 80020c4:	480e      	ldr	r0, [pc, #56]	; (8002100 <HAL_QSPI_MspInit+0x118>)
 80020c6:	f004 ffe9 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80020ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020dc:	2309      	movs	r3, #9
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	4807      	ldr	r0, [pc, #28]	; (8002104 <HAL_QSPI_MspInit+0x11c>)
 80020e8:	f004 ffd8 	bl	800709c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80020ec:	bf00      	nop
 80020ee:	3730      	adds	r7, #48	; 0x30
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	a0001000 	.word	0xa0001000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40021000 	.word	0x40021000
 8002100:	40020400 	.word	0x40020400
 8002104:	40020c00 	.word	0x40020c00

08002108 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_RTC_MspInit+0x2c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d105      	bne.n	8002126 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <HAL_RTC_MspInit+0x30>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a06      	ldr	r2, [pc, #24]	; (8002138 <HAL_RTC_MspInit+0x30>)
 8002120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40002800 	.word	0x40002800
 8002138:	40023800 	.word	0x40023800

0800213c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800215c:	d127      	bne.n	80021ae <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_SPDIFRX_MspInit+0x7c>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <HAL_SPDIFRX_MspInit+0x7c>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800219e:	2308      	movs	r3, #8
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <HAL_SPDIFRX_MspInit+0x80>)
 80021aa:	f004 ff77 	bl	800709c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	; 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020c00 	.word	0x40020c00

080021c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2e      	ldr	r2, [pc, #184]	; (8002288 <HAL_TIM_Base_MspInit+0xc8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d10c      	bne.n	80021ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d2:	4b2e      	ldr	r3, [pc, #184]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a2d      	ldr	r2, [pc, #180]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b2b      	ldr	r3, [pc, #172]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80021ea:	e046      	b.n	800227a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f4:	d10c      	bne.n	8002210 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	4a24      	ldr	r2, [pc, #144]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6413      	str	r3, [r2, #64]	; 0x40
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	69bb      	ldr	r3, [r7, #24]
}
 800220e:	e034      	b.n	800227a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1e      	ldr	r2, [pc, #120]	; (8002290 <HAL_TIM_Base_MspInit+0xd0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10c      	bne.n	8002234 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a1b      	ldr	r2, [pc, #108]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	697b      	ldr	r3, [r7, #20]
}
 8002232:	e022      	b.n	800227a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a16      	ldr	r2, [pc, #88]	; (8002294 <HAL_TIM_Base_MspInit+0xd4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10c      	bne.n	8002258 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 8002244:	f043 0308 	orr.w	r3, r3, #8
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
}
 8002256:	e010      	b.n	800227a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_TIM_Base_MspInit+0xd8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10b      	bne.n	800227a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a09      	ldr	r2, [pc, #36]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <HAL_TIM_Base_MspInit+0xcc>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
}
 800227a:	bf00      	nop
 800227c:	3724      	adds	r7, #36	; 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40010000 	.word	0x40010000
 800228c:	40023800 	.word	0x40023800
 8002290:	40000400 	.word	0x40000400
 8002294:	40000c00 	.word	0x40000c00
 8002298:	40010400 	.word	0x40010400

0800229c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_TIM_PWM_MspInit+0x38>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d10b      	bne.n	80022c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80022b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40001800 	.word	0x40001800
 80022d8:	40023800 	.word	0x40023800

080022dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a56      	ldr	r2, [pc, #344]	; (8002454 <HAL_TIM_MspPostInit+0x178>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d11d      	bne.n	800233a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	4b56      	ldr	r3, [pc, #344]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a55      	ldr	r2, [pc, #340]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b53      	ldr	r3, [pc, #332]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002328:	2301      	movs	r3, #1
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	4619      	mov	r1, r3
 8002332:	484a      	ldr	r0, [pc, #296]	; (800245c <HAL_TIM_MspPostInit+0x180>)
 8002334:	f004 feb2 	bl	800709c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002338:	e087      	b.n	800244a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002342:	d11d      	bne.n	8002380 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	4b44      	ldr	r3, [pc, #272]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4a43      	ldr	r2, [pc, #268]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800235c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800236e:	2301      	movs	r3, #1
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	4838      	ldr	r0, [pc, #224]	; (800245c <HAL_TIM_MspPostInit+0x180>)
 800237a:	f004 fe8f 	bl	800709c <HAL_GPIO_Init>
}
 800237e:	e064      	b.n	800244a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a36      	ldr	r2, [pc, #216]	; (8002460 <HAL_TIM_MspPostInit+0x184>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d11c      	bne.n	80023c4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	4b33      	ldr	r3, [pc, #204]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a32      	ldr	r2, [pc, #200]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80023a2:	2310      	movs	r3, #16
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023b2:	2302      	movs	r3, #2
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	4829      	ldr	r0, [pc, #164]	; (8002464 <HAL_TIM_MspPostInit+0x188>)
 80023be:	f004 fe6d 	bl	800709c <HAL_GPIO_Init>
}
 80023c2:	e042      	b.n	800244a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a27      	ldr	r2, [pc, #156]	; (8002468 <HAL_TIM_MspPostInit+0x18c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d11c      	bne.n	8002408 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a21      	ldr	r2, [pc, #132]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023f6:	2302      	movs	r3, #2
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	4619      	mov	r1, r3
 8002400:	481a      	ldr	r0, [pc, #104]	; (800246c <HAL_TIM_MspPostInit+0x190>)
 8002402:	f004 fe4b 	bl	800709c <HAL_GPIO_Init>
}
 8002406:	e020      	b.n	800244a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a18      	ldr	r2, [pc, #96]	; (8002470 <HAL_TIM_MspPostInit+0x194>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d11b      	bne.n	800244a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a10      	ldr	r2, [pc, #64]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 8002418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_TIM_MspPostInit+0x17c>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800242a:	2340      	movs	r3, #64	; 0x40
 800242c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800243a:	2309      	movs	r3, #9
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800243e:	f107 031c 	add.w	r3, r7, #28
 8002442:	4619      	mov	r1, r3
 8002444:	480b      	ldr	r0, [pc, #44]	; (8002474 <HAL_TIM_MspPostInit+0x198>)
 8002446:	f004 fe29 	bl	800709c <HAL_GPIO_Init>
}
 800244a:	bf00      	nop
 800244c:	3730      	adds	r7, #48	; 0x30
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40010000 	.word	0x40010000
 8002458:	40023800 	.word	0x40023800
 800245c:	40020000 	.word	0x40020000
 8002460:	40000400 	.word	0x40000400
 8002464:	40020400 	.word	0x40020400
 8002468:	40000c00 	.word	0x40000c00
 800246c:	40022000 	.word	0x40022000
 8002470:	40001800 	.word	0x40001800
 8002474:	40021c00 	.word	0x40021c00

08002478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	; 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a3c      	ldr	r2, [pc, #240]	; (8002588 <HAL_UART_MspInit+0x110>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d145      	bne.n	8002526 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800249a:	4b3c      	ldr	r3, [pc, #240]	; (800258c <HAL_UART_MspInit+0x114>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a3b      	ldr	r2, [pc, #236]	; (800258c <HAL_UART_MspInit+0x114>)
 80024a0:	f043 0310 	orr.w	r3, r3, #16
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b39      	ldr	r3, [pc, #228]	; (800258c <HAL_UART_MspInit+0x114>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_UART_MspInit+0x114>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a35      	ldr	r2, [pc, #212]	; (800258c <HAL_UART_MspInit+0x114>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_UART_MspInit+0x114>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_UART_MspInit+0x114>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a2f      	ldr	r2, [pc, #188]	; (800258c <HAL_UART_MspInit+0x114>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_UART_MspInit+0x114>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f2:	2307      	movs	r3, #7
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80024f6:	f107 031c 	add.w	r3, r7, #28
 80024fa:	4619      	mov	r1, r3
 80024fc:	4824      	ldr	r0, [pc, #144]	; (8002590 <HAL_UART_MspInit+0x118>)
 80024fe:	f004 fdcd 	bl	800709c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002514:	2307      	movs	r3, #7
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	4619      	mov	r1, r3
 800251e:	481d      	ldr	r0, [pc, #116]	; (8002594 <HAL_UART_MspInit+0x11c>)
 8002520:	f004 fdbc 	bl	800709c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002524:	e02c      	b.n	8002580 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <HAL_UART_MspInit+0x120>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d127      	bne.n	8002580 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_UART_MspInit+0x114>)
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	4a15      	ldr	r2, [pc, #84]	; (800258c <HAL_UART_MspInit+0x114>)
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	6453      	str	r3, [r2, #68]	; 0x44
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_UART_MspInit+0x114>)
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002548:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_UART_MspInit+0x114>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	4a0f      	ldr	r2, [pc, #60]	; (800258c <HAL_UART_MspInit+0x114>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6313      	str	r3, [r2, #48]	; 0x30
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_UART_MspInit+0x114>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002560:	23c0      	movs	r3, #192	; 0xc0
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002570:	2308      	movs	r3, #8
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	4619      	mov	r1, r3
 800257a:	4808      	ldr	r0, [pc, #32]	; (800259c <HAL_UART_MspInit+0x124>)
 800257c:	f004 fd8e 	bl	800709c <HAL_GPIO_Init>
}
 8002580:	bf00      	nop
 8002582:	3730      	adds	r7, #48	; 0x30
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40011000 	.word	0x40011000
 800258c:	40023800 	.word	0x40023800
 8002590:	40020400 	.word	0x40020400
 8002594:	40020000 	.word	0x40020000
 8002598:	40011400 	.word	0x40011400
 800259c:	40020800 	.word	0x40020800

080025a0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80025b4:	4b3a      	ldr	r3, [pc, #232]	; (80026a0 <HAL_FMC_MspInit+0x100>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d16d      	bne.n	8002698 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80025bc:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_FMC_MspInit+0x100>)
 80025be:	2201      	movs	r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <HAL_FMC_MspInit+0x104>)
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	4a37      	ldr	r2, [pc, #220]	; (80026a4 <HAL_FMC_MspInit+0x104>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6393      	str	r3, [r2, #56]	; 0x38
 80025ce:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <HAL_FMC_MspInit+0x104>)
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80025da:	f64f 7383 	movw	r3, #65411	; 0xff83
 80025de:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025ec:	230c      	movs	r3, #12
 80025ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	4619      	mov	r1, r3
 80025f4:	482c      	ldr	r0, [pc, #176]	; (80026a8 <HAL_FMC_MspInit+0x108>)
 80025f6:	f004 fd51 	bl	800709c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80025fa:	f248 1333 	movw	r3, #33075	; 0x8133
 80025fe:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800260c:	230c      	movs	r3, #12
 800260e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	4619      	mov	r1, r3
 8002614:	4825      	ldr	r0, [pc, #148]	; (80026ac <HAL_FMC_MspInit+0x10c>)
 8002616:	f004 fd41 	bl	800709c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800261a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800261e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800262c:	230c      	movs	r3, #12
 800262e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	4619      	mov	r1, r3
 8002634:	481e      	ldr	r0, [pc, #120]	; (80026b0 <HAL_FMC_MspInit+0x110>)
 8002636:	f004 fd31 	bl	800709c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800263a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800263e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002648:	2303      	movs	r3, #3
 800264a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800264c:	230c      	movs	r3, #12
 800264e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	4619      	mov	r1, r3
 8002654:	4817      	ldr	r0, [pc, #92]	; (80026b4 <HAL_FMC_MspInit+0x114>)
 8002656:	f004 fd21 	bl	800709c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800265a:	2328      	movs	r3, #40	; 0x28
 800265c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800266a:	230c      	movs	r3, #12
 800266c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	4619      	mov	r1, r3
 8002672:	4811      	ldr	r0, [pc, #68]	; (80026b8 <HAL_FMC_MspInit+0x118>)
 8002674:	f004 fd12 	bl	800709c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002678:	2308      	movs	r3, #8
 800267a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002684:	2303      	movs	r3, #3
 8002686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002688:	230c      	movs	r3, #12
 800268a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	4619      	mov	r1, r3
 8002690:	480a      	ldr	r0, [pc, #40]	; (80026bc <HAL_FMC_MspInit+0x11c>)
 8002692:	f004 fd03 	bl	800709c <HAL_GPIO_Init>
 8002696:	e000      	b.n	800269a <HAL_FMC_MspInit+0xfa>
    return;
 8002698:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	2000006c 	.word	0x2000006c
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40021800 	.word	0x40021800
 80026b0:	40020c00 	.word	0x40020c00
 80026b4:	40021400 	.word	0x40021400
 80026b8:	40021c00 	.word	0x40021c00
 80026bc:	40020800 	.word	0x40020800

080026c0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80026c8:	f7ff ff6a 	bl	80025a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a2b      	ldr	r2, [pc, #172]	; (8002790 <HAL_SAI_MspInit+0xbc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d124      	bne.n	8002730 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80026e6:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_SAI_MspInit+0xc0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_SAI_MspInit+0xc4>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4a29      	ldr	r2, [pc, #164]	; (8002798 <HAL_SAI_MspInit+0xc4>)
 80026f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026f8:	6453      	str	r3, [r2, #68]	; 0x44
 80026fa:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_SAI_MspInit+0xc4>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_SAI_MspInit+0xc0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	4a21      	ldr	r2, [pc, #132]	; (8002794 <HAL_SAI_MspInit+0xc0>)
 800270e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002710:	23f0      	movs	r3, #240	; 0xf0
 8002712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002720:	230a      	movs	r3, #10
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	4619      	mov	r1, r3
 800272a:	481c      	ldr	r0, [pc, #112]	; (800279c <HAL_SAI_MspInit+0xc8>)
 800272c:	f004 fcb6 	bl	800709c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1a      	ldr	r2, [pc, #104]	; (80027a0 <HAL_SAI_MspInit+0xcc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d125      	bne.n	8002786 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <HAL_SAI_MspInit+0xc0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10b      	bne.n	800275a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_SAI_MspInit+0xc4>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <HAL_SAI_MspInit+0xc4>)
 8002748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_SAI_MspInit+0xc4>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_SAI_MspInit+0xc0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <HAL_SAI_MspInit+0xc0>)
 8002762:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002776:	230a      	movs	r3, #10
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	4808      	ldr	r0, [pc, #32]	; (80027a4 <HAL_SAI_MspInit+0xd0>)
 8002782:	f004 fc8b 	bl	800709c <HAL_GPIO_Init>

    }
}
 8002786:	bf00      	nop
 8002788:	3728      	adds	r7, #40	; 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40015c04 	.word	0x40015c04
 8002794:	20000070 	.word	0x20000070
 8002798:	40023800 	.word	0x40023800
 800279c:	40022000 	.word	0x40022000
 80027a0:	40015c24 	.word	0x40015c24
 80027a4:	40021800 	.word	0x40021800

080027a8 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_SAI_MspDeInit+0x74>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d112      	bne.n	80027e0 <HAL_SAI_MspDeInit+0x38>
    {
    SAI2_client --;
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_SAI_MspDeInit+0x78>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3b01      	subs	r3, #1
 80027c0:	4a17      	ldr	r2, [pc, #92]	; (8002820 <HAL_SAI_MspDeInit+0x78>)
 80027c2:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HAL_SAI_MspDeInit+0x78>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d105      	bne.n	80027d8 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_SAI_MspDeInit+0x7c>)
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <HAL_SAI_MspDeInit+0x7c>)
 80027d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027d6:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 80027d8:	21f0      	movs	r1, #240	; 0xf0
 80027da:	4813      	ldr	r0, [pc, #76]	; (8002828 <HAL_SAI_MspDeInit+0x80>)
 80027dc:	f004 fe08 	bl	80073f0 <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a11      	ldr	r2, [pc, #68]	; (800282c <HAL_SAI_MspDeInit+0x84>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d113      	bne.n	8002812 <HAL_SAI_MspDeInit+0x6a>
    {
    SAI2_client --;
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_SAI_MspDeInit+0x78>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <HAL_SAI_MspDeInit+0x78>)
 80027f2:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_SAI_MspDeInit+0x78>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d105      	bne.n	8002808 <HAL_SAI_MspDeInit+0x60>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_SAI_MspDeInit+0x7c>)
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002800:	4a08      	ldr	r2, [pc, #32]	; (8002824 <HAL_SAI_MspDeInit+0x7c>)
 8002802:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002806:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8002808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800280c:	4808      	ldr	r0, [pc, #32]	; (8002830 <HAL_SAI_MspDeInit+0x88>)
 800280e:	f004 fdef 	bl	80073f0 <HAL_GPIO_DeInit>

    }
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40015c04 	.word	0x40015c04
 8002820:	20000070 	.word	0x20000070
 8002824:	40023800 	.word	0x40023800
 8002828:	40022000 	.word	0x40022000
 800282c:	40015c24 	.word	0x40015c24
 8002830:	40021800 	.word	0x40021800

08002834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	; 0x30
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002844:	2200      	movs	r2, #0
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	2036      	movs	r0, #54	; 0x36
 800284a:	f003 fb29 	bl	8005ea0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800284e:	2036      	movs	r0, #54	; 0x36
 8002850:	f003 fb42 	bl	8005ed8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002854:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <HAL_InitTick+0xa0>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	4a1e      	ldr	r2, [pc, #120]	; (80028d4 <HAL_InitTick+0xa0>)
 800285a:	f043 0310 	orr.w	r3, r3, #16
 800285e:	6413      	str	r3, [r2, #64]	; 0x40
 8002860:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <HAL_InitTick+0xa0>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800286c:	f107 0210 	add.w	r2, r7, #16
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f007 ff88 	bl	800a78c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800287c:	f007 ff5e 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 8002880:	4603      	mov	r3, r0
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <HAL_InitTick+0xa4>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0c9b      	lsrs	r3, r3, #18
 8002890:	3b01      	subs	r3, #1
 8002892:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_InitTick+0xa8>)
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <HAL_InitTick+0xac>)
 8002898:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_InitTick+0xa8>)
 800289c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80028a2:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <HAL_InitTick+0xa8>)
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_InitTick+0xa8>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_InitTick+0xa8>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80028b4:	4809      	ldr	r0, [pc, #36]	; (80028dc <HAL_InitTick+0xa8>)
 80028b6:	f009 fd87 	bl	800c3c8 <HAL_TIM_Base_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d104      	bne.n	80028ca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80028c0:	4806      	ldr	r0, [pc, #24]	; (80028dc <HAL_InitTick+0xa8>)
 80028c2:	f009 fdad 	bl	800c420 <HAL_TIM_Base_Start_IT>
 80028c6:	4603      	mov	r3, r0
 80028c8:	e000      	b.n	80028cc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3730      	adds	r7, #48	; 0x30
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	431bde83 	.word	0x431bde83
 80028dc:	200024e4 	.word	0x200024e4
 80028e0:	40001000 	.word	0x40001000

080028e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f6:	e7fe      	b.n	80028f6 <HardFault_Handler+0x4>

080028f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <MemManage_Handler+0x4>

080028fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002902:	e7fe      	b.n	8002902 <BusFault_Handler+0x4>

08002904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002908:	e7fe      	b.n	8002908 <UsageFault_Handler+0x4>

0800290a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <TIM6_DAC_IRQHandler+0x10>)
 800291e:	f009 fdd4 	bl	800c4ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200024e4 	.word	0x200024e4

0800292c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <OTG_FS_IRQHandler+0x10>)
 8002932:	f004 fe80 	bl	8007636 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20002648 	.word	0x20002648

08002940 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <LTDC_IRQHandler+0x10>)
 8002946:	f006 fee1 	bl	800970c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200007bc 	.word	0x200007bc

08002954 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002958:	4802      	ldr	r0, [pc, #8]	; (8002964 <DMA2D_IRQHandler+0x10>)
 800295a:	f004 f961 	bl	8006c20 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	2000235c 	.word	0x2000235c

08002968 <DMA2_Stream7_IRQHandler>:

/* USER CODE BEGIN 1 */
#include "stm32746g_discovery_audio.h"
extern SAI_HandleTypeDef haudio_in_sai;
 void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
 {
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
	 HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <DMA2_Stream7_IRQHandler+0x14>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	4618      	mov	r0, r3
 8002972:	f003 fd8f 	bl	8006494 <HAL_DMA_IRQHandler>
 }
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	2000014c 	.word	0x2000014c

08002980 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <SystemInit+0x28>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <SystemInit+0x28>)
 800298c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <SystemInit+0x28>)
 8002996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800299a:	609a      	str	r2, [r3, #8]
#endif
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029b2:	e003      	b.n	80029bc <LoopCopyDataInit>

080029b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029ba:	3104      	adds	r1, #4

080029bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029bc:	480b      	ldr	r0, [pc, #44]	; (80029ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029be:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029c4:	d3f6      	bcc.n	80029b4 <CopyDataInit>
  ldr  r2, =_sbss
 80029c6:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029c8:	e002      	b.n	80029d0 <LoopFillZerobss>

080029ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029cc:	f842 3b04 	str.w	r3, [r2], #4

080029d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029d4:	d3f9      	bcc.n	80029ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029d6:	f7ff ffd3 	bl	8002980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029da:	f00c ff39 	bl	800f850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029de:	f7fd fdb7 	bl	8000550 <main>
  bx  lr    
 80029e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029e4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80029e8:	080113d0 	.word	0x080113d0
  ldr  r0, =_sdata
 80029ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029f0:	20000050 	.word	0x20000050
  ldr  r2, =_sbss
 80029f4:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 80029f8:	2000290c 	.word	0x2000290c

080029fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029fc:	e7fe      	b.n	80029fc <ADC_IRQHandler>
	...

08002a00 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	4603      	mov	r3, r0
 8002a0a:	81fb      	strh	r3, [r7, #14]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	81bb      	strh	r3, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8002a18:	89bb      	ldrh	r3, [r7, #12]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8002a1e:	89bb      	ldrh	r3, [r7, #12]
 8002a20:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a24:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002a2a:	f001 fc59 	bl	80042e0 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8002a2e:	89fb      	ldrh	r3, [r7, #14]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2203      	movs	r2, #3
 8002a34:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fab3 	bl	8003fa4 <CODEC_IO_Write>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	4413      	add	r3, r2
 8002a46:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002a48:	89fb      	ldrh	r3, [r7, #14]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f640 0117 	movw	r1, #2071	; 0x817
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 faa6 	bl	8003fa4 <CODEC_IO_Write>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8002a62:	89fb      	ldrh	r3, [r7, #14]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2200      	movs	r2, #0
 8002a68:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f001 fa99 	bl	8003fa4 <CODEC_IO_Write>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002a7c:	89fb      	ldrh	r3, [r7, #14]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	226c      	movs	r2, #108	; 0x6c
 8002a82:	2139      	movs	r1, #57	; 0x39
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 fa8d 	bl	8003fa4 <CODEC_IO_Write>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002a94:	8afb      	ldrh	r3, [r7, #22]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00c      	beq.n	8002ab4 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8002a9a:	89fb      	ldrh	r3, [r7, #14]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2213      	movs	r2, #19
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 fa7e 	bl	8003fa4 <CODEC_IO_Write>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e00b      	b.n	8002acc <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002ab4:	89fb      	ldrh	r3, [r7, #14]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2203      	movs	r2, #3
 8002aba:	2101      	movs	r1, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 fa71 	bl	8003fa4 <CODEC_IO_Write>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002acc:	2032      	movs	r0, #50	; 0x32
 8002ace:	f001 fc6f 	bl	80043b0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002ad2:	8b3b      	ldrh	r3, [r7, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 815b 	beq.w	8002d90 <wm8994_Init+0x390>
  {
    outputEnabled = 1;
 8002ada:	4bbc      	ldr	r3, [pc, #752]	; (8002dcc <wm8994_Init+0x3cc>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002ae0:	8b3b      	ldrh	r3, [r7, #24]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d047      	beq.n	8002b76 <wm8994_Init+0x176>
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	f000 8087 	beq.w	8002bfa <wm8994_Init+0x1fa>
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	f040 810c 	bne.w	8002d0a <wm8994_Init+0x30a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002af2:	89fb      	ldrh	r3, [r7, #14]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f640 420c 	movw	r2, #3084	; 0xc0c
 8002afa:	2105      	movs	r1, #5
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 fa51 	bl	8003fa4 <CODEC_IO_Write>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461a      	mov	r2, r3
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8002b0c:	89fb      	ldrh	r3, [r7, #14]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2200      	movs	r2, #0
 8002b12:	f240 6101 	movw	r1, #1537	; 0x601
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 fa44 	bl	8003fa4 <CODEC_IO_Write>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	4413      	add	r3, r2
 8002b24:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002b26:	89fb      	ldrh	r3, [r7, #14]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f240 6102 	movw	r1, #1538	; 0x602
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 fa37 	bl	8003fa4 <CODEC_IO_Write>
 8002b36:	4603      	mov	r3, r0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002b40:	89fb      	ldrh	r3, [r7, #14]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2202      	movs	r2, #2
 8002b46:	f240 6104 	movw	r1, #1540	; 0x604
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 fa2a 	bl	8003fa4 <CODEC_IO_Write>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4413      	add	r3, r2
 8002b58:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002b5a:	89fb      	ldrh	r3, [r7, #14]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f240 6105 	movw	r1, #1541	; 0x605
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 fa1d 	bl	8003fa4 <CODEC_IO_Write>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	61fb      	str	r3, [r7, #28]
      break;
 8002b74:	e10f      	b.n	8002d96 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002b76:	89fb      	ldrh	r3, [r7, #14]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f240 3203 	movw	r2, #771	; 0x303
 8002b7e:	2105      	movs	r1, #5
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 fa0f 	bl	8003fa4 <CODEC_IO_Write>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002b90:	89fb      	ldrh	r3, [r7, #14]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2201      	movs	r2, #1
 8002b96:	f240 6101 	movw	r1, #1537	; 0x601
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 fa02 	bl	8003fa4 <CODEC_IO_Write>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002baa:	89fb      	ldrh	r3, [r7, #14]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f240 6102 	movw	r1, #1538	; 0x602
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 f9f5 	bl	8003fa4 <CODEC_IO_Write>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002bc4:	89fb      	ldrh	r3, [r7, #14]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f240 6104 	movw	r1, #1540	; 0x604
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 f9e8 	bl	8003fa4 <CODEC_IO_Write>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	4413      	add	r3, r2
 8002bdc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002bde:	89fb      	ldrh	r3, [r7, #14]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2200      	movs	r2, #0
 8002be4:	f240 6105 	movw	r1, #1541	; 0x605
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 f9db 	bl	8003fa4 <CODEC_IO_Write>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	61fb      	str	r3, [r7, #28]
      break;
 8002bf8:	e0cd      	b.n	8002d96 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002bfa:	8afb      	ldrh	r3, [r7, #22]
 8002bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c00:	d141      	bne.n	8002c86 <wm8994_Init+0x286>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002c02:	89fb      	ldrh	r3, [r7, #14]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002c0a:	2105      	movs	r1, #5
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f001 f9c9 	bl	8003fa4 <CODEC_IO_Write>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4413      	add	r3, r2
 8002c1a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8002c1c:	89fb      	ldrh	r3, [r7, #14]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2203      	movs	r2, #3
 8002c22:	f240 6101 	movw	r1, #1537	; 0x601
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 f9bc 	bl	8003fa4 <CODEC_IO_Write>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8002c36:	89fb      	ldrh	r3, [r7, #14]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	f240 6102 	movw	r1, #1538	; 0x602
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 f9af 	bl	8003fa4 <CODEC_IO_Write>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8002c50:	89fb      	ldrh	r3, [r7, #14]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2203      	movs	r2, #3
 8002c56:	f240 6104 	movw	r1, #1540	; 0x604
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 f9a2 	bl	8003fa4 <CODEC_IO_Write>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	4413      	add	r3, r2
 8002c68:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8002c6a:	89fb      	ldrh	r3, [r7, #14]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f240 6105 	movw	r1, #1541	; 0x605
 8002c74:	4618      	mov	r0, r3
 8002c76:	f001 f995 	bl	8003fa4 <CODEC_IO_Write>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8002c84:	e087      	b.n	8002d96 <wm8994_Init+0x396>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002c86:	89fb      	ldrh	r3, [r7, #14]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002c8e:	2105      	movs	r1, #5
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 f987 	bl	8003fa4 <CODEC_IO_Write>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002ca0:	89fb      	ldrh	r3, [r7, #14]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f240 6101 	movw	r1, #1537	; 0x601
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 f97a 	bl	8003fa4 <CODEC_IO_Write>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002cba:	89fb      	ldrh	r3, [r7, #14]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f240 6102 	movw	r1, #1538	; 0x602
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 f96d 	bl	8003fa4 <CODEC_IO_Write>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002cd4:	89fb      	ldrh	r3, [r7, #14]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f240 6104 	movw	r1, #1540	; 0x604
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 f960 	bl	8003fa4 <CODEC_IO_Write>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002cee:	89fb      	ldrh	r3, [r7, #14]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f240 6105 	movw	r1, #1541	; 0x605
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 f953 	bl	8003fa4 <CODEC_IO_Write>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	4413      	add	r3, r2
 8002d06:	61fb      	str	r3, [r7, #28]
      break;
 8002d08:	e045      	b.n	8002d96 <wm8994_Init+0x396>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002d0a:	89fb      	ldrh	r3, [r7, #14]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f240 3203 	movw	r2, #771	; 0x303
 8002d12:	2105      	movs	r1, #5
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 f945 	bl	8003fa4 <CODEC_IO_Write>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002d24:	89fb      	ldrh	r3, [r7, #14]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f240 6101 	movw	r1, #1537	; 0x601
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 f938 	bl	8003fa4 <CODEC_IO_Write>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461a      	mov	r2, r3
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002d3e:	89fb      	ldrh	r3, [r7, #14]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2201      	movs	r2, #1
 8002d44:	f240 6102 	movw	r1, #1538	; 0x602
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 f92b 	bl	8003fa4 <CODEC_IO_Write>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002d58:	89fb      	ldrh	r3, [r7, #14]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f240 6104 	movw	r1, #1540	; 0x604
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 f91e 	bl	8003fa4 <CODEC_IO_Write>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002d72:	89fb      	ldrh	r3, [r7, #14]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2200      	movs	r2, #0
 8002d78:	f240 6105 	movw	r1, #1541	; 0x605
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 f911 	bl	8003fa4 <CODEC_IO_Write>
 8002d82:	4603      	mov	r3, r0
 8002d84:	461a      	mov	r2, r3
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	4413      	add	r3, r2
 8002d8a:	61fb      	str	r3, [r7, #28]
      break;
 8002d8c:	bf00      	nop
 8002d8e:	e002      	b.n	8002d96 <wm8994_Init+0x396>
    }
  }
  else
  {
    outputEnabled = 0;
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <wm8994_Init+0x3cc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002d96:	8afb      	ldrh	r3, [r7, #22]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 81a7 	beq.w	80030ec <wm8994_Init+0x6ec>
  {
    inputEnabled = 1;
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <wm8994_Init+0x3d0>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002da4:	8afb      	ldrh	r3, [r7, #22]
 8002da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002daa:	d013      	beq.n	8002dd4 <wm8994_Init+0x3d4>
 8002dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db0:	dc04      	bgt.n	8002dbc <wm8994_Init+0x3bc>
 8002db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db6:	f000 80cf 	beq.w	8002f58 <wm8994_Init+0x558>
 8002dba:	e192      	b.n	80030e2 <wm8994_Init+0x6e2>
 8002dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dc0:	d057      	beq.n	8002e72 <wm8994_Init+0x472>
 8002dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc6:	f000 8116 	beq.w	8002ff6 <wm8994_Init+0x5f6>
 8002dca:	e18a      	b.n	80030e2 <wm8994_Init+0x6e2>
 8002dcc:	20000074 	.word	0x20000074
 8002dd0:	20000078 	.word	0x20000078
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002dd4:	89fb      	ldrh	r3, [r7, #14]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8002ddc:	2104      	movs	r1, #4
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 f8e0 	bl	8003fa4 <CODEC_IO_Write>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	4413      	add	r3, r2
 8002dec:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002dee:	89fb      	ldrh	r3, [r7, #14]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	22db      	movs	r2, #219	; 0xdb
 8002df4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 f8d3 	bl	8003fa4 <CODEC_IO_Write>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	461a      	mov	r2, r3
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	4413      	add	r3, r2
 8002e06:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002e08:	89fb      	ldrh	r3, [r7, #14]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8002e10:	2102      	movs	r1, #2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 f8c6 	bl	8003fa4 <CODEC_IO_Write>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002e22:	89fb      	ldrh	r3, [r7, #14]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2202      	movs	r2, #2
 8002e28:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 f8b9 	bl	8003fa4 <CODEC_IO_Write>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461a      	mov	r2, r3
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4413      	add	r3, r2
 8002e3a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002e3c:	89fb      	ldrh	r3, [r7, #14]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2202      	movs	r2, #2
 8002e42:	f240 6109 	movw	r1, #1545	; 0x609
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 f8ac 	bl	8003fa4 <CODEC_IO_Write>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	461a      	mov	r2, r3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	4413      	add	r3, r2
 8002e54:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8002e56:	89fb      	ldrh	r3, [r7, #14]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	220e      	movs	r2, #14
 8002e5c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 f89f 	bl	8003fa4 <CODEC_IO_Write>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	61fb      	str	r3, [r7, #28]
      break;
 8002e70:	e13f      	b.n	80030f2 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8002e72:	89fb      	ldrh	r3, [r7, #14]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2211      	movs	r2, #17
 8002e78:	2128      	movs	r1, #40	; 0x28
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 f892 	bl	8003fa4 <CODEC_IO_Write>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	4413      	add	r3, r2
 8002e88:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8002e8a:	89fb      	ldrh	r3, [r7, #14]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2235      	movs	r2, #53	; 0x35
 8002e90:	2129      	movs	r1, #41	; 0x29
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 f886 	bl	8003fa4 <CODEC_IO_Write>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8002ea2:	89fb      	ldrh	r3, [r7, #14]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2235      	movs	r2, #53	; 0x35
 8002ea8:	212a      	movs	r1, #42	; 0x2a
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 f87a 	bl	8003fa4 <CODEC_IO_Write>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002eba:	89fb      	ldrh	r3, [r7, #14]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f240 3203 	movw	r2, #771	; 0x303
 8002ec2:	2104      	movs	r1, #4
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 f86d 	bl	8003fa4 <CODEC_IO_Write>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	461a      	mov	r2, r3
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002ed4:	89fb      	ldrh	r3, [r7, #14]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	22db      	movs	r2, #219	; 0xdb
 8002eda:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 f860 	bl	8003fa4 <CODEC_IO_Write>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	4413      	add	r3, r2
 8002eec:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002eee:	89fb      	ldrh	r3, [r7, #14]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f246 3250 	movw	r2, #25424	; 0x6350
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 f853 	bl	8003fa4 <CODEC_IO_Write>
 8002efe:	4603      	mov	r3, r0
 8002f00:	461a      	mov	r2, r3
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002f08:	89fb      	ldrh	r3, [r7, #14]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f240 6106 	movw	r1, #1542	; 0x606
 8002f12:	4618      	mov	r0, r3
 8002f14:	f001 f846 	bl	8003fa4 <CODEC_IO_Write>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4413      	add	r3, r2
 8002f20:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002f22:	89fb      	ldrh	r3, [r7, #14]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2202      	movs	r2, #2
 8002f28:	f240 6107 	movw	r1, #1543	; 0x607
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 f839 	bl	8003fa4 <CODEC_IO_Write>
 8002f32:	4603      	mov	r3, r0
 8002f34:	461a      	mov	r2, r3
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002f3c:	89fb      	ldrh	r3, [r7, #14]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	220d      	movs	r2, #13
 8002f42:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f82c 	bl	8003fa4 <CODEC_IO_Write>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	4413      	add	r3, r2
 8002f54:	61fb      	str	r3, [r7, #28]
      break;
 8002f56:	e0cc      	b.n	80030f2 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8002f60:	2104      	movs	r1, #4
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 f81e 	bl	8003fa4 <CODEC_IO_Write>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002f72:	89fb      	ldrh	r3, [r7, #14]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	22db      	movs	r2, #219	; 0xdb
 8002f78:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f001 f811 	bl	8003fa4 <CODEC_IO_Write>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002f8c:	89fb      	ldrh	r3, [r7, #14]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f246 3250 	movw	r2, #25424	; 0x6350
 8002f94:	2102      	movs	r1, #2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 f804 	bl	8003fa4 <CODEC_IO_Write>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2202      	movs	r2, #2
 8002fac:	f240 6106 	movw	r1, #1542	; 0x606
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fff7 	bl	8003fa4 <CODEC_IO_Write>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002fc0:	89fb      	ldrh	r3, [r7, #14]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f240 6107 	movw	r1, #1543	; 0x607
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 ffea 	bl	8003fa4 <CODEC_IO_Write>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002fda:	89fb      	ldrh	r3, [r7, #14]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	220d      	movs	r2, #13
 8002fe0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 ffdd 	bl	8003fa4 <CODEC_IO_Write>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461a      	mov	r2, r3
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	61fb      	str	r3, [r7, #28]
      break; 
 8002ff4:	e07d      	b.n	80030f2 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002ff6:	89fb      	ldrh	r3, [r7, #14]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002ffe:	2104      	movs	r1, #4
 8003000:	4618      	mov	r0, r3
 8003002:	f000 ffcf 	bl	8003fa4 <CODEC_IO_Write>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003010:	89fb      	ldrh	r3, [r7, #14]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	22db      	movs	r2, #219	; 0xdb
 8003016:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800301a:	4618      	mov	r0, r3
 800301c:	f000 ffc2 	bl	8003fa4 <CODEC_IO_Write>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	4413      	add	r3, r2
 8003028:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	22db      	movs	r2, #219	; 0xdb
 8003030:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003034:	4618      	mov	r0, r3
 8003036:	f000 ffb5 	bl	8003fa4 <CODEC_IO_Write>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8003044:	89fb      	ldrh	r3, [r7, #14]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f246 32a0 	movw	r2, #25504	; 0x63a0
 800304c:	2102      	movs	r1, #2
 800304e:	4618      	mov	r0, r3
 8003050:	f000 ffa8 	bl	8003fa4 <CODEC_IO_Write>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800305e:	89fb      	ldrh	r3, [r7, #14]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2202      	movs	r2, #2
 8003064:	f240 6106 	movw	r1, #1542	; 0x606
 8003068:	4618      	mov	r0, r3
 800306a:	f000 ff9b 	bl	8003fa4 <CODEC_IO_Write>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8003078:	89fb      	ldrh	r3, [r7, #14]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2202      	movs	r2, #2
 800307e:	f240 6107 	movw	r1, #1543	; 0x607
 8003082:	4618      	mov	r0, r3
 8003084:	f000 ff8e 	bl	8003fa4 <CODEC_IO_Write>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8003092:	89fb      	ldrh	r3, [r7, #14]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2202      	movs	r2, #2
 8003098:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800309c:	4618      	mov	r0, r3
 800309e:	f000 ff81 	bl	8003fa4 <CODEC_IO_Write>
 80030a2:	4603      	mov	r3, r0
 80030a4:	461a      	mov	r2, r3
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4413      	add	r3, r2
 80030aa:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80030ac:	89fb      	ldrh	r3, [r7, #14]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2202      	movs	r2, #2
 80030b2:	f240 6109 	movw	r1, #1545	; 0x609
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 ff74 	bl	8003fa4 <CODEC_IO_Write>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	4413      	add	r3, r2
 80030c4:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80030c6:	89fb      	ldrh	r3, [r7, #14]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	220d      	movs	r2, #13
 80030cc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 ff67 	bl	8003fa4 <CODEC_IO_Write>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	4413      	add	r3, r2
 80030de:	61fb      	str	r3, [r7, #28]
      break;    
 80030e0:	e007      	b.n	80030f2 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
      break;
 80030e8:	bf00      	nop
 80030ea:	e002      	b.n	80030f2 <wm8994_Init+0x6f2>
    }
  }
  else
  {
    inputEnabled = 0;
 80030ec:	4b95      	ldr	r3, [pc, #596]	; (8003344 <wm8994_Init+0x944>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f245 6222 	movw	r2, #22050	; 0x5622
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d076      	beq.n	80031ea <wm8994_Init+0x7ea>
 80030fc:	f245 6222 	movw	r2, #22050	; 0x5622
 8003100:	4293      	cmp	r3, r2
 8003102:	d80a      	bhi.n	800311a <wm8994_Init+0x71a>
 8003104:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003108:	4293      	cmp	r3, r2
 800310a:	d060      	beq.n	80031ce <wm8994_Init+0x7ce>
 800310c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003110:	d025      	beq.n	800315e <wm8994_Init+0x75e>
 8003112:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003116:	d014      	beq.n	8003142 <wm8994_Init+0x742>
 8003118:	e083      	b.n	8003222 <wm8994_Init+0x822>
 800311a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800311e:	4293      	cmp	r3, r2
 8003120:	d071      	beq.n	8003206 <wm8994_Init+0x806>
 8003122:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003126:	4293      	cmp	r3, r2
 8003128:	d803      	bhi.n	8003132 <wm8994_Init+0x732>
 800312a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800312e:	d024      	beq.n	800317a <wm8994_Init+0x77a>
 8003130:	e077      	b.n	8003222 <wm8994_Init+0x822>
 8003132:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003136:	4293      	cmp	r3, r2
 8003138:	d02d      	beq.n	8003196 <wm8994_Init+0x796>
 800313a:	4a83      	ldr	r2, [pc, #524]	; (8003348 <wm8994_Init+0x948>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d038      	beq.n	80031b2 <wm8994_Init+0x7b2>
 8003140:	e06f      	b.n	8003222 <wm8994_Init+0x822>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003142:	89fb      	ldrh	r3, [r7, #14]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2203      	movs	r2, #3
 8003148:	f44f 7104 	mov.w	r1, #528	; 0x210
 800314c:	4618      	mov	r0, r3
 800314e:	f000 ff29 	bl	8003fa4 <CODEC_IO_Write>
 8003152:	4603      	mov	r3, r0
 8003154:	461a      	mov	r2, r3
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	4413      	add	r3, r2
 800315a:	61fb      	str	r3, [r7, #28]
    break;
 800315c:	e06f      	b.n	800323e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800315e:	89fb      	ldrh	r3, [r7, #14]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2233      	movs	r2, #51	; 0x33
 8003164:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003168:	4618      	mov	r0, r3
 800316a:	f000 ff1b 	bl	8003fa4 <CODEC_IO_Write>
 800316e:	4603      	mov	r3, r0
 8003170:	461a      	mov	r2, r3
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	4413      	add	r3, r2
 8003176:	61fb      	str	r3, [r7, #28]
    break;
 8003178:	e061      	b.n	800323e <wm8994_Init+0x83e>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800317a:	89fb      	ldrh	r3, [r7, #14]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2263      	movs	r2, #99	; 0x63
 8003180:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003184:	4618      	mov	r0, r3
 8003186:	f000 ff0d 	bl	8003fa4 <CODEC_IO_Write>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4413      	add	r3, r2
 8003192:	61fb      	str	r3, [r7, #28]
    break;
 8003194:	e053      	b.n	800323e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003196:	89fb      	ldrh	r3, [r7, #14]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2283      	movs	r2, #131	; 0x83
 800319c:	f44f 7104 	mov.w	r1, #528	; 0x210
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 feff 	bl	8003fa4 <CODEC_IO_Write>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4413      	add	r3, r2
 80031ae:	61fb      	str	r3, [r7, #28]
    break;
 80031b0:	e045      	b.n	800323e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80031b2:	89fb      	ldrh	r3, [r7, #14]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	22a3      	movs	r2, #163	; 0xa3
 80031b8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fef1 	bl	8003fa4 <CODEC_IO_Write>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	61fb      	str	r3, [r7, #28]
    break;
 80031cc:	e037      	b.n	800323e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80031ce:	89fb      	ldrh	r3, [r7, #14]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2213      	movs	r2, #19
 80031d4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fee3 	bl	8003fa4 <CODEC_IO_Write>
 80031de:	4603      	mov	r3, r0
 80031e0:	461a      	mov	r2, r3
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	61fb      	str	r3, [r7, #28]
    break;
 80031e8:	e029      	b.n	800323e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80031ea:	89fb      	ldrh	r3, [r7, #14]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2243      	movs	r2, #67	; 0x43
 80031f0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fed5 	bl	8003fa4 <CODEC_IO_Write>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
    break;
 8003204:	e01b      	b.n	800323e <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003206:	89fb      	ldrh	r3, [r7, #14]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2273      	movs	r2, #115	; 0x73
 800320c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fec7 	bl	8003fa4 <CODEC_IO_Write>
 8003216:	4603      	mov	r3, r0
 8003218:	461a      	mov	r2, r3
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	4413      	add	r3, r2
 800321e:	61fb      	str	r3, [r7, #28]
    break; 
 8003220:	e00d      	b.n	800323e <wm8994_Init+0x83e>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003222:	89fb      	ldrh	r3, [r7, #14]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2283      	movs	r2, #131	; 0x83
 8003228:	f44f 7104 	mov.w	r1, #528	; 0x210
 800322c:	4618      	mov	r0, r3
 800322e:	f000 feb9 	bl	8003fa4 <CODEC_IO_Write>
 8003232:	4603      	mov	r3, r0
 8003234:	461a      	mov	r2, r3
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	61fb      	str	r3, [r7, #28]
    break; 
 800323c:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800323e:	8afb      	ldrh	r3, [r7, #22]
 8003240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003244:	d10e      	bne.n	8003264 <wm8994_Init+0x864>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8003246:	89fb      	ldrh	r3, [r7, #14]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f244 0218 	movw	r2, #16408	; 0x4018
 800324e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fea6 	bl	8003fa4 <CODEC_IO_Write>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	4413      	add	r3, r2
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	e00d      	b.n	8003280 <wm8994_Init+0x880>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8003264:	89fb      	ldrh	r3, [r7, #14]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f244 0210 	movw	r2, #16400	; 0x4010
 800326c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fe97 	bl	8003fa4 <CODEC_IO_Write>
 8003276:	4603      	mov	r3, r0
 8003278:	461a      	mov	r2, r3
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2200      	movs	r2, #0
 8003286:	f240 3102 	movw	r1, #770	; 0x302
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fe8a 	bl	8003fa4 <CODEC_IO_Write>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	4413      	add	r3, r2
 8003298:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800329a:	89fb      	ldrh	r3, [r7, #14]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	220a      	movs	r2, #10
 80032a0:	f44f 7102 	mov.w	r1, #520	; 0x208
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fe7d 	bl	8003fa4 <CODEC_IO_Write>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	4413      	add	r3, r2
 80032b2:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80032b4:	89fb      	ldrh	r3, [r7, #14]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2201      	movs	r2, #1
 80032ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fe70 	bl	8003fa4 <CODEC_IO_Write>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	4413      	add	r3, r2
 80032cc:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80032ce:	8b3b      	ldrh	r3, [r7, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 817b 	beq.w	80035cc <wm8994_Init+0xbcc>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80032d6:	8b3b      	ldrh	r3, [r7, #24]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d157      	bne.n	800338c <wm8994_Init+0x98c>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80032dc:	89fb      	ldrh	r3, [r7, #14]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e4:	212d      	movs	r1, #45	; 0x2d
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fe5c 	bl	8003fa4 <CODEC_IO_Write>
 80032ec:	4603      	mov	r3, r0
 80032ee:	461a      	mov	r2, r3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	4413      	add	r3, r2
 80032f4:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80032f6:	89fb      	ldrh	r3, [r7, #14]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032fe:	212e      	movs	r1, #46	; 0x2e
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fe4f 	bl	8003fa4 <CODEC_IO_Write>
 8003306:	4603      	mov	r3, r0
 8003308:	461a      	mov	r2, r3
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	4413      	add	r3, r2
 800330e:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8003310:	4b0e      	ldr	r3, [pc, #56]	; (800334c <wm8994_Init+0x94c>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01b      	beq.n	8003350 <wm8994_Init+0x950>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8003318:	89fb      	ldrh	r3, [r7, #14]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8003320:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fe3d 	bl	8003fa4 <CODEC_IO_Write>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <wm8994_Init+0x94c>)
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800333a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800333e:	f001 f837 	bl	80043b0 <AUDIO_IO_Delay>
 8003342:	e016      	b.n	8003372 <wm8994_Init+0x972>
 8003344:	20000078 	.word	0x20000078
 8003348:	00017700 	.word	0x00017700
 800334c:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8003350:	89fb      	ldrh	r3, [r7, #14]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f248 1208 	movw	r2, #33032	; 0x8108
 8003358:	f44f 7188 	mov.w	r1, #272	; 0x110
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fe21 	bl	8003fa4 <CODEC_IO_Write>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	4413      	add	r3, r2
 800336a:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 800336c:	2032      	movs	r0, #50	; 0x32
 800336e:	f001 f81f 	bl	80043b0 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8003372:	89fb      	ldrh	r3, [r7, #14]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2200      	movs	r2, #0
 8003378:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fe11 	bl	8003fa4 <CODEC_IO_Write>
 8003382:	4603      	mov	r3, r0
 8003384:	461a      	mov	r2, r3
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800338c:	89fb      	ldrh	r3, [r7, #14]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003394:	2103      	movs	r1, #3
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fe04 	bl	8003fa4 <CODEC_IO_Write>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4413      	add	r3, r2
 80033a4:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80033a6:	89fb      	ldrh	r3, [r7, #14]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2200      	movs	r2, #0
 80033ac:	2122      	movs	r1, #34	; 0x22
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fdf8 	bl	8003fa4 <CODEC_IO_Write>
 80033b4:	4603      	mov	r3, r0
 80033b6:	461a      	mov	r2, r3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4413      	add	r3, r2
 80033bc:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80033be:	89fb      	ldrh	r3, [r7, #14]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2200      	movs	r2, #0
 80033c4:	2123      	movs	r1, #35	; 0x23
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fdec 	bl	8003fa4 <CODEC_IO_Write>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80033d6:	89fb      	ldrh	r3, [r7, #14]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80033de:	2136      	movs	r1, #54	; 0x36
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fddf 	bl	8003fa4 <CODEC_IO_Write>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80033f0:	89fb      	ldrh	r3, [r7, #14]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f243 0203 	movw	r2, #12291	; 0x3003
 80033f8:	2101      	movs	r1, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fdd2 	bl	8003fa4 <CODEC_IO_Write>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800340a:	8afb      	ldrh	r3, [r7, #22]
 800340c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003410:	d10d      	bne.n	800342e <wm8994_Init+0xa2e>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8003412:	89fb      	ldrh	r3, [r7, #14]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f240 2205 	movw	r2, #517	; 0x205
 800341a:	2151      	movs	r1, #81	; 0x51
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fdc1 	bl	8003fa4 <CODEC_IO_Write>
 8003422:	4603      	mov	r3, r0
 8003424:	461a      	mov	r2, r3
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	e00b      	b.n	8003446 <wm8994_Init+0xa46>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800342e:	89fb      	ldrh	r3, [r7, #14]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2205      	movs	r2, #5
 8003434:	2151      	movs	r1, #81	; 0x51
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fdb4 	bl	8003fa4 <CODEC_IO_Write>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8003446:	8b7b      	ldrh	r3, [r7, #26]
 8003448:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 800344c:	f043 0303 	orr.w	r3, r3, #3
 8003450:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003452:	89fb      	ldrh	r3, [r7, #14]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	8b7a      	ldrh	r2, [r7, #26]
 8003458:	2101      	movs	r1, #1
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fda2 	bl	8003fa4 <CODEC_IO_Write>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800346a:	89fb      	ldrh	r3, [r7, #14]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2222      	movs	r2, #34	; 0x22
 8003470:	2160      	movs	r1, #96	; 0x60
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fd96 	bl	8003fa4 <CODEC_IO_Write>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	4413      	add	r3, r2
 8003480:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8003482:	89fb      	ldrh	r3, [r7, #14]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f649 7225 	movw	r2, #40741	; 0x9f25
 800348a:	214c      	movs	r1, #76	; 0x4c
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fd89 	bl	8003fa4 <CODEC_IO_Write>
 8003492:	4603      	mov	r3, r0
 8003494:	461a      	mov	r2, r3
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 800349c:	200f      	movs	r0, #15
 800349e:	f000 ff87 	bl	80043b0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80034a2:	89fb      	ldrh	r3, [r7, #14]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2201      	movs	r2, #1
 80034a8:	212d      	movs	r1, #45	; 0x2d
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fd7a 	bl	8003fa4 <CODEC_IO_Write>
 80034b0:	4603      	mov	r3, r0
 80034b2:	461a      	mov	r2, r3
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	4413      	add	r3, r2
 80034b8:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80034ba:	89fb      	ldrh	r3, [r7, #14]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2201      	movs	r2, #1
 80034c0:	212e      	movs	r1, #46	; 0x2e
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fd6e 	bl	8003fa4 <CODEC_IO_Write>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80034d2:	89fb      	ldrh	r3, [r7, #14]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f44f 724c 	mov.w	r2, #816	; 0x330
 80034da:	2103      	movs	r1, #3
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fd61 	bl	8003fa4 <CODEC_IO_Write>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	4413      	add	r3, r2
 80034ea:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80034ec:	89fb      	ldrh	r3, [r7, #14]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2233      	movs	r2, #51	; 0x33
 80034f2:	2154      	movs	r1, #84	; 0x54
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fd55 	bl	8003fa4 <CODEC_IO_Write>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8003504:	f240 1001 	movw	r0, #257	; 0x101
 8003508:	f000 ff52 	bl	80043b0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800350c:	89fb      	ldrh	r3, [r7, #14]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	22ee      	movs	r2, #238	; 0xee
 8003512:	2160      	movs	r1, #96	; 0x60
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fd45 	bl	8003fa4 <CODEC_IO_Write>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	4413      	add	r3, r2
 8003522:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8003524:	89fb      	ldrh	r3, [r7, #14]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	22c0      	movs	r2, #192	; 0xc0
 800352a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fd38 	bl	8003fa4 <CODEC_IO_Write>
 8003534:	4603      	mov	r3, r0
 8003536:	461a      	mov	r2, r3
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800353e:	89fb      	ldrh	r3, [r7, #14]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	22c0      	movs	r2, #192	; 0xc0
 8003544:	f240 6111 	movw	r1, #1553	; 0x611
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fd2b 	bl	8003fa4 <CODEC_IO_Write>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	4413      	add	r3, r2
 8003556:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003558:	89fb      	ldrh	r3, [r7, #14]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2210      	movs	r2, #16
 800355e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fd1e 	bl	8003fa4 <CODEC_IO_Write>
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8003572:	89fb      	ldrh	r3, [r7, #14]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	22c0      	movs	r2, #192	; 0xc0
 8003578:	f240 6112 	movw	r1, #1554	; 0x612
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fd11 	bl	8003fa4 <CODEC_IO_Write>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800358c:	89fb      	ldrh	r3, [r7, #14]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	22c0      	movs	r2, #192	; 0xc0
 8003592:	f240 6113 	movw	r1, #1555	; 0x613
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fd04 	bl	8003fa4 <CODEC_IO_Write>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	4413      	add	r3, r2
 80035a4:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80035a6:	89fb      	ldrh	r3, [r7, #14]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2210      	movs	r2, #16
 80035ac:	f240 4122 	movw	r1, #1058	; 0x422
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 fcf7 	bl	8003fa4 <CODEC_IO_Write>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80035c0:	7afa      	ldrb	r2, [r7, #11]
 80035c2:	89fb      	ldrh	r3, [r7, #14]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f984 	bl	80038d4 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80035cc:	8afb      	ldrh	r3, [r7, #22]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80a6 	beq.w	8003720 <wm8994_Init+0xd20>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80035d4:	8afb      	ldrh	r3, [r7, #22]
 80035d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035da:	d003      	beq.n	80035e4 <wm8994_Init+0xbe4>
 80035dc:	8afb      	ldrh	r3, [r7, #22]
 80035de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e2:	d12b      	bne.n	800363c <wm8994_Init+0xc3c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80035e4:	8b7b      	ldrh	r3, [r7, #26]
 80035e6:	f043 0313 	orr.w	r3, r3, #19
 80035ea:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80035ec:	89fb      	ldrh	r3, [r7, #14]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	8b7a      	ldrh	r2, [r7, #26]
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fcd5 	bl	8003fa4 <CODEC_IO_Write>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003604:	89fb      	ldrh	r3, [r7, #14]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2202      	movs	r2, #2
 800360a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fcc8 	bl	8003fa4 <CODEC_IO_Write>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	4413      	add	r3, r2
 800361c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800361e:	89fb      	ldrh	r3, [r7, #14]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003626:	f240 4111 	movw	r1, #1041	; 0x411
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fcba 	bl	8003fa4 <CODEC_IO_Write>
 8003630:	4603      	mov	r3, r0
 8003632:	461a      	mov	r2, r3
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	4413      	add	r3, r2
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	e06b      	b.n	8003714 <wm8994_Init+0xd14>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800363c:	8afb      	ldrh	r3, [r7, #22]
 800363e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003642:	d139      	bne.n	80036b8 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003644:	8b7b      	ldrh	r3, [r7, #26]
 8003646:	f043 0313 	orr.w	r3, r3, #19
 800364a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800364c:	89fb      	ldrh	r3, [r7, #14]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	8b7a      	ldrh	r2, [r7, #26]
 8003652:	2101      	movs	r1, #1
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fca5 	bl	8003fa4 <CODEC_IO_Write>
 800365a:	4603      	mov	r3, r0
 800365c:	461a      	mov	r2, r3
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003664:	89fb      	ldrh	r3, [r7, #14]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2202      	movs	r2, #2
 800366a:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fc98 	bl	8003fa4 <CODEC_IO_Write>
 8003674:	4603      	mov	r3, r0
 8003676:	461a      	mov	r2, r3
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800367e:	89fb      	ldrh	r3, [r7, #14]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003686:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fc8a 	bl	8003fa4 <CODEC_IO_Write>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	4413      	add	r3, r2
 8003698:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800369a:	89fb      	ldrh	r3, [r7, #14]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80036a2:	f240 4111 	movw	r1, #1041	; 0x411
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fc7c 	bl	8003fa4 <CODEC_IO_Write>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	e02d      	b.n	8003714 <wm8994_Init+0xd14>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80036b8:	8afb      	ldrh	r3, [r7, #22]
 80036ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036be:	d003      	beq.n	80036c8 <wm8994_Init+0xcc8>
 80036c0:	8afb      	ldrh	r3, [r7, #22]
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c6:	d125      	bne.n	8003714 <wm8994_Init+0xd14>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80036c8:	89fb      	ldrh	r3, [r7, #14]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	220b      	movs	r2, #11
 80036ce:	2118      	movs	r1, #24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fc67 	bl	8003fa4 <CODEC_IO_Write>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80036e0:	89fb      	ldrh	r3, [r7, #14]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	220b      	movs	r2, #11
 80036e6:	211a      	movs	r1, #26
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fc5b 	bl	8003fa4 <CODEC_IO_Write>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80036f8:	89fb      	ldrh	r3, [r7, #14]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003700:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fc4d 	bl	8003fa4 <CODEC_IO_Write>
 800370a:	4603      	mov	r3, r0
 800370c:	461a      	mov	r2, r3
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003714:	7afa      	ldrb	r2, [r7, #11]
 8003716:	89fb      	ldrh	r3, [r7, #14]
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f8da 	bl	80038d4 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8003720:	69fb      	ldr	r3, [r7, #28]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop

0800372c <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8003730:	f000 fde0 	bl	80042f4 <AUDIO_IO_DeInit>
}
 8003734:	bf00      	nop
 8003736:	bd80      	pop	{r7, pc}

08003738 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003742:	f000 fdcd 	bl	80042e0 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fe03 	bl	8004358 <AUDIO_IO_Read>
 8003752:	4603      	mov	r3, r0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	6039      	str	r1, [r7, #0]
 8003766:	80fb      	strh	r3, [r7, #6]
 8003768:	4613      	mov	r3, r2
 800376a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f9d1 	bl	8003b1c <wm8994_SetMute>
 800377a:	4602      	mov	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003782:	68fb      	ldr	r3, [r7, #12]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800379a:	88fb      	ldrh	r3, [r7, #6]
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f9bc 	bl	8003b1c <wm8994_SetMute>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4413      	add	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2201      	movs	r2, #1
 80037b2:	2102      	movs	r1, #2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fbf5 	bl	8003fa4 <CODEC_IO_Write>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80037c4:	68fb      	ldr	r3, [r7, #12]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	4603      	mov	r3, r0
 80037d6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f99b 	bl	8003b1c <wm8994_SetMute>
 80037e6:	4602      	mov	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80037ee:	68fb      	ldr	r3, [r7, #12]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8003808:	4b31      	ldr	r3, [pc, #196]	; (80038d0 <wm8994_Stop+0xd8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d05a      	beq.n	80038c6 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f981 	bl	8003b1c <wm8994_SetMute>
 800381a:	4602      	mov	r2, r0
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d04e      	beq.n	80038c6 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003830:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fbb5 	bl	8003fa4 <CODEC_IO_Write>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4413      	add	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384c:	f240 4122 	movw	r1, #1058	; 0x422
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fba7 	bl	8003fa4 <CODEC_IO_Write>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4413      	add	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2200      	movs	r2, #0
 8003866:	212d      	movs	r1, #45	; 0x2d
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fb9b 	bl	8003fa4 <CODEC_IO_Write>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2200      	movs	r2, #0
 800387e:	212e      	movs	r1, #46	; 0x2e
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fb8f 	bl	8003fa4 <CODEC_IO_Write>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4413      	add	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2200      	movs	r2, #0
 8003896:	2105      	movs	r1, #5
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fb83 	bl	8003fa4 <CODEC_IO_Write>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2200      	movs	r2, #0
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fb77 	bl	8003fa4 <CODEC_IO_Write>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <wm8994_Stop+0xd8>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000074 	.word	0x20000074

080038d4 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	460a      	mov	r2, r1
 80038de:	80fb      	strh	r3, [r7, #6]
 80038e0:	4613      	mov	r3, r2
 80038e2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80038e8:	797b      	ldrb	r3, [r7, #5]
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d80b      	bhi.n	8003906 <wm8994_SetVolume+0x32>
 80038ee:	797a      	ldrb	r2, [r7, #5]
 80038f0:	4613      	mov	r3, r2
 80038f2:	019b      	lsls	r3, r3, #6
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	4a86      	ldr	r2, [pc, #536]	; (8003b10 <wm8994_SetVolume+0x23c>)
 80038f8:	fb82 1203 	smull	r1, r2, r2, r3
 80038fc:	1152      	asrs	r2, r2, #5
 80038fe:	17db      	asrs	r3, r3, #31
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	e000      	b.n	8003908 <wm8994_SetVolume+0x34>
 8003906:	2364      	movs	r3, #100	; 0x64
 8003908:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800390a:	4b82      	ldr	r3, [pc, #520]	; (8003b14 <wm8994_SetVolume+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 809b 	beq.w	8003a4a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8003914:	7afb      	ldrb	r3, [r7, #11]
 8003916:	2b3e      	cmp	r3, #62	; 0x3e
 8003918:	d93d      	bls.n	8003996 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f8fc 	bl	8003b1c <wm8994_SetMute>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4413      	add	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f240 127f 	movw	r2, #383	; 0x17f
 8003934:	211c      	movs	r1, #28
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fb34 	bl	8003fa4 <CODEC_IO_Write>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4413      	add	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f240 127f 	movw	r2, #383	; 0x17f
 800394e:	211d      	movs	r1, #29
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fb27 	bl	8003fa4 <CODEC_IO_Write>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f240 127f 	movw	r2, #383	; 0x17f
 8003968:	2126      	movs	r1, #38	; 0x26
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fb1a 	bl	8003fa4 <CODEC_IO_Write>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f240 127f 	movw	r2, #383	; 0x17f
 8003982:	2127      	movs	r1, #39	; 0x27
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fb0d 	bl	8003fa4 <CODEC_IO_Write>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	e059      	b.n	8003a4a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8003996:	797b      	ldrb	r3, [r7, #5]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	2101      	movs	r1, #1
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 f8bb 	bl	8003b1c <wm8994_SetMute>
 80039a6:	4602      	mov	r2, r0
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	e04c      	b.n	8003a4a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f8b1 	bl	8003b1c <wm8994_SetMute>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	b2d8      	uxtb	r0, r3
 80039c6:	7afb      	ldrb	r3, [r7, #11]
 80039c8:	b21b      	sxth	r3, r3
 80039ca:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80039ce:	b21b      	sxth	r3, r3
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	211c      	movs	r1, #28
 80039d6:	f000 fae5 	bl	8003fa4 <CODEC_IO_Write>
 80039da:	4603      	mov	r3, r0
 80039dc:	461a      	mov	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	b2d8      	uxtb	r0, r3
 80039e8:	7afb      	ldrb	r3, [r7, #11]
 80039ea:	b21b      	sxth	r3, r3
 80039ec:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80039f0:	b21b      	sxth	r3, r3
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	211d      	movs	r1, #29
 80039f8:	f000 fad4 	bl	8003fa4 <CODEC_IO_Write>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	b2d8      	uxtb	r0, r3
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	b21b      	sxth	r3, r3
 8003a0e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003a12:	b21b      	sxth	r3, r3
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	2126      	movs	r1, #38	; 0x26
 8003a1a:	f000 fac3 	bl	8003fa4 <CODEC_IO_Write>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	461a      	mov	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	b2d8      	uxtb	r0, r3
 8003a2c:	7afb      	ldrb	r3, [r7, #11]
 8003a2e:	b21b      	sxth	r3, r3
 8003a30:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003a34:	b21b      	sxth	r3, r3
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	2127      	movs	r1, #39	; 0x27
 8003a3c:	f000 fab2 	bl	8003fa4 <CODEC_IO_Write>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8003a4a:	4b33      	ldr	r3, [pc, #204]	; (8003b18 <wm8994_SetVolume+0x244>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d059      	beq.n	8003b06 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003a52:	797b      	ldrb	r3, [r7, #5]
 8003a54:	2b63      	cmp	r3, #99	; 0x63
 8003a56:	d80c      	bhi.n	8003a72 <wm8994_SetVolume+0x19e>
 8003a58:	797a      	ldrb	r2, [r7, #5]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	4a2b      	ldr	r2, [pc, #172]	; (8003b10 <wm8994_SetVolume+0x23c>)
 8003a64:	fb82 1203 	smull	r1, r2, r2, r3
 8003a68:	1152      	asrs	r2, r2, #5
 8003a6a:	17db      	asrs	r3, r3, #31
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	e000      	b.n	8003a74 <wm8994_SetVolume+0x1a0>
 8003a72:	23ef      	movs	r3, #239	; 0xef
 8003a74:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	b2d8      	uxtb	r0, r3
 8003a7a:	7afb      	ldrb	r3, [r7, #11]
 8003a7c:	b21b      	sxth	r3, r3
 8003a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a82:	b21b      	sxth	r3, r3
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a8c:	f000 fa8a 	bl	8003fa4 <CODEC_IO_Write>
 8003a90:	4603      	mov	r3, r0
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4413      	add	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	b2d8      	uxtb	r0, r3
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	b21b      	sxth	r3, r3
 8003aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa6:	b21b      	sxth	r3, r3
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f240 4101 	movw	r1, #1025	; 0x401
 8003ab0:	f000 fa78 	bl	8003fa4 <CODEC_IO_Write>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	b2d8      	uxtb	r0, r3
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
 8003ac4:	b21b      	sxth	r3, r3
 8003ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aca:	b21b      	sxth	r3, r3
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f240 4104 	movw	r1, #1028	; 0x404
 8003ad4:	f000 fa66 	bl	8003fa4 <CODEC_IO_Write>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	b2d8      	uxtb	r0, r3
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
 8003ae8:	b21b      	sxth	r3, r3
 8003aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aee:	b21b      	sxth	r3, r3
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	f240 4105 	movw	r1, #1029	; 0x405
 8003af8:	f000 fa54 	bl	8003fa4 <CODEC_IO_Write>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	51eb851f 	.word	0x51eb851f
 8003b14:	20000074 	.word	0x20000074
 8003b18:	20000078 	.word	0x20000078

08003b1c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8003b2c:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <wm8994_SetMute+0x98>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d039      	beq.n	8003ba8 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d11c      	bne.n	8003b74 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b42:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fa2c 	bl	8003fa4 <CODEC_IO_Write>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5e:	f240 4122 	movw	r1, #1058	; 0x422
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fa1e 	bl	8003fa4 <CODEC_IO_Write>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	e019      	b.n	8003ba8 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2210      	movs	r2, #16
 8003b7a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fa10 	bl	8003fa4 <CODEC_IO_Write>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2210      	movs	r2, #16
 8003b94:	f240 4122 	movw	r1, #1058	; 0x422
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fa03 	bl	8003fa4 <CODEC_IO_Write>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000074 	.word	0x20000074

08003bb8 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	460a      	mov	r2, r1
 8003bc2:	80fb      	strh	r3, [r7, #6]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003bcc:	797b      	ldrb	r3, [r7, #5]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d047      	beq.n	8003c62 <wm8994_SetOutputMode+0xaa>
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	f000 8087 	beq.w	8003ce6 <wm8994_SetOutputMode+0x12e>
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	f040 80c6 	bne.w	8003d6a <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f640 420c 	movw	r2, #3084	; 0xc0c
 8003be6:	2105      	movs	r1, #5
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f9db 	bl	8003fa4 <CODEC_IO_Write>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f240 6101 	movw	r1, #1537	; 0x601
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f9ce 	bl	8003fa4 <CODEC_IO_Write>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2200      	movs	r2, #0
 8003c18:	f240 6102 	movw	r1, #1538	; 0x602
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 f9c1 	bl	8003fa4 <CODEC_IO_Write>
 8003c22:	4603      	mov	r3, r0
 8003c24:	461a      	mov	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2202      	movs	r2, #2
 8003c32:	f240 6104 	movw	r1, #1540	; 0x604
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f9b4 	bl	8003fa4 <CODEC_IO_Write>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f240 6105 	movw	r1, #1541	; 0x605
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f9a7 	bl	8003fa4 <CODEC_IO_Write>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
    break;
 8003c60:	e0c5      	b.n	8003dee <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f240 3203 	movw	r2, #771	; 0x303
 8003c6a:	2105      	movs	r1, #5
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 f999 	bl	8003fa4 <CODEC_IO_Write>
 8003c72:	4603      	mov	r3, r0
 8003c74:	461a      	mov	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4413      	add	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2201      	movs	r2, #1
 8003c82:	f240 6101 	movw	r1, #1537	; 0x601
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f98c 	bl	8003fa4 <CODEC_IO_Write>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f240 6102 	movw	r1, #1538	; 0x602
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 f97f 	bl	8003fa4 <CODEC_IO_Write>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4413      	add	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f240 6104 	movw	r1, #1540	; 0x604
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f972 	bl	8003fa4 <CODEC_IO_Write>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f240 6105 	movw	r1, #1541	; 0x605
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 f965 	bl	8003fa4 <CODEC_IO_Write>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
    break;
 8003ce4:	e083      	b.n	8003dee <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003cee:	2105      	movs	r1, #5
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f957 	bl	8003fa4 <CODEC_IO_Write>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2201      	movs	r2, #1
 8003d06:	f240 6101 	movw	r1, #1537	; 0x601
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f94a 	bl	8003fa4 <CODEC_IO_Write>
 8003d10:	4603      	mov	r3, r0
 8003d12:	461a      	mov	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f240 6102 	movw	r1, #1538	; 0x602
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 f93d 	bl	8003fa4 <CODEC_IO_Write>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f240 6104 	movw	r1, #1540	; 0x604
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f930 	bl	8003fa4 <CODEC_IO_Write>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2202      	movs	r2, #2
 8003d54:	f240 6105 	movw	r1, #1541	; 0x605
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f923 	bl	8003fa4 <CODEC_IO_Write>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
    break;
 8003d68:	e041      	b.n	8003dee <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f240 3203 	movw	r2, #771	; 0x303
 8003d72:	2105      	movs	r1, #5
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f915 	bl	8003fa4 <CODEC_IO_Write>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f240 6101 	movw	r1, #1537	; 0x601
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f908 	bl	8003fa4 <CODEC_IO_Write>
 8003d94:	4603      	mov	r3, r0
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2201      	movs	r2, #1
 8003da4:	f240 6102 	movw	r1, #1538	; 0x602
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f8fb 	bl	8003fa4 <CODEC_IO_Write>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f240 6104 	movw	r1, #1540	; 0x604
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f8ee 	bl	8003fa4 <CODEC_IO_Write>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f240 6105 	movw	r1, #1541	; 0x605
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 f8e1 	bl	8003fa4 <CODEC_IO_Write>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
    break;    
 8003dec:	bf00      	nop
  }  
  return counter;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6039      	str	r1, [r7, #0]
 8003e02:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f245 6222 	movw	r2, #22050	; 0x5622
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d076      	beq.n	8003f00 <wm8994_SetFrequency+0x108>
 8003e12:	f245 6222 	movw	r2, #22050	; 0x5622
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d80a      	bhi.n	8003e30 <wm8994_SetFrequency+0x38>
 8003e1a:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d060      	beq.n	8003ee4 <wm8994_SetFrequency+0xec>
 8003e22:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003e26:	d025      	beq.n	8003e74 <wm8994_SetFrequency+0x7c>
 8003e28:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003e2c:	d014      	beq.n	8003e58 <wm8994_SetFrequency+0x60>
 8003e2e:	e083      	b.n	8003f38 <wm8994_SetFrequency+0x140>
 8003e30:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d071      	beq.n	8003f1c <wm8994_SetFrequency+0x124>
 8003e38:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d803      	bhi.n	8003e48 <wm8994_SetFrequency+0x50>
 8003e40:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003e44:	d024      	beq.n	8003e90 <wm8994_SetFrequency+0x98>
 8003e46:	e077      	b.n	8003f38 <wm8994_SetFrequency+0x140>
 8003e48:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d02d      	beq.n	8003eac <wm8994_SetFrequency+0xb4>
 8003e50:	4a43      	ldr	r2, [pc, #268]	; (8003f60 <wm8994_SetFrequency+0x168>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d038      	beq.n	8003ec8 <wm8994_SetFrequency+0xd0>
 8003e56:	e06f      	b.n	8003f38 <wm8994_SetFrequency+0x140>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f89e 	bl	8003fa4 <CODEC_IO_Write>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
    break;
 8003e72:	e06f      	b.n	8003f54 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2233      	movs	r2, #51	; 0x33
 8003e7a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f890 	bl	8003fa4 <CODEC_IO_Write>
 8003e84:	4603      	mov	r3, r0
 8003e86:	461a      	mov	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
    break;
 8003e8e:	e061      	b.n	8003f54 <wm8994_SetFrequency+0x15c>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2263      	movs	r2, #99	; 0x63
 8003e96:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f882 	bl	8003fa4 <CODEC_IO_Write>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
    break;
 8003eaa:	e053      	b.n	8003f54 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2283      	movs	r2, #131	; 0x83
 8003eb2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f874 	bl	8003fa4 <CODEC_IO_Write>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
    break;
 8003ec6:	e045      	b.n	8003f54 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	22a3      	movs	r2, #163	; 0xa3
 8003ece:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f866 	bl	8003fa4 <CODEC_IO_Write>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
    break;
 8003ee2:	e037      	b.n	8003f54 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2213      	movs	r2, #19
 8003eea:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f858 	bl	8003fa4 <CODEC_IO_Write>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
    break;
 8003efe:	e029      	b.n	8003f54 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2243      	movs	r2, #67	; 0x43
 8003f06:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f84a 	bl	8003fa4 <CODEC_IO_Write>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
    break;
 8003f1a:	e01b      	b.n	8003f54 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2273      	movs	r2, #115	; 0x73
 8003f22:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f83c 	bl	8003fa4 <CODEC_IO_Write>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
    break; 
 8003f36:	e00d      	b.n	8003f54 <wm8994_SetFrequency+0x15c>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2283      	movs	r2, #131	; 0x83
 8003f3e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f82e 	bl	8003fa4 <CODEC_IO_Write>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
    break; 
 8003f52:	bf00      	nop
  }
  return counter;
 8003f54:	68fb      	ldr	r3, [r7, #12]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	00017700 	.word	0x00017700

08003f64 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2200      	movs	r2, #0
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f812 	bl	8003fa4 <CODEC_IO_Write>
 8003f80:	4603      	mov	r3, r0
 8003f82:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <wm8994_Reset+0x38>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8003f8a:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <wm8994_Reset+0x3c>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

  return counter;
 8003f90:	68fb      	ldr	r3, [r7, #12]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000074 	.word	0x20000074
 8003fa0:	20000078 	.word	0x20000078

08003fa4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	71fb      	strb	r3, [r7, #7]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	80bb      	strh	r3, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	88b9      	ldrh	r1, [r7, #4]
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f99f 	bl	8004304 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	b2db      	uxtb	r3, r3
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <BSP_LED_On>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <BSP_LED_On+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <BSP_LED_On+0x2c>)
 8003fe6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8003fe8:	2302      	movs	r3, #2
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2201      	movs	r2, #1
 8003fee:	4619      	mov	r1, r3
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f003 fb07 	bl	8007604 <HAL_GPIO_WritePin>
  }
}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40022000 	.word	0x40022000

08004004 <BSP_LED_Off>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1) /* Switch Off LED connected to GPIO */
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d108      	bne.n	8004026 <BSP_LED_Off+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <BSP_LED_Off+0x2c>)
 8004016:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8004018:	2302      	movs	r3, #2
 800401a:	b29b      	uxth	r3, r3
 800401c:	2200      	movs	r2, #0
 800401e:	4619      	mov	r1, r3
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f003 faef 	bl	8007604 <HAL_GPIO_WritePin>
  }
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40022000 	.word	0x40022000

08004034 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	; 0x30
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a51      	ldr	r2, [pc, #324]	; (8004184 <I2Cx_MspInit+0x150>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d14d      	bne.n	80040e0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004044:	4b50      	ldr	r3, [pc, #320]	; (8004188 <I2Cx_MspInit+0x154>)
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	4a4f      	ldr	r2, [pc, #316]	; (8004188 <I2Cx_MspInit+0x154>)
 800404a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404e:	6313      	str	r3, [r2, #48]	; 0x30
 8004050:	4b4d      	ldr	r3, [pc, #308]	; (8004188 <I2Cx_MspInit+0x154>)
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004060:	2312      	movs	r3, #18
 8004062:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004064:	2300      	movs	r3, #0
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004068:	2302      	movs	r3, #2
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800406c:	2304      	movs	r3, #4
 800406e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004070:	f107 031c 	add.w	r3, r7, #28
 8004074:	4619      	mov	r1, r3
 8004076:	4845      	ldr	r0, [pc, #276]	; (800418c <I2Cx_MspInit+0x158>)
 8004078:	f003 f810 	bl	800709c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800407c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004082:	f107 031c 	add.w	r3, r7, #28
 8004086:	4619      	mov	r1, r3
 8004088:	4840      	ldr	r0, [pc, #256]	; (800418c <I2Cx_MspInit+0x158>)
 800408a:	f003 f807 	bl	800709c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800408e:	4b3e      	ldr	r3, [pc, #248]	; (8004188 <I2Cx_MspInit+0x154>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	4a3d      	ldr	r2, [pc, #244]	; (8004188 <I2Cx_MspInit+0x154>)
 8004094:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004098:	6413      	str	r3, [r2, #64]	; 0x40
 800409a:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <I2Cx_MspInit+0x154>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80040a6:	4b38      	ldr	r3, [pc, #224]	; (8004188 <I2Cx_MspInit+0x154>)
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4a37      	ldr	r2, [pc, #220]	; (8004188 <I2Cx_MspInit+0x154>)
 80040ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040b0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80040b2:	4b35      	ldr	r3, [pc, #212]	; (8004188 <I2Cx_MspInit+0x154>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	4a34      	ldr	r2, [pc, #208]	; (8004188 <I2Cx_MspInit+0x154>)
 80040b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040bc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80040be:	2200      	movs	r2, #0
 80040c0:	210f      	movs	r1, #15
 80040c2:	2048      	movs	r0, #72	; 0x48
 80040c4:	f001 feec 	bl	8005ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80040c8:	2048      	movs	r0, #72	; 0x48
 80040ca:	f001 ff05 	bl	8005ed8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80040ce:	2200      	movs	r2, #0
 80040d0:	210f      	movs	r1, #15
 80040d2:	2049      	movs	r0, #73	; 0x49
 80040d4:	f001 fee4 	bl	8005ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80040d8:	2049      	movs	r0, #73	; 0x49
 80040da:	f001 fefd 	bl	8005ed8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80040de:	e04d      	b.n	800417c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80040e0:	4b29      	ldr	r3, [pc, #164]	; (8004188 <I2Cx_MspInit+0x154>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	4a28      	ldr	r2, [pc, #160]	; (8004188 <I2Cx_MspInit+0x154>)
 80040e6:	f043 0302 	orr.w	r3, r3, #2
 80040ea:	6313      	str	r3, [r2, #48]	; 0x30
 80040ec:	4b26      	ldr	r3, [pc, #152]	; (8004188 <I2Cx_MspInit+0x154>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80040f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040fc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80040fe:	2312      	movs	r3, #18
 8004100:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004102:	2300      	movs	r3, #0
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004106:	2302      	movs	r3, #2
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800410a:	2304      	movs	r3, #4
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800410e:	f107 031c 	add.w	r3, r7, #28
 8004112:	4619      	mov	r1, r3
 8004114:	481e      	ldr	r0, [pc, #120]	; (8004190 <I2Cx_MspInit+0x15c>)
 8004116:	f002 ffc1 	bl	800709c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800411a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800411e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004120:	f107 031c 	add.w	r3, r7, #28
 8004124:	4619      	mov	r1, r3
 8004126:	481a      	ldr	r0, [pc, #104]	; (8004190 <I2Cx_MspInit+0x15c>)
 8004128:	f002 ffb8 	bl	800709c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800412c:	4b16      	ldr	r3, [pc, #88]	; (8004188 <I2Cx_MspInit+0x154>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	4a15      	ldr	r2, [pc, #84]	; (8004188 <I2Cx_MspInit+0x154>)
 8004132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004136:	6413      	str	r3, [r2, #64]	; 0x40
 8004138:	4b13      	ldr	r3, [pc, #76]	; (8004188 <I2Cx_MspInit+0x154>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004144:	4b10      	ldr	r3, [pc, #64]	; (8004188 <I2Cx_MspInit+0x154>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4a0f      	ldr	r2, [pc, #60]	; (8004188 <I2Cx_MspInit+0x154>)
 800414a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800414e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004150:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <I2Cx_MspInit+0x154>)
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4a0c      	ldr	r2, [pc, #48]	; (8004188 <I2Cx_MspInit+0x154>)
 8004156:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800415a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800415c:	2200      	movs	r2, #0
 800415e:	210f      	movs	r1, #15
 8004160:	201f      	movs	r0, #31
 8004162:	f001 fe9d 	bl	8005ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004166:	201f      	movs	r0, #31
 8004168:	f001 feb6 	bl	8005ed8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800416c:	2200      	movs	r2, #0
 800416e:	210f      	movs	r1, #15
 8004170:	2020      	movs	r0, #32
 8004172:	f001 fe95 	bl	8005ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004176:	2020      	movs	r0, #32
 8004178:	f001 feae 	bl	8005ed8 <HAL_NVIC_EnableIRQ>
}
 800417c:	bf00      	nop
 800417e:	3730      	adds	r7, #48	; 0x30
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	2000007c 	.word	0x2000007c
 8004188:	40023800 	.word	0x40023800
 800418c:	40021c00 	.word	0x40021c00
 8004190:	40020400 	.word	0x40020400

08004194 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f004 ff23 	bl	8008fe8 <HAL_I2C_GetState>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d125      	bne.n	80041f4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a14      	ldr	r2, [pc, #80]	; (80041fc <I2Cx_Init+0x68>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d103      	bne.n	80041b8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a13      	ldr	r2, [pc, #76]	; (8004200 <I2Cx_Init+0x6c>)
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e002      	b.n	80041be <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a12      	ldr	r2, [pc, #72]	; (8004204 <I2Cx_Init+0x70>)
 80041bc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a11      	ldr	r2, [pc, #68]	; (8004208 <I2Cx_Init+0x74>)
 80041c2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff ff23 	bl	8004034 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f004 fc0c 	bl	8008a0c <HAL_I2C_Init>
  }
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	2000007c 	.word	0x2000007c
 8004200:	40005c00 	.word	0x40005c00
 8004204:	40005400 	.word	0x40005400
 8004208:	40912732 	.word	0x40912732

0800420c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af04      	add	r7, sp, #16
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	4603      	mov	r3, r0
 800421c:	72fb      	strb	r3, [r7, #11]
 800421e:	460b      	mov	r3, r1
 8004220:	813b      	strh	r3, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800422a:	7afb      	ldrb	r3, [r7, #11]
 800422c:	b299      	uxth	r1, r3
 800422e:	88f8      	ldrh	r0, [r7, #6]
 8004230:	893a      	ldrh	r2, [r7, #8]
 8004232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004236:	9302      	str	r3, [sp, #8]
 8004238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	4603      	mov	r3, r0
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f004 fdb6 	bl	8008db4 <HAL_I2C_Mem_Read>
 8004248:	4603      	mov	r3, r0
 800424a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800424c:	7dfb      	ldrb	r3, [r7, #23]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004252:	7afb      	ldrb	r3, [r7, #11]
 8004254:	4619      	mov	r1, r3
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f832 	bl	80042c0 <I2Cx_Error>
  }
  return status;    
 800425c:	7dfb      	ldrb	r3, [r7, #23]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b08a      	sub	sp, #40	; 0x28
 800426a:	af04      	add	r7, sp, #16
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	4608      	mov	r0, r1
 8004270:	4611      	mov	r1, r2
 8004272:	461a      	mov	r2, r3
 8004274:	4603      	mov	r3, r0
 8004276:	72fb      	strb	r3, [r7, #11]
 8004278:	460b      	mov	r3, r1
 800427a:	813b      	strh	r3, [r7, #8]
 800427c:	4613      	mov	r3, r2
 800427e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004284:	7afb      	ldrb	r3, [r7, #11]
 8004286:	b299      	uxth	r1, r3
 8004288:	88f8      	ldrh	r0, [r7, #6]
 800428a:	893a      	ldrh	r2, [r7, #8]
 800428c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004290:	9302      	str	r3, [sp, #8]
 8004292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	4603      	mov	r3, r0
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f004 fc75 	bl	8008b8c <HAL_I2C_Mem_Write>
 80042a2:	4603      	mov	r3, r0
 80042a4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80042ac:	7afb      	ldrb	r3, [r7, #11]
 80042ae:	4619      	mov	r1, r3
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f805 	bl	80042c0 <I2Cx_Error>
  }
  return status;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f004 fc2d 	bl	8008b2c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff ff5e 	bl	8004194 <I2Cx_Init>
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80042e4:	4802      	ldr	r0, [pc, #8]	; (80042f0 <AUDIO_IO_Init+0x10>)
 80042e6:	f7ff ff55 	bl	8004194 <I2Cx_Init>
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2000007c 	.word	0x2000007c

080042f4 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
}
 80042f8:	bf00      	nop
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af02      	add	r7, sp, #8
 800430a:	4603      	mov	r3, r0
 800430c:	71fb      	strb	r3, [r7, #7]
 800430e:	460b      	mov	r3, r1
 8004310:	80bb      	strh	r3, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	0a1b      	lsrs	r3, r3, #8
 800431e:	b29b      	uxth	r3, r3
 8004320:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	b29b      	uxth	r3, r3
 8004328:	b21a      	sxth	r2, r3
 800432a:	887b      	ldrh	r3, [r7, #2]
 800432c:	b21b      	sxth	r3, r3
 800432e:	4313      	orrs	r3, r2
 8004330:	b21b      	sxth	r3, r3
 8004332:	b29b      	uxth	r3, r3
 8004334:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8004336:	88ba      	ldrh	r2, [r7, #4]
 8004338:	79f9      	ldrb	r1, [r7, #7]
 800433a:	2302      	movs	r3, #2
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	1cbb      	adds	r3, r7, #2
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	2302      	movs	r3, #2
 8004344:	4803      	ldr	r0, [pc, #12]	; (8004354 <AUDIO_IO_Write+0x50>)
 8004346:	f7ff ff8e 	bl	8004266 <I2Cx_WriteMultiple>
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	2000007c 	.word	0x2000007c

08004358 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af02      	add	r7, sp, #8
 800435e:	4603      	mov	r3, r0
 8004360:	460a      	mov	r2, r1
 8004362:	71fb      	strb	r3, [r7, #7]
 8004364:	4613      	mov	r3, r2
 8004366:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	81bb      	strh	r3, [r7, #12]
 800436c:	2300      	movs	r3, #0
 800436e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8004370:	88ba      	ldrh	r2, [r7, #4]
 8004372:	79f9      	ldrb	r1, [r7, #7]
 8004374:	2302      	movs	r3, #2
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	f107 030c 	add.w	r3, r7, #12
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	2302      	movs	r3, #2
 8004380:	480a      	ldr	r0, [pc, #40]	; (80043ac <AUDIO_IO_Read+0x54>)
 8004382:	f7ff ff43 	bl	800420c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004386:	89bb      	ldrh	r3, [r7, #12]
 8004388:	0a1b      	lsrs	r3, r3, #8
 800438a:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800438c:	89bb      	ldrh	r3, [r7, #12]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	b29b      	uxth	r3, r3
 8004392:	b21a      	sxth	r2, r3
 8004394:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004398:	4313      	orrs	r3, r2
 800439a:	b21b      	sxth	r3, r3
 800439c:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800439e:	89fb      	ldrh	r3, [r7, #14]
 80043a0:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80043a2:	89bb      	ldrh	r3, [r7, #12]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	2000007c 	.word	0x2000007c

080043b0 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f001 fa0f 	bl	80057dc <HAL_Delay>
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80043d0:	480e      	ldr	r0, [pc, #56]	; (800440c <HAL_SAI_ErrorCallback+0x44>)
 80043d2:	f007 fe33 	bl	800c03c <HAL_SAI_GetState>
 80043d6:	4603      	mov	r3, r0
 80043d8:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80043da:	480d      	ldr	r0, [pc, #52]	; (8004410 <HAL_SAI_ErrorCallback+0x48>)
 80043dc:	f007 fe2e 	bl	800c03c <HAL_SAI_GetState>
 80043e0:	4603      	mov	r3, r0
 80043e2:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d002      	beq.n	80043f0 <HAL_SAI_ErrorCallback+0x28>
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b12      	cmp	r3, #18
 80043ee:	d101      	bne.n	80043f4 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80043f0:	f000 f810 	bl	8004414 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 80043f4:	7bbb      	ldrb	r3, [r7, #14]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d002      	beq.n	8004400 <HAL_SAI_ErrorCallback+0x38>
 80043fa:	7bbb      	ldrb	r3, [r7, #14]
 80043fc:	2b22      	cmp	r3, #34	; 0x22
 80043fe:	d101      	bne.n	8004404 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8004400:	f7fc f89f 	bl	8000542 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	200000c8 	.word	0x200000c8
 8004410:	2000014c 	.word	0x2000014c

08004414 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8004424:	b580      	push	{r7, lr}
 8004426:	b08c      	sub	sp, #48	; 0x30
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800442e:	4b63      	ldr	r3, [pc, #396]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	4a62      	ldr	r2, [pc, #392]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004438:	6453      	str	r3, [r2, #68]	; 0x44
 800443a:	4b60      	ldr	r3, [pc, #384]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8004446:	4b5d      	ldr	r3, [pc, #372]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	4a5c      	ldr	r2, [pc, #368]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 800444c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004450:	6313      	str	r3, [r2, #48]	; 0x30
 8004452:	4b5a      	ldr	r3, [pc, #360]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 800445e:	4b57      	ldr	r3, [pc, #348]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a56      	ldr	r2, [pc, #344]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b54      	ldr	r3, [pc, #336]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8004476:	4b51      	ldr	r3, [pc, #324]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	4a50      	ldr	r2, [pc, #320]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004480:	6313      	str	r3, [r2, #48]	; 0x30
 8004482:	4b4e      	ldr	r3, [pc, #312]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004492:	2302      	movs	r3, #2
 8004494:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004496:	2300      	movs	r3, #0
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800449a:	2303      	movs	r3, #3
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800449e:	230a      	movs	r3, #10
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80044a2:	f107 031c 	add.w	r3, r7, #28
 80044a6:	4619      	mov	r1, r3
 80044a8:	4845      	ldr	r0, [pc, #276]	; (80045c0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80044aa:	f002 fdf7 	bl	800709c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80044ae:	2320      	movs	r3, #32
 80044b0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80044b2:	2302      	movs	r3, #2
 80044b4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80044ba:	2303      	movs	r3, #3
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80044be:	230a      	movs	r3, #10
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80044c2:	f107 031c 	add.w	r3, r7, #28
 80044c6:	4619      	mov	r1, r3
 80044c8:	483d      	ldr	r0, [pc, #244]	; (80045c0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80044ca:	f002 fde7 	bl	800709c <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80044ce:	2340      	movs	r3, #64	; 0x40
 80044d0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80044d2:	2302      	movs	r3, #2
 80044d4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80044da:	2303      	movs	r3, #3
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80044de:	230a      	movs	r3, #10
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80044e2:	f107 031c 	add.w	r3, r7, #28
 80044e6:	4619      	mov	r1, r3
 80044e8:	4835      	ldr	r0, [pc, #212]	; (80045c0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80044ea:	f002 fdd7 	bl	800709c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80044ee:	2310      	movs	r3, #16
 80044f0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80044fa:	2303      	movs	r3, #3
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80044fe:	230a      	movs	r3, #10
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8004502:	f107 031c 	add.w	r3, r7, #28
 8004506:	4619      	mov	r1, r3
 8004508:	482d      	ldr	r0, [pc, #180]	; (80045c0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800450a:	f002 fdc7 	bl	800709c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800450e:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 8004514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004518:	6313      	str	r3, [r2, #48]	; 0x30
 800451a:	4b28      	ldr	r3, [pc, #160]	; (80045bc <BSP_AUDIO_OUT_MspInit+0x198>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d138      	bne.n	80045a2 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004532:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004536:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004538:	4b23      	ldr	r3, [pc, #140]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800453a:	2240      	movs	r2, #64	; 0x40
 800453c:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800453e:	4b22      	ldr	r3, [pc, #136]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004540:	2200      	movs	r2, #0
 8004542:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004544:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800454a:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800454c:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800454e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004552:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8004554:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800455a:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800455c:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800455e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004562:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004564:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004566:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800456a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800456c:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800456e:	2204      	movs	r2, #4
 8004570:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004574:	2203      	movs	r2, #3
 8004576:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004578:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800457a:	2200      	movs	r2, #0
 800457c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8004584:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004586:	4a11      	ldr	r2, [pc, #68]	; (80045cc <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8004588:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a0e      	ldr	r2, [pc, #56]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800458e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004590:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8004596:	480c      	ldr	r0, [pc, #48]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004598:	f001 febe 	bl	8006318 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 800459c:	480a      	ldr	r0, [pc, #40]	; (80045c8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800459e:	f001 fe0d 	bl	80061bc <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	210e      	movs	r1, #14
 80045a6:	203c      	movs	r0, #60	; 0x3c
 80045a8:	f001 fc7a 	bl	8005ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80045ac:	203c      	movs	r0, #60	; 0x3c
 80045ae:	f001 fc93 	bl	8005ed8 <HAL_NVIC_EnableIRQ>
}
 80045b2:	bf00      	nop
 80045b4:	3730      	adds	r7, #48	; 0x30
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800
 80045c0:	40022000 	.word	0x40022000
 80045c4:	40015c04 	.word	0x40015c04
 80045c8:	200001d0 	.word	0x200001d0
 80045cc:	40026470 	.word	0x40026470

080045d0 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b0a6      	sub	sp, #152	; 0x98
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	4618      	mov	r0, r3
 80045e2:	f006 fcf3 	bl	800afcc <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f642 3211 	movw	r2, #11025	; 0x2b11
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d009      	beq.n	8004604 <BSP_AUDIO_OUT_ClockConfig+0x34>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f245 6222 	movw	r2, #22050	; 0x5622
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <BSP_AUDIO_OUT_ClockConfig+0x34>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004600:	4293      	cmp	r3, r2
 8004602:	d112      	bne.n	800462a <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004604:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004608:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800460a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800460e:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004610:	f240 13ad 	movw	r3, #429	; 0x1ad
 8004614:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8004616:	2302      	movs	r3, #2
 8004618:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800461a:	2313      	movs	r3, #19
 800461c:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800461e:	f107 0314 	add.w	r3, r7, #20
 8004622:	4618      	mov	r0, r3
 8004624:	f006 f8e4 	bl	800a7f0 <HAL_RCCEx_PeriphCLKConfig>
 8004628:	e011      	b.n	800464e <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800462a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800462e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004630:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004634:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8004636:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800463a:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 800463c:	2307      	movs	r3, #7
 800463e:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004640:	2301      	movs	r3, #1
 8004642:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	4618      	mov	r0, r3
 800464a:	f006 f8d1 	bl	800a7f0 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 800464e:	bf00      	nop
 8004650:	3798      	adds	r7, #152	; 0x98
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	68f9      	ldr	r1, [r7, #12]
 8004668:	f44f 7000 	mov.w	r0, #512	; 0x200
 800466c:	f000 f806 	bl	800467c <BSP_AUDIO_IN_InitEx>
 8004670:	4603      	mov	r3, r0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800467c:	b590      	push	{r4, r7, lr}
 800467e:	b089      	sub	sp, #36	; 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	4603      	mov	r3, r0
 800468a:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8004694:	89fb      	ldrh	r3, [r7, #14]
 8004696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469a:	d006      	beq.n	80046aa <BSP_AUDIO_IN_InitEx+0x2e>
 800469c:	89fb      	ldrh	r3, [r7, #14]
 800469e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a2:	d002      	beq.n	80046aa <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e046      	b.n	8004738 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 80046aa:	f000 f9e7 	bl	8004a7c <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80046ae:	2200      	movs	r2, #0
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	4824      	ldr	r0, [pc, #144]	; (8004744 <BSP_AUDIO_IN_InitEx+0xc8>)
 80046b4:	f7ff ff8c 	bl	80045d0 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80046b8:	4b22      	ldr	r3, [pc, #136]	; (8004744 <BSP_AUDIO_IN_InitEx+0xc8>)
 80046ba:	4a23      	ldr	r2, [pc, #140]	; (8004748 <BSP_AUDIO_IN_InitEx+0xcc>)
 80046bc:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80046be:	4821      	ldr	r0, [pc, #132]	; (8004744 <BSP_AUDIO_IN_InitEx+0xc8>)
 80046c0:	f007 fcbc 	bl	800c03c <HAL_SAI_GetState>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d107      	bne.n	80046da <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 80046ca:	2100      	movs	r1, #0
 80046cc:	481d      	ldr	r0, [pc, #116]	; (8004744 <BSP_AUDIO_IN_InitEx+0xc8>)
 80046ce:	f7ff fea9 	bl	8004424 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80046d2:	2100      	movs	r1, #0
 80046d4:	481b      	ldr	r0, [pc, #108]	; (8004744 <BSP_AUDIO_IN_InitEx+0xc8>)
 80046d6:	f000 f869 	bl	80047ac <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 80046da:	89fb      	ldrh	r3, [r7, #14]
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e0:	d102      	bne.n	80046e8 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80046e2:	230a      	movs	r3, #10
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	e001      	b.n	80046ec <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80046e8:	2305      	movs	r3, #5
 80046ea:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	69b9      	ldr	r1, [r7, #24]
 80046f0:	2001      	movs	r0, #1
 80046f2:	f000 f90d 	bl	8004910 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <BSP_AUDIO_IN_InitEx+0xd0>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2034      	movs	r0, #52	; 0x34
 80046fc:	4798      	blx	r3
 80046fe:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f648 1294 	movw	r2, #35220	; 0x8994
 8004706:	4293      	cmp	r3, r2
 8004708:	d109      	bne.n	800471e <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800470a:	4b10      	ldr	r3, [pc, #64]	; (800474c <BSP_AUDIO_IN_InitEx+0xd0>)
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	2034      	movs	r0, #52	; 0x34
 8004710:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004714:	4a0d      	ldr	r2, [pc, #52]	; (800474c <BSP_AUDIO_IN_InitEx+0xd0>)
 8004716:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e001      	b.n	8004722 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8004722:	7ffb      	ldrb	r3, [r7, #31]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d107      	bne.n	8004738 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8004728:	4b09      	ldr	r3, [pc, #36]	; (8004750 <BSP_AUDIO_IN_InitEx+0xd4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681c      	ldr	r4, [r3, #0]
 800472e:	89f9      	ldrh	r1, [r7, #14]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2264      	movs	r2, #100	; 0x64
 8004734:	2034      	movs	r0, #52	; 0x34
 8004736:	47a0      	blx	r4
    }
  }
  return ret;
 8004738:	7ffb      	ldrb	r3, [r7, #31]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3724      	adds	r7, #36	; 0x24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}
 8004742:	bf00      	nop
 8004744:	2000014c 	.word	0x2000014c
 8004748:	40015c24 	.word	0x40015c24
 800474c:	20000004 	.word	0x20000004
 8004750:	20002564 	.word	0x20002564

08004754 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	461a      	mov	r2, r3
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4805      	ldr	r0, [pc, #20]	; (8004780 <BSP_AUDIO_IN_Record+0x2c>)
 800476c:	f007 fbd8 	bl	800bf20 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	b2db      	uxtb	r3, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	2000014c 	.word	0x2000014c

08004784 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800478c:	f7fb fed2 	bl	8000534 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80047a0:	f7fb fec1 	bl	8000526 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80047a4:	bf00      	nop
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08c      	sub	sp, #48	; 0x30
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 80047b6:	4b50      	ldr	r3, [pc, #320]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	4a4f      	ldr	r2, [pc, #316]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80047bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047c0:	6453      	str	r3, [r2, #68]	; 0x44
 80047c2:	4b4d      	ldr	r3, [pc, #308]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 80047ce:	4b4a      	ldr	r3, [pc, #296]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	4a49      	ldr	r2, [pc, #292]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80047d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d8:	6313      	str	r3, [r2, #48]	; 0x30
 80047da:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80047e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ea:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80047ec:	2302      	movs	r3, #2
 80047ee:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80047f4:	2302      	movs	r3, #2
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80047f8:	230a      	movs	r3, #10
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80047fc:	f107 031c 	add.w	r3, r7, #28
 8004800:	4619      	mov	r1, r3
 8004802:	483e      	ldr	r0, [pc, #248]	; (80048fc <BSP_AUDIO_IN_MspInit+0x150>)
 8004804:	f002 fc4a 	bl	800709c <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8004808:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	4a3a      	ldr	r2, [pc, #232]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 800480e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004812:	6313      	str	r3, [r2, #48]	; 0x30
 8004814:	4b38      	ldr	r3, [pc, #224]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8004820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004824:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004826:	2300      	movs	r3, #0
 8004828:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800482a:	2300      	movs	r3, #0
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800482e:	2302      	movs	r3, #2
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8004832:	f107 031c 	add.w	r3, r7, #28
 8004836:	4619      	mov	r1, r3
 8004838:	4831      	ldr	r0, [pc, #196]	; (8004900 <BSP_AUDIO_IN_MspInit+0x154>)
 800483a:	f002 fc2f 	bl	800709c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800483e:	4b2e      	ldr	r3, [pc, #184]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	4a2d      	ldr	r2, [pc, #180]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004848:	6313      	str	r3, [r2, #48]	; 0x30
 800484a:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <BSP_AUDIO_IN_MspInit+0x14c>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <BSP_AUDIO_IN_MspInit+0x158>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d137      	bne.n	80048d0 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004860:	4b29      	ldr	r3, [pc, #164]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004862:	2200      	movs	r2, #0
 8004864:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004866:	4b28      	ldr	r3, [pc, #160]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004868:	2200      	movs	r2, #0
 800486a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800486c:	4b26      	ldr	r3, [pc, #152]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 800486e:	2200      	movs	r2, #0
 8004870:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004872:	4b25      	ldr	r3, [pc, #148]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004878:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800487a:	4b23      	ldr	r3, [pc, #140]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 800487c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004880:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004882:	4b21      	ldr	r3, [pc, #132]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004888:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800488a:	4b1f      	ldr	r3, [pc, #124]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 800488c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004890:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004892:	4b1d      	ldr	r3, [pc, #116]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004894:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004898:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800489a:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 800489c:	2200      	movs	r2, #0
 800489e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80048a0:	4b19      	ldr	r3, [pc, #100]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 80048a2:	2203      	movs	r2, #3
 80048a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80048a6:	4b18      	ldr	r3, [pc, #96]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80048ac:	4b16      	ldr	r3, [pc, #88]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80048b2:	4b15      	ldr	r3, [pc, #84]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 80048b4:	4a15      	ldr	r2, [pc, #84]	; (800490c <BSP_AUDIO_IN_MspInit+0x160>)
 80048b6:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a13      	ldr	r2, [pc, #76]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 80048bc:	671a      	str	r2, [r3, #112]	; 0x70
 80048be:	4a12      	ldr	r2, [pc, #72]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 80048c4:	4810      	ldr	r0, [pc, #64]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 80048c6:	f001 fd27 	bl	8006318 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 80048ca:	480f      	ldr	r0, [pc, #60]	; (8004908 <BSP_AUDIO_IN_MspInit+0x15c>)
 80048cc:	f001 fc76 	bl	80061bc <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80048d0:	2200      	movs	r2, #0
 80048d2:	210f      	movs	r1, #15
 80048d4:	2046      	movs	r0, #70	; 0x46
 80048d6:	f001 fae3 	bl	8005ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80048da:	2046      	movs	r0, #70	; 0x46
 80048dc:	f001 fafc 	bl	8005ed8 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80048e0:	2200      	movs	r2, #0
 80048e2:	210f      	movs	r1, #15
 80048e4:	2028      	movs	r0, #40	; 0x28
 80048e6:	f001 fadb 	bl	8005ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80048ea:	2028      	movs	r0, #40	; 0x28
 80048ec:	f001 faf4 	bl	8005ed8 <HAL_NVIC_EnableIRQ>
}
 80048f0:	bf00      	nop
 80048f2:	3730      	adds	r7, #48	; 0x30
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40021800 	.word	0x40021800
 8004900:	40021c00 	.word	0x40021c00
 8004904:	40015c24 	.word	0x40015c24
 8004908:	20000230 	.word	0x20000230
 800490c:	400264b8 	.word	0x400264b8

08004910 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800491c:	4b53      	ldr	r3, [pc, #332]	; (8004a6c <SAIx_In_Init+0x15c>)
 800491e:	4a54      	ldr	r2, [pc, #336]	; (8004a70 <SAIx_In_Init+0x160>)
 8004920:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8004922:	4b52      	ldr	r3, [pc, #328]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b50      	ldr	r3, [pc, #320]	; (8004a6c <SAIx_In_Init+0x15c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004930:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8004932:	4a4e      	ldr	r2, [pc, #312]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004938:	4a4c      	ldr	r2, [pc, #304]	; (8004a6c <SAIx_In_Init+0x15c>)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800493e:	4b4b      	ldr	r3, [pc, #300]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004940:	2200      	movs	r2, #0
 8004942:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004944:	4b49      	ldr	r3, [pc, #292]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800494a:	4b48      	ldr	r3, [pc, #288]	; (8004a6c <SAIx_In_Init+0x15c>)
 800494c:	2280      	movs	r2, #128	; 0x80
 800494e:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004950:	4b46      	ldr	r3, [pc, #280]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004952:	2200      	movs	r2, #0
 8004954:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004956:	4b45      	ldr	r3, [pc, #276]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004958:	2201      	movs	r2, #1
 800495a:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800495c:	4b43      	ldr	r3, [pc, #268]	; (8004a6c <SAIx_In_Init+0x15c>)
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004962:	4b42      	ldr	r3, [pc, #264]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004964:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004968:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800496a:	4b40      	ldr	r3, [pc, #256]	; (8004a6c <SAIx_In_Init+0x15c>)
 800496c:	2201      	movs	r2, #1
 800496e:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004970:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004972:	2240      	movs	r2, #64	; 0x40
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004976:	4b3d      	ldr	r3, [pc, #244]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004978:	2220      	movs	r2, #32
 800497a:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800497c:	4b3b      	ldr	r3, [pc, #236]	; (8004a6c <SAIx_In_Init+0x15c>)
 800497e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004982:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004984:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004986:	2200      	movs	r2, #0
 8004988:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800498a:	4b38      	ldr	r3, [pc, #224]	; (8004a6c <SAIx_In_Init+0x15c>)
 800498c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004990:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004992:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004994:	2200      	movs	r2, #0
 8004996:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004998:	4b34      	ldr	r3, [pc, #208]	; (8004a6c <SAIx_In_Init+0x15c>)
 800499a:	2200      	movs	r2, #0
 800499c:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 800499e:	4b33      	ldr	r3, [pc, #204]	; (8004a6c <SAIx_In_Init+0x15c>)
 80049a0:	2204      	movs	r2, #4
 80049a2:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80049a4:	4a31      	ldr	r2, [pc, #196]	; (8004a6c <SAIx_In_Init+0x15c>)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80049aa:	4830      	ldr	r0, [pc, #192]	; (8004a6c <SAIx_In_Init+0x15c>)
 80049ac:	f007 f910 	bl	800bbd0 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80049b0:	4b30      	ldr	r3, [pc, #192]	; (8004a74 <SAIx_In_Init+0x164>)
 80049b2:	4a31      	ldr	r2, [pc, #196]	; (8004a78 <SAIx_In_Init+0x168>)
 80049b4:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80049b6:	4b2f      	ldr	r3, [pc, #188]	; (8004a74 <SAIx_In_Init+0x164>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b2d      	ldr	r3, [pc, #180]	; (8004a74 <SAIx_In_Init+0x164>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049c4:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80049c6:	4a2b      	ldr	r2, [pc, #172]	; (8004a74 <SAIx_In_Init+0x164>)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80049cc:	4b29      	ldr	r3, [pc, #164]	; (8004a74 <SAIx_In_Init+0x164>)
 80049ce:	2203      	movs	r2, #3
 80049d0:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80049d2:	4b28      	ldr	r3, [pc, #160]	; (8004a74 <SAIx_In_Init+0x164>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80049d8:	4b26      	ldr	r3, [pc, #152]	; (8004a74 <SAIx_In_Init+0x164>)
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80049de:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <SAIx_In_Init+0x164>)
 80049e0:	2280      	movs	r2, #128	; 0x80
 80049e2:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80049e4:	4b23      	ldr	r3, [pc, #140]	; (8004a74 <SAIx_In_Init+0x164>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80049ea:	4b22      	ldr	r3, [pc, #136]	; (8004a74 <SAIx_In_Init+0x164>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80049f0:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <SAIx_In_Init+0x164>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80049f6:	4b1f      	ldr	r3, [pc, #124]	; (8004a74 <SAIx_In_Init+0x164>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80049fc:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <SAIx_In_Init+0x164>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8004a02:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a04:	2240      	movs	r2, #64	; 0x40
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004a08:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004a0e:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a14:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004a16:	4b17      	ldr	r3, [pc, #92]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004a1c:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004a22:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8004a24:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004a30:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a32:	2204      	movs	r2, #4
 8004a34:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8004a36:	4a0f      	ldr	r2, [pc, #60]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004a3c:	480d      	ldr	r0, [pc, #52]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a3e:	f007 f8c7 	bl	800bbd0 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <SAIx_In_Init+0x15c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004a50:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <SAIx_In_Init+0x164>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004a60:	601a      	str	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200000c8 	.word	0x200000c8
 8004a70:	40015c04 	.word	0x40015c04
 8004a74:	2000014c 	.word	0x2000014c
 8004a78:	40015c24 	.word	0x40015c24

08004a7c <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <SAIx_In_DeInit+0x24>)
 8004a82:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <SAIx_In_DeInit+0x28>)
 8004a84:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <SAIx_In_DeInit+0x24>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <SAIx_In_DeInit+0x24>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a94:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8004a96:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <SAIx_In_DeInit+0x24>)
 8004a98:	f007 fa0c 	bl	800beb4 <HAL_SAI_DeInit>
}
 8004a9c:	bf00      	nop
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	2000014c 	.word	0x2000014c
 8004aa4:	40015c24 	.word	0x40015c24

08004aa8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004aac:	4b31      	ldr	r3, [pc, #196]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004aae:	2228      	movs	r2, #40	; 0x28
 8004ab0:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004ab2:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004ab4:	2209      	movs	r2, #9
 8004ab6:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004ab8:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004aba:	2235      	movs	r2, #53	; 0x35
 8004abc:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004abe:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004ac0:	220b      	movs	r2, #11
 8004ac2:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004ac4:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004ac6:	f240 121b 	movw	r2, #283	; 0x11b
 8004aca:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004acc:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004ace:	f240 2215 	movw	r2, #533	; 0x215
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004ad6:	f240 121d 	movw	r2, #285	; 0x11d
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004adc:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004ade:	f240 2235 	movw	r2, #565	; 0x235
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4823      	ldr	r0, [pc, #140]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004ae8:	f000 fb74 	bl	80051d4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004aec:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004aee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004af2:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004af4:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004af6:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004afa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004afc:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004b04:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004b0c:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004b14:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004b1a:	4b16      	ldr	r3, [pc, #88]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004b20:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004b26:	4b13      	ldr	r3, [pc, #76]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004b2e:	4a12      	ldr	r2, [pc, #72]	; (8004b78 <BSP_LCD_Init+0xd0>)
 8004b30:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004b32:	4810      	ldr	r0, [pc, #64]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004b34:	f004 feea 	bl	800990c <HAL_LTDC_GetState>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d103      	bne.n	8004b46 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004b3e:	2100      	movs	r1, #0
 8004b40:	480c      	ldr	r0, [pc, #48]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004b42:	f000 fa6d 	bl	8005020 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8004b46:	480b      	ldr	r0, [pc, #44]	; (8004b74 <BSP_LCD_Init+0xcc>)
 8004b48:	f004 fd10 	bl	800956c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b52:	480a      	ldr	r0, [pc, #40]	; (8004b7c <BSP_LCD_Init+0xd4>)
 8004b54:	f002 fd56 	bl	8007604 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004b58:	2201      	movs	r2, #1
 8004b5a:	2108      	movs	r1, #8
 8004b5c:	4808      	ldr	r0, [pc, #32]	; (8004b80 <BSP_LCD_Init+0xd8>)
 8004b5e:	f002 fd51 	bl	8007604 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004b62:	f000 fc57 	bl	8005414 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004b66:	4807      	ldr	r0, [pc, #28]	; (8004b84 <BSP_LCD_Init+0xdc>)
 8004b68:	f000 f8c8 	bl	8004cfc <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20002568 	.word	0x20002568
 8004b78:	40016800 	.word	0x40016800
 8004b7c:	40022000 	.word	0x40022000
 8004b80:	40022800 	.word	0x40022800
 8004b84:	20000038 	.word	0x20000038

08004b88 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <BSP_LCD_GetXSize+0x20>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a06      	ldr	r2, [pc, #24]	; (8004bac <BSP_LCD_GetXSize+0x24>)
 8004b92:	2134      	movs	r1, #52	; 0x34
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	3360      	adds	r3, #96	; 0x60
 8004b9c:	681b      	ldr	r3, [r3, #0]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	200002d0 	.word	0x200002d0
 8004bac:	20002568 	.word	0x20002568

08004bb0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <BSP_LCD_GetYSize+0x20>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a06      	ldr	r2, [pc, #24]	; (8004bd4 <BSP_LCD_GetYSize+0x24>)
 8004bba:	2134      	movs	r1, #52	; 0x34
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3364      	adds	r3, #100	; 0x64
 8004bc4:	681b      	ldr	r3, [r3, #0]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	200002d0 	.word	0x200002d0
 8004bd4:	20002568 	.word	0x20002568

08004bd8 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b090      	sub	sp, #64	; 0x40
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	6039      	str	r1, [r7, #0]
 8004be2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004be8:	f7ff ffce 	bl	8004b88 <BSP_LCD_GetXSize>
 8004bec:	4603      	mov	r3, r0
 8004bee:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004bf4:	f7ff ffdc 	bl	8004bb0 <BSP_LCD_GetYSize>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004c04:	23ff      	movs	r3, #255	; 0xff
 8004c06:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004c1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004c24:	2307      	movs	r3, #7
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004c28:	f7ff ffae 	bl	8004b88 <BSP_LCD_GetXSize>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004c30:	f7ff ffbe 	bl	8004bb0 <BSP_LCD_GetYSize>
 8004c34:	4603      	mov	r3, r0
 8004c36:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004c38:	88fa      	ldrh	r2, [r7, #6]
 8004c3a:	f107 030c 	add.w	r3, r7, #12
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4812      	ldr	r0, [pc, #72]	; (8004c8c <BSP_LCD_LayerDefaultInit+0xb4>)
 8004c42:	f004 fe25 	bl	8009890 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004c46:	88fa      	ldrh	r2, [r7, #6]
 8004c48:	4911      	ldr	r1, [pc, #68]	; (8004c90 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	3304      	adds	r3, #4
 8004c56:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	490c      	ldr	r1, [pc, #48]	; (8004c90 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004c60:	4613      	mov	r3, r2
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004c6e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004c70:	88fa      	ldrh	r2, [r7, #6]
 8004c72:	4907      	ldr	r1, [pc, #28]	; (8004c90 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004c74:	4613      	mov	r3, r2
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004c82:	601a      	str	r2, [r3, #0]
}
 8004c84:	bf00      	nop
 8004c86:	3740      	adds	r7, #64	; 0x40
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20002568 	.word	0x20002568
 8004c90:	200002d4 	.word	0x200002d4
 8004c94:	20000038 	.word	0x20000038

08004c98 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004ca0:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <BSP_LCD_SetTextColor+0x28>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4907      	ldr	r1, [pc, #28]	; (8004cc4 <BSP_LCD_SetTextColor+0x2c>)
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	601a      	str	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	200002d0 	.word	0x200002d0
 8004cc4:	200002d4 	.word	0x200002d4

08004cc8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004cd0:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <BSP_LCD_SetBackColor+0x2c>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4908      	ldr	r1, [pc, #32]	; (8004cf8 <BSP_LCD_SetBackColor+0x30>)
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	200002d0 	.word	0x200002d0
 8004cf8:	200002d4 	.word	0x200002d4

08004cfc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004d04:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <BSP_LCD_SetFont+0x2c>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	4908      	ldr	r1, [pc, #32]	; (8004d2c <BSP_LCD_SetFont+0x30>)
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	3308      	adds	r3, #8
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	200002d0 	.word	0x200002d0
 8004d2c:	200002d4 	.word	0x200002d4

08004d30 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <BSP_LCD_Clear+0x48>)
 8004d3a:	681c      	ldr	r4, [r3, #0]
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	; (8004d78 <BSP_LCD_Clear+0x48>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0e      	ldr	r2, [pc, #56]	; (8004d7c <BSP_LCD_Clear+0x4c>)
 8004d42:	2134      	movs	r1, #52	; 0x34
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	335c      	adds	r3, #92	; 0x5c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461d      	mov	r5, r3
 8004d50:	f7ff ff1a 	bl	8004b88 <BSP_LCD_GetXSize>
 8004d54:	4606      	mov	r6, r0
 8004d56:	f7ff ff2b 	bl	8004bb0 <BSP_LCD_GetYSize>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	2300      	movs	r3, #0
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	4632      	mov	r2, r6
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f000 fb06 	bl	800537c <LL_FillBuffer>
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d78:	200002d0 	.word	0x200002d0
 8004d7c:	20002568 	.word	0x20002568

08004d80 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	80fb      	strh	r3, [r7, #6]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	80bb      	strh	r3, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <BSP_LCD_DisplayChar+0x80>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	491b      	ldr	r1, [pc, #108]	; (8004e04 <BSP_LCD_DisplayChar+0x84>)
 8004d98:	4613      	mov	r3, r2
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	3308      	adds	r3, #8
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6819      	ldr	r1, [r3, #0]
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004dae:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <BSP_LCD_DisplayChar+0x80>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4c14      	ldr	r4, [pc, #80]	; (8004e04 <BSP_LCD_DisplayChar+0x84>)
 8004db4:	4613      	mov	r3, r2
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4423      	add	r3, r4
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004dc4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004dc8:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <BSP_LCD_DisplayChar+0x80>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4c0d      	ldr	r4, [pc, #52]	; (8004e04 <BSP_LCD_DisplayChar+0x84>)
 8004dce:	4613      	mov	r3, r2
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4423      	add	r3, r4
 8004dd8:	3308      	adds	r3, #8
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	889b      	ldrh	r3, [r3, #4]
 8004dde:	3307      	adds	r3, #7
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da00      	bge.n	8004de6 <BSP_LCD_DisplayChar+0x66>
 8004de4:	3307      	adds	r3, #7
 8004de6:	10db      	asrs	r3, r3, #3
 8004de8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004dec:	18ca      	adds	r2, r1, r3
 8004dee:	88b9      	ldrh	r1, [r7, #4]
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fa0a 	bl	800520c <DrawChar>
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd90      	pop	{r4, r7, pc}
 8004e00:	200002d0 	.word	0x200002d0
 8004e04:	200002d4 	.word	0x200002d4

08004e08 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004e08:	b5b0      	push	{r4, r5, r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60ba      	str	r2, [r7, #8]
 8004e10:	461a      	mov	r2, r3
 8004e12:	4603      	mov	r3, r0
 8004e14:	81fb      	strh	r3, [r7, #14]
 8004e16:	460b      	mov	r3, r1
 8004e18:	81bb      	strh	r3, [r7, #12]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	83fb      	strh	r3, [r7, #30]
 8004e22:	2300      	movs	r3, #0
 8004e24:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004e26:	2300      	movs	r3, #0
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004e32:	e002      	b.n	8004e3a <BSP_LCD_DisplayStringAt+0x32>
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	3301      	adds	r3, #1
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	617a      	str	r2, [r7, #20]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f6      	bne.n	8004e34 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004e46:	f7ff fe9f 	bl	8004b88 <BSP_LCD_GetXSize>
 8004e4a:	4b4f      	ldr	r3, [pc, #316]	; (8004f88 <BSP_LCD_DisplayStringAt+0x180>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	494f      	ldr	r1, [pc, #316]	; (8004f8c <BSP_LCD_DisplayStringAt+0x184>)
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	889b      	ldrh	r3, [r3, #4]
 8004e60:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e64:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d01c      	beq.n	8004ea6 <BSP_LCD_DisplayStringAt+0x9e>
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d017      	beq.n	8004ea0 <BSP_LCD_DisplayStringAt+0x98>
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d12e      	bne.n	8004ed2 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	1ad1      	subs	r1, r2, r3
 8004e7a:	4b43      	ldr	r3, [pc, #268]	; (8004f88 <BSP_LCD_DisplayStringAt+0x180>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4843      	ldr	r0, [pc, #268]	; (8004f8c <BSP_LCD_DisplayStringAt+0x184>)
 8004e80:	4613      	mov	r3, r2
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4403      	add	r3, r0
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	889b      	ldrh	r3, [r3, #4]
 8004e90:	fb03 f301 	mul.w	r3, r3, r1
 8004e94:	085b      	lsrs	r3, r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	89fb      	ldrh	r3, [r7, #14]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	83fb      	strh	r3, [r7, #30]
      break;
 8004e9e:	e01b      	b.n	8004ed8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004ea0:	89fb      	ldrh	r3, [r7, #14]
 8004ea2:	83fb      	strh	r3, [r7, #30]
      break;
 8004ea4:	e018      	b.n	8004ed8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	b299      	uxth	r1, r3
 8004eae:	4b36      	ldr	r3, [pc, #216]	; (8004f88 <BSP_LCD_DisplayStringAt+0x180>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4836      	ldr	r0, [pc, #216]	; (8004f8c <BSP_LCD_DisplayStringAt+0x184>)
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4403      	add	r3, r0
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	889b      	ldrh	r3, [r3, #4]
 8004ec4:	fb11 f303 	smulbb	r3, r1, r3
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	89fb      	ldrh	r3, [r7, #14]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	83fb      	strh	r3, [r7, #30]
      break;
 8004ed0:	e002      	b.n	8004ed8 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8004ed2:	89fb      	ldrh	r3, [r7, #14]
 8004ed4:	83fb      	strh	r3, [r7, #30]
      break;
 8004ed6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004ed8:	8bfb      	ldrh	r3, [r7, #30]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <BSP_LCD_DisplayStringAt+0xde>
 8004ede:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	da1d      	bge.n	8004f22 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004eea:	e01a      	b.n	8004f22 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	781a      	ldrb	r2, [r3, #0]
 8004ef0:	89b9      	ldrh	r1, [r7, #12]
 8004ef2:	8bfb      	ldrh	r3, [r7, #30]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff ff43 	bl	8004d80 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8004efa:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <BSP_LCD_DisplayStringAt+0x180>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4923      	ldr	r1, [pc, #140]	; (8004f8c <BSP_LCD_DisplayStringAt+0x184>)
 8004f00:	4613      	mov	r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	889a      	ldrh	r2, [r3, #4]
 8004f10:	8bfb      	ldrh	r3, [r7, #30]
 8004f12:	4413      	add	r3, r2
 8004f14:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60bb      	str	r3, [r7, #8]
    i++;
 8004f1c:	8bbb      	ldrh	r3, [r7, #28]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf14      	ite	ne
 8004f2a:	2301      	movne	r3, #1
 8004f2c:	2300      	moveq	r3, #0
 8004f2e:	b2dc      	uxtb	r4, r3
 8004f30:	f7ff fe2a 	bl	8004b88 <BSP_LCD_GetXSize>
 8004f34:	4605      	mov	r5, r0
 8004f36:	8bb9      	ldrh	r1, [r7, #28]
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <BSP_LCD_DisplayStringAt+0x180>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4813      	ldr	r0, [pc, #76]	; (8004f8c <BSP_LCD_DisplayStringAt+0x184>)
 8004f3e:	4613      	mov	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4403      	add	r3, r0
 8004f48:	3308      	adds	r3, #8
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	889b      	ldrh	r3, [r3, #4]
 8004f4e:	fb03 f301 	mul.w	r3, r3, r1
 8004f52:	1aeb      	subs	r3, r5, r3
 8004f54:	b299      	uxth	r1, r3
 8004f56:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <BSP_LCD_DisplayStringAt+0x180>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	480c      	ldr	r0, [pc, #48]	; (8004f8c <BSP_LCD_DisplayStringAt+0x184>)
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4403      	add	r3, r0
 8004f66:	3308      	adds	r3, #8
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	889b      	ldrh	r3, [r3, #4]
 8004f6c:	4299      	cmp	r1, r3
 8004f6e:	bf2c      	ite	cs
 8004f70:	2301      	movcs	r3, #1
 8004f72:	2300      	movcc	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	4023      	ands	r3, r4
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1b6      	bne.n	8004eec <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8004f7e:	bf00      	nop
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bdb0      	pop	{r4, r5, r7, pc}
 8004f86:	bf00      	nop
 8004f88:	200002d0 	.word	0x200002d0
 8004f8c:	200002d4 	.word	0x200002d4

08004f90 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004f90:	b5b0      	push	{r4, r5, r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	603a      	str	r2, [r7, #0]
 8004f9a:	80fb      	strh	r3, [r7, #6]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <BSP_LCD_DrawPixel+0x88>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <BSP_LCD_DrawPixel+0x8c>)
 8004fa6:	2134      	movs	r1, #52	; 0x34
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	4413      	add	r3, r2
 8004fae:	3348      	adds	r3, #72	; 0x48
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d116      	bne.n	8004fe4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004fb6:	4b18      	ldr	r3, [pc, #96]	; (8005018 <BSP_LCD_DrawPixel+0x88>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a18      	ldr	r2, [pc, #96]	; (800501c <BSP_LCD_DrawPixel+0x8c>)
 8004fbc:	2134      	movs	r1, #52	; 0x34
 8004fbe:	fb01 f303 	mul.w	r3, r1, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	335c      	adds	r3, #92	; 0x5c
 8004fc6:	681c      	ldr	r4, [r3, #0]
 8004fc8:	88bd      	ldrh	r5, [r7, #4]
 8004fca:	f7ff fddd 	bl	8004b88 <BSP_LCD_GetXSize>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	fb03 f205 	mul.w	r2, r3, r5
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4423      	add	r3, r4
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	b292      	uxth	r2, r2
 8004fe0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004fe2:	e015      	b.n	8005010 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <BSP_LCD_DrawPixel+0x88>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0c      	ldr	r2, [pc, #48]	; (800501c <BSP_LCD_DrawPixel+0x8c>)
 8004fea:	2134      	movs	r1, #52	; 0x34
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	335c      	adds	r3, #92	; 0x5c
 8004ff4:	681c      	ldr	r4, [r3, #0]
 8004ff6:	88bd      	ldrh	r5, [r7, #4]
 8004ff8:	f7ff fdc6 	bl	8004b88 <BSP_LCD_GetXSize>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	fb03 f205 	mul.w	r2, r3, r5
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4423      	add	r3, r4
 800500a:	461a      	mov	r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	6013      	str	r3, [r2, #0]
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bdb0      	pop	{r4, r5, r7, pc}
 8005018:	200002d0 	.word	0x200002d0
 800501c:	20002568 	.word	0x20002568

08005020 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b090      	sub	sp, #64	; 0x40
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800502a:	4b64      	ldr	r3, [pc, #400]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	4a63      	ldr	r2, [pc, #396]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005030:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005034:	6453      	str	r3, [r2, #68]	; 0x44
 8005036:	4b61      	ldr	r3, [pc, #388]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005042:	4b5e      	ldr	r3, [pc, #376]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	4a5d      	ldr	r2, [pc, #372]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005048:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800504c:	6313      	str	r3, [r2, #48]	; 0x30
 800504e:	4b5b      	ldr	r3, [pc, #364]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800505a:	4b58      	ldr	r3, [pc, #352]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	4a57      	ldr	r2, [pc, #348]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005060:	f043 0310 	orr.w	r3, r3, #16
 8005064:	6313      	str	r3, [r2, #48]	; 0x30
 8005066:	4b55      	ldr	r3, [pc, #340]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	623b      	str	r3, [r7, #32]
 8005070:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005072:	4b52      	ldr	r3, [pc, #328]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	4a51      	ldr	r2, [pc, #324]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800507c:	6313      	str	r3, [r2, #48]	; 0x30
 800507e:	4b4f      	ldr	r3, [pc, #316]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800508a:	4b4c      	ldr	r3, [pc, #304]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	4a4b      	ldr	r2, [pc, #300]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005094:	6313      	str	r3, [r2, #48]	; 0x30
 8005096:	4b49      	ldr	r3, [pc, #292]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80050a2:	4b46      	ldr	r3, [pc, #280]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	4a45      	ldr	r2, [pc, #276]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ac:	6313      	str	r3, [r2, #48]	; 0x30
 80050ae:	4b43      	ldr	r3, [pc, #268]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80050ba:	4b40      	ldr	r3, [pc, #256]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	4a3f      	ldr	r2, [pc, #252]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050c4:	6313      	str	r3, [r2, #48]	; 0x30
 80050c6:	4b3d      	ldr	r3, [pc, #244]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80050d2:	4b3a      	ldr	r3, [pc, #232]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	4a39      	ldr	r2, [pc, #228]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050dc:	6313      	str	r3, [r2, #48]	; 0x30
 80050de:	4b37      	ldr	r3, [pc, #220]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80050ea:	4b34      	ldr	r3, [pc, #208]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	4a33      	ldr	r2, [pc, #204]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050f4:	6313      	str	r3, [r2, #48]	; 0x30
 80050f6:	4b31      	ldr	r3, [pc, #196]	; (80051bc <BSP_LCD_MspInit+0x19c>)
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8005102:	2310      	movs	r3, #16
 8005104:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005106:	2302      	movs	r3, #2
 8005108:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800510a:	2300      	movs	r3, #0
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800510e:	2302      	movs	r3, #2
 8005110:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8005112:	230e      	movs	r3, #14
 8005114:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800511a:	4619      	mov	r1, r3
 800511c:	4828      	ldr	r0, [pc, #160]	; (80051c0 <BSP_LCD_MspInit+0x1a0>)
 800511e:	f001 ffbd 	bl	800709c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8005122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005128:	2302      	movs	r3, #2
 800512a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800512c:	2309      	movs	r3, #9
 800512e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005134:	4619      	mov	r1, r3
 8005136:	4823      	ldr	r0, [pc, #140]	; (80051c4 <BSP_LCD_MspInit+0x1a4>)
 8005138:	f001 ffb0 	bl	800709c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800513c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8005140:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005142:	2302      	movs	r3, #2
 8005144:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005146:	230e      	movs	r3, #14
 8005148:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800514a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800514e:	4619      	mov	r1, r3
 8005150:	481d      	ldr	r0, [pc, #116]	; (80051c8 <BSP_LCD_MspInit+0x1a8>)
 8005152:	f001 ffa3 	bl	800709c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8005156:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800515c:	2302      	movs	r3, #2
 800515e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005160:	230e      	movs	r3, #14
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8005164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005168:	4619      	mov	r1, r3
 800516a:	4818      	ldr	r0, [pc, #96]	; (80051cc <BSP_LCD_MspInit+0x1ac>)
 800516c:	f001 ff96 	bl	800709c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8005170:	23f7      	movs	r3, #247	; 0xf7
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005174:	2302      	movs	r3, #2
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005178:	230e      	movs	r3, #14
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800517c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005180:	4619      	mov	r1, r3
 8005182:	4813      	ldr	r0, [pc, #76]	; (80051d0 <BSP_LCD_MspInit+0x1b0>)
 8005184:	f001 ff8a 	bl	800709c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8005188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800518c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800518e:	2301      	movs	r3, #1
 8005190:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8005192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005196:	4619      	mov	r1, r3
 8005198:	480b      	ldr	r0, [pc, #44]	; (80051c8 <BSP_LCD_MspInit+0x1a8>)
 800519a:	f001 ff7f 	bl	800709c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800519e:	2308      	movs	r3, #8
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80051a2:	2301      	movs	r3, #1
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80051a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051aa:	4619      	mov	r1, r3
 80051ac:	4808      	ldr	r0, [pc, #32]	; (80051d0 <BSP_LCD_MspInit+0x1b0>)
 80051ae:	f001 ff75 	bl	800709c <HAL_GPIO_Init>
}
 80051b2:	bf00      	nop
 80051b4:	3740      	adds	r7, #64	; 0x40
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40021800 	.word	0x40021800
 80051c8:	40022000 	.word	0x40022000
 80051cc:	40022400 	.word	0x40022400
 80051d0:	40022800 	.word	0x40022800

080051d4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <BSP_LCD_ClockConfig+0x34>)
 80051e0:	2208      	movs	r2, #8
 80051e2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80051e4:	4b08      	ldr	r3, [pc, #32]	; (8005208 <BSP_LCD_ClockConfig+0x34>)
 80051e6:	22c0      	movs	r2, #192	; 0xc0
 80051e8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80051ea:	4b07      	ldr	r3, [pc, #28]	; (8005208 <BSP_LCD_ClockConfig+0x34>)
 80051ec:	2205      	movs	r2, #5
 80051ee:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <BSP_LCD_ClockConfig+0x34>)
 80051f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051f6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80051f8:	4803      	ldr	r0, [pc, #12]	; (8005208 <BSP_LCD_ClockConfig+0x34>)
 80051fa:	f005 faf9 	bl	800a7f0 <HAL_RCCEx_PeriphCLKConfig>
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	200002ec 	.word	0x200002ec

0800520c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	603a      	str	r2, [r7, #0]
 8005216:	80fb      	strh	r3, [r7, #6]
 8005218:	460b      	mov	r3, r1
 800521a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	2300      	movs	r3, #0
 8005222:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005224:	4b53      	ldr	r3, [pc, #332]	; (8005374 <DrawChar+0x168>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4953      	ldr	r1, [pc, #332]	; (8005378 <DrawChar+0x16c>)
 800522a:	4613      	mov	r3, r2
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	3308      	adds	r3, #8
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	88db      	ldrh	r3, [r3, #6]
 800523a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800523c:	4b4d      	ldr	r3, [pc, #308]	; (8005374 <DrawChar+0x168>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	494d      	ldr	r1, [pc, #308]	; (8005378 <DrawChar+0x16c>)
 8005242:	4613      	mov	r3, r2
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	3308      	adds	r3, #8
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	889b      	ldrh	r3, [r3, #4]
 8005252:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8005254:	8a3b      	ldrh	r3, [r7, #16]
 8005256:	3307      	adds	r3, #7
 8005258:	2b00      	cmp	r3, #0
 800525a:	da00      	bge.n	800525e <DrawChar+0x52>
 800525c:	3307      	adds	r3, #7
 800525e:	10db      	asrs	r3, r3, #3
 8005260:	b2db      	uxtb	r3, r3
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	b2da      	uxtb	r2, r3
 8005266:	8a3b      	ldrh	r3, [r7, #16]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	e076      	b.n	8005362 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005274:	8a3b      	ldrh	r3, [r7, #16]
 8005276:	3307      	adds	r3, #7
 8005278:	2b00      	cmp	r3, #0
 800527a:	da00      	bge.n	800527e <DrawChar+0x72>
 800527c:	3307      	adds	r3, #7
 800527e:	10db      	asrs	r3, r3, #3
 8005280:	461a      	mov	r2, r3
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	fb03 f302 	mul.w	r3, r3, r2
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	4413      	add	r3, r2
 800528c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800528e:	8a3b      	ldrh	r3, [r7, #16]
 8005290:	3307      	adds	r3, #7
 8005292:	2b00      	cmp	r3, #0
 8005294:	da00      	bge.n	8005298 <DrawChar+0x8c>
 8005296:	3307      	adds	r3, #7
 8005298:	10db      	asrs	r3, r3, #3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d002      	beq.n	80052a4 <DrawChar+0x98>
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d004      	beq.n	80052ac <DrawChar+0xa0>
 80052a2:	e00c      	b.n	80052be <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	617b      	str	r3, [r7, #20]
      break;
 80052aa:	e016      	b.n	80052da <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	3201      	adds	r2, #1
 80052b6:	7812      	ldrb	r2, [r2, #0]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
      break;
 80052bc:	e00d      	b.n	80052da <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	041a      	lsls	r2, r3, #16
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	3301      	adds	r3, #1
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	4313      	orrs	r3, r2
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	3202      	adds	r2, #2
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
      break;
 80052d8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e036      	b.n	800534e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80052e0:	8a3a      	ldrh	r2, [r7, #16]
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	1ad2      	subs	r2, r2, r3
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	4413      	add	r3, r2
 80052ea:	3b01      	subs	r3, #1
 80052ec:	2201      	movs	r2, #1
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d012      	beq.n	8005322 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	b29a      	uxth	r2, r3
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	4413      	add	r3, r2
 8005304:	b298      	uxth	r0, r3
 8005306:	4b1b      	ldr	r3, [pc, #108]	; (8005374 <DrawChar+0x168>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	491b      	ldr	r1, [pc, #108]	; (8005378 <DrawChar+0x16c>)
 800530c:	4613      	mov	r3, r2
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	88bb      	ldrh	r3, [r7, #4]
 800531a:	4619      	mov	r1, r3
 800531c:	f7ff fe38 	bl	8004f90 <BSP_LCD_DrawPixel>
 8005320:	e012      	b.n	8005348 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	b29a      	uxth	r2, r3
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	4413      	add	r3, r2
 800532a:	b298      	uxth	r0, r3
 800532c:	4b11      	ldr	r3, [pc, #68]	; (8005374 <DrawChar+0x168>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4911      	ldr	r1, [pc, #68]	; (8005378 <DrawChar+0x16c>)
 8005332:	4613      	mov	r3, r2
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	3304      	adds	r3, #4
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	88bb      	ldrh	r3, [r7, #4]
 8005342:	4619      	mov	r1, r3
 8005344:	f7ff fe24 	bl	8004f90 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	3301      	adds	r3, #1
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	8a3b      	ldrh	r3, [r7, #16]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	429a      	cmp	r2, r3
 8005354:	d3c4      	bcc.n	80052e0 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8005356:	88bb      	ldrh	r3, [r7, #4]
 8005358:	3301      	adds	r3, #1
 800535a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	3301      	adds	r3, #1
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	8a7b      	ldrh	r3, [r7, #18]
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	429a      	cmp	r2, r3
 8005368:	d384      	bcc.n	8005274 <DrawChar+0x68>
  }
}
 800536a:	bf00      	nop
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	200002d0 	.word	0x200002d0
 8005378:	200002d4 	.word	0x200002d4

0800537c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af02      	add	r7, sp, #8
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800538a:	4b1e      	ldr	r3, [pc, #120]	; (8005404 <LL_FillBuffer+0x88>)
 800538c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005390:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005392:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <LL_FillBuffer+0x8c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1d      	ldr	r2, [pc, #116]	; (800540c <LL_FillBuffer+0x90>)
 8005398:	2134      	movs	r1, #52	; 0x34
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	4413      	add	r3, r2
 80053a0:	3348      	adds	r3, #72	; 0x48
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d103      	bne.n	80053b0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80053a8:	4b16      	ldr	r3, [pc, #88]	; (8005404 <LL_FillBuffer+0x88>)
 80053aa:	2202      	movs	r2, #2
 80053ac:	609a      	str	r2, [r3, #8]
 80053ae:	e002      	b.n	80053b6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80053b0:	4b14      	ldr	r3, [pc, #80]	; (8005404 <LL_FillBuffer+0x88>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80053b6:	4a13      	ldr	r2, [pc, #76]	; (8005404 <LL_FillBuffer+0x88>)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80053bc:	4b11      	ldr	r3, [pc, #68]	; (8005404 <LL_FillBuffer+0x88>)
 80053be:	4a14      	ldr	r2, [pc, #80]	; (8005410 <LL_FillBuffer+0x94>)
 80053c0:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80053c2:	4810      	ldr	r0, [pc, #64]	; (8005404 <LL_FillBuffer+0x88>)
 80053c4:	f001 face 	bl	8006964 <HAL_DMA2D_Init>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d115      	bne.n	80053fa <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	480c      	ldr	r0, [pc, #48]	; (8005404 <LL_FillBuffer+0x88>)
 80053d2:	f001 fd35 	bl	8006e40 <HAL_DMA2D_ConfigLayer>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10e      	bne.n	80053fa <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69f9      	ldr	r1, [r7, #28]
 80053e6:	4807      	ldr	r0, [pc, #28]	; (8005404 <LL_FillBuffer+0x88>)
 80053e8:	f001 fb06 	bl	80069f8 <HAL_DMA2D_Start>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d103      	bne.n	80053fa <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80053f2:	210a      	movs	r1, #10
 80053f4:	4803      	ldr	r0, [pc, #12]	; (8005404 <LL_FillBuffer+0x88>)
 80053f6:	f001 fb2a 	bl	8006a4e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000290 	.word	0x20000290
 8005408:	200002d0 	.word	0x200002d0
 800540c:	20002568 	.word	0x20002568
 8005410:	4002b000 	.word	0x4002b000

08005414 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005418:	4b29      	ldr	r3, [pc, #164]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 800541a:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <BSP_SDRAM_Init+0xb0>)
 800541c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800541e:	4b2a      	ldr	r3, [pc, #168]	; (80054c8 <BSP_SDRAM_Init+0xb4>)
 8005420:	2202      	movs	r2, #2
 8005422:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8005424:	4b28      	ldr	r3, [pc, #160]	; (80054c8 <BSP_SDRAM_Init+0xb4>)
 8005426:	2207      	movs	r2, #7
 8005428:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800542a:	4b27      	ldr	r3, [pc, #156]	; (80054c8 <BSP_SDRAM_Init+0xb4>)
 800542c:	2204      	movs	r2, #4
 800542e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005430:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <BSP_SDRAM_Init+0xb4>)
 8005432:	2207      	movs	r2, #7
 8005434:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8005436:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <BSP_SDRAM_Init+0xb4>)
 8005438:	2202      	movs	r2, #2
 800543a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800543c:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <BSP_SDRAM_Init+0xb4>)
 800543e:	2202      	movs	r2, #2
 8005440:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8005442:	4b21      	ldr	r3, [pc, #132]	; (80054c8 <BSP_SDRAM_Init+0xb4>)
 8005444:	2202      	movs	r2, #2
 8005446:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005448:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800544e:	4b1c      	ldr	r3, [pc, #112]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 8005450:	2200      	movs	r2, #0
 8005452:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005454:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 8005456:	2204      	movs	r2, #4
 8005458:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800545a:	4b19      	ldr	r3, [pc, #100]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 800545c:	2210      	movs	r2, #16
 800545e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005460:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 8005462:	2240      	movs	r2, #64	; 0x40
 8005464:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8005466:	4b16      	ldr	r3, [pc, #88]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 8005468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800546c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 8005470:	2200      	movs	r2, #0
 8005472:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005474:	4b12      	ldr	r3, [pc, #72]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 8005476:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800547a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800547c:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 800547e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005482:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 8005486:	2200      	movs	r2, #0
 8005488:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800548a:	2100      	movs	r1, #0
 800548c:	480c      	ldr	r0, [pc, #48]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 800548e:	f000 f87f 	bl	8005590 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8005492:	490d      	ldr	r1, [pc, #52]	; (80054c8 <BSP_SDRAM_Init+0xb4>)
 8005494:	480a      	ldr	r0, [pc, #40]	; (80054c0 <BSP_SDRAM_Init+0xac>)
 8005496:	f006 febc 	bl	800c212 <HAL_SDRAM_Init>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <BSP_SDRAM_Init+0xb8>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e002      	b.n	80054ae <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80054a8:	4b08      	ldr	r3, [pc, #32]	; (80054cc <BSP_SDRAM_Init+0xb8>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80054ae:	f240 6003 	movw	r0, #1539	; 0x603
 80054b2:	f000 f80d 	bl	80054d0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <BSP_SDRAM_Init+0xb8>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20002610 	.word	0x20002610
 80054c4:	a0000140 	.word	0xa0000140
 80054c8:	20000370 	.word	0x20000370
 80054cc:	20000040 	.word	0x20000040

080054d0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80054dc:	4b2a      	ldr	r3, [pc, #168]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80054de:	2201      	movs	r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80054e2:	4b29      	ldr	r3, [pc, #164]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80054e4:	2210      	movs	r2, #16
 80054e6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80054e8:	4b27      	ldr	r3, [pc, #156]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80054ee:	4b26      	ldr	r3, [pc, #152]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80054f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054f8:	4923      	ldr	r1, [pc, #140]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80054fa:	4824      	ldr	r0, [pc, #144]	; (800558c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80054fc:	f006 febd 	bl	800c27a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005500:	2001      	movs	r0, #1
 8005502:	f000 f96b 	bl	80057dc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005506:	4b20      	ldr	r3, [pc, #128]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005508:	2202      	movs	r2, #2
 800550a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800550c:	4b1e      	ldr	r3, [pc, #120]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800550e:	2210      	movs	r2, #16
 8005510:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005512:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005514:	2201      	movs	r2, #1
 8005516:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005518:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800551a:	2200      	movs	r2, #0
 800551c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800551e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005522:	4919      	ldr	r1, [pc, #100]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005524:	4819      	ldr	r0, [pc, #100]	; (800558c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005526:	f006 fea8 	bl	800c27a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800552a:	4b17      	ldr	r3, [pc, #92]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800552c:	2203      	movs	r2, #3
 800552e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005530:	4b15      	ldr	r3, [pc, #84]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005532:	2210      	movs	r2, #16
 8005534:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005538:	2208      	movs	r2, #8
 800553a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800553c:	4b12      	ldr	r3, [pc, #72]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800553e:	2200      	movs	r2, #0
 8005540:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005546:	4910      	ldr	r1, [pc, #64]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005548:	4810      	ldr	r0, [pc, #64]	; (800558c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800554a:	f006 fe96 	bl	800c27a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800554e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8005552:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005556:	2204      	movs	r2, #4
 8005558:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800555c:	2210      	movs	r2, #16
 800555e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005560:	4b09      	ldr	r3, [pc, #36]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005562:	2201      	movs	r2, #1
 8005564:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4a07      	ldr	r2, [pc, #28]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800556a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800556c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005570:	4905      	ldr	r1, [pc, #20]	; (8005588 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005572:	4806      	ldr	r0, [pc, #24]	; (800558c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005574:	f006 fe81 	bl	800c27a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4804      	ldr	r0, [pc, #16]	; (800558c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800557c:	f006 fea8 	bl	800c2d0 <HAL_SDRAM_ProgramRefreshRate>
}
 8005580:	bf00      	nop
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	2000038c 	.word	0x2000038c
 800558c:	20002610 	.word	0x20002610

08005590 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005590:	b580      	push	{r7, lr}
 8005592:	b090      	sub	sp, #64	; 0x40
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800559a:	4b70      	ldr	r3, [pc, #448]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	4a6f      	ldr	r2, [pc, #444]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	6393      	str	r3, [r2, #56]	; 0x38
 80055a6:	4b6d      	ldr	r3, [pc, #436]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80055b2:	4b6a      	ldr	r3, [pc, #424]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	4a69      	ldr	r2, [pc, #420]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055bc:	6313      	str	r3, [r2, #48]	; 0x30
 80055be:	4b67      	ldr	r3, [pc, #412]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ca:	4b64      	ldr	r3, [pc, #400]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	4a63      	ldr	r2, [pc, #396]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055d0:	f043 0304 	orr.w	r3, r3, #4
 80055d4:	6313      	str	r3, [r2, #48]	; 0x30
 80055d6:	4b61      	ldr	r3, [pc, #388]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	623b      	str	r3, [r7, #32]
 80055e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055e2:	4b5e      	ldr	r3, [pc, #376]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	4a5d      	ldr	r2, [pc, #372]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055e8:	f043 0308 	orr.w	r3, r3, #8
 80055ec:	6313      	str	r3, [r2, #48]	; 0x30
 80055ee:	4b5b      	ldr	r3, [pc, #364]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	61fb      	str	r3, [r7, #28]
 80055f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80055fa:	4b58      	ldr	r3, [pc, #352]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	4a57      	ldr	r2, [pc, #348]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 8005600:	f043 0310 	orr.w	r3, r3, #16
 8005604:	6313      	str	r3, [r2, #48]	; 0x30
 8005606:	4b55      	ldr	r3, [pc, #340]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005612:	4b52      	ldr	r3, [pc, #328]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	4a51      	ldr	r2, [pc, #324]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 8005618:	f043 0320 	orr.w	r3, r3, #32
 800561c:	6313      	str	r3, [r2, #48]	; 0x30
 800561e:	4b4f      	ldr	r3, [pc, #316]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800562a:	4b4c      	ldr	r3, [pc, #304]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	4a4b      	ldr	r2, [pc, #300]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 8005630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005634:	6313      	str	r3, [r2, #48]	; 0x30
 8005636:	4b49      	ldr	r3, [pc, #292]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005642:	4b46      	ldr	r3, [pc, #280]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	4a45      	ldr	r2, [pc, #276]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 8005648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564c:	6313      	str	r3, [r2, #48]	; 0x30
 800564e:	4b43      	ldr	r3, [pc, #268]	; (800575c <BSP_SDRAM_MspInit+0x1cc>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800565a:	2302      	movs	r3, #2
 800565c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800565e:	2301      	movs	r3, #1
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005662:	2302      	movs	r3, #2
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005666:	230c      	movs	r3, #12
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800566a:	2308      	movs	r3, #8
 800566c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800566e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005672:	4619      	mov	r1, r3
 8005674:	483a      	ldr	r0, [pc, #232]	; (8005760 <BSP_SDRAM_MspInit+0x1d0>)
 8005676:	f001 fd11 	bl	800709c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800567a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005684:	4619      	mov	r1, r3
 8005686:	4837      	ldr	r0, [pc, #220]	; (8005764 <BSP_SDRAM_MspInit+0x1d4>)
 8005688:	f001 fd08 	bl	800709c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800568c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005696:	4619      	mov	r1, r3
 8005698:	4833      	ldr	r0, [pc, #204]	; (8005768 <BSP_SDRAM_MspInit+0x1d8>)
 800569a:	f001 fcff 	bl	800709c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800569e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80056a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056a8:	4619      	mov	r1, r3
 80056aa:	4830      	ldr	r0, [pc, #192]	; (800576c <BSP_SDRAM_MspInit+0x1dc>)
 80056ac:	f001 fcf6 	bl	800709c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80056b0:	f248 1333 	movw	r3, #33075	; 0x8133
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80056b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056ba:	4619      	mov	r1, r3
 80056bc:	482c      	ldr	r0, [pc, #176]	; (8005770 <BSP_SDRAM_MspInit+0x1e0>)
 80056be:	f001 fced 	bl	800709c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80056c2:	2328      	movs	r3, #40	; 0x28
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80056c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056ca:	4619      	mov	r1, r3
 80056cc:	4829      	ldr	r0, [pc, #164]	; (8005774 <BSP_SDRAM_MspInit+0x1e4>)
 80056ce:	f001 fce5 	bl	800709c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80056d2:	4b29      	ldr	r3, [pc, #164]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80056d8:	4b27      	ldr	r3, [pc, #156]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80056de:	4b26      	ldr	r3, [pc, #152]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 80056e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80056e6:	4b24      	ldr	r3, [pc, #144]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 80056e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056ec:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80056ee:	4b22      	ldr	r3, [pc, #136]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 80056f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056f4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80056f6:	4b20      	ldr	r3, [pc, #128]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 80056f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056fc:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80056fe:	4b1e      	ldr	r3, [pc, #120]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 8005700:	2200      	movs	r2, #0
 8005702:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005704:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 8005706:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800570a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800570c:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 800570e:	2200      	movs	r2, #0
 8005710:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005712:	4b19      	ldr	r3, [pc, #100]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 8005714:	2203      	movs	r2, #3
 8005716:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005718:	4b17      	ldr	r3, [pc, #92]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 800571a:	2200      	movs	r2, #0
 800571c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800571e:	4b16      	ldr	r3, [pc, #88]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005724:	4b14      	ldr	r3, [pc, #80]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <BSP_SDRAM_MspInit+0x1ec>)
 8005728:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a12      	ldr	r2, [pc, #72]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
 8005730:	4a11      	ldr	r2, [pc, #68]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005736:	4810      	ldr	r0, [pc, #64]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 8005738:	f000 fdee 	bl	8006318 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800573c:	480e      	ldr	r0, [pc, #56]	; (8005778 <BSP_SDRAM_MspInit+0x1e8>)
 800573e:	f000 fd3d 	bl	80061bc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005742:	2200      	movs	r2, #0
 8005744:	210f      	movs	r1, #15
 8005746:	2038      	movs	r0, #56	; 0x38
 8005748:	f000 fbaa 	bl	8005ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800574c:	2038      	movs	r0, #56	; 0x38
 800574e:	f000 fbc3 	bl	8005ed8 <HAL_NVIC_EnableIRQ>
}
 8005752:	bf00      	nop
 8005754:	3740      	adds	r7, #64	; 0x40
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800
 8005760:	40020800 	.word	0x40020800
 8005764:	40020c00 	.word	0x40020c00
 8005768:	40021000 	.word	0x40021000
 800576c:	40021400 	.word	0x40021400
 8005770:	40021800 	.word	0x40021800
 8005774:	40021c00 	.word	0x40021c00
 8005778:	2000039c 	.word	0x2000039c
 800577c:	40026410 	.word	0x40026410

08005780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005784:	2003      	movs	r0, #3
 8005786:	f000 fb80 	bl	8005e8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800578a:	2000      	movs	r0, #0
 800578c:	f7fd f852 	bl	8002834 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005790:	f7fc f928 	bl	80019e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_IncTick+0x20>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <HAL_IncTick+0x24>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4413      	add	r3, r2
 80057ac:	4a04      	ldr	r2, [pc, #16]	; (80057c0 <HAL_IncTick+0x24>)
 80057ae:	6013      	str	r3, [r2, #0]
}
 80057b0:	bf00      	nop
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000048 	.word	0x20000048
 80057c0:	20002644 	.word	0x20002644

080057c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  return uwTick;
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <HAL_GetTick+0x14>)
 80057ca:	681b      	ldr	r3, [r3, #0]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20002644 	.word	0x20002644

080057dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057e4:	f7ff ffee 	bl	80057c4 <HAL_GetTick>
 80057e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d005      	beq.n	8005802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <HAL_Delay+0x40>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005802:	bf00      	nop
 8005804:	f7ff ffde 	bl	80057c4 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	429a      	cmp	r2, r3
 8005812:	d8f7      	bhi.n	8005804 <HAL_Delay+0x28>
  {
  }
}
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000048 	.word	0x20000048

08005820 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e031      	b.n	800589a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fc f8f8 	bl	8001a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	2b00      	cmp	r3, #0
 800585c:	d116      	bne.n	800588c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005862:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <HAL_ADC_Init+0x84>)
 8005864:	4013      	ands	r3, r2
 8005866:	f043 0202 	orr.w	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f964 	bl	8005b3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	f043 0201 	orr.w	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	641a      	str	r2, [r3, #64]	; 0x40
 800588a:	e001      	b.n	8005890 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	ffffeefd 	.word	0xffffeefd

080058a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x1c>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e12a      	b.n	8005b1a <HAL_ADC_ConfigChannel+0x272>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b09      	cmp	r3, #9
 80058d2:	d93a      	bls.n	800594a <HAL_ADC_ConfigChannel+0xa2>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058dc:	d035      	beq.n	800594a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68d9      	ldr	r1, [r3, #12]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	4613      	mov	r3, r2
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	4413      	add	r3, r2
 80058f2:	3b1e      	subs	r3, #30
 80058f4:	2207      	movs	r2, #7
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43da      	mvns	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	400a      	ands	r2, r1
 8005902:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a87      	ldr	r2, [pc, #540]	; (8005b28 <HAL_ADC_ConfigChannel+0x280>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10a      	bne.n	8005924 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68d9      	ldr	r1, [r3, #12]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	061a      	lsls	r2, r3, #24
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005922:	e035      	b.n	8005990 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68d9      	ldr	r1, [r3, #12]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	4618      	mov	r0, r3
 8005936:	4603      	mov	r3, r0
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4403      	add	r3, r0
 800593c:	3b1e      	subs	r3, #30
 800593e:	409a      	lsls	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005948:	e022      	b.n	8005990 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6919      	ldr	r1, [r3, #16]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	4613      	mov	r3, r2
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	4413      	add	r3, r2
 800595e:	2207      	movs	r2, #7
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	43da      	mvns	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	400a      	ands	r2, r1
 800596c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6919      	ldr	r1, [r3, #16]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	4618      	mov	r0, r3
 8005980:	4603      	mov	r3, r0
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	4403      	add	r3, r0
 8005986:	409a      	lsls	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b06      	cmp	r3, #6
 8005996:	d824      	bhi.n	80059e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	3b05      	subs	r3, #5
 80059aa:	221f      	movs	r2, #31
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	43da      	mvns	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	400a      	ands	r2, r1
 80059b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	4618      	mov	r0, r3
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	3b05      	subs	r3, #5
 80059d4:	fa00 f203 	lsl.w	r2, r0, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	635a      	str	r2, [r3, #52]	; 0x34
 80059e0:	e04c      	b.n	8005a7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	d824      	bhi.n	8005a34 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	3b23      	subs	r3, #35	; 0x23
 80059fc:	221f      	movs	r2, #31
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	43da      	mvns	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	400a      	ands	r2, r1
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	4618      	mov	r0, r3
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	3b23      	subs	r3, #35	; 0x23
 8005a26:	fa00 f203 	lsl.w	r2, r0, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
 8005a32:	e023      	b.n	8005a7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	3b41      	subs	r3, #65	; 0x41
 8005a46:	221f      	movs	r2, #31
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	43da      	mvns	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	400a      	ands	r2, r1
 8005a54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	4618      	mov	r0, r3
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3b41      	subs	r3, #65	; 0x41
 8005a70:	fa00 f203 	lsl.w	r2, r0, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a2a      	ldr	r2, [pc, #168]	; (8005b2c <HAL_ADC_ConfigChannel+0x284>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d10a      	bne.n	8005a9c <HAL_ADC_ConfigChannel+0x1f4>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a8e:	d105      	bne.n	8005a9c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005a90:	4b27      	ldr	r3, [pc, #156]	; (8005b30 <HAL_ADC_ConfigChannel+0x288>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4a26      	ldr	r2, [pc, #152]	; (8005b30 <HAL_ADC_ConfigChannel+0x288>)
 8005a96:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005a9a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a22      	ldr	r2, [pc, #136]	; (8005b2c <HAL_ADC_ConfigChannel+0x284>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d109      	bne.n	8005aba <HAL_ADC_ConfigChannel+0x212>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b12      	cmp	r3, #18
 8005aac:	d105      	bne.n	8005aba <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005aae:	4b20      	ldr	r3, [pc, #128]	; (8005b30 <HAL_ADC_ConfigChannel+0x288>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <HAL_ADC_ConfigChannel+0x288>)
 8005ab4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ab8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1b      	ldr	r2, [pc, #108]	; (8005b2c <HAL_ADC_ConfigChannel+0x284>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d125      	bne.n	8005b10 <HAL_ADC_ConfigChannel+0x268>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <HAL_ADC_ConfigChannel+0x280>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <HAL_ADC_ConfigChannel+0x22e>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b11      	cmp	r3, #17
 8005ad4:	d11c      	bne.n	8005b10 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005ad6:	4b16      	ldr	r3, [pc, #88]	; (8005b30 <HAL_ADC_ConfigChannel+0x288>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4a15      	ldr	r2, [pc, #84]	; (8005b30 <HAL_ADC_ConfigChannel+0x288>)
 8005adc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ae0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <HAL_ADC_ConfigChannel+0x280>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d111      	bne.n	8005b10 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005aec:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <HAL_ADC_ConfigChannel+0x28c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <HAL_ADC_ConfigChannel+0x290>)
 8005af2:	fba2 2303 	umull	r2, r3, r2, r3
 8005af6:	0c9a      	lsrs	r2, r3, #18
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005b02:	e002      	b.n	8005b0a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f9      	bne.n	8005b04 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	10000012 	.word	0x10000012
 8005b2c:	40012000 	.word	0x40012000
 8005b30:	40012300 	.word	0x40012300
 8005b34:	20000000 	.word	0x20000000
 8005b38:	431bde83 	.word	0x431bde83

08005b3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005b44:	4b78      	ldr	r3, [pc, #480]	; (8005d28 <ADC_Init+0x1ec>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4a77      	ldr	r2, [pc, #476]	; (8005d28 <ADC_Init+0x1ec>)
 8005b4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005b4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005b50:	4b75      	ldr	r3, [pc, #468]	; (8005d28 <ADC_Init+0x1ec>)
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	4973      	ldr	r1, [pc, #460]	; (8005d28 <ADC_Init+0x1ec>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6859      	ldr	r1, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	021a      	lsls	r2, r3, #8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6859      	ldr	r1, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6899      	ldr	r1, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	4a58      	ldr	r2, [pc, #352]	; (8005d2c <ADC_Init+0x1f0>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d022      	beq.n	8005c16 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6899      	ldr	r1, [r3, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6899      	ldr	r1, [r3, #8]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	e00f      	b.n	8005c36 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0202 	bic.w	r2, r2, #2
 8005c44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6899      	ldr	r1, [r3, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	005a      	lsls	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01b      	beq.n	8005c9c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6859      	ldr	r1, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	035a      	lsls	r2, r3, #13
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	e007      	b.n	8005cac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005caa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	051a      	lsls	r2, r3, #20
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6899      	ldr	r1, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cee:	025a      	lsls	r2, r3, #9
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6899      	ldr	r1, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	029a      	lsls	r2, r3, #10
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40012300 	.word	0x40012300
 8005d2c:	0f000001 	.word	0x0f000001

08005d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <__NVIC_SetPriorityGrouping+0x40>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <__NVIC_SetPriorityGrouping+0x44>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d5e:	4a04      	ldr	r2, [pc, #16]	; (8005d70 <__NVIC_SetPriorityGrouping+0x40>)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	60d3      	str	r3, [r2, #12]
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	e000ed00 	.word	0xe000ed00
 8005d74:	05fa0000 	.word	0x05fa0000

08005d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d7c:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <__NVIC_GetPriorityGrouping+0x18>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	f003 0307 	and.w	r3, r3, #7
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	e000ed00 	.word	0xe000ed00

08005d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	db0b      	blt.n	8005dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	f003 021f 	and.w	r2, r3, #31
 8005dac:	4907      	ldr	r1, [pc, #28]	; (8005dcc <__NVIC_EnableIRQ+0x38>)
 8005dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	2001      	movs	r0, #1
 8005db6:	fa00 f202 	lsl.w	r2, r0, r2
 8005dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	e000e100 	.word	0xe000e100

08005dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	6039      	str	r1, [r7, #0]
 8005dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	db0a      	blt.n	8005dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	490c      	ldr	r1, [pc, #48]	; (8005e1c <__NVIC_SetPriority+0x4c>)
 8005dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dee:	0112      	lsls	r2, r2, #4
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	440b      	add	r3, r1
 8005df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005df8:	e00a      	b.n	8005e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4908      	ldr	r1, [pc, #32]	; (8005e20 <__NVIC_SetPriority+0x50>)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	3b04      	subs	r3, #4
 8005e08:	0112      	lsls	r2, r2, #4
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	761a      	strb	r2, [r3, #24]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	e000e100 	.word	0xe000e100
 8005e20:	e000ed00 	.word	0xe000ed00

08005e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b089      	sub	sp, #36	; 0x24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f1c3 0307 	rsb	r3, r3, #7
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	bf28      	it	cs
 8005e42:	2304      	movcs	r3, #4
 8005e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	2b06      	cmp	r3, #6
 8005e4c:	d902      	bls.n	8005e54 <NVIC_EncodePriority+0x30>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3b03      	subs	r3, #3
 8005e52:	e000      	b.n	8005e56 <NVIC_EncodePriority+0x32>
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	43da      	mvns	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	401a      	ands	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	43d9      	mvns	r1, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e7c:	4313      	orrs	r3, r2
         );
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3724      	adds	r7, #36	; 0x24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff ff4c 	bl	8005d30 <__NVIC_SetPriorityGrouping>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005eb2:	f7ff ff61 	bl	8005d78 <__NVIC_GetPriorityGrouping>
 8005eb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	6978      	ldr	r0, [r7, #20]
 8005ebe:	f7ff ffb1 	bl	8005e24 <NVIC_EncodePriority>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff ff80 	bl	8005dd0 <__NVIC_SetPriority>
}
 8005ed0:	bf00      	nop
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff ff54 	bl	8005d94 <__NVIC_EnableIRQ>
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e054      	b.n	8005fb0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7f5b      	ldrb	r3, [r3, #29]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fb fde6 	bl	8001ae8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	791b      	ldrb	r3, [r3, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10c      	bne.n	8005f44 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a22      	ldr	r2, [pc, #136]	; (8005fb8 <HAL_CRC_Init+0xc4>)
 8005f30:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0218 	bic.w	r2, r2, #24
 8005f40:	609a      	str	r2, [r3, #8]
 8005f42:	e00c      	b.n	8005f5e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6899      	ldr	r1, [r3, #8]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f834 	bl	8005fbc <HAL_CRCEx_Polynomial_Set>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e028      	b.n	8005fb0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	795b      	ldrb	r3, [r3, #5]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d105      	bne.n	8005f72 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6e:	611a      	str	r2, [r3, #16]
 8005f70:	e004      	b.n	8005f7c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6912      	ldr	r2, [r2, #16]
 8005f7a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699a      	ldr	r2, [r3, #24]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	04c11db7 	.word	0x04c11db7

08005fbc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005fcc:	231f      	movs	r3, #31
 8005fce:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005fd0:	bf00      	nop
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1e5a      	subs	r2, r3, #1
 8005fd6:	613a      	str	r2, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d009      	beq.n	8005ff0 <HAL_CRCEx_Polynomial_Set+0x34>
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f003 031f 	and.w	r3, r3, #31
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0f0      	beq.n	8005fd2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b18      	cmp	r3, #24
 8005ff4:	d846      	bhi.n	8006084 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <HAL_CRCEx_Polynomial_Set+0x40>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	0800608b 	.word	0x0800608b
 8006000:	08006085 	.word	0x08006085
 8006004:	08006085 	.word	0x08006085
 8006008:	08006085 	.word	0x08006085
 800600c:	08006085 	.word	0x08006085
 8006010:	08006085 	.word	0x08006085
 8006014:	08006085 	.word	0x08006085
 8006018:	08006085 	.word	0x08006085
 800601c:	08006079 	.word	0x08006079
 8006020:	08006085 	.word	0x08006085
 8006024:	08006085 	.word	0x08006085
 8006028:	08006085 	.word	0x08006085
 800602c:	08006085 	.word	0x08006085
 8006030:	08006085 	.word	0x08006085
 8006034:	08006085 	.word	0x08006085
 8006038:	08006085 	.word	0x08006085
 800603c:	0800606d 	.word	0x0800606d
 8006040:	08006085 	.word	0x08006085
 8006044:	08006085 	.word	0x08006085
 8006048:	08006085 	.word	0x08006085
 800604c:	08006085 	.word	0x08006085
 8006050:	08006085 	.word	0x08006085
 8006054:	08006085 	.word	0x08006085
 8006058:	08006085 	.word	0x08006085
 800605c:	08006061 	.word	0x08006061
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b06      	cmp	r3, #6
 8006064:	d913      	bls.n	800608e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800606a:	e010      	b.n	800608e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b07      	cmp	r3, #7
 8006070:	d90f      	bls.n	8006092 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006076:	e00c      	b.n	8006092 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b0f      	cmp	r3, #15
 800607c:	d90b      	bls.n	8006096 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006082:	e008      	b.n	8006096 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	75fb      	strb	r3, [r7, #23]
      break;
 8006088:	e006      	b.n	8006098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800608a:	bf00      	nop
 800608c:	e004      	b.n	8006098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800608e:	bf00      	nop
 8006090:	e002      	b.n	8006098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006092:	bf00      	nop
 8006094:	e000      	b.n	8006098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006096:	bf00      	nop
  }
  if (status == HAL_OK)
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10d      	bne.n	80060ba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f023 0118 	bic.w	r1, r3, #24
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	371c      	adds	r7, #28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e069      	b.n	80061ae <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fb fd1e 	bl	8001b28 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6819      	ldr	r1, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	4b2a      	ldr	r3, [pc, #168]	; (80061b8 <HAL_DCMI_Init+0xf0>)
 800610e:	400b      	ands	r3, r1
 8006110:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6819      	ldr	r1, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006126:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006132:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800613e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800614a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006156:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b10      	cmp	r3, #16
 8006166:	d112      	bne.n	800618e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	7f1b      	ldrb	r3, [r3, #28]
 800616c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	7f5b      	ldrb	r3, [r3, #29]
 8006172:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006174:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	7f9b      	ldrb	r3, [r3, #30]
 800617a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800617c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	7fdb      	ldrb	r3, [r3, #31]
 8006184:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800618a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800618c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 021e 	orr.w	r2, r2, #30
 800619c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	ffe0f007 	.word	0xffe0f007

080061bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80061c8:	f7ff fafc 	bl	80057c4 <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e099      	b.n	800630c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0201 	bic.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061f8:	e00f      	b.n	800621a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061fa:	f7ff fae3 	bl	80057c4 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b05      	cmp	r3, #5
 8006206:	d908      	bls.n	800621a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2203      	movs	r2, #3
 8006212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e078      	b.n	800630c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e8      	bne.n	80061fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4b38      	ldr	r3, [pc, #224]	; (8006314 <HAL_DMA_Init+0x158>)
 8006234:	4013      	ands	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006246:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800625e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	2b04      	cmp	r3, #4
 8006272:	d107      	bne.n	8006284 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	4313      	orrs	r3, r2
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 0307 	bic.w	r3, r3, #7
 800629a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d117      	bne.n	80062de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00e      	beq.n	80062de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fad5 	bl	8006870 <DMA_CheckFifoParam>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2240      	movs	r2, #64	; 0x40
 80062d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80062da:	2301      	movs	r3, #1
 80062dc:	e016      	b.n	800630c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fa8c 	bl	8006804 <DMA_CalcBaseAndBitshift>
 80062ec:	4603      	mov	r3, r0
 80062ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f4:	223f      	movs	r2, #63	; 0x3f
 80062f6:	409a      	lsls	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	f010803f 	.word	0xf010803f

08006318 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e050      	b.n	80063cc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d101      	bne.n	800633a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006336:	2302      	movs	r3, #2
 8006338:	e048      	b.n	80063cc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0201 	bic.w	r2, r2, #1
 8006348:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2200      	movs	r2, #0
 8006358:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2200      	movs	r2, #0
 8006360:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2200      	movs	r2, #0
 8006368:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2200      	movs	r2, #0
 8006370:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2221      	movs	r2, #33	; 0x21
 8006378:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fa42 	bl	8006804 <DMA_CalcBaseAndBitshift>
 8006380:	4603      	mov	r3, r0
 8006382:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006388:	223f      	movs	r2, #63	; 0x3f
 800638a:	409a      	lsls	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_DMA_Start_IT+0x26>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e048      	b.n	800648c <HAL_DMA_Start_IT+0xb8>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d137      	bne.n	800647e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2202      	movs	r2, #2
 8006412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f9c0 	bl	80067a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642c:	223f      	movs	r2, #63	; 0x3f
 800642e:	409a      	lsls	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0216 	orr.w	r2, r2, #22
 8006442:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006452:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0208 	orr.w	r2, r2, #8
 800646a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	e005      	b.n	800648a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006486:	2302      	movs	r3, #2
 8006488:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800648a:	7dfb      	ldrb	r3, [r7, #23]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80064a0:	4b92      	ldr	r3, [pc, #584]	; (80066ec <HAL_DMA_IRQHandler+0x258>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a92      	ldr	r2, [pc, #584]	; (80066f0 <HAL_DMA_IRQHandler+0x25c>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	0a9b      	lsrs	r3, r3, #10
 80064ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064be:	2208      	movs	r2, #8
 80064c0:	409a      	lsls	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d01a      	beq.n	8006500 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d013      	beq.n	8006500 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0204 	bic.w	r2, r2, #4
 80064e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ec:	2208      	movs	r2, #8
 80064ee:	409a      	lsls	r2, r3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f8:	f043 0201 	orr.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006504:	2201      	movs	r2, #1
 8006506:	409a      	lsls	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4013      	ands	r3, r2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d012      	beq.n	8006536 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00b      	beq.n	8006536 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006522:	2201      	movs	r2, #1
 8006524:	409a      	lsls	r2, r3
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652e:	f043 0202 	orr.w	r2, r3, #2
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653a:	2204      	movs	r2, #4
 800653c:	409a      	lsls	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4013      	ands	r3, r2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d012      	beq.n	800656c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00b      	beq.n	800656c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006558:	2204      	movs	r2, #4
 800655a:	409a      	lsls	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006564:	f043 0204 	orr.w	r2, r3, #4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006570:	2210      	movs	r2, #16
 8006572:	409a      	lsls	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d043      	beq.n	8006604 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d03c      	beq.n	8006604 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658e:	2210      	movs	r2, #16
 8006590:	409a      	lsls	r2, r3
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d018      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d108      	bne.n	80065c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d024      	beq.n	8006604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
 80065c2:	e01f      	b.n	8006604 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01b      	beq.n	8006604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	4798      	blx	r3
 80065d4:	e016      	b.n	8006604 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d107      	bne.n	80065f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0208 	bic.w	r2, r2, #8
 80065f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006608:	2220      	movs	r2, #32
 800660a:	409a      	lsls	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4013      	ands	r3, r2
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 808e 	beq.w	8006732 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 8086 	beq.w	8006732 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662a:	2220      	movs	r2, #32
 800662c:	409a      	lsls	r2, r3
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b05      	cmp	r3, #5
 800663c:	d136      	bne.n	80066ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0216 	bic.w	r2, r2, #22
 800664c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800665c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <HAL_DMA_IRQHandler+0x1da>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0208 	bic.w	r2, r2, #8
 800667c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006682:	223f      	movs	r2, #63	; 0x3f
 8006684:	409a      	lsls	r2, r3
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d07d      	beq.n	800679e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	4798      	blx	r3
        }
        return;
 80066aa:	e078      	b.n	800679e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01c      	beq.n	80066f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d108      	bne.n	80066da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d030      	beq.n	8006732 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
 80066d8:	e02b      	b.n	8006732 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d027      	beq.n	8006732 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
 80066ea:	e022      	b.n	8006732 <HAL_DMA_IRQHandler+0x29e>
 80066ec:	20000000 	.word	0x20000000
 80066f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10f      	bne.n	8006722 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0210 	bic.w	r2, r2, #16
 8006710:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006736:	2b00      	cmp	r3, #0
 8006738:	d032      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d022      	beq.n	800678c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2205      	movs	r2, #5
 800674a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0201 	bic.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	3301      	adds	r3, #1
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	429a      	cmp	r2, r3
 8006768:	d307      	bcc.n	800677a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1f2      	bne.n	800675e <HAL_DMA_IRQHandler+0x2ca>
 8006778:	e000      	b.n	800677c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800677a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	4798      	blx	r3
 800679c:	e000      	b.n	80067a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800679e:	bf00      	nop
    }
  }
}
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop

080067a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d108      	bne.n	80067e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067e6:	e007      	b.n	80067f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	60da      	str	r2, [r3, #12]
}
 80067f8:	bf00      	nop
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	3b10      	subs	r3, #16
 8006814:	4a13      	ldr	r2, [pc, #76]	; (8006864 <DMA_CalcBaseAndBitshift+0x60>)
 8006816:	fba2 2303 	umull	r2, r3, r2, r3
 800681a:	091b      	lsrs	r3, r3, #4
 800681c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800681e:	4a12      	ldr	r2, [pc, #72]	; (8006868 <DMA_CalcBaseAndBitshift+0x64>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b03      	cmp	r3, #3
 8006830:	d908      	bls.n	8006844 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <DMA_CalcBaseAndBitshift+0x68>)
 800683a:	4013      	ands	r3, r2
 800683c:	1d1a      	adds	r2, r3, #4
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	659a      	str	r2, [r3, #88]	; 0x58
 8006842:	e006      	b.n	8006852 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	4b08      	ldr	r3, [pc, #32]	; (800686c <DMA_CalcBaseAndBitshift+0x68>)
 800684c:	4013      	ands	r3, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	aaaaaaab 	.word	0xaaaaaaab
 8006868:	080113b8 	.word	0x080113b8
 800686c:	fffffc00 	.word	0xfffffc00

08006870 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d11f      	bne.n	80068ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b03      	cmp	r3, #3
 800688e:	d855      	bhi.n	800693c <DMA_CheckFifoParam+0xcc>
 8006890:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <DMA_CheckFifoParam+0x28>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068a9 	.word	0x080068a9
 800689c:	080068bb 	.word	0x080068bb
 80068a0:	080068a9 	.word	0x080068a9
 80068a4:	0800693d 	.word	0x0800693d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d045      	beq.n	8006940 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068b8:	e042      	b.n	8006940 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068c2:	d13f      	bne.n	8006944 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068c8:	e03c      	b.n	8006944 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d2:	d121      	bne.n	8006918 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d836      	bhi.n	8006948 <DMA_CheckFifoParam+0xd8>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <DMA_CheckFifoParam+0x70>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	080068f1 	.word	0x080068f1
 80068e4:	080068f7 	.word	0x080068f7
 80068e8:	080068f1 	.word	0x080068f1
 80068ec:	08006909 	.word	0x08006909
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
      break;
 80068f4:	e02f      	b.n	8006956 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d024      	beq.n	800694c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006906:	e021      	b.n	800694c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006910:	d11e      	bne.n	8006950 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006916:	e01b      	b.n	8006950 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d902      	bls.n	8006924 <DMA_CheckFifoParam+0xb4>
 800691e:	2b03      	cmp	r3, #3
 8006920:	d003      	beq.n	800692a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006922:	e018      	b.n	8006956 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
      break;
 8006928:	e015      	b.n	8006956 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00e      	beq.n	8006954 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
      break;
 800693a:	e00b      	b.n	8006954 <DMA_CheckFifoParam+0xe4>
      break;
 800693c:	bf00      	nop
 800693e:	e00a      	b.n	8006956 <DMA_CheckFifoParam+0xe6>
      break;
 8006940:	bf00      	nop
 8006942:	e008      	b.n	8006956 <DMA_CheckFifoParam+0xe6>
      break;
 8006944:	bf00      	nop
 8006946:	e006      	b.n	8006956 <DMA_CheckFifoParam+0xe6>
      break;
 8006948:	bf00      	nop
 800694a:	e004      	b.n	8006956 <DMA_CheckFifoParam+0xe6>
      break;
 800694c:	bf00      	nop
 800694e:	e002      	b.n	8006956 <DMA_CheckFifoParam+0xe6>
      break;   
 8006950:	bf00      	nop
 8006952:	e000      	b.n	8006956 <DMA_CheckFifoParam+0xe6>
      break;
 8006954:	bf00      	nop
    }
  } 
  
  return status; 
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e039      	b.n	80069ea <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fb f98a 	bl	8001ca4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b4:	f023 0107 	bic.w	r1, r3, #7
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <HAL_DMA2D_Init+0x90>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	68d1      	ldr	r1, [r2, #12]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	430b      	orrs	r3, r1
 80069d8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	ffffc000 	.word	0xffffc000

080069f8 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_DMA2D_Start+0x1c>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e018      	b.n	8006a46 <HAL_DMA2D_Start+0x4e>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 fa98 	bl	8006f64 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d056      	beq.n	8006b18 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8006a6a:	f7fe feab 	bl	80057c4 <HAL_GetTick>
 8006a6e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006a70:	e04b      	b.n	8006b0a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d023      	beq.n	8006acc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	f043 0202 	orr.w	r2, r3, #2
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa8:	f043 0201 	orr.w	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2221      	movs	r2, #33	; 0x21
 8006ab6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2204      	movs	r2, #4
 8006abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0a5      	b.n	8006c18 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad2:	d01a      	beq.n	8006b0a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006ad4:	f7fe fe76 	bl	80057c4 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d302      	bcc.n	8006aea <HAL_DMA2D_PollForTransfer+0x9c>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10f      	bne.n	8006b0a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	f043 0220 	orr.w	r2, r3, #32
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2203      	movs	r2, #3
 8006afa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e086      	b.n	8006c18 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0ac      	beq.n	8006a72 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d061      	beq.n	8006bfe <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b3a:	f7fe fe43 	bl	80057c4 <HAL_GetTick>
 8006b3e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006b40:	e056      	b.n	8006bf0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d02e      	beq.n	8006bb2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d005      	beq.n	8006b6a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	f043 0204 	orr.w	r2, r3, #4
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b78:	f043 0202 	orr.w	r2, r3, #2
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d005      	beq.n	8006b96 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8e:	f043 0201 	orr.w	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2229      	movs	r2, #41	; 0x29
 8006b9c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2204      	movs	r2, #4
 8006ba2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e032      	b.n	8006c18 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d01a      	beq.n	8006bf0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006bba:	f7fe fe03 	bl	80057c4 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d302      	bcc.n	8006bd0 <HAL_DMA2D_PollForTransfer+0x182>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10f      	bne.n	8006bf0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd4:	f043 0220 	orr.w	r2, r3, #32
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2203      	movs	r2, #3
 8006be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e013      	b.n	8006c18 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f003 0310 	and.w	r3, r3, #16
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0a1      	beq.n	8006b42 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2212      	movs	r2, #18
 8006c04:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d026      	beq.n	8006c90 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d021      	beq.n	8006c90 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c5a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c60:	f043 0201 	orr.w	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2204      	movs	r2, #4
 8006c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d026      	beq.n	8006ce8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d021      	beq.n	8006ce8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cb2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc0:	f043 0202 	orr.w	r2, r3, #2
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2204      	movs	r2, #4
 8006ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d026      	beq.n	8006d40 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d021      	beq.n	8006d40 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d0a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2208      	movs	r2, #8
 8006d12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d18:	f043 0204 	orr.w	r2, r3, #4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2204      	movs	r2, #4
 8006d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f003 0304 	and.w	r3, r3, #4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d013      	beq.n	8006d72 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00e      	beq.n	8006d72 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d62:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2204      	movs	r2, #4
 8006d6a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f853 	bl	8006e18 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d024      	beq.n	8006dc6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d01f      	beq.n	8006dc6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d94:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01f      	beq.n	8006e10 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01a      	beq.n	8006e10 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006de8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2210      	movs	r2, #16
 8006df0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f80e 	bl	8006e2c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006e10:	bf00      	nop
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_DMA2D_ConfigLayer+0x20>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e079      	b.n	8006f54 <HAL_DMA2D_ConfigLayer+0x114>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	3318      	adds	r3, #24
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	4413      	add	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	041b      	lsls	r3, r3, #16
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006e8a:	4b35      	ldr	r3, [pc, #212]	; (8006f60 <HAL_DMA2D_ConfigLayer+0x120>)
 8006e8c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b0a      	cmp	r3, #10
 8006e94:	d003      	beq.n	8006e9e <HAL_DMA2D_ConfigLayer+0x5e>
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b09      	cmp	r3, #9
 8006e9c:	d107      	bne.n	8006eae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	e005      	b.n	8006eba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	061b      	lsls	r3, r3, #24
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d120      	bne.n	8006f02 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	ea02 0103 	and.w	r1, r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	6812      	ldr	r2, [r2, #0]
 8006ee0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b0a      	cmp	r3, #10
 8006ee8:	d003      	beq.n	8006ef2 <HAL_DMA2D_ConfigLayer+0xb2>
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b09      	cmp	r3, #9
 8006ef0:	d127      	bne.n	8006f42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006efe:	629a      	str	r2, [r3, #40]	; 0x28
 8006f00:	e01f      	b.n	8006f42 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	43db      	mvns	r3, r3
 8006f0c:	ea02 0103 	and.w	r1, r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b0a      	cmp	r3, #10
 8006f2a:	d003      	beq.n	8006f34 <HAL_DMA2D_ConfigLayer+0xf4>
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b09      	cmp	r3, #9
 8006f32:	d106      	bne.n	8006f42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006f40:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	ff03000f 	.word	0xff03000f

08006f64 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b08b      	sub	sp, #44	; 0x2c
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f78:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	041a      	lsls	r2, r3, #16
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	431a      	orrs	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f9c:	d174      	bne.n	8007088 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006fa4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006fb4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d108      	bne.n	8006fd6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd4:	e053      	b.n	800707e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d106      	bne.n	8006fec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fea:	e048      	b.n	800707e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d111      	bne.n	8007018 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	0cdb      	lsrs	r3, r3, #19
 8006ff8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	0a9b      	lsrs	r3, r3, #10
 8006ffe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	08db      	lsrs	r3, r3, #3
 8007004:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	02db      	lsls	r3, r3, #11
 800700e:	4313      	orrs	r3, r2
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
 8007016:	e032      	b.n	800707e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d117      	bne.n	8007050 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	0fdb      	lsrs	r3, r3, #31
 8007024:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	0cdb      	lsrs	r3, r3, #19
 800702a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	0adb      	lsrs	r3, r3, #11
 8007030:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	08db      	lsrs	r3, r3, #3
 8007036:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	029b      	lsls	r3, r3, #10
 8007040:	431a      	orrs	r2, r3
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	03db      	lsls	r3, r3, #15
 8007046:	4313      	orrs	r3, r2
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
 800704e:	e016      	b.n	800707e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	0f1b      	lsrs	r3, r3, #28
 8007054:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	0d1b      	lsrs	r3, r3, #20
 800705a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	0b1b      	lsrs	r3, r3, #12
 8007060:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	091b      	lsrs	r3, r3, #4
 8007066:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	011a      	lsls	r2, r3, #4
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	431a      	orrs	r2, r3
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	031b      	lsls	r3, r3, #12
 8007076:	4313      	orrs	r3, r2
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4313      	orrs	r3, r2
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007084:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007086:	e003      	b.n	8007090 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	60da      	str	r2, [r3, #12]
}
 8007090:	bf00      	nop
 8007092:	372c      	adds	r7, #44	; 0x2c
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800709c:	b480      	push	{r7}
 800709e:	b089      	sub	sp, #36	; 0x24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80070ae:	2300      	movs	r3, #0
 80070b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80070b6:	2300      	movs	r3, #0
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	e175      	b.n	80073a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80070bc:	2201      	movs	r2, #1
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	4013      	ands	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	f040 8164 	bne.w	80073a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d00b      	beq.n	80070fa <HAL_GPIO_Init+0x5e>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d007      	beq.n	80070fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80070ee:	2b11      	cmp	r3, #17
 80070f0:	d003      	beq.n	80070fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b12      	cmp	r3, #18
 80070f8:	d130      	bne.n	800715c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	2203      	movs	r2, #3
 8007106:	fa02 f303 	lsl.w	r3, r2, r3
 800710a:	43db      	mvns	r3, r3
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	4013      	ands	r3, r2
 8007110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	fa02 f303 	lsl.w	r3, r2, r3
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	4313      	orrs	r3, r2
 8007122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007130:	2201      	movs	r2, #1
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	43db      	mvns	r3, r3
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	4013      	ands	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	091b      	lsrs	r3, r3, #4
 8007146:	f003 0201 	and.w	r2, r3, #1
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	fa02 f303 	lsl.w	r3, r2, r3
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	4313      	orrs	r3, r2
 8007154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	2203      	movs	r2, #3
 8007168:	fa02 f303 	lsl.w	r3, r2, r3
 800716c:	43db      	mvns	r3, r3
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	4013      	ands	r3, r2
 8007172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	fa02 f303 	lsl.w	r3, r2, r3
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	4313      	orrs	r3, r2
 8007184:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d003      	beq.n	800719c <HAL_GPIO_Init+0x100>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b12      	cmp	r3, #18
 800719a:	d123      	bne.n	80071e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	08da      	lsrs	r2, r3, #3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3208      	adds	r2, #8
 80071a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	f003 0307 	and.w	r3, r3, #7
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	220f      	movs	r2, #15
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	43db      	mvns	r3, r3
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	4013      	ands	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	fa02 f303 	lsl.w	r3, r2, r3
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	08da      	lsrs	r2, r3, #3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3208      	adds	r2, #8
 80071de:	69b9      	ldr	r1, [r7, #24]
 80071e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	2203      	movs	r2, #3
 80071f0:	fa02 f303 	lsl.w	r3, r2, r3
 80071f4:	43db      	mvns	r3, r3
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	4013      	ands	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f003 0203 	and.w	r2, r3, #3
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	fa02 f303 	lsl.w	r3, r2, r3
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	4313      	orrs	r3, r2
 8007210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 80be 	beq.w	80073a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007226:	4b65      	ldr	r3, [pc, #404]	; (80073bc <HAL_GPIO_Init+0x320>)
 8007228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722a:	4a64      	ldr	r2, [pc, #400]	; (80073bc <HAL_GPIO_Init+0x320>)
 800722c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007230:	6453      	str	r3, [r2, #68]	; 0x44
 8007232:	4b62      	ldr	r3, [pc, #392]	; (80073bc <HAL_GPIO_Init+0x320>)
 8007234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800723e:	4a60      	ldr	r2, [pc, #384]	; (80073c0 <HAL_GPIO_Init+0x324>)
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	089b      	lsrs	r3, r3, #2
 8007244:	3302      	adds	r3, #2
 8007246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800724a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	220f      	movs	r2, #15
 8007256:	fa02 f303 	lsl.w	r3, r2, r3
 800725a:	43db      	mvns	r3, r3
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	4013      	ands	r3, r2
 8007260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a57      	ldr	r2, [pc, #348]	; (80073c4 <HAL_GPIO_Init+0x328>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d037      	beq.n	80072da <HAL_GPIO_Init+0x23e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a56      	ldr	r2, [pc, #344]	; (80073c8 <HAL_GPIO_Init+0x32c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d031      	beq.n	80072d6 <HAL_GPIO_Init+0x23a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a55      	ldr	r2, [pc, #340]	; (80073cc <HAL_GPIO_Init+0x330>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d02b      	beq.n	80072d2 <HAL_GPIO_Init+0x236>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a54      	ldr	r2, [pc, #336]	; (80073d0 <HAL_GPIO_Init+0x334>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d025      	beq.n	80072ce <HAL_GPIO_Init+0x232>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a53      	ldr	r2, [pc, #332]	; (80073d4 <HAL_GPIO_Init+0x338>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d01f      	beq.n	80072ca <HAL_GPIO_Init+0x22e>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a52      	ldr	r2, [pc, #328]	; (80073d8 <HAL_GPIO_Init+0x33c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d019      	beq.n	80072c6 <HAL_GPIO_Init+0x22a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a51      	ldr	r2, [pc, #324]	; (80073dc <HAL_GPIO_Init+0x340>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <HAL_GPIO_Init+0x226>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a50      	ldr	r2, [pc, #320]	; (80073e0 <HAL_GPIO_Init+0x344>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d00d      	beq.n	80072be <HAL_GPIO_Init+0x222>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a4f      	ldr	r2, [pc, #316]	; (80073e4 <HAL_GPIO_Init+0x348>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d007      	beq.n	80072ba <HAL_GPIO_Init+0x21e>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a4e      	ldr	r2, [pc, #312]	; (80073e8 <HAL_GPIO_Init+0x34c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d101      	bne.n	80072b6 <HAL_GPIO_Init+0x21a>
 80072b2:	2309      	movs	r3, #9
 80072b4:	e012      	b.n	80072dc <HAL_GPIO_Init+0x240>
 80072b6:	230a      	movs	r3, #10
 80072b8:	e010      	b.n	80072dc <HAL_GPIO_Init+0x240>
 80072ba:	2308      	movs	r3, #8
 80072bc:	e00e      	b.n	80072dc <HAL_GPIO_Init+0x240>
 80072be:	2307      	movs	r3, #7
 80072c0:	e00c      	b.n	80072dc <HAL_GPIO_Init+0x240>
 80072c2:	2306      	movs	r3, #6
 80072c4:	e00a      	b.n	80072dc <HAL_GPIO_Init+0x240>
 80072c6:	2305      	movs	r3, #5
 80072c8:	e008      	b.n	80072dc <HAL_GPIO_Init+0x240>
 80072ca:	2304      	movs	r3, #4
 80072cc:	e006      	b.n	80072dc <HAL_GPIO_Init+0x240>
 80072ce:	2303      	movs	r3, #3
 80072d0:	e004      	b.n	80072dc <HAL_GPIO_Init+0x240>
 80072d2:	2302      	movs	r3, #2
 80072d4:	e002      	b.n	80072dc <HAL_GPIO_Init+0x240>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <HAL_GPIO_Init+0x240>
 80072da:	2300      	movs	r3, #0
 80072dc:	69fa      	ldr	r2, [r7, #28]
 80072de:	f002 0203 	and.w	r2, r2, #3
 80072e2:	0092      	lsls	r2, r2, #2
 80072e4:	4093      	lsls	r3, r2
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80072ec:	4934      	ldr	r1, [pc, #208]	; (80073c0 <HAL_GPIO_Init+0x324>)
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	089b      	lsrs	r3, r3, #2
 80072f2:	3302      	adds	r3, #2
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80072fa:	4b3c      	ldr	r3, [pc, #240]	; (80073ec <HAL_GPIO_Init+0x350>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	43db      	mvns	r3, r3
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	4013      	ands	r3, r2
 8007308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800731e:	4a33      	ldr	r2, [pc, #204]	; (80073ec <HAL_GPIO_Init+0x350>)
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007324:	4b31      	ldr	r3, [pc, #196]	; (80073ec <HAL_GPIO_Init+0x350>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	43db      	mvns	r3, r3
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	4013      	ands	r3, r2
 8007332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007348:	4a28      	ldr	r2, [pc, #160]	; (80073ec <HAL_GPIO_Init+0x350>)
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800734e:	4b27      	ldr	r3, [pc, #156]	; (80073ec <HAL_GPIO_Init+0x350>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	43db      	mvns	r3, r3
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	4013      	ands	r3, r2
 800735c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007372:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <HAL_GPIO_Init+0x350>)
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007378:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <HAL_GPIO_Init+0x350>)
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	43db      	mvns	r3, r3
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	4013      	ands	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800739c:	4a13      	ldr	r2, [pc, #76]	; (80073ec <HAL_GPIO_Init+0x350>)
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	3301      	adds	r3, #1
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	2b0f      	cmp	r3, #15
 80073ac:	f67f ae86 	bls.w	80070bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80073b0:	bf00      	nop
 80073b2:	3724      	adds	r7, #36	; 0x24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	40023800 	.word	0x40023800
 80073c0:	40013800 	.word	0x40013800
 80073c4:	40020000 	.word	0x40020000
 80073c8:	40020400 	.word	0x40020400
 80073cc:	40020800 	.word	0x40020800
 80073d0:	40020c00 	.word	0x40020c00
 80073d4:	40021000 	.word	0x40021000
 80073d8:	40021400 	.word	0x40021400
 80073dc:	40021800 	.word	0x40021800
 80073e0:	40021c00 	.word	0x40021c00
 80073e4:	40022000 	.word	0x40022000
 80073e8:	40022400 	.word	0x40022400
 80073ec:	40013c00 	.word	0x40013c00

080073f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007402:	2300      	movs	r3, #0
 8007404:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007406:	2300      	movs	r3, #0
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	e0d9      	b.n	80075c0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800740c:	2201      	movs	r2, #1
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	4013      	ands	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	429a      	cmp	r2, r3
 8007424:	f040 80c9 	bne.w	80075ba <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007428:	4a6a      	ldr	r2, [pc, #424]	; (80075d4 <HAL_GPIO_DeInit+0x1e4>)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	089b      	lsrs	r3, r3, #2
 800742e:	3302      	adds	r3, #2
 8007430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007434:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f003 0303 	and.w	r3, r3, #3
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	220f      	movs	r2, #15
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	4013      	ands	r3, r2
 8007448:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a62      	ldr	r2, [pc, #392]	; (80075d8 <HAL_GPIO_DeInit+0x1e8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d037      	beq.n	80074c2 <HAL_GPIO_DeInit+0xd2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a61      	ldr	r2, [pc, #388]	; (80075dc <HAL_GPIO_DeInit+0x1ec>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d031      	beq.n	80074be <HAL_GPIO_DeInit+0xce>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a60      	ldr	r2, [pc, #384]	; (80075e0 <HAL_GPIO_DeInit+0x1f0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d02b      	beq.n	80074ba <HAL_GPIO_DeInit+0xca>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a5f      	ldr	r2, [pc, #380]	; (80075e4 <HAL_GPIO_DeInit+0x1f4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d025      	beq.n	80074b6 <HAL_GPIO_DeInit+0xc6>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a5e      	ldr	r2, [pc, #376]	; (80075e8 <HAL_GPIO_DeInit+0x1f8>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d01f      	beq.n	80074b2 <HAL_GPIO_DeInit+0xc2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a5d      	ldr	r2, [pc, #372]	; (80075ec <HAL_GPIO_DeInit+0x1fc>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d019      	beq.n	80074ae <HAL_GPIO_DeInit+0xbe>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a5c      	ldr	r2, [pc, #368]	; (80075f0 <HAL_GPIO_DeInit+0x200>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d013      	beq.n	80074aa <HAL_GPIO_DeInit+0xba>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a5b      	ldr	r2, [pc, #364]	; (80075f4 <HAL_GPIO_DeInit+0x204>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d00d      	beq.n	80074a6 <HAL_GPIO_DeInit+0xb6>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a5a      	ldr	r2, [pc, #360]	; (80075f8 <HAL_GPIO_DeInit+0x208>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d007      	beq.n	80074a2 <HAL_GPIO_DeInit+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a59      	ldr	r2, [pc, #356]	; (80075fc <HAL_GPIO_DeInit+0x20c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d101      	bne.n	800749e <HAL_GPIO_DeInit+0xae>
 800749a:	2309      	movs	r3, #9
 800749c:	e012      	b.n	80074c4 <HAL_GPIO_DeInit+0xd4>
 800749e:	230a      	movs	r3, #10
 80074a0:	e010      	b.n	80074c4 <HAL_GPIO_DeInit+0xd4>
 80074a2:	2308      	movs	r3, #8
 80074a4:	e00e      	b.n	80074c4 <HAL_GPIO_DeInit+0xd4>
 80074a6:	2307      	movs	r3, #7
 80074a8:	e00c      	b.n	80074c4 <HAL_GPIO_DeInit+0xd4>
 80074aa:	2306      	movs	r3, #6
 80074ac:	e00a      	b.n	80074c4 <HAL_GPIO_DeInit+0xd4>
 80074ae:	2305      	movs	r3, #5
 80074b0:	e008      	b.n	80074c4 <HAL_GPIO_DeInit+0xd4>
 80074b2:	2304      	movs	r3, #4
 80074b4:	e006      	b.n	80074c4 <HAL_GPIO_DeInit+0xd4>
 80074b6:	2303      	movs	r3, #3
 80074b8:	e004      	b.n	80074c4 <HAL_GPIO_DeInit+0xd4>
 80074ba:	2302      	movs	r3, #2
 80074bc:	e002      	b.n	80074c4 <HAL_GPIO_DeInit+0xd4>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <HAL_GPIO_DeInit+0xd4>
 80074c2:	2300      	movs	r3, #0
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	f002 0203 	and.w	r2, r2, #3
 80074ca:	0092      	lsls	r2, r2, #2
 80074cc:	4093      	lsls	r3, r2
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d132      	bne.n	800753a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80074d4:	4b4a      	ldr	r3, [pc, #296]	; (8007600 <HAL_GPIO_DeInit+0x210>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	43db      	mvns	r3, r3
 80074dc:	4948      	ldr	r1, [pc, #288]	; (8007600 <HAL_GPIO_DeInit+0x210>)
 80074de:	4013      	ands	r3, r2
 80074e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80074e2:	4b47      	ldr	r3, [pc, #284]	; (8007600 <HAL_GPIO_DeInit+0x210>)
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	43db      	mvns	r3, r3
 80074ea:	4945      	ldr	r1, [pc, #276]	; (8007600 <HAL_GPIO_DeInit+0x210>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80074f0:	4b43      	ldr	r3, [pc, #268]	; (8007600 <HAL_GPIO_DeInit+0x210>)
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	43db      	mvns	r3, r3
 80074f8:	4941      	ldr	r1, [pc, #260]	; (8007600 <HAL_GPIO_DeInit+0x210>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80074fe:	4b40      	ldr	r3, [pc, #256]	; (8007600 <HAL_GPIO_DeInit+0x210>)
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	43db      	mvns	r3, r3
 8007506:	493e      	ldr	r1, [pc, #248]	; (8007600 <HAL_GPIO_DeInit+0x210>)
 8007508:	4013      	ands	r3, r2
 800750a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	220f      	movs	r2, #15
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800751c:	4a2d      	ldr	r2, [pc, #180]	; (80075d4 <HAL_GPIO_DeInit+0x1e4>)
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	089b      	lsrs	r3, r3, #2
 8007522:	3302      	adds	r3, #2
 8007524:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	43da      	mvns	r2, r3
 800752c:	4829      	ldr	r0, [pc, #164]	; (80075d4 <HAL_GPIO_DeInit+0x1e4>)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	089b      	lsrs	r3, r3, #2
 8007532:	400a      	ands	r2, r1
 8007534:	3302      	adds	r3, #2
 8007536:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	2103      	movs	r1, #3
 8007544:	fa01 f303 	lsl.w	r3, r1, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	401a      	ands	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	08da      	lsrs	r2, r3, #3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3208      	adds	r2, #8
 8007558:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	220f      	movs	r2, #15
 8007566:	fa02 f303 	lsl.w	r3, r2, r3
 800756a:	43db      	mvns	r3, r3
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	08d2      	lsrs	r2, r2, #3
 8007570:	4019      	ands	r1, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3208      	adds	r2, #8
 8007576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	2103      	movs	r1, #3
 8007584:	fa01 f303 	lsl.w	r3, r1, r3
 8007588:	43db      	mvns	r3, r3
 800758a:	401a      	ands	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	2101      	movs	r1, #1
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	fa01 f303 	lsl.w	r3, r1, r3
 800759c:	43db      	mvns	r3, r3
 800759e:	401a      	ands	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	2103      	movs	r1, #3
 80075ae:	fa01 f303 	lsl.w	r3, r1, r3
 80075b2:	43db      	mvns	r3, r3
 80075b4:	401a      	ands	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	3301      	adds	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2b0f      	cmp	r3, #15
 80075c4:	f67f af22 	bls.w	800740c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80075c8:	bf00      	nop
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	40013800 	.word	0x40013800
 80075d8:	40020000 	.word	0x40020000
 80075dc:	40020400 	.word	0x40020400
 80075e0:	40020800 	.word	0x40020800
 80075e4:	40020c00 	.word	0x40020c00
 80075e8:	40021000 	.word	0x40021000
 80075ec:	40021400 	.word	0x40021400
 80075f0:	40021800 	.word	0x40021800
 80075f4:	40021c00 	.word	0x40021c00
 80075f8:	40022000 	.word	0x40022000
 80075fc:	40022400 	.word	0x40022400
 8007600:	40013c00 	.word	0x40013c00

08007604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	807b      	strh	r3, [r7, #2]
 8007610:	4613      	mov	r3, r2
 8007612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007614:	787b      	ldrb	r3, [r7, #1]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800761a:	887a      	ldrh	r2, [r7, #2]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007620:	e003      	b.n	800762a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007622:	887b      	ldrh	r3, [r7, #2]
 8007624:	041a      	lsls	r2, r3, #16
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	619a      	str	r2, [r3, #24]
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b086      	sub	sp, #24
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4618      	mov	r0, r3
 800764e:	f006 fd27 	bl	800e0a0 <USB_GetMode>
 8007652:	4603      	mov	r3, r0
 8007654:	2b01      	cmp	r3, #1
 8007656:	f040 80ef 	bne.w	8007838 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f006 fd0b 	bl	800e07a <USB_ReadInterrupts>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80e5 	beq.w	8007836 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f006 fd02 	bl	800e07a <USB_ReadInterrupts>
 8007676:	4603      	mov	r3, r0
 8007678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800767c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007680:	d104      	bne.n	800768c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800768a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4618      	mov	r0, r3
 8007692:	f006 fcf2 	bl	800e07a <USB_ReadInterrupts>
 8007696:	4603      	mov	r3, r0
 8007698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800769c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076a0:	d104      	bne.n	80076ac <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80076aa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f006 fce2 	bl	800e07a <USB_ReadInterrupts>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076c0:	d104      	bne.n	80076cc <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80076ca:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f006 fcd2 	bl	800e07a <USB_ReadInterrupts>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d103      	bne.n	80076e8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2202      	movs	r2, #2
 80076e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f006 fcc4 	bl	800e07a <USB_ReadInterrupts>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076fc:	d115      	bne.n	800772a <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007706:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d108      	bne.n	800772a <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f008 f815 	bl	800f748 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2101      	movs	r1, #1
 8007724:	4618      	mov	r0, r3
 8007726:	f006 fcc9 	bl	800e0bc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f006 fca3 	bl	800e07a <USB_ReadInterrupts>
 8007734:	4603      	mov	r3, r0
 8007736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800773a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800773e:	d102      	bne.n	8007746 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 f8ef 	bl	8008924 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4618      	mov	r0, r3
 800774c:	f006 fc95 	bl	800e07a <USB_ReadInterrupts>
 8007750:	4603      	mov	r3, r0
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b08      	cmp	r3, #8
 8007758:	d106      	bne.n	8007768 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f007 ffd8 	bl	800f710 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2208      	movs	r2, #8
 8007766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f006 fc84 	bl	800e07a <USB_ReadInterrupts>
 8007772:	4603      	mov	r3, r0
 8007774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800777c:	d138      	bne.n	80077f0 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f006 fcd4 	bl	800e130 <USB_HC_ReadInterrupt>
 8007788:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	e025      	b.n	80077dc <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d018      	beq.n	80077d6 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ba:	d106      	bne.n	80077ca <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	4619      	mov	r1, r3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f858 	bl	8007878 <HCD_HC_IN_IRQHandler>
 80077c8:	e005      	b.n	80077d6 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fc86 	bl	80080e2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	3301      	adds	r3, #1
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d3d4      	bcc.n	8007790 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80077ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f006 fc40 	bl	800e07a <USB_ReadInterrupts>
 80077fa:	4603      	mov	r3, r0
 80077fc:	f003 0310 	and.w	r3, r3, #16
 8007800:	2b10      	cmp	r3, #16
 8007802:	d101      	bne.n	8007808 <HAL_HCD_IRQHandler+0x1d2>
 8007804:	2301      	movs	r3, #1
 8007806:	e000      	b.n	800780a <HAL_HCD_IRQHandler+0x1d4>
 8007808:	2300      	movs	r3, #0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d014      	beq.n	8007838 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	699a      	ldr	r2, [r3, #24]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0210 	bic.w	r2, r2, #16
 800781c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 ffd4 	bl	80087cc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0210 	orr.w	r2, r2, #16
 8007832:	619a      	str	r2, [r3, #24]
 8007834:	e000      	b.n	8007838 <HAL_HCD_IRQHandler+0x202>
      return;
 8007836:	bf00      	nop
    }
  }
}
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_HCD_Stop+0x16>
 8007850:	2302      	movs	r3, #2
 8007852:	e00d      	b.n	8007870 <HAL_HCD_Stop+0x32>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4618      	mov	r0, r3
 8007862:	f006 fd75 	bl	800e350 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800788e:	78fb      	ldrb	r3, [r7, #3]
 8007890:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	4413      	add	r3, r2
 800789a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d119      	bne.n	80078dc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078b4:	461a      	mov	r2, r3
 80078b6:	2304      	movs	r3, #4
 80078b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	0151      	lsls	r1, r2, #5
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	440a      	add	r2, r1
 80078d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078d4:	f043 0302 	orr.w	r3, r3, #2
 80078d8:	60d3      	str	r3, [r2, #12]
 80078da:	e0ce      	b.n	8007a7a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f2:	d12c      	bne.n	800794e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007900:	461a      	mov	r2, r3
 8007902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007906:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007908:	6879      	ldr	r1, [r7, #4]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	4613      	mov	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	440b      	add	r3, r1
 8007916:	335d      	adds	r3, #93	; 0x5d
 8007918:	2207      	movs	r2, #7
 800791a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	4413      	add	r3, r2
 8007924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	0151      	lsls	r1, r2, #5
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	440a      	add	r2, r1
 8007932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007936:	f043 0302 	orr.w	r3, r3, #2
 800793a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	4611      	mov	r1, r2
 8007946:	4618      	mov	r0, r3
 8007948:	f006 fc03 	bl	800e152 <USB_HC_Halt>
 800794c:	e095      	b.n	8007a7a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	4413      	add	r3, r2
 8007956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 0320 	and.w	r3, r3, #32
 8007960:	2b20      	cmp	r3, #32
 8007962:	d109      	bne.n	8007978 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	4413      	add	r3, r2
 800796c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007970:	461a      	mov	r2, r3
 8007972:	2320      	movs	r3, #32
 8007974:	6093      	str	r3, [r2, #8]
 8007976:	e080      	b.n	8007a7a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	4413      	add	r3, r2
 8007980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 0308 	and.w	r3, r3, #8
 800798a:	2b08      	cmp	r3, #8
 800798c:	d134      	bne.n	80079f8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	4413      	add	r3, r2
 8007996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079a8:	f043 0302 	orr.w	r3, r3, #2
 80079ac:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	00db      	lsls	r3, r3, #3
 80079ba:	440b      	add	r3, r1
 80079bc:	335d      	adds	r3, #93	; 0x5d
 80079be:	2205      	movs	r2, #5
 80079c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ce:	461a      	mov	r2, r3
 80079d0:	2310      	movs	r3, #16
 80079d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e0:	461a      	mov	r2, r3
 80079e2:	2308      	movs	r3, #8
 80079e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	b2d2      	uxtb	r2, r2
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f006 fbae 	bl	800e152 <USB_HC_Halt>
 80079f6:	e040      	b.n	8007a7a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a0e:	d134      	bne.n	8007a7a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a2a:	f043 0302 	orr.w	r3, r3, #2
 8007a2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	4611      	mov	r1, r2
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f006 fb89 	bl	800e152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	2310      	movs	r3, #16
 8007a50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	440b      	add	r3, r1
 8007a60:	335d      	adds	r3, #93	; 0x5d
 8007a62:	2208      	movs	r2, #8
 8007a64:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a72:	461a      	mov	r2, r3
 8007a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a78:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a90:	d122      	bne.n	8007ad8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	0151      	lsls	r1, r2, #5
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	440a      	add	r2, r1
 8007aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aac:	f043 0302 	orr.w	r3, r3, #2
 8007ab0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	4611      	mov	r1, r2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f006 fb48 	bl	800e152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ad4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007ad6:	e300      	b.n	80080da <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	f040 80fd 	bne.w	8007cea <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01b      	beq.n	8007b30 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	440b      	add	r3, r1
 8007b06:	3348      	adds	r3, #72	; 0x48
 8007b08:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	0159      	lsls	r1, r3, #5
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	440b      	add	r3, r1
 8007b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007b1c:	1ad1      	subs	r1, r2, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	4403      	add	r3, r0
 8007b2c:	334c      	adds	r3, #76	; 0x4c
 8007b2e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	440b      	add	r3, r1
 8007b3e:	335d      	adds	r3, #93	; 0x5d
 8007b40:	2201      	movs	r2, #1
 8007b42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007b44:	6879      	ldr	r1, [r7, #4]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	440b      	add	r3, r1
 8007b52:	3358      	adds	r3, #88	; 0x58
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b64:	461a      	mov	r2, r3
 8007b66:	2301      	movs	r3, #1
 8007b68:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	440b      	add	r3, r1
 8007b78:	333f      	adds	r3, #63	; 0x3f
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	440b      	add	r3, r1
 8007b8e:	333f      	adds	r3, #63	; 0x3f
 8007b90:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d121      	bne.n	8007bda <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	0151      	lsls	r1, r2, #5
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	440a      	add	r2, r1
 8007bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bb0:	f043 0302 	orr.w	r3, r3, #2
 8007bb4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	b2d2      	uxtb	r2, r2
 8007bbe:	4611      	mov	r1, r2
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f006 fac6 	bl	800e152 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	6093      	str	r3, [r2, #8]
 8007bd8:	e070      	b.n	8007cbc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	440b      	add	r3, r1
 8007be8:	333f      	adds	r3, #63	; 0x3f
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d12a      	bne.n	8007c46 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	0151      	lsls	r1, r2, #5
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	440a      	add	r2, r1
 8007c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c0e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	440b      	add	r3, r1
 8007c1e:	335c      	adds	r3, #92	; 0x5c
 8007c20:	2201      	movs	r2, #1
 8007c22:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	b2d8      	uxtb	r0, r3
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	440b      	add	r3, r1
 8007c36:	335c      	adds	r3, #92	; 0x5c
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4601      	mov	r1, r0
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f007 fd90 	bl	800f764 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007c44:	e03a      	b.n	8007cbc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	440b      	add	r3, r1
 8007c54:	333f      	adds	r3, #63	; 0x3f
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d12f      	bne.n	8007cbc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	440b      	add	r3, r1
 8007c6a:	335c      	adds	r3, #92	; 0x5c
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	00db      	lsls	r3, r3, #3
 8007c7c:	440b      	add	r3, r1
 8007c7e:	3350      	adds	r3, #80	; 0x50
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	f083 0301 	eor.w	r3, r3, #1
 8007c86:	b2d8      	uxtb	r0, r3
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	440b      	add	r3, r1
 8007c96:	3350      	adds	r3, #80	; 0x50
 8007c98:	4602      	mov	r2, r0
 8007c9a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	b2d8      	uxtb	r0, r3
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	440b      	add	r3, r1
 8007cae:	335c      	adds	r3, #92	; 0x5c
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4601      	mov	r1, r0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f007 fd54 	bl	800f764 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	440b      	add	r3, r1
 8007cca:	3350      	adds	r3, #80	; 0x50
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	f083 0301 	eor.w	r3, r3, #1
 8007cd2:	b2d8      	uxtb	r0, r3
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	440b      	add	r3, r1
 8007ce2:	3350      	adds	r3, #80	; 0x50
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	701a      	strb	r2, [r3, #0]
}
 8007ce8:	e1f7      	b.n	80080da <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	f040 811a 	bne.w	8007f36 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	0151      	lsls	r1, r2, #5
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	440a      	add	r2, r1
 8007d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d1c:	f023 0302 	bic.w	r3, r3, #2
 8007d20:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	440b      	add	r3, r1
 8007d30:	335d      	adds	r3, #93	; 0x5d
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d10a      	bne.n	8007d4e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007d38:	6879      	ldr	r1, [r7, #4]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	440b      	add	r3, r1
 8007d46:	335c      	adds	r3, #92	; 0x5c
 8007d48:	2201      	movs	r2, #1
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	e0d9      	b.n	8007f02 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4613      	mov	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	440b      	add	r3, r1
 8007d5c:	335d      	adds	r3, #93	; 0x5d
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b05      	cmp	r3, #5
 8007d62:	d10a      	bne.n	8007d7a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	440b      	add	r3, r1
 8007d72:	335c      	adds	r3, #92	; 0x5c
 8007d74:	2205      	movs	r2, #5
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	e0c3      	b.n	8007f02 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	440b      	add	r3, r1
 8007d88:	335d      	adds	r3, #93	; 0x5d
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b06      	cmp	r3, #6
 8007d8e:	d00a      	beq.n	8007da6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4613      	mov	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	440b      	add	r3, r1
 8007d9e:	335d      	adds	r3, #93	; 0x5d
 8007da0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007da2:	2b08      	cmp	r3, #8
 8007da4:	d156      	bne.n	8007e54 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4613      	mov	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	440b      	add	r3, r1
 8007db4:	3358      	adds	r3, #88	; 0x58
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	1c59      	adds	r1, r3, #1
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	00db      	lsls	r3, r3, #3
 8007dc6:	4403      	add	r3, r0
 8007dc8:	3358      	adds	r3, #88	; 0x58
 8007dca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8007dcc:	6879      	ldr	r1, [r7, #4]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	440b      	add	r3, r1
 8007dda:	3358      	adds	r3, #88	; 0x58
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d914      	bls.n	8007e0c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4613      	mov	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	440b      	add	r3, r1
 8007df0:	3358      	adds	r3, #88	; 0x58
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	440b      	add	r3, r1
 8007e04:	335c      	adds	r3, #92	; 0x5c
 8007e06:	2204      	movs	r2, #4
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	e009      	b.n	8007e20 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	440b      	add	r3, r1
 8007e1a:	335c      	adds	r3, #92	; 0x5c
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e36:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e3e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	e056      	b.n	8007f02 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	440b      	add	r3, r1
 8007e62:	335d      	adds	r3, #93	; 0x5d
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d123      	bne.n	8007eb2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	440b      	add	r3, r1
 8007e78:	335c      	adds	r3, #92	; 0x5c
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e94:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e9c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eaa:	461a      	mov	r2, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	e027      	b.n	8007f02 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	00db      	lsls	r3, r3, #3
 8007ebe:	440b      	add	r3, r1
 8007ec0:	335d      	adds	r3, #93	; 0x5d
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b07      	cmp	r3, #7
 8007ec6:	d11c      	bne.n	8007f02 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	440b      	add	r3, r1
 8007ed6:	3358      	adds	r3, #88	; 0x58
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	1c59      	adds	r1, r3, #1
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	4403      	add	r3, r0
 8007eea:	3358      	adds	r3, #88	; 0x58
 8007eec:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	00db      	lsls	r3, r3, #3
 8007efa:	440b      	add	r3, r1
 8007efc:	335c      	adds	r3, #92	; 0x5c
 8007efe:	2204      	movs	r2, #4
 8007f00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0e:	461a      	mov	r2, r3
 8007f10:	2302      	movs	r3, #2
 8007f12:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	b2d8      	uxtb	r0, r3
 8007f18:	6879      	ldr	r1, [r7, #4]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	440b      	add	r3, r1
 8007f26:	335c      	adds	r3, #92	; 0x5c
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	4601      	mov	r1, r0
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f007 fc18 	bl	800f764 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007f34:	e0d1      	b.n	80080da <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f48:	2b80      	cmp	r3, #128	; 0x80
 8007f4a:	d13e      	bne.n	8007fca <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	0151      	lsls	r1, r2, #5
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	440a      	add	r2, r1
 8007f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f66:	f043 0302 	orr.w	r3, r3, #2
 8007f6a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	440b      	add	r3, r1
 8007f7a:	3358      	adds	r3, #88	; 0x58
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	1c59      	adds	r1, r3, #1
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4613      	mov	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4403      	add	r3, r0
 8007f8e:	3358      	adds	r3, #88	; 0x58
 8007f90:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4613      	mov	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	440b      	add	r3, r1
 8007fa0:	335d      	adds	r3, #93	; 0x5d
 8007fa2:	2206      	movs	r2, #6
 8007fa4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	4611      	mov	r1, r2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f006 f8ce 	bl	800e152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	2380      	movs	r3, #128	; 0x80
 8007fc6:	6093      	str	r3, [r2, #8]
}
 8007fc8:	e087      	b.n	80080da <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b10      	cmp	r3, #16
 8007fde:	d17c      	bne.n	80080da <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	440b      	add	r3, r1
 8007fee:	333f      	adds	r3, #63	; 0x3f
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d122      	bne.n	800803c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	440b      	add	r3, r1
 8008004:	3358      	adds	r3, #88	; 0x58
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	4413      	add	r3, r2
 8008012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	0151      	lsls	r1, r2, #5
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	440a      	add	r2, r1
 8008020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008024:	f043 0302 	orr.w	r3, r3, #2
 8008028:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	4611      	mov	r1, r2
 8008034:	4618      	mov	r0, r3
 8008036:	f006 f88c 	bl	800e152 <USB_HC_Halt>
 800803a:	e045      	b.n	80080c8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	440b      	add	r3, r1
 800804a:	333f      	adds	r3, #63	; 0x3f
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4613      	mov	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	440b      	add	r3, r1
 8008060:	333f      	adds	r3, #63	; 0x3f
 8008062:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008064:	2b02      	cmp	r3, #2
 8008066:	d12f      	bne.n	80080c8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	4613      	mov	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	440b      	add	r3, r1
 8008076:	3358      	adds	r3, #88	; 0x58
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d121      	bne.n	80080c8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8008084:	6879      	ldr	r1, [r7, #4]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4613      	mov	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	440b      	add	r3, r1
 8008092:	335d      	adds	r3, #93	; 0x5d
 8008094:	2203      	movs	r2, #3
 8008096:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080b2:	f043 0302 	orr.w	r3, r3, #2
 80080b6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	b2d2      	uxtb	r2, r2
 80080c0:	4611      	mov	r1, r2
 80080c2:	4618      	mov	r0, r3
 80080c4:	f006 f845 	bl	800e152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d4:	461a      	mov	r2, r3
 80080d6:	2310      	movs	r3, #16
 80080d8:	6093      	str	r3, [r2, #8]
}
 80080da:	bf00      	nop
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b086      	sub	sp, #24
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80080f8:	78fb      	ldrb	r3, [r7, #3]
 80080fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	4413      	add	r3, r2
 8008104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 0304 	and.w	r3, r3, #4
 800810e:	2b04      	cmp	r3, #4
 8008110:	d119      	bne.n	8008146 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	4413      	add	r3, r2
 800811a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800811e:	461a      	mov	r2, r3
 8008120:	2304      	movs	r3, #4
 8008122:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	4413      	add	r3, r2
 800812c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	0151      	lsls	r1, r2, #5
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	440a      	add	r2, r1
 800813a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800813e:	f043 0302 	orr.w	r3, r3, #2
 8008142:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008144:	e33e      	b.n	80087c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	4413      	add	r3, r2
 800814e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	2b20      	cmp	r3, #32
 800815a:	d141      	bne.n	80081e0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	4413      	add	r3, r2
 8008164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008168:	461a      	mov	r2, r3
 800816a:	2320      	movs	r3, #32
 800816c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4613      	mov	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	440b      	add	r3, r1
 800817c:	333d      	adds	r3, #61	; 0x3d
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	f040 831f 	bne.w	80087c4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	440b      	add	r3, r1
 8008194:	333d      	adds	r3, #61	; 0x3d
 8008196:	2200      	movs	r2, #0
 8008198:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	00db      	lsls	r3, r3, #3
 80081a6:	440b      	add	r3, r1
 80081a8:	335c      	adds	r3, #92	; 0x5c
 80081aa:	2202      	movs	r2, #2
 80081ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	0151      	lsls	r1, r2, #5
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	440a      	add	r2, r1
 80081c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081c8:	f043 0302 	orr.w	r3, r3, #2
 80081cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f005 ffba 	bl	800e152 <USB_HC_Halt>
}
 80081de:	e2f1      	b.n	80087c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b40      	cmp	r3, #64	; 0x40
 80081f4:	d13f      	bne.n	8008276 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	440b      	add	r3, r1
 8008204:	335d      	adds	r3, #93	; 0x5d
 8008206:	2204      	movs	r2, #4
 8008208:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	00db      	lsls	r3, r3, #3
 8008216:	440b      	add	r3, r1
 8008218:	333d      	adds	r3, #61	; 0x3d
 800821a:	2201      	movs	r2, #1
 800821c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	4613      	mov	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	440b      	add	r3, r1
 800822c:	3358      	adds	r3, #88	; 0x58
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	4413      	add	r3, r2
 800823a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	440a      	add	r2, r1
 8008248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800824c:	f043 0302 	orr.w	r3, r3, #2
 8008250:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	b2d2      	uxtb	r2, r2
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f005 ff78 	bl	800e152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	4413      	add	r3, r2
 800826a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826e:	461a      	mov	r2, r3
 8008270:	2340      	movs	r3, #64	; 0x40
 8008272:	6093      	str	r3, [r2, #8]
}
 8008274:	e2a6      	b.n	80087c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	4413      	add	r3, r2
 800827e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800828c:	d122      	bne.n	80082d4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	4413      	add	r3, r2
 8008296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	0151      	lsls	r1, r2, #5
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	440a      	add	r2, r1
 80082a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a8:	f043 0302 	orr.w	r3, r3, #2
 80082ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	b2d2      	uxtb	r2, r2
 80082b6:	4611      	mov	r1, r2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f005 ff4a 	bl	800e152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ca:	461a      	mov	r2, r3
 80082cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082d0:	6093      	str	r3, [r2, #8]
}
 80082d2:	e277      	b.n	80087c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d135      	bne.n	8008356 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	4613      	mov	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	440b      	add	r3, r1
 80082f8:	3358      	adds	r3, #88	; 0x58
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	4413      	add	r3, r2
 8008306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	0151      	lsls	r1, r2, #5
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	440a      	add	r2, r1
 8008314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008318:	f043 0302 	orr.w	r3, r3, #2
 800831c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	b2d2      	uxtb	r2, r2
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f005 ff12 	bl	800e152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	4413      	add	r3, r2
 8008336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800833a:	461a      	mov	r2, r3
 800833c:	2301      	movs	r3, #1
 800833e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	440b      	add	r3, r1
 800834e:	335d      	adds	r3, #93	; 0x5d
 8008350:	2201      	movs	r2, #1
 8008352:	701a      	strb	r2, [r3, #0]
}
 8008354:	e236      	b.n	80087c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	4413      	add	r3, r2
 800835e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f003 0308 	and.w	r3, r3, #8
 8008368:	2b08      	cmp	r3, #8
 800836a:	d12b      	bne.n	80083c4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	4413      	add	r3, r2
 8008374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008378:	461a      	mov	r2, r3
 800837a:	2308      	movs	r3, #8
 800837c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	4413      	add	r3, r2
 8008386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	0151      	lsls	r1, r2, #5
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	440a      	add	r2, r1
 8008394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008398:	f043 0302 	orr.w	r3, r3, #2
 800839c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	4611      	mov	r1, r2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f005 fed2 	bl	800e152 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	440b      	add	r3, r1
 80083bc:	335d      	adds	r3, #93	; 0x5d
 80083be:	2205      	movs	r2, #5
 80083c0:	701a      	strb	r2, [r3, #0]
}
 80083c2:	e1ff      	b.n	80087c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 0310 	and.w	r3, r3, #16
 80083d6:	2b10      	cmp	r3, #16
 80083d8:	d155      	bne.n	8008486 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	440b      	add	r3, r1
 80083e8:	3358      	adds	r3, #88	; 0x58
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	00db      	lsls	r3, r3, #3
 80083fa:	440b      	add	r3, r1
 80083fc:	335d      	adds	r3, #93	; 0x5d
 80083fe:	2203      	movs	r2, #3
 8008400:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	440b      	add	r3, r1
 8008410:	333d      	adds	r3, #61	; 0x3d
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d114      	bne.n	8008442 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	440b      	add	r3, r1
 8008426:	333c      	adds	r3, #60	; 0x3c
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	440b      	add	r3, r1
 800843c:	333d      	adds	r3, #61	; 0x3d
 800843e:	2201      	movs	r2, #1
 8008440:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	4413      	add	r3, r2
 800844a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	0151      	lsls	r1, r2, #5
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	440a      	add	r2, r1
 8008458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800845c:	f043 0302 	orr.w	r3, r3, #2
 8008460:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	b2d2      	uxtb	r2, r2
 800846a:	4611      	mov	r1, r2
 800846c:	4618      	mov	r0, r3
 800846e:	f005 fe70 	bl	800e152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	4413      	add	r3, r2
 800847a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847e:	461a      	mov	r2, r3
 8008480:	2310      	movs	r3, #16
 8008482:	6093      	str	r3, [r2, #8]
}
 8008484:	e19e      	b.n	80087c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	4413      	add	r3, r2
 800848e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008498:	2b80      	cmp	r3, #128	; 0x80
 800849a:	d12b      	bne.n	80084f4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	0151      	lsls	r1, r2, #5
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	440a      	add	r2, r1
 80084b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084b6:	f043 0302 	orr.w	r3, r3, #2
 80084ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f005 fe43 	bl	800e152 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	440b      	add	r3, r1
 80084da:	335d      	adds	r3, #93	; 0x5d
 80084dc:	2206      	movs	r2, #6
 80084de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ec:	461a      	mov	r2, r3
 80084ee:	2380      	movs	r3, #128	; 0x80
 80084f0:	6093      	str	r3, [r2, #8]
}
 80084f2:	e167      	b.n	80087c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800850a:	d135      	bne.n	8008578 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	4413      	add	r3, r2
 8008514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	0151      	lsls	r1, r2, #5
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	440a      	add	r2, r1
 8008522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008526:	f043 0302 	orr.w	r3, r3, #2
 800852a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	b2d2      	uxtb	r2, r2
 8008534:	4611      	mov	r1, r2
 8008536:	4618      	mov	r0, r3
 8008538:	f005 fe0b 	bl	800e152 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	4413      	add	r3, r2
 8008544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008548:	461a      	mov	r2, r3
 800854a:	2310      	movs	r3, #16
 800854c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	4413      	add	r3, r2
 8008556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855a:	461a      	mov	r2, r3
 800855c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008560:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	440b      	add	r3, r1
 8008570:	335d      	adds	r3, #93	; 0x5d
 8008572:	2208      	movs	r2, #8
 8008574:	701a      	strb	r2, [r3, #0]
}
 8008576:	e125      	b.n	80087c4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	4413      	add	r3, r2
 8008580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b02      	cmp	r3, #2
 800858c:	f040 811a 	bne.w	80087c4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4413      	add	r3, r2
 8008598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085aa:	f023 0302 	bic.w	r3, r3, #2
 80085ae:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4613      	mov	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	440b      	add	r3, r1
 80085be:	335d      	adds	r3, #93	; 0x5d
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d137      	bne.n	8008636 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	4613      	mov	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	440b      	add	r3, r1
 80085d4:	335c      	adds	r3, #92	; 0x5c
 80085d6:	2201      	movs	r2, #1
 80085d8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4613      	mov	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	00db      	lsls	r3, r3, #3
 80085e6:	440b      	add	r3, r1
 80085e8:	333f      	adds	r3, #63	; 0x3f
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d00b      	beq.n	8008608 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	4613      	mov	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	440b      	add	r3, r1
 80085fe:	333f      	adds	r3, #63	; 0x3f
 8008600:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008602:	2b03      	cmp	r3, #3
 8008604:	f040 80c5 	bne.w	8008792 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8008608:	6879      	ldr	r1, [r7, #4]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	440b      	add	r3, r1
 8008616:	3351      	adds	r3, #81	; 0x51
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	f083 0301 	eor.w	r3, r3, #1
 800861e:	b2d8      	uxtb	r0, r3
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	440b      	add	r3, r1
 800862e:	3351      	adds	r3, #81	; 0x51
 8008630:	4602      	mov	r2, r0
 8008632:	701a      	strb	r2, [r3, #0]
 8008634:	e0ad      	b.n	8008792 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	440b      	add	r3, r1
 8008644:	335d      	adds	r3, #93	; 0x5d
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b03      	cmp	r3, #3
 800864a:	d10a      	bne.n	8008662 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	440b      	add	r3, r1
 800865a:	335c      	adds	r3, #92	; 0x5c
 800865c:	2202      	movs	r2, #2
 800865e:	701a      	strb	r2, [r3, #0]
 8008660:	e097      	b.n	8008792 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	440b      	add	r3, r1
 8008670:	335d      	adds	r3, #93	; 0x5d
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b04      	cmp	r3, #4
 8008676:	d10a      	bne.n	800868e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	4613      	mov	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	440b      	add	r3, r1
 8008686:	335c      	adds	r3, #92	; 0x5c
 8008688:	2202      	movs	r2, #2
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	e081      	b.n	8008792 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4613      	mov	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	00db      	lsls	r3, r3, #3
 800869a:	440b      	add	r3, r1
 800869c:	335d      	adds	r3, #93	; 0x5d
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b05      	cmp	r3, #5
 80086a2:	d10a      	bne.n	80086ba <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	440b      	add	r3, r1
 80086b2:	335c      	adds	r3, #92	; 0x5c
 80086b4:	2205      	movs	r2, #5
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	e06b      	b.n	8008792 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4613      	mov	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	440b      	add	r3, r1
 80086c8:	335d      	adds	r3, #93	; 0x5d
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b06      	cmp	r3, #6
 80086ce:	d00a      	beq.n	80086e6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80086d0:	6879      	ldr	r1, [r7, #4]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	440b      	add	r3, r1
 80086de:	335d      	adds	r3, #93	; 0x5d
 80086e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80086e2:	2b08      	cmp	r3, #8
 80086e4:	d155      	bne.n	8008792 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	440b      	add	r3, r1
 80086f4:	3358      	adds	r3, #88	; 0x58
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	1c59      	adds	r1, r3, #1
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4613      	mov	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	4403      	add	r3, r0
 8008708:	3358      	adds	r3, #88	; 0x58
 800870a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	00db      	lsls	r3, r3, #3
 8008718:	440b      	add	r3, r1
 800871a:	3358      	adds	r3, #88	; 0x58
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b03      	cmp	r3, #3
 8008720:	d914      	bls.n	800874c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008722:	6879      	ldr	r1, [r7, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	440b      	add	r3, r1
 8008730:	3358      	adds	r3, #88	; 0x58
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	440b      	add	r3, r1
 8008744:	335c      	adds	r3, #92	; 0x5c
 8008746:	2204      	movs	r2, #4
 8008748:	701a      	strb	r2, [r3, #0]
 800874a:	e009      	b.n	8008760 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800874c:	6879      	ldr	r1, [r7, #4]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	440b      	add	r3, r1
 800875a:	335c      	adds	r3, #92	; 0x5c
 800875c:	2202      	movs	r2, #2
 800875e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	4413      	add	r3, r2
 8008768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008776:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800877e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	4413      	add	r3, r2
 8008788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878c:	461a      	mov	r2, r3
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	4413      	add	r3, r2
 800879a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800879e:	461a      	mov	r2, r3
 80087a0:	2302      	movs	r3, #2
 80087a2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	b2d8      	uxtb	r0, r3
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	440b      	add	r3, r1
 80087b6:	335c      	adds	r3, #92	; 0x5c
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	4601      	mov	r1, r0
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f006 ffd0 	bl	800f764 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80087c4:	bf00      	nop
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08a      	sub	sp, #40	; 0x28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	f003 030f 	and.w	r3, r3, #15
 80087ec:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	0c5b      	lsrs	r3, r3, #17
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	091b      	lsrs	r3, r3, #4
 80087fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008800:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2b02      	cmp	r3, #2
 8008806:	d003      	beq.n	8008810 <HCD_RXQLVL_IRQHandler+0x44>
 8008808:	2b05      	cmp	r3, #5
 800880a:	f000 8082 	beq.w	8008912 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800880e:	e083      	b.n	8008918 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d07f      	beq.n	8008916 <HCD_RXQLVL_IRQHandler+0x14a>
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	440b      	add	r3, r1
 8008824:	3344      	adds	r3, #68	; 0x44
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d074      	beq.n	8008916 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	6879      	ldr	r1, [r7, #4]
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	440b      	add	r3, r1
 800883e:	3344      	adds	r3, #68	; 0x44
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	b292      	uxth	r2, r2
 8008846:	4619      	mov	r1, r3
 8008848:	f005 fbee 	bl	800e028 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	4613      	mov	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	440b      	add	r3, r1
 800885a:	3344      	adds	r3, #68	; 0x44
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	18d1      	adds	r1, r2, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	4613      	mov	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	00db      	lsls	r3, r3, #3
 800886e:	4403      	add	r3, r0
 8008870:	3344      	adds	r3, #68	; 0x44
 8008872:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8008874:	6879      	ldr	r1, [r7, #4]
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	440b      	add	r3, r1
 8008882:	334c      	adds	r3, #76	; 0x4c
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	18d1      	adds	r1, r2, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	4613      	mov	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	00db      	lsls	r3, r3, #3
 8008896:	4403      	add	r3, r0
 8008898:	334c      	adds	r3, #76	; 0x4c
 800889a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a8:	691a      	ldr	r2, [r3, #16]
 80088aa:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <HCD_RXQLVL_IRQHandler+0x154>)
 80088ac:	4013      	ands	r3, r2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d031      	beq.n	8008916 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088c8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088d0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088de:	461a      	mov	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80088e4:	6879      	ldr	r1, [r7, #4]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	4613      	mov	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	00db      	lsls	r3, r3, #3
 80088f0:	440b      	add	r3, r1
 80088f2:	3350      	adds	r3, #80	; 0x50
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	f083 0301 	eor.w	r3, r3, #1
 80088fa:	b2d8      	uxtb	r0, r3
 80088fc:	6879      	ldr	r1, [r7, #4]
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	440b      	add	r3, r1
 800890a:	3350      	adds	r3, #80	; 0x50
 800890c:	4602      	mov	r2, r0
 800890e:	701a      	strb	r2, [r3, #0]
      break;
 8008910:	e001      	b.n	8008916 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8008912:	bf00      	nop
 8008914:	e000      	b.n	8008918 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8008916:	bf00      	nop
  }
}
 8008918:	bf00      	nop
 800891a:	3728      	adds	r7, #40	; 0x28
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	1ff80000 	.word	0x1ff80000

08008924 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008950:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b02      	cmp	r3, #2
 800895a:	d10b      	bne.n	8008974 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b01      	cmp	r3, #1
 8008964:	d102      	bne.n	800896c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f006 fee0 	bl	800f72c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f043 0302 	orr.w	r3, r3, #2
 8008972:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0308 	and.w	r3, r3, #8
 800897a:	2b08      	cmp	r3, #8
 800897c:	d132      	bne.n	80089e4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f043 0308 	orr.w	r3, r3, #8
 8008984:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f003 0304 	and.w	r3, r3, #4
 800898c:	2b04      	cmp	r3, #4
 800898e:	d126      	bne.n	80089de <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	2b02      	cmp	r3, #2
 8008996:	d113      	bne.n	80089c0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800899e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80089a2:	d106      	bne.n	80089b2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2102      	movs	r1, #2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f005 fb86 	bl	800e0bc <USB_InitFSLSPClkSel>
 80089b0:	e011      	b.n	80089d6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2101      	movs	r1, #1
 80089b8:	4618      	mov	r0, r3
 80089ba:	f005 fb7f 	bl	800e0bc <USB_InitFSLSPClkSel>
 80089be:	e00a      	b.n	80089d6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d106      	bne.n	80089d6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ce:	461a      	mov	r2, r3
 80089d0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80089d4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f006 fed6 	bl	800f788 <HAL_HCD_PortEnabled_Callback>
 80089dc:	e002      	b.n	80089e4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f006 fee0 	bl	800f7a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f003 0320 	and.w	r3, r3, #32
 80089ea:	2b20      	cmp	r3, #32
 80089ec:	d103      	bne.n	80089f6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f043 0320 	orr.w	r3, r3, #32
 80089f4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80089fc:	461a      	mov	r2, r3
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6013      	str	r3, [r2, #0]
}
 8008a02:	bf00      	nop
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e07f      	b.n	8008b1e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d106      	bne.n	8008a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7f9 f95c 	bl	8001cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2224      	movs	r2, #36	; 0x24
 8008a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 0201 	bic.w	r2, r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008a5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d107      	bne.n	8008a86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689a      	ldr	r2, [r3, #8]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a82:	609a      	str	r2, [r3, #8]
 8008a84:	e006      	b.n	8008a94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008a92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d104      	bne.n	8008aa6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008aa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6859      	ldr	r1, [r3, #4]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	4b1d      	ldr	r3, [pc, #116]	; (8008b28 <HAL_I2C_Init+0x11c>)
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ac4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	691a      	ldr	r2, [r3, #16]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	ea42 0103 	orr.w	r1, r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	021a      	lsls	r2, r3, #8
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	69d9      	ldr	r1, [r3, #28]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a1a      	ldr	r2, [r3, #32]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0201 	orr.w	r2, r2, #1
 8008afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	02008000 	.word	0x02008000

08008b2c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e021      	b.n	8008b82 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2224      	movs	r2, #36	; 0x24
 8008b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f022 0201 	bic.w	r2, r2, #1
 8008b54:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7f9 f942 	bl	8001de0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af02      	add	r7, sp, #8
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	4608      	mov	r0, r1
 8008b96:	4611      	mov	r1, r2
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	817b      	strh	r3, [r7, #10]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	813b      	strh	r3, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b20      	cmp	r3, #32
 8008bb0:	f040 80f9 	bne.w	8008da6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <HAL_I2C_Mem_Write+0x34>
 8008bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d105      	bne.n	8008bcc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e0ed      	b.n	8008da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d101      	bne.n	8008bda <HAL_I2C_Mem_Write+0x4e>
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	e0e6      	b.n	8008da8 <HAL_I2C_Mem_Write+0x21c>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008be2:	f7fc fdef 	bl	80057c4 <HAL_GetTick>
 8008be6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	2319      	movs	r3, #25
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 fad1 	bl	800919c <I2C_WaitOnFlagUntilTimeout>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e0d1      	b.n	8008da8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2221      	movs	r2, #33	; 0x21
 8008c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2240      	movs	r2, #64	; 0x40
 8008c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a3a      	ldr	r2, [r7, #32]
 8008c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c2c:	88f8      	ldrh	r0, [r7, #6]
 8008c2e:	893a      	ldrh	r2, [r7, #8]
 8008c30:	8979      	ldrh	r1, [r7, #10]
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 f9e1 	bl	8009004 <I2C_RequestMemoryWrite>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d005      	beq.n	8008c54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e0a9      	b.n	8008da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2bff      	cmp	r3, #255	; 0xff
 8008c5c:	d90e      	bls.n	8008c7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	22ff      	movs	r2, #255	; 0xff
 8008c62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	8979      	ldrh	r1, [r7, #10]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 fbb3 	bl	80093e0 <I2C_TransferConfig>
 8008c7a:	e00f      	b.n	8008c9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	8979      	ldrh	r1, [r7, #10]
 8008c8e:	2300      	movs	r3, #0
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 fba2 	bl	80093e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 fabb 	bl	800921c <I2C_WaitOnTXISFlagUntilTimeout>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e07b      	b.n	8008da8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	781a      	ldrb	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d034      	beq.n	8008d54 <HAL_I2C_Mem_Write+0x1c8>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d130      	bne.n	8008d54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2180      	movs	r1, #128	; 0x80
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 fa4d 	bl	800919c <I2C_WaitOnFlagUntilTimeout>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e04d      	b.n	8008da8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	2bff      	cmp	r3, #255	; 0xff
 8008d14:	d90e      	bls.n	8008d34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	22ff      	movs	r2, #255	; 0xff
 8008d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	8979      	ldrh	r1, [r7, #10]
 8008d24:	2300      	movs	r3, #0
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 fb57 	bl	80093e0 <I2C_TransferConfig>
 8008d32:	e00f      	b.n	8008d54 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	8979      	ldrh	r1, [r7, #10]
 8008d46:	2300      	movs	r3, #0
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 fb46 	bl	80093e0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d19e      	bne.n	8008c9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 fa9a 	bl	800929c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e01a      	b.n	8008da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2220      	movs	r2, #32
 8008d78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6859      	ldr	r1, [r3, #4]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	4b0a      	ldr	r3, [pc, #40]	; (8008db0 <HAL_I2C_Mem_Write+0x224>)
 8008d86:	400b      	ands	r3, r1
 8008d88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	e000      	b.n	8008da8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008da6:	2302      	movs	r3, #2
  }
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	fe00e800 	.word	0xfe00e800

08008db4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af02      	add	r7, sp, #8
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	817b      	strh	r3, [r7, #10]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	813b      	strh	r3, [r7, #8]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	f040 80fd 	bne.w	8008fd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <HAL_I2C_Mem_Read+0x34>
 8008de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d105      	bne.n	8008df4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e0f1      	b.n	8008fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d101      	bne.n	8008e02 <HAL_I2C_Mem_Read+0x4e>
 8008dfe:	2302      	movs	r3, #2
 8008e00:	e0ea      	b.n	8008fd8 <HAL_I2C_Mem_Read+0x224>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008e0a:	f7fc fcdb 	bl	80057c4 <HAL_GetTick>
 8008e0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	2319      	movs	r3, #25
 8008e16:	2201      	movs	r2, #1
 8008e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 f9bd 	bl	800919c <I2C_WaitOnFlagUntilTimeout>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e0d5      	b.n	8008fd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2222      	movs	r2, #34	; 0x22
 8008e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2240      	movs	r2, #64	; 0x40
 8008e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6a3a      	ldr	r2, [r7, #32]
 8008e46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e54:	88f8      	ldrh	r0, [r7, #6]
 8008e56:	893a      	ldrh	r2, [r7, #8]
 8008e58:	8979      	ldrh	r1, [r7, #10]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	9301      	str	r3, [sp, #4]
 8008e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	4603      	mov	r3, r0
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 f921 	bl	80090ac <I2C_RequestMemoryRead>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d005      	beq.n	8008e7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e0ad      	b.n	8008fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	2bff      	cmp	r3, #255	; 0xff
 8008e84:	d90e      	bls.n	8008ea4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	22ff      	movs	r2, #255	; 0xff
 8008e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	8979      	ldrh	r1, [r7, #10]
 8008e94:	4b52      	ldr	r3, [pc, #328]	; (8008fe0 <HAL_I2C_Mem_Read+0x22c>)
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f000 fa9f 	bl	80093e0 <I2C_TransferConfig>
 8008ea2:	e00f      	b.n	8008ec4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	8979      	ldrh	r1, [r7, #10]
 8008eb6:	4b4a      	ldr	r3, [pc, #296]	; (8008fe0 <HAL_I2C_Mem_Read+0x22c>)
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 fa8e 	bl	80093e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2104      	movs	r1, #4
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 f964 	bl	800919c <I2C_WaitOnFlagUntilTimeout>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e07c      	b.n	8008fd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	b2d2      	uxtb	r2, r2
 8008eea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008efa:	3b01      	subs	r3, #1
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d034      	beq.n	8008f84 <HAL_I2C_Mem_Read+0x1d0>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d130      	bne.n	8008f84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2180      	movs	r1, #128	; 0x80
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 f935 	bl	800919c <I2C_WaitOnFlagUntilTimeout>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d001      	beq.n	8008f3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e04d      	b.n	8008fd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	2bff      	cmp	r3, #255	; 0xff
 8008f44:	d90e      	bls.n	8008f64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	22ff      	movs	r2, #255	; 0xff
 8008f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	8979      	ldrh	r1, [r7, #10]
 8008f54:	2300      	movs	r3, #0
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f000 fa3f 	bl	80093e0 <I2C_TransferConfig>
 8008f62:	e00f      	b.n	8008f84 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	8979      	ldrh	r1, [r7, #10]
 8008f76:	2300      	movs	r3, #0
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 fa2e 	bl	80093e0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d19a      	bne.n	8008ec4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f000 f982 	bl	800929c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e01a      	b.n	8008fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6859      	ldr	r1, [r3, #4]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	4b0b      	ldr	r3, [pc, #44]	; (8008fe4 <HAL_I2C_Mem_Read+0x230>)
 8008fb6:	400b      	ands	r3, r1
 8008fb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e000      	b.n	8008fd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008fd6:	2302      	movs	r3, #2
  }
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	80002400 	.word	0x80002400
 8008fe4:	fe00e800 	.word	0xfe00e800

08008fe8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ff6:	b2db      	uxtb	r3, r3
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af02      	add	r7, sp, #8
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	4608      	mov	r0, r1
 800900e:	4611      	mov	r1, r2
 8009010:	461a      	mov	r2, r3
 8009012:	4603      	mov	r3, r0
 8009014:	817b      	strh	r3, [r7, #10]
 8009016:	460b      	mov	r3, r1
 8009018:	813b      	strh	r3, [r7, #8]
 800901a:	4613      	mov	r3, r2
 800901c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800901e:	88fb      	ldrh	r3, [r7, #6]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	8979      	ldrh	r1, [r7, #10]
 8009024:	4b20      	ldr	r3, [pc, #128]	; (80090a8 <I2C_RequestMemoryWrite+0xa4>)
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 f9d7 	bl	80093e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009032:	69fa      	ldr	r2, [r7, #28]
 8009034:	69b9      	ldr	r1, [r7, #24]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 f8f0 	bl	800921c <I2C_WaitOnTXISFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e02c      	b.n	80090a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009046:	88fb      	ldrh	r3, [r7, #6]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d105      	bne.n	8009058 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800904c:	893b      	ldrh	r3, [r7, #8]
 800904e:	b2da      	uxtb	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	629a      	str	r2, [r3, #40]	; 0x28
 8009056:	e015      	b.n	8009084 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009058:	893b      	ldrh	r3, [r7, #8]
 800905a:	0a1b      	lsrs	r3, r3, #8
 800905c:	b29b      	uxth	r3, r3
 800905e:	b2da      	uxtb	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009066:	69fa      	ldr	r2, [r7, #28]
 8009068:	69b9      	ldr	r1, [r7, #24]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f8d6 	bl	800921c <I2C_WaitOnTXISFlagUntilTimeout>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e012      	b.n	80090a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800907a:	893b      	ldrh	r3, [r7, #8]
 800907c:	b2da      	uxtb	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	2200      	movs	r2, #0
 800908c:	2180      	movs	r1, #128	; 0x80
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 f884 	bl	800919c <I2C_WaitOnFlagUntilTimeout>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e000      	b.n	80090a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	80002000 	.word	0x80002000

080090ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af02      	add	r7, sp, #8
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	4608      	mov	r0, r1
 80090b6:	4611      	mov	r1, r2
 80090b8:	461a      	mov	r2, r3
 80090ba:	4603      	mov	r3, r0
 80090bc:	817b      	strh	r3, [r7, #10]
 80090be:	460b      	mov	r3, r1
 80090c0:	813b      	strh	r3, [r7, #8]
 80090c2:	4613      	mov	r3, r2
 80090c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80090c6:	88fb      	ldrh	r3, [r7, #6]
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	8979      	ldrh	r1, [r7, #10]
 80090cc:	4b20      	ldr	r3, [pc, #128]	; (8009150 <I2C_RequestMemoryRead+0xa4>)
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	2300      	movs	r3, #0
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 f984 	bl	80093e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090d8:	69fa      	ldr	r2, [r7, #28]
 80090da:	69b9      	ldr	r1, [r7, #24]
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 f89d 	bl	800921c <I2C_WaitOnTXISFlagUntilTimeout>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e02c      	b.n	8009146 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090ec:	88fb      	ldrh	r3, [r7, #6]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d105      	bne.n	80090fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090f2:	893b      	ldrh	r3, [r7, #8]
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	629a      	str	r2, [r3, #40]	; 0x28
 80090fc:	e015      	b.n	800912a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80090fe:	893b      	ldrh	r3, [r7, #8]
 8009100:	0a1b      	lsrs	r3, r3, #8
 8009102:	b29b      	uxth	r3, r3
 8009104:	b2da      	uxtb	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800910c:	69fa      	ldr	r2, [r7, #28]
 800910e:	69b9      	ldr	r1, [r7, #24]
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 f883 	bl	800921c <I2C_WaitOnTXISFlagUntilTimeout>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e012      	b.n	8009146 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009120:	893b      	ldrh	r3, [r7, #8]
 8009122:	b2da      	uxtb	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	2200      	movs	r2, #0
 8009132:	2140      	movs	r1, #64	; 0x40
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 f831 	bl	800919c <I2C_WaitOnFlagUntilTimeout>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e000      	b.n	8009146 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	80002000 	.word	0x80002000

08009154 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	f003 0302 	and.w	r3, r3, #2
 8009166:	2b02      	cmp	r3, #2
 8009168:	d103      	bne.n	8009172 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2200      	movs	r2, #0
 8009170:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b01      	cmp	r3, #1
 800917e:	d007      	beq.n	8009190 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	699a      	ldr	r2, [r3, #24]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f042 0201 	orr.w	r2, r2, #1
 800918e:	619a      	str	r2, [r3, #24]
  }
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	4613      	mov	r3, r2
 80091aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091ac:	e022      	b.n	80091f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b4:	d01e      	beq.n	80091f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091b6:	f7fc fb05 	bl	80057c4 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d302      	bcc.n	80091cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d113      	bne.n	80091f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d0:	f043 0220 	orr.w	r2, r3, #32
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2220      	movs	r2, #32
 80091dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e00f      	b.n	8009214 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	699a      	ldr	r2, [r3, #24]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	4013      	ands	r3, r2
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	429a      	cmp	r2, r3
 8009202:	bf0c      	ite	eq
 8009204:	2301      	moveq	r3, #1
 8009206:	2300      	movne	r3, #0
 8009208:	b2db      	uxtb	r3, r3
 800920a:	461a      	mov	r2, r3
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	429a      	cmp	r2, r3
 8009210:	d0cd      	beq.n	80091ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009228:	e02c      	b.n	8009284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 f870 	bl	8009314 <I2C_IsAcknowledgeFailed>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e02a      	b.n	8009294 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009244:	d01e      	beq.n	8009284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009246:	f7fc fabd 	bl	80057c4 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	429a      	cmp	r2, r3
 8009254:	d302      	bcc.n	800925c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d113      	bne.n	8009284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009260:	f043 0220 	orr.w	r2, r3, #32
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2220      	movs	r2, #32
 800926c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e007      	b.n	8009294 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b02      	cmp	r3, #2
 8009290:	d1cb      	bne.n	800922a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092a8:	e028      	b.n	80092fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	68b9      	ldr	r1, [r7, #8]
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 f830 	bl	8009314 <I2C_IsAcknowledgeFailed>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e026      	b.n	800930c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092be:	f7fc fa81 	bl	80057c4 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d302      	bcc.n	80092d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d113      	bne.n	80092fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d8:	f043 0220 	orr.w	r2, r3, #32
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e007      	b.n	800930c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	f003 0320 	and.w	r3, r3, #32
 8009306:	2b20      	cmp	r3, #32
 8009308:	d1cf      	bne.n	80092aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	f003 0310 	and.w	r3, r3, #16
 800932a:	2b10      	cmp	r3, #16
 800932c:	d151      	bne.n	80093d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800932e:	e022      	b.n	8009376 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009336:	d01e      	beq.n	8009376 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009338:	f7fc fa44 	bl	80057c4 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	429a      	cmp	r2, r3
 8009346:	d302      	bcc.n	800934e <I2C_IsAcknowledgeFailed+0x3a>
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d113      	bne.n	8009376 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009352:	f043 0220 	orr.w	r2, r3, #32
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2220      	movs	r2, #32
 800935e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e02e      	b.n	80093d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	f003 0320 	and.w	r3, r3, #32
 8009380:	2b20      	cmp	r3, #32
 8009382:	d1d5      	bne.n	8009330 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2210      	movs	r2, #16
 800938a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2220      	movs	r2, #32
 8009392:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f7ff fedd 	bl	8009154 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6859      	ldr	r1, [r3, #4]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	4b0d      	ldr	r3, [pc, #52]	; (80093dc <I2C_IsAcknowledgeFailed+0xc8>)
 80093a6:	400b      	ands	r3, r1
 80093a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ae:	f043 0204 	orr.w	r2, r3, #4
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2220      	movs	r2, #32
 80093ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e000      	b.n	80093d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	fe00e800 	.word	0xfe00e800

080093e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	607b      	str	r3, [r7, #4]
 80093ea:	460b      	mov	r3, r1
 80093ec:	817b      	strh	r3, [r7, #10]
 80093ee:	4613      	mov	r3, r2
 80093f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	0d5b      	lsrs	r3, r3, #21
 80093fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009400:	4b0d      	ldr	r3, [pc, #52]	; (8009438 <I2C_TransferConfig+0x58>)
 8009402:	430b      	orrs	r3, r1
 8009404:	43db      	mvns	r3, r3
 8009406:	ea02 0103 	and.w	r1, r2, r3
 800940a:	897b      	ldrh	r3, [r7, #10]
 800940c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009410:	7a7b      	ldrb	r3, [r7, #9]
 8009412:	041b      	lsls	r3, r3, #16
 8009414:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	431a      	orrs	r2, r3
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	431a      	orrs	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800942a:	bf00      	nop
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	03ff63ff 	.word	0x03ff63ff

0800943c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b20      	cmp	r3, #32
 8009450:	d138      	bne.n	80094c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009458:	2b01      	cmp	r3, #1
 800945a:	d101      	bne.n	8009460 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800945c:	2302      	movs	r3, #2
 800945e:	e032      	b.n	80094c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2224      	movs	r2, #36	; 0x24
 800946c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f022 0201 	bic.w	r2, r2, #1
 800947e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800948e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6819      	ldr	r1, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f042 0201 	orr.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	e000      	b.n	80094c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094c4:	2302      	movs	r3, #2
  }
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b085      	sub	sp, #20
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b20      	cmp	r3, #32
 80094e6:	d139      	bne.n	800955c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d101      	bne.n	80094f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80094f2:	2302      	movs	r3, #2
 80094f4:	e033      	b.n	800955e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2224      	movs	r2, #36	; 0x24
 8009502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0201 	bic.w	r2, r2, #1
 8009514:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009524:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	021b      	lsls	r3, r3, #8
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4313      	orrs	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f042 0201 	orr.w	r2, r2, #1
 8009546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2220      	movs	r2, #32
 800954c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	e000      	b.n	800955e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800955c:	2302      	movs	r3, #2
  }
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
	...

0800956c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	e0bf      	b.n	80096fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7f8 fc60 	bl	8001e58 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2202      	movs	r2, #2
 800959c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	699a      	ldr	r2, [r3, #24]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80095ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6999      	ldr	r1, [r3, #24]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80095c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6899      	ldr	r1, [r3, #8]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	4b4a      	ldr	r3, [pc, #296]	; (8009708 <HAL_LTDC_Init+0x19c>)
 80095e0:	400b      	ands	r3, r1
 80095e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	041b      	lsls	r3, r3, #16
 80095ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6899      	ldr	r1, [r3, #8]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	699a      	ldr	r2, [r3, #24]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	431a      	orrs	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68d9      	ldr	r1, [r3, #12]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	4b3e      	ldr	r3, [pc, #248]	; (8009708 <HAL_LTDC_Init+0x19c>)
 800960e:	400b      	ands	r3, r1
 8009610:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	041b      	lsls	r3, r3, #16
 8009618:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68d9      	ldr	r1, [r3, #12]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a1a      	ldr	r2, [r3, #32]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	431a      	orrs	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6919      	ldr	r1, [r3, #16]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b33      	ldr	r3, [pc, #204]	; (8009708 <HAL_LTDC_Init+0x19c>)
 800963c:	400b      	ands	r3, r1
 800963e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	041b      	lsls	r3, r3, #16
 8009646:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6919      	ldr	r1, [r3, #16]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	431a      	orrs	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6959      	ldr	r1, [r3, #20]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	4b27      	ldr	r3, [pc, #156]	; (8009708 <HAL_LTDC_Init+0x19c>)
 800966a:	400b      	ands	r3, r1
 800966c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	041b      	lsls	r3, r3, #16
 8009674:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6959      	ldr	r1, [r3, #20]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	431a      	orrs	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	430a      	orrs	r2, r1
 800968a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009692:	021b      	lsls	r3, r3, #8
 8009694:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800969c:	041b      	lsls	r3, r3, #16
 800969e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80096ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80096c2:	431a      	orrs	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0206 	orr.w	r2, r2, #6
 80096da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	699a      	ldr	r2, [r3, #24]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f042 0201 	orr.w	r2, r2, #1
 80096ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	f000f800 	.word	0xf000f800

0800970c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009722:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f003 0304 	and.w	r3, r3, #4
 800972a:	2b00      	cmp	r3, #0
 800972c:	d023      	beq.n	8009776 <HAL_LTDC_IRQHandler+0x6a>
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	2b00      	cmp	r3, #0
 8009736:	d01e      	beq.n	8009776 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 0204 	bic.w	r2, r2, #4
 8009746:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2204      	movs	r2, #4
 800974e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009756:	f043 0201 	orr.w	r2, r3, #1
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2204      	movs	r2, #4
 8009764:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f86f 	bl	8009854 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f003 0302 	and.w	r3, r3, #2
 800977c:	2b00      	cmp	r3, #0
 800977e:	d023      	beq.n	80097c8 <HAL_LTDC_IRQHandler+0xbc>
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b00      	cmp	r3, #0
 8009788:	d01e      	beq.n	80097c8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 0202 	bic.w	r2, r2, #2
 8009798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2202      	movs	r2, #2
 80097a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80097a8:	f043 0202 	orr.w	r2, r3, #2
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2204      	movs	r2, #4
 80097b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f846 	bl	8009854 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d01b      	beq.n	800980a <HAL_LTDC_IRQHandler+0xfe>
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d016      	beq.n	800980a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f022 0201 	bic.w	r2, r2, #1
 80097ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2201      	movs	r2, #1
 80097f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f82f 	bl	8009868 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f003 0308 	and.w	r3, r3, #8
 8009810:	2b00      	cmp	r3, #0
 8009812:	d01b      	beq.n	800984c <HAL_LTDC_IRQHandler+0x140>
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	f003 0308 	and.w	r3, r3, #8
 800981a:	2b00      	cmp	r3, #0
 800981c:	d016      	beq.n	800984c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f022 0208 	bic.w	r2, r2, #8
 800982c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2208      	movs	r2, #8
 8009834:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f818 	bl	800987c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009890:	b5b0      	push	{r4, r5, r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_LTDC_ConfigLayer+0x1a>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e02c      	b.n	8009904 <HAL_LTDC_ConfigLayer+0x74>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2202      	movs	r2, #2
 80098b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2134      	movs	r1, #52	; 0x34
 80098c0:	fb01 f303 	mul.w	r3, r1, r3
 80098c4:	4413      	add	r3, r2
 80098c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	4614      	mov	r4, r2
 80098ce:	461d      	mov	r5, r3
 80098d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098dc:	682b      	ldr	r3, [r5, #0]
 80098de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	68b9      	ldr	r1, [r7, #8]
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 f81f 	bl	8009928 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2201      	movs	r2, #1
 80098f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bdb0      	pop	{r4, r5, r7, pc}

0800990c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800991a:	b2db      	uxtb	r3, r3
}
 800991c:	4618      	mov	r0, r3
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009928:	b480      	push	{r7}
 800992a:	b089      	sub	sp, #36	; 0x24
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	0c1b      	lsrs	r3, r3, #16
 8009940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009944:	4413      	add	r3, r2
 8009946:	041b      	lsls	r3, r3, #16
 8009948:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	01db      	lsls	r3, r3, #7
 8009954:	4413      	add	r3, r2
 8009956:	3384      	adds	r3, #132	; 0x84
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	6812      	ldr	r2, [r2, #0]
 800995e:	4611      	mov	r1, r2
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	01d2      	lsls	r2, r2, #7
 8009964:	440a      	add	r2, r1
 8009966:	3284      	adds	r2, #132	; 0x84
 8009968:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800996c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	0c1b      	lsrs	r3, r3, #16
 800997a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800997e:	4413      	add	r3, r2
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4619      	mov	r1, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	01db      	lsls	r3, r3, #7
 800998c:	440b      	add	r3, r1
 800998e:	3384      	adds	r3, #132	; 0x84
 8009990:	4619      	mov	r1, r3
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	4313      	orrs	r3, r2
 8009996:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	68da      	ldr	r2, [r3, #12]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099a6:	4413      	add	r3, r2
 80099a8:	041b      	lsls	r3, r3, #16
 80099aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	461a      	mov	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	01db      	lsls	r3, r3, #7
 80099b6:	4413      	add	r3, r2
 80099b8:	3384      	adds	r3, #132	; 0x84
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	6812      	ldr	r2, [r2, #0]
 80099c0:	4611      	mov	r1, r2
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	01d2      	lsls	r2, r2, #7
 80099c6:	440a      	add	r2, r1
 80099c8:	3284      	adds	r2, #132	; 0x84
 80099ca:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80099ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099de:	4413      	add	r3, r2
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4619      	mov	r1, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	01db      	lsls	r3, r3, #7
 80099ec:	440b      	add	r3, r1
 80099ee:	3384      	adds	r3, #132	; 0x84
 80099f0:	4619      	mov	r1, r3
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	01db      	lsls	r3, r3, #7
 8009a02:	4413      	add	r3, r2
 8009a04:	3384      	adds	r3, #132	; 0x84
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	6812      	ldr	r2, [r2, #0]
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	01d2      	lsls	r2, r2, #7
 8009a12:	440a      	add	r2, r1
 8009a14:	3284      	adds	r2, #132	; 0x84
 8009a16:	f023 0307 	bic.w	r3, r3, #7
 8009a1a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	01db      	lsls	r3, r3, #7
 8009a26:	4413      	add	r3, r2
 8009a28:	3384      	adds	r3, #132	; 0x84
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009a38:	021b      	lsls	r3, r3, #8
 8009a3a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009a42:	041b      	lsls	r3, r3, #16
 8009a44:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	061b      	lsls	r3, r3, #24
 8009a4c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	01db      	lsls	r3, r3, #7
 8009a58:	4413      	add	r3, r2
 8009a5a:	3384      	adds	r3, #132	; 0x84
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	01db      	lsls	r3, r3, #7
 8009a68:	4413      	add	r3, r2
 8009a6a:	3384      	adds	r3, #132	; 0x84
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	2300      	movs	r3, #0
 8009a70:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009a78:	461a      	mov	r2, r3
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	431a      	orrs	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4619      	mov	r1, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	01db      	lsls	r3, r3, #7
 8009a8c:	440b      	add	r3, r1
 8009a8e:	3384      	adds	r3, #132	; 0x84
 8009a90:	4619      	mov	r1, r3
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	01db      	lsls	r3, r3, #7
 8009aa2:	4413      	add	r3, r2
 8009aa4:	3384      	adds	r3, #132	; 0x84
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	6812      	ldr	r2, [r2, #0]
 8009aac:	4611      	mov	r1, r2
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	01d2      	lsls	r2, r2, #7
 8009ab2:	440a      	add	r2, r1
 8009ab4:	3284      	adds	r2, #132	; 0x84
 8009ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009aba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	01db      	lsls	r3, r3, #7
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3384      	adds	r3, #132	; 0x84
 8009aca:	461a      	mov	r2, r3
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	01db      	lsls	r3, r3, #7
 8009adc:	4413      	add	r3, r2
 8009ade:	3384      	adds	r3, #132	; 0x84
 8009ae0:	69da      	ldr	r2, [r3, #28]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	01db      	lsls	r3, r3, #7
 8009aec:	440b      	add	r3, r1
 8009aee:	3384      	adds	r3, #132	; 0x84
 8009af0:	4619      	mov	r1, r3
 8009af2:	4b58      	ldr	r3, [pc, #352]	; (8009c54 <LTDC_SetConfig+0x32c>)
 8009af4:	4013      	ands	r3, r2
 8009af6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	69da      	ldr	r2, [r3, #28]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	68f9      	ldr	r1, [r7, #12]
 8009b02:	6809      	ldr	r1, [r1, #0]
 8009b04:	4608      	mov	r0, r1
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	01c9      	lsls	r1, r1, #7
 8009b0a:	4401      	add	r1, r0
 8009b0c:	3184      	adds	r1, #132	; 0x84
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	01db      	lsls	r3, r3, #7
 8009b1c:	4413      	add	r3, r2
 8009b1e:	3384      	adds	r3, #132	; 0x84
 8009b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	01db      	lsls	r3, r3, #7
 8009b2c:	4413      	add	r3, r2
 8009b2e:	3384      	adds	r3, #132	; 0x84
 8009b30:	461a      	mov	r2, r3
 8009b32:	2300      	movs	r3, #0
 8009b34:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	01db      	lsls	r3, r3, #7
 8009b40:	4413      	add	r3, r2
 8009b42:	3384      	adds	r3, #132	; 0x84
 8009b44:	461a      	mov	r2, r3
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d102      	bne.n	8009b5a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009b54:	2304      	movs	r3, #4
 8009b56:	61fb      	str	r3, [r7, #28]
 8009b58:	e01b      	b.n	8009b92 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d102      	bne.n	8009b68 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009b62:	2303      	movs	r3, #3
 8009b64:	61fb      	str	r3, [r7, #28]
 8009b66:	e014      	b.n	8009b92 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d00b      	beq.n	8009b88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d007      	beq.n	8009b88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	d003      	beq.n	8009b88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009b84:	2b07      	cmp	r3, #7
 8009b86:	d102      	bne.n	8009b8e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	61fb      	str	r3, [r7, #28]
 8009b8c:	e001      	b.n	8009b92 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	01db      	lsls	r3, r3, #7
 8009b9c:	4413      	add	r3, r2
 8009b9e:	3384      	adds	r3, #132	; 0x84
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	6812      	ldr	r2, [r2, #0]
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	01d2      	lsls	r2, r2, #7
 8009bac:	440a      	add	r2, r1
 8009bae:	3284      	adds	r2, #132	; 0x84
 8009bb0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009bb4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bba:	69fa      	ldr	r2, [r7, #28]
 8009bbc:	fb02 f303 	mul.w	r3, r2, r3
 8009bc0:	041a      	lsls	r2, r3, #16
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	6859      	ldr	r1, [r3, #4]
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	1acb      	subs	r3, r1, r3
 8009bcc:	69f9      	ldr	r1, [r7, #28]
 8009bce:	fb01 f303 	mul.w	r3, r1, r3
 8009bd2:	3303      	adds	r3, #3
 8009bd4:	68f9      	ldr	r1, [r7, #12]
 8009bd6:	6809      	ldr	r1, [r1, #0]
 8009bd8:	4608      	mov	r0, r1
 8009bda:	6879      	ldr	r1, [r7, #4]
 8009bdc:	01c9      	lsls	r1, r1, #7
 8009bde:	4401      	add	r1, r0
 8009be0:	3184      	adds	r1, #132	; 0x84
 8009be2:	4313      	orrs	r3, r2
 8009be4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	01db      	lsls	r3, r3, #7
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3384      	adds	r3, #132	; 0x84
 8009bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	01db      	lsls	r3, r3, #7
 8009c00:	440b      	add	r3, r1
 8009c02:	3384      	adds	r3, #132	; 0x84
 8009c04:	4619      	mov	r1, r3
 8009c06:	4b14      	ldr	r3, [pc, #80]	; (8009c58 <LTDC_SetConfig+0x330>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	01db      	lsls	r3, r3, #7
 8009c16:	4413      	add	r3, r2
 8009c18:	3384      	adds	r3, #132	; 0x84
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c20:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	01db      	lsls	r3, r3, #7
 8009c2c:	4413      	add	r3, r2
 8009c2e:	3384      	adds	r3, #132	; 0x84
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	6812      	ldr	r2, [r2, #0]
 8009c36:	4611      	mov	r1, r2
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	01d2      	lsls	r2, r2, #7
 8009c3c:	440a      	add	r2, r1
 8009c3e:	3284      	adds	r2, #132	; 0x84
 8009c40:	f043 0301 	orr.w	r3, r3, #1
 8009c44:	6013      	str	r3, [r2, #0]
}
 8009c46:	bf00      	nop
 8009c48:	3724      	adds	r7, #36	; 0x24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	fffff8f8 	.word	0xfffff8f8
 8009c58:	fffff800 	.word	0xfffff800

08009c5c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c60:	4b05      	ldr	r3, [pc, #20]	; (8009c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a04      	ldr	r2, [pc, #16]	; (8009c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c6a:	6013      	str	r3, [r2, #0]
}
 8009c6c:	bf00      	nop
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	40007000 	.word	0x40007000

08009c7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009c86:	4b23      	ldr	r3, [pc, #140]	; (8009d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8009c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8a:	4a22      	ldr	r2, [pc, #136]	; (8009d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8009c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c90:	6413      	str	r3, [r2, #64]	; 0x40
 8009c92:	4b20      	ldr	r3, [pc, #128]	; (8009d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8009c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c9a:	603b      	str	r3, [r7, #0]
 8009c9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009c9e:	4b1e      	ldr	r3, [pc, #120]	; (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a1d      	ldr	r2, [pc, #116]	; (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ca8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009caa:	f7fb fd8b 	bl	80057c4 <HAL_GetTick>
 8009cae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009cb0:	e009      	b.n	8009cc6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009cb2:	f7fb fd87 	bl	80057c4 <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cc0:	d901      	bls.n	8009cc6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e022      	b.n	8009d0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009cc6:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd2:	d1ee      	bne.n	8009cb2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009cd4:	4b10      	ldr	r3, [pc, #64]	; (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a0f      	ldr	r2, [pc, #60]	; (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ce0:	f7fb fd70 	bl	80057c4 <HAL_GetTick>
 8009ce4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ce6:	e009      	b.n	8009cfc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009ce8:	f7fb fd6c 	bl	80057c4 <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cf6:	d901      	bls.n	8009cfc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e007      	b.n	8009d0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009cfc:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d08:	d1ee      	bne.n	8009ce8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	40023800 	.word	0x40023800
 8009d18:	40007000 	.word	0x40007000

08009d1c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af02      	add	r7, sp, #8
 8009d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009d24:	f7fb fd4e 	bl	80057c4 <HAL_GetTick>
 8009d28:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e067      	b.n	8009e04 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10b      	bne.n	8009d58 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7f8 f94d 	bl	8001fe8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009d4e:	f241 3188 	movw	r1, #5000	; 0x1388
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f85e 	bl	8009e14 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	021a      	lsls	r2, r3, #8
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	2120      	movs	r1, #32
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f856 	bl	8009e30 <QSPI_WaitFlagStateUntilTimeout>
 8009d84:	4603      	mov	r3, r0
 8009d86:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009d88:	7afb      	ldrb	r3, [r7, #11]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d135      	bne.n	8009dfa <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	4b1d      	ldr	r3, [pc, #116]	; (8009e0c <HAL_QSPI_Init+0xf0>)
 8009d96:	4013      	ands	r3, r2
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	6852      	ldr	r2, [r2, #4]
 8009d9c:	0611      	lsls	r1, r2, #24
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	68d2      	ldr	r2, [r2, #12]
 8009da2:	4311      	orrs	r1, r2
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	69d2      	ldr	r2, [r2, #28]
 8009da8:	4311      	orrs	r1, r2
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	6a12      	ldr	r2, [r2, #32]
 8009dae:	4311      	orrs	r1, r2
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	6812      	ldr	r2, [r2, #0]
 8009db4:	430b      	orrs	r3, r1
 8009db6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	685a      	ldr	r2, [r3, #4]
 8009dbe:	4b14      	ldr	r3, [pc, #80]	; (8009e10 <HAL_QSPI_Init+0xf4>)
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	6912      	ldr	r2, [r2, #16]
 8009dc6:	0411      	lsls	r1, r2, #16
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	6952      	ldr	r2, [r2, #20]
 8009dcc:	4311      	orrs	r1, r2
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	6992      	ldr	r2, [r2, #24]
 8009dd2:	4311      	orrs	r1, r2
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	6812      	ldr	r2, [r2, #0]
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f042 0201 	orr.w	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8009e02:	7afb      	ldrb	r3, [r7, #11]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	00ffff2f 	.word	0x00ffff2f
 8009e10:	ffe0f8fe 	.word	0xffe0f8fe

08009e14 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	649a      	str	r2, [r3, #72]	; 0x48
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009e40:	e01a      	b.n	8009e78 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e48:	d016      	beq.n	8009e78 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e4a:	f7fb fcbb 	bl	80057c4 <HAL_GetTick>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d302      	bcc.n	8009e60 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10b      	bne.n	8009e78 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2204      	movs	r2, #4
 8009e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e6c:	f043 0201 	orr.w	r2, r3, #1
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e00e      	b.n	8009e96 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689a      	ldr	r2, [r3, #8]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	4013      	ands	r3, r2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bf14      	ite	ne
 8009e86:	2301      	movne	r3, #1
 8009e88:	2300      	moveq	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d1d6      	bne.n	8009e42 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
	...

08009ea0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e291      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 8087 	beq.w	8009fd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ec4:	4b96      	ldr	r3, [pc, #600]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f003 030c 	and.w	r3, r3, #12
 8009ecc:	2b04      	cmp	r3, #4
 8009ece:	d00c      	beq.n	8009eea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ed0:	4b93      	ldr	r3, [pc, #588]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f003 030c 	and.w	r3, r3, #12
 8009ed8:	2b08      	cmp	r3, #8
 8009eda:	d112      	bne.n	8009f02 <HAL_RCC_OscConfig+0x62>
 8009edc:	4b90      	ldr	r3, [pc, #576]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ee8:	d10b      	bne.n	8009f02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009eea:	4b8d      	ldr	r3, [pc, #564]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d06c      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x130>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d168      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e26b      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f0a:	d106      	bne.n	8009f1a <HAL_RCC_OscConfig+0x7a>
 8009f0c:	4b84      	ldr	r3, [pc, #528]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a83      	ldr	r2, [pc, #524]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	e02e      	b.n	8009f78 <HAL_RCC_OscConfig+0xd8>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10c      	bne.n	8009f3c <HAL_RCC_OscConfig+0x9c>
 8009f22:	4b7f      	ldr	r3, [pc, #508]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a7e      	ldr	r2, [pc, #504]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	4b7c      	ldr	r3, [pc, #496]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a7b      	ldr	r2, [pc, #492]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	e01d      	b.n	8009f78 <HAL_RCC_OscConfig+0xd8>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f44:	d10c      	bne.n	8009f60 <HAL_RCC_OscConfig+0xc0>
 8009f46:	4b76      	ldr	r3, [pc, #472]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a75      	ldr	r2, [pc, #468]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	4b73      	ldr	r3, [pc, #460]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a72      	ldr	r2, [pc, #456]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f5c:	6013      	str	r3, [r2, #0]
 8009f5e:	e00b      	b.n	8009f78 <HAL_RCC_OscConfig+0xd8>
 8009f60:	4b6f      	ldr	r3, [pc, #444]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a6e      	ldr	r2, [pc, #440]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	4b6c      	ldr	r3, [pc, #432]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a6b      	ldr	r2, [pc, #428]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d013      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f80:	f7fb fc20 	bl	80057c4 <HAL_GetTick>
 8009f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f86:	e008      	b.n	8009f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f88:	f7fb fc1c 	bl	80057c4 <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b64      	cmp	r3, #100	; 0x64
 8009f94:	d901      	bls.n	8009f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e21f      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f9a:	4b61      	ldr	r3, [pc, #388]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0f0      	beq.n	8009f88 <HAL_RCC_OscConfig+0xe8>
 8009fa6:	e014      	b.n	8009fd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa8:	f7fb fc0c 	bl	80057c4 <HAL_GetTick>
 8009fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fae:	e008      	b.n	8009fc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fb0:	f7fb fc08 	bl	80057c4 <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b64      	cmp	r3, #100	; 0x64
 8009fbc:	d901      	bls.n	8009fc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e20b      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fc2:	4b57      	ldr	r3, [pc, #348]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1f0      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x110>
 8009fce:	e000      	b.n	8009fd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0302 	and.w	r3, r3, #2
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d069      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fde:	4b50      	ldr	r3, [pc, #320]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f003 030c 	and.w	r3, r3, #12
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00b      	beq.n	800a002 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fea:	4b4d      	ldr	r3, [pc, #308]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f003 030c 	and.w	r3, r3, #12
 8009ff2:	2b08      	cmp	r3, #8
 8009ff4:	d11c      	bne.n	800a030 <HAL_RCC_OscConfig+0x190>
 8009ff6:	4b4a      	ldr	r3, [pc, #296]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d116      	bne.n	800a030 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a002:	4b47      	ldr	r3, [pc, #284]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <HAL_RCC_OscConfig+0x17a>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d001      	beq.n	800a01a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e1df      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a01a:	4b41      	ldr	r3, [pc, #260]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	493d      	ldr	r1, [pc, #244]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a02e:	e040      	b.n	800a0b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d023      	beq.n	800a080 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a038:	4b39      	ldr	r3, [pc, #228]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a38      	ldr	r2, [pc, #224]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a03e:	f043 0301 	orr.w	r3, r3, #1
 800a042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a044:	f7fb fbbe 	bl	80057c4 <HAL_GetTick>
 800a048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a04a:	e008      	b.n	800a05e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a04c:	f7fb fbba 	bl	80057c4 <HAL_GetTick>
 800a050:	4602      	mov	r2, r0
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	2b02      	cmp	r3, #2
 800a058:	d901      	bls.n	800a05e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e1bd      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a05e:	4b30      	ldr	r3, [pc, #192]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0f0      	beq.n	800a04c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a06a:	4b2d      	ldr	r3, [pc, #180]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	4929      	ldr	r1, [pc, #164]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	600b      	str	r3, [r1, #0]
 800a07e:	e018      	b.n	800a0b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a080:	4b27      	ldr	r3, [pc, #156]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a26      	ldr	r2, [pc, #152]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a086:	f023 0301 	bic.w	r3, r3, #1
 800a08a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a08c:	f7fb fb9a 	bl	80057c4 <HAL_GetTick>
 800a090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a092:	e008      	b.n	800a0a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a094:	f7fb fb96 	bl	80057c4 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d901      	bls.n	800a0a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e199      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a0a6:	4b1e      	ldr	r3, [pc, #120]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0302 	and.w	r3, r3, #2
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f0      	bne.n	800a094 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0308 	and.w	r3, r3, #8
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d038      	beq.n	800a130 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d019      	beq.n	800a0fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0c6:	4b16      	ldr	r3, [pc, #88]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a0c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ca:	4a15      	ldr	r2, [pc, #84]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a0cc:	f043 0301 	orr.w	r3, r3, #1
 800a0d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0d2:	f7fb fb77 	bl	80057c4 <HAL_GetTick>
 800a0d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0d8:	e008      	b.n	800a0ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0da:	f7fb fb73 	bl	80057c4 <HAL_GetTick>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d901      	bls.n	800a0ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e176      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0ec:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a0ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f0:	f003 0302 	and.w	r3, r3, #2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0f0      	beq.n	800a0da <HAL_RCC_OscConfig+0x23a>
 800a0f8:	e01a      	b.n	800a130 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a0fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0fe:	4a08      	ldr	r2, [pc, #32]	; (800a120 <HAL_RCC_OscConfig+0x280>)
 800a100:	f023 0301 	bic.w	r3, r3, #1
 800a104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a106:	f7fb fb5d 	bl	80057c4 <HAL_GetTick>
 800a10a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a10c:	e00a      	b.n	800a124 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a10e:	f7fb fb59 	bl	80057c4 <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d903      	bls.n	800a124 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e15c      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
 800a120:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a124:	4b91      	ldr	r3, [pc, #580]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a128:	f003 0302 	and.w	r3, r3, #2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1ee      	bne.n	800a10e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 80a4 	beq.w	800a286 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a13e:	4b8b      	ldr	r3, [pc, #556]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10d      	bne.n	800a166 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a14a:	4b88      	ldr	r3, [pc, #544]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14e:	4a87      	ldr	r2, [pc, #540]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a154:	6413      	str	r3, [r2, #64]	; 0x40
 800a156:	4b85      	ldr	r3, [pc, #532]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a15e:	60bb      	str	r3, [r7, #8]
 800a160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a162:	2301      	movs	r3, #1
 800a164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a166:	4b82      	ldr	r3, [pc, #520]	; (800a370 <HAL_RCC_OscConfig+0x4d0>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d118      	bne.n	800a1a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a172:	4b7f      	ldr	r3, [pc, #508]	; (800a370 <HAL_RCC_OscConfig+0x4d0>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a7e      	ldr	r2, [pc, #504]	; (800a370 <HAL_RCC_OscConfig+0x4d0>)
 800a178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a17c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a17e:	f7fb fb21 	bl	80057c4 <HAL_GetTick>
 800a182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a184:	e008      	b.n	800a198 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a186:	f7fb fb1d 	bl	80057c4 <HAL_GetTick>
 800a18a:	4602      	mov	r2, r0
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	2b64      	cmp	r3, #100	; 0x64
 800a192:	d901      	bls.n	800a198 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a194:	2303      	movs	r3, #3
 800a196:	e120      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a198:	4b75      	ldr	r3, [pc, #468]	; (800a370 <HAL_RCC_OscConfig+0x4d0>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0f0      	beq.n	800a186 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d106      	bne.n	800a1ba <HAL_RCC_OscConfig+0x31a>
 800a1ac:	4b6f      	ldr	r3, [pc, #444]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b0:	4a6e      	ldr	r2, [pc, #440]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a1b8:	e02d      	b.n	800a216 <HAL_RCC_OscConfig+0x376>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10c      	bne.n	800a1dc <HAL_RCC_OscConfig+0x33c>
 800a1c2:	4b6a      	ldr	r3, [pc, #424]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c6:	4a69      	ldr	r2, [pc, #420]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1c8:	f023 0301 	bic.w	r3, r3, #1
 800a1cc:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ce:	4b67      	ldr	r3, [pc, #412]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d2:	4a66      	ldr	r2, [pc, #408]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1d4:	f023 0304 	bic.w	r3, r3, #4
 800a1d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a1da:	e01c      	b.n	800a216 <HAL_RCC_OscConfig+0x376>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	2b05      	cmp	r3, #5
 800a1e2:	d10c      	bne.n	800a1fe <HAL_RCC_OscConfig+0x35e>
 800a1e4:	4b61      	ldr	r3, [pc, #388]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e8:	4a60      	ldr	r2, [pc, #384]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1ea:	f043 0304 	orr.w	r3, r3, #4
 800a1ee:	6713      	str	r3, [r2, #112]	; 0x70
 800a1f0:	4b5e      	ldr	r3, [pc, #376]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f4:	4a5d      	ldr	r2, [pc, #372]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a1f6:	f043 0301 	orr.w	r3, r3, #1
 800a1fa:	6713      	str	r3, [r2, #112]	; 0x70
 800a1fc:	e00b      	b.n	800a216 <HAL_RCC_OscConfig+0x376>
 800a1fe:	4b5b      	ldr	r3, [pc, #364]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a202:	4a5a      	ldr	r2, [pc, #360]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a204:	f023 0301 	bic.w	r3, r3, #1
 800a208:	6713      	str	r3, [r2, #112]	; 0x70
 800a20a:	4b58      	ldr	r3, [pc, #352]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20e:	4a57      	ldr	r2, [pc, #348]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a210:	f023 0304 	bic.w	r3, r3, #4
 800a214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d015      	beq.n	800a24a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a21e:	f7fb fad1 	bl	80057c4 <HAL_GetTick>
 800a222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a224:	e00a      	b.n	800a23c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a226:	f7fb facd 	bl	80057c4 <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	f241 3288 	movw	r2, #5000	; 0x1388
 800a234:	4293      	cmp	r3, r2
 800a236:	d901      	bls.n	800a23c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e0ce      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a23c:	4b4b      	ldr	r3, [pc, #300]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a240:	f003 0302 	and.w	r3, r3, #2
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0ee      	beq.n	800a226 <HAL_RCC_OscConfig+0x386>
 800a248:	e014      	b.n	800a274 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a24a:	f7fb fabb 	bl	80057c4 <HAL_GetTick>
 800a24e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a250:	e00a      	b.n	800a268 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a252:	f7fb fab7 	bl	80057c4 <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a260:	4293      	cmp	r3, r2
 800a262:	d901      	bls.n	800a268 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e0b8      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a268:	4b40      	ldr	r3, [pc, #256]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26c:	f003 0302 	and.w	r3, r3, #2
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1ee      	bne.n	800a252 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a274:	7dfb      	ldrb	r3, [r7, #23]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d105      	bne.n	800a286 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a27a:	4b3c      	ldr	r3, [pc, #240]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27e:	4a3b      	ldr	r2, [pc, #236]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 80a4 	beq.w	800a3d8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a290:	4b36      	ldr	r3, [pc, #216]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f003 030c 	and.w	r3, r3, #12
 800a298:	2b08      	cmp	r3, #8
 800a29a:	d06b      	beq.n	800a374 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d149      	bne.n	800a338 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2a4:	4b31      	ldr	r3, [pc, #196]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a30      	ldr	r2, [pc, #192]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a2aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2b0:	f7fb fa88 	bl	80057c4 <HAL_GetTick>
 800a2b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2b6:	e008      	b.n	800a2ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2b8:	f7fb fa84 	bl	80057c4 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d901      	bls.n	800a2ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e087      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2ca:	4b28      	ldr	r3, [pc, #160]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1f0      	bne.n	800a2b8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	69da      	ldr	r2, [r3, #28]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e4:	019b      	lsls	r3, r3, #6
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ec:	085b      	lsrs	r3, r3, #1
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	041b      	lsls	r3, r3, #16
 800a2f2:	431a      	orrs	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	061b      	lsls	r3, r3, #24
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	4a1b      	ldr	r2, [pc, #108]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a2fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a302:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a304:	4b19      	ldr	r3, [pc, #100]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a18      	ldr	r2, [pc, #96]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a30a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a30e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a310:	f7fb fa58 	bl	80057c4 <HAL_GetTick>
 800a314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a316:	e008      	b.n	800a32a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a318:	f7fb fa54 	bl	80057c4 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	2b02      	cmp	r3, #2
 800a324:	d901      	bls.n	800a32a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e057      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a32a:	4b10      	ldr	r3, [pc, #64]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0f0      	beq.n	800a318 <HAL_RCC_OscConfig+0x478>
 800a336:	e04f      	b.n	800a3d8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a338:	4b0c      	ldr	r3, [pc, #48]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a0b      	ldr	r2, [pc, #44]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a33e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a344:	f7fb fa3e 	bl	80057c4 <HAL_GetTick>
 800a348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a34a:	e008      	b.n	800a35e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a34c:	f7fb fa3a 	bl	80057c4 <HAL_GetTick>
 800a350:	4602      	mov	r2, r0
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	2b02      	cmp	r3, #2
 800a358:	d901      	bls.n	800a35e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e03d      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a35e:	4b03      	ldr	r3, [pc, #12]	; (800a36c <HAL_RCC_OscConfig+0x4cc>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1f0      	bne.n	800a34c <HAL_RCC_OscConfig+0x4ac>
 800a36a:	e035      	b.n	800a3d8 <HAL_RCC_OscConfig+0x538>
 800a36c:	40023800 	.word	0x40023800
 800a370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a374:	4b1b      	ldr	r3, [pc, #108]	; (800a3e4 <HAL_RCC_OscConfig+0x544>)
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d028      	beq.n	800a3d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d121      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d11a      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d111      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ba:	085b      	lsrs	r3, r3, #1
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d107      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d001      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	40023800 	.word	0x40023800

0800a3e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e0d0      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a400:	4b6a      	ldr	r3, [pc, #424]	; (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 030f 	and.w	r3, r3, #15
 800a408:	683a      	ldr	r2, [r7, #0]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d910      	bls.n	800a430 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a40e:	4b67      	ldr	r3, [pc, #412]	; (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f023 020f 	bic.w	r2, r3, #15
 800a416:	4965      	ldr	r1, [pc, #404]	; (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a41e:	4b63      	ldr	r3, [pc, #396]	; (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 030f 	and.w	r3, r3, #15
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d001      	beq.n	800a430 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e0b8      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0302 	and.w	r3, r3, #2
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d020      	beq.n	800a47e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 0304 	and.w	r3, r3, #4
 800a444:	2b00      	cmp	r3, #0
 800a446:	d005      	beq.n	800a454 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a448:	4b59      	ldr	r3, [pc, #356]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	4a58      	ldr	r2, [pc, #352]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a44e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a452:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 0308 	and.w	r3, r3, #8
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d005      	beq.n	800a46c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a460:	4b53      	ldr	r3, [pc, #332]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	4a52      	ldr	r2, [pc, #328]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a46a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a46c:	4b50      	ldr	r3, [pc, #320]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	494d      	ldr	r1, [pc, #308]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0301 	and.w	r3, r3, #1
 800a486:	2b00      	cmp	r3, #0
 800a488:	d040      	beq.n	800a50c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d107      	bne.n	800a4a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a492:	4b47      	ldr	r3, [pc, #284]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d115      	bne.n	800a4ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e07f      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d107      	bne.n	800a4ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4aa:	4b41      	ldr	r3, [pc, #260]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d109      	bne.n	800a4ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e073      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4ba:	4b3d      	ldr	r3, [pc, #244]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0302 	and.w	r3, r3, #2
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e06b      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a4ca:	4b39      	ldr	r3, [pc, #228]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	f023 0203 	bic.w	r2, r3, #3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	4936      	ldr	r1, [pc, #216]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4dc:	f7fb f972 	bl	80057c4 <HAL_GetTick>
 800a4e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4e2:	e00a      	b.n	800a4fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4e4:	f7fb f96e 	bl	80057c4 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d901      	bls.n	800a4fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e053      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4fa:	4b2d      	ldr	r3, [pc, #180]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f003 020c 	and.w	r2, r3, #12
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	429a      	cmp	r2, r3
 800a50a:	d1eb      	bne.n	800a4e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a50c:	4b27      	ldr	r3, [pc, #156]	; (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 030f 	and.w	r3, r3, #15
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d210      	bcs.n	800a53c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a51a:	4b24      	ldr	r3, [pc, #144]	; (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f023 020f 	bic.w	r2, r3, #15
 800a522:	4922      	ldr	r1, [pc, #136]	; (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	4313      	orrs	r3, r2
 800a528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a52a:	4b20      	ldr	r3, [pc, #128]	; (800a5ac <HAL_RCC_ClockConfig+0x1c4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 030f 	and.w	r3, r3, #15
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d001      	beq.n	800a53c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e032      	b.n	800a5a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 0304 	and.w	r3, r3, #4
 800a544:	2b00      	cmp	r3, #0
 800a546:	d008      	beq.n	800a55a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a548:	4b19      	ldr	r3, [pc, #100]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	4916      	ldr	r1, [pc, #88]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a556:	4313      	orrs	r3, r2
 800a558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0308 	and.w	r3, r3, #8
 800a562:	2b00      	cmp	r3, #0
 800a564:	d009      	beq.n	800a57a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a566:	4b12      	ldr	r3, [pc, #72]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	00db      	lsls	r3, r3, #3
 800a574:	490e      	ldr	r1, [pc, #56]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a576:	4313      	orrs	r3, r2
 800a578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a57a:	f000 f821 	bl	800a5c0 <HAL_RCC_GetSysClockFreq>
 800a57e:	4601      	mov	r1, r0
 800a580:	4b0b      	ldr	r3, [pc, #44]	; (800a5b0 <HAL_RCC_ClockConfig+0x1c8>)
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	091b      	lsrs	r3, r3, #4
 800a586:	f003 030f 	and.w	r3, r3, #15
 800a58a:	4a0a      	ldr	r2, [pc, #40]	; (800a5b4 <HAL_RCC_ClockConfig+0x1cc>)
 800a58c:	5cd3      	ldrb	r3, [r2, r3]
 800a58e:	fa21 f303 	lsr.w	r3, r1, r3
 800a592:	4a09      	ldr	r2, [pc, #36]	; (800a5b8 <HAL_RCC_ClockConfig+0x1d0>)
 800a594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a596:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <HAL_RCC_ClockConfig+0x1d4>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7f8 f94a 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	40023c00 	.word	0x40023c00
 800a5b0:	40023800 	.word	0x40023800
 800a5b4:	0800f8e8 	.word	0x0800f8e8
 800a5b8:	20000000 	.word	0x20000000
 800a5bc:	20000044 	.word	0x20000044

0800a5c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	607b      	str	r3, [r7, #4]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a5d6:	4b50      	ldr	r3, [pc, #320]	; (800a718 <HAL_RCC_GetSysClockFreq+0x158>)
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f003 030c 	and.w	r3, r3, #12
 800a5de:	2b04      	cmp	r3, #4
 800a5e0:	d007      	beq.n	800a5f2 <HAL_RCC_GetSysClockFreq+0x32>
 800a5e2:	2b08      	cmp	r3, #8
 800a5e4:	d008      	beq.n	800a5f8 <HAL_RCC_GetSysClockFreq+0x38>
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f040 808d 	bne.w	800a706 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a5ec:	4b4b      	ldr	r3, [pc, #300]	; (800a71c <HAL_RCC_GetSysClockFreq+0x15c>)
 800a5ee:	60bb      	str	r3, [r7, #8]
      break;
 800a5f0:	e08c      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a5f2:	4b4b      	ldr	r3, [pc, #300]	; (800a720 <HAL_RCC_GetSysClockFreq+0x160>)
 800a5f4:	60bb      	str	r3, [r7, #8]
      break;
 800a5f6:	e089      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a5f8:	4b47      	ldr	r3, [pc, #284]	; (800a718 <HAL_RCC_GetSysClockFreq+0x158>)
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a600:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a602:	4b45      	ldr	r3, [pc, #276]	; (800a718 <HAL_RCC_GetSysClockFreq+0x158>)
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d023      	beq.n	800a656 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a60e:	4b42      	ldr	r3, [pc, #264]	; (800a718 <HAL_RCC_GetSysClockFreq+0x158>)
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	099b      	lsrs	r3, r3, #6
 800a614:	f04f 0400 	mov.w	r4, #0
 800a618:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a61c:	f04f 0200 	mov.w	r2, #0
 800a620:	ea03 0501 	and.w	r5, r3, r1
 800a624:	ea04 0602 	and.w	r6, r4, r2
 800a628:	4a3d      	ldr	r2, [pc, #244]	; (800a720 <HAL_RCC_GetSysClockFreq+0x160>)
 800a62a:	fb02 f106 	mul.w	r1, r2, r6
 800a62e:	2200      	movs	r2, #0
 800a630:	fb02 f205 	mul.w	r2, r2, r5
 800a634:	440a      	add	r2, r1
 800a636:	493a      	ldr	r1, [pc, #232]	; (800a720 <HAL_RCC_GetSysClockFreq+0x160>)
 800a638:	fba5 0101 	umull	r0, r1, r5, r1
 800a63c:	1853      	adds	r3, r2, r1
 800a63e:	4619      	mov	r1, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f04f 0400 	mov.w	r4, #0
 800a646:	461a      	mov	r2, r3
 800a648:	4623      	mov	r3, r4
 800a64a:	f7f5 fde1 	bl	8000210 <__aeabi_uldivmod>
 800a64e:	4603      	mov	r3, r0
 800a650:	460c      	mov	r4, r1
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	e049      	b.n	800a6ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a656:	4b30      	ldr	r3, [pc, #192]	; (800a718 <HAL_RCC_GetSysClockFreq+0x158>)
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	099b      	lsrs	r3, r3, #6
 800a65c:	f04f 0400 	mov.w	r4, #0
 800a660:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a664:	f04f 0200 	mov.w	r2, #0
 800a668:	ea03 0501 	and.w	r5, r3, r1
 800a66c:	ea04 0602 	and.w	r6, r4, r2
 800a670:	4629      	mov	r1, r5
 800a672:	4632      	mov	r2, r6
 800a674:	f04f 0300 	mov.w	r3, #0
 800a678:	f04f 0400 	mov.w	r4, #0
 800a67c:	0154      	lsls	r4, r2, #5
 800a67e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a682:	014b      	lsls	r3, r1, #5
 800a684:	4619      	mov	r1, r3
 800a686:	4622      	mov	r2, r4
 800a688:	1b49      	subs	r1, r1, r5
 800a68a:	eb62 0206 	sbc.w	r2, r2, r6
 800a68e:	f04f 0300 	mov.w	r3, #0
 800a692:	f04f 0400 	mov.w	r4, #0
 800a696:	0194      	lsls	r4, r2, #6
 800a698:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a69c:	018b      	lsls	r3, r1, #6
 800a69e:	1a5b      	subs	r3, r3, r1
 800a6a0:	eb64 0402 	sbc.w	r4, r4, r2
 800a6a4:	f04f 0100 	mov.w	r1, #0
 800a6a8:	f04f 0200 	mov.w	r2, #0
 800a6ac:	00e2      	lsls	r2, r4, #3
 800a6ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a6b2:	00d9      	lsls	r1, r3, #3
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	195b      	adds	r3, r3, r5
 800a6ba:	eb44 0406 	adc.w	r4, r4, r6
 800a6be:	f04f 0100 	mov.w	r1, #0
 800a6c2:	f04f 0200 	mov.w	r2, #0
 800a6c6:	02a2      	lsls	r2, r4, #10
 800a6c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a6cc:	0299      	lsls	r1, r3, #10
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f04f 0400 	mov.w	r4, #0
 800a6dc:	461a      	mov	r2, r3
 800a6de:	4623      	mov	r3, r4
 800a6e0:	f7f5 fd96 	bl	8000210 <__aeabi_uldivmod>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a6ea:	4b0b      	ldr	r3, [pc, #44]	; (800a718 <HAL_RCC_GetSysClockFreq+0x158>)
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	0c1b      	lsrs	r3, r3, #16
 800a6f0:	f003 0303 	and.w	r3, r3, #3
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	005b      	lsls	r3, r3, #1
 800a6f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a702:	60bb      	str	r3, [r7, #8]
      break;
 800a704:	e002      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a706:	4b05      	ldr	r3, [pc, #20]	; (800a71c <HAL_RCC_GetSysClockFreq+0x15c>)
 800a708:	60bb      	str	r3, [r7, #8]
      break;
 800a70a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a70c:	68bb      	ldr	r3, [r7, #8]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a716:	bf00      	nop
 800a718:	40023800 	.word	0x40023800
 800a71c:	00f42400 	.word	0x00f42400
 800a720:	017d7840 	.word	0x017d7840

0800a724 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a724:	b480      	push	{r7}
 800a726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a728:	4b03      	ldr	r3, [pc, #12]	; (800a738 <HAL_RCC_GetHCLKFreq+0x14>)
 800a72a:	681b      	ldr	r3, [r3, #0]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	20000000 	.word	0x20000000

0800a73c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a740:	f7ff fff0 	bl	800a724 <HAL_RCC_GetHCLKFreq>
 800a744:	4601      	mov	r1, r0
 800a746:	4b05      	ldr	r3, [pc, #20]	; (800a75c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	0a9b      	lsrs	r3, r3, #10
 800a74c:	f003 0307 	and.w	r3, r3, #7
 800a750:	4a03      	ldr	r2, [pc, #12]	; (800a760 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a752:	5cd3      	ldrb	r3, [r2, r3]
 800a754:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a758:	4618      	mov	r0, r3
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	40023800 	.word	0x40023800
 800a760:	0800f8f8 	.word	0x0800f8f8

0800a764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a768:	f7ff ffdc 	bl	800a724 <HAL_RCC_GetHCLKFreq>
 800a76c:	4601      	mov	r1, r0
 800a76e:	4b05      	ldr	r3, [pc, #20]	; (800a784 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	0b5b      	lsrs	r3, r3, #13
 800a774:	f003 0307 	and.w	r3, r3, #7
 800a778:	4a03      	ldr	r2, [pc, #12]	; (800a788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a77a:	5cd3      	ldrb	r3, [r2, r3]
 800a77c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a780:	4618      	mov	r0, r3
 800a782:	bd80      	pop	{r7, pc}
 800a784:	40023800 	.word	0x40023800
 800a788:	0800f8f8 	.word	0x0800f8f8

0800a78c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	220f      	movs	r2, #15
 800a79a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a79c:	4b12      	ldr	r3, [pc, #72]	; (800a7e8 <HAL_RCC_GetClockConfig+0x5c>)
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f003 0203 	and.w	r2, r3, #3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a7a8:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <HAL_RCC_GetClockConfig+0x5c>)
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <HAL_RCC_GetClockConfig+0x5c>)
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a7c0:	4b09      	ldr	r3, [pc, #36]	; (800a7e8 <HAL_RCC_GetClockConfig+0x5c>)
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	08db      	lsrs	r3, r3, #3
 800a7c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a7ce:	4b07      	ldr	r3, [pc, #28]	; (800a7ec <HAL_RCC_GetClockConfig+0x60>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 020f 	and.w	r2, r3, #15
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	601a      	str	r2, [r3, #0]
}
 800a7da:	bf00      	nop
 800a7dc:	370c      	adds	r7, #12
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	40023800 	.word	0x40023800
 800a7ec:	40023c00 	.word	0x40023c00

0800a7f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b088      	sub	sp, #32
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	d012      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a818:	4b69      	ldr	r3, [pc, #420]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	4a68      	ldr	r2, [pc, #416]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a81e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a822:	6093      	str	r3, [r2, #8]
 800a824:	4b66      	ldr	r3, [pc, #408]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a826:	689a      	ldr	r2, [r3, #8]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82c:	4964      	ldr	r1, [pc, #400]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a83a:	2301      	movs	r3, #1
 800a83c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d017      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a84a:	4b5d      	ldr	r3, [pc, #372]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a84c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a858:	4959      	ldr	r1, [pc, #356]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a85a:	4313      	orrs	r3, r2
 800a85c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a868:	d101      	bne.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a86a:	2301      	movs	r3, #1
 800a86c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a876:	2301      	movs	r3, #1
 800a878:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a882:	2b00      	cmp	r3, #0
 800a884:	d017      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a886:	4b4e      	ldr	r3, [pc, #312]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a88c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a894:	494a      	ldr	r1, [pc, #296]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a896:	4313      	orrs	r3, r2
 800a898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8a4:	d101      	bne.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 0320 	and.w	r3, r3, #32
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 808b 	beq.w	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a8d4:	4b3a      	ldr	r3, [pc, #232]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d8:	4a39      	ldr	r2, [pc, #228]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8de:	6413      	str	r3, [r2, #64]	; 0x40
 800a8e0:	4b37      	ldr	r3, [pc, #220]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8e8:	60bb      	str	r3, [r7, #8]
 800a8ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a8ec:	4b35      	ldr	r3, [pc, #212]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a34      	ldr	r2, [pc, #208]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a8f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8f8:	f7fa ff64 	bl	80057c4 <HAL_GetTick>
 800a8fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a8fe:	e008      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a900:	f7fa ff60 	bl	80057c4 <HAL_GetTick>
 800a904:	4602      	mov	r2, r0
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	2b64      	cmp	r3, #100	; 0x64
 800a90c:	d901      	bls.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a90e:	2303      	movs	r3, #3
 800a910:	e355      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a912:	4b2c      	ldr	r3, [pc, #176]	; (800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d0f0      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a91e:	4b28      	ldr	r3, [pc, #160]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a926:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d035      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d02e      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a93c:	4b20      	ldr	r3, [pc, #128]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a93e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a944:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a946:	4b1e      	ldr	r3, [pc, #120]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a94a:	4a1d      	ldr	r2, [pc, #116]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a94c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a950:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a952:	4b1b      	ldr	r3, [pc, #108]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a956:	4a1a      	ldr	r2, [pc, #104]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a95c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a95e:	4a18      	ldr	r2, [pc, #96]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a964:	4b16      	ldr	r3, [pc, #88]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d114      	bne.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a970:	f7fa ff28 	bl	80057c4 <HAL_GetTick>
 800a974:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a976:	e00a      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a978:	f7fa ff24 	bl	80057c4 <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	f241 3288 	movw	r2, #5000	; 0x1388
 800a986:	4293      	cmp	r3, r2
 800a988:	d901      	bls.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e317      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a98e:	4b0c      	ldr	r3, [pc, #48]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a992:	f003 0302 	and.w	r3, r3, #2
 800a996:	2b00      	cmp	r3, #0
 800a998:	d0ee      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9a6:	d111      	bne.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a9a8:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a9b4:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a9b6:	400b      	ands	r3, r1
 800a9b8:	4901      	ldr	r1, [pc, #4]	; (800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	608b      	str	r3, [r1, #8]
 800a9be:	e00b      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a9c0:	40023800 	.word	0x40023800
 800a9c4:	40007000 	.word	0x40007000
 800a9c8:	0ffffcff 	.word	0x0ffffcff
 800a9cc:	4bb0      	ldr	r3, [pc, #704]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	4aaf      	ldr	r2, [pc, #700]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800a9d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a9d6:	6093      	str	r3, [r2, #8]
 800a9d8:	4bad      	ldr	r3, [pc, #692]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800a9da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9e4:	49aa      	ldr	r1, [pc, #680]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0310 	and.w	r3, r3, #16
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d010      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a9f6:	4ba6      	ldr	r3, [pc, #664]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800a9f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9fc:	4aa4      	ldr	r2, [pc, #656]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800a9fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800aa06:	4ba2      	ldr	r3, [pc, #648]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aa08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa10:	499f      	ldr	r1, [pc, #636]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aa12:	4313      	orrs	r3, r2
 800aa14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00a      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aa24:	4b9a      	ldr	r3, [pc, #616]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aa26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa32:	4997      	ldr	r1, [pc, #604]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aa34:	4313      	orrs	r3, r2
 800aa36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00a      	beq.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aa46:	4b92      	ldr	r3, [pc, #584]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aa48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa54:	498e      	ldr	r1, [pc, #568]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00a      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aa68:	4b89      	ldr	r3, [pc, #548]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aa6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa76:	4986      	ldr	r1, [pc, #536]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00a      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa8a:	4b81      	ldr	r3, [pc, #516]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aa8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa98:	497d      	ldr	r1, [pc, #500]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00a      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aaac:	4b78      	ldr	r3, [pc, #480]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aaae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aab2:	f023 0203 	bic.w	r2, r3, #3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaba:	4975      	ldr	r1, [pc, #468]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aabc:	4313      	orrs	r3, r2
 800aabe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00a      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aace:	4b70      	ldr	r3, [pc, #448]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad4:	f023 020c 	bic.w	r2, r3, #12
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aadc:	496c      	ldr	r1, [pc, #432]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aade:	4313      	orrs	r3, r2
 800aae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00a      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800aaf0:	4b67      	ldr	r3, [pc, #412]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800aaf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaf6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aafe:	4964      	ldr	r1, [pc, #400]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ab00:	4313      	orrs	r3, r2
 800ab02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00a      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ab12:	4b5f      	ldr	r3, [pc, #380]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ab14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab20:	495b      	ldr	r1, [pc, #364]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00a      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ab34:	4b56      	ldr	r3, [pc, #344]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ab36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab42:	4953      	ldr	r1, [pc, #332]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ab44:	4313      	orrs	r3, r2
 800ab46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00a      	beq.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ab56:	4b4e      	ldr	r3, [pc, #312]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ab58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab64:	494a      	ldr	r1, [pc, #296]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ab66:	4313      	orrs	r3, r2
 800ab68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00a      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ab78:	4b45      	ldr	r3, [pc, #276]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ab7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab86:	4942      	ldr	r1, [pc, #264]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00a      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ab9a:	4b3d      	ldr	r3, [pc, #244]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ab9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aba0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aba8:	4939      	ldr	r1, [pc, #228]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00a      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800abbc:	4b34      	ldr	r3, [pc, #208]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800abbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abca:	4931      	ldr	r1, [pc, #196]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800abcc:	4313      	orrs	r3, r2
 800abce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d011      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800abde:	4b2c      	ldr	r3, [pc, #176]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800abe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abe4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abec:	4928      	ldr	r1, [pc, #160]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800abee:	4313      	orrs	r3, r2
 800abf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abfc:	d101      	bne.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800abfe:	2301      	movs	r3, #1
 800ac00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0308 	and.w	r3, r3, #8
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d001      	beq.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00a      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ac1e:	4b1c      	ldr	r3, [pc, #112]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ac20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac2c:	4918      	ldr	r1, [pc, #96]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00b      	beq.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ac40:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ac42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac50:	490f      	ldr	r1, [pc, #60]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d005      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac66:	f040 80d8 	bne.w	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ac6a:	4b09      	ldr	r3, [pc, #36]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a08      	ldr	r2, [pc, #32]	; (800ac90 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800ac70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac76:	f7fa fda5 	bl	80057c4 <HAL_GetTick>
 800ac7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ac7c:	e00a      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ac7e:	f7fa fda1 	bl	80057c4 <HAL_GetTick>
 800ac82:	4602      	mov	r2, r0
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	2b64      	cmp	r3, #100	; 0x64
 800ac8a:	d903      	bls.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e196      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800ac90:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ac94:	4b6c      	ldr	r3, [pc, #432]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1ee      	bne.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d021      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d11d      	bne.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800acb4:	4b64      	ldr	r3, [pc, #400]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800acb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acba:	0c1b      	lsrs	r3, r3, #16
 800acbc:	f003 0303 	and.w	r3, r3, #3
 800acc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800acc2:	4b61      	ldr	r3, [pc, #388]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800acc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acc8:	0e1b      	lsrs	r3, r3, #24
 800acca:	f003 030f 	and.w	r3, r3, #15
 800acce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	019a      	lsls	r2, r3, #6
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	041b      	lsls	r3, r3, #16
 800acda:	431a      	orrs	r2, r3
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	061b      	lsls	r3, r3, #24
 800ace0:	431a      	orrs	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	071b      	lsls	r3, r3, #28
 800ace8:	4957      	ldr	r1, [pc, #348]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800acea:	4313      	orrs	r3, r2
 800acec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d004      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad04:	d00a      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d02e      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad1a:	d129      	bne.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ad1c:	4b4a      	ldr	r3, [pc, #296]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ad1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad22:	0c1b      	lsrs	r3, r3, #16
 800ad24:	f003 0303 	and.w	r3, r3, #3
 800ad28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ad2a:	4b47      	ldr	r3, [pc, #284]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ad2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad30:	0f1b      	lsrs	r3, r3, #28
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	019a      	lsls	r2, r3, #6
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	041b      	lsls	r3, r3, #16
 800ad42:	431a      	orrs	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	061b      	lsls	r3, r3, #24
 800ad4a:	431a      	orrs	r2, r3
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	071b      	lsls	r3, r3, #28
 800ad50:	493d      	ldr	r1, [pc, #244]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ad58:	4b3b      	ldr	r3, [pc, #236]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ad5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad5e:	f023 021f 	bic.w	r2, r3, #31
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad66:	3b01      	subs	r3, #1
 800ad68:	4937      	ldr	r1, [pc, #220]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d01d      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ad7c:	4b32      	ldr	r3, [pc, #200]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ad7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad82:	0e1b      	lsrs	r3, r3, #24
 800ad84:	f003 030f 	and.w	r3, r3, #15
 800ad88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ad8a:	4b2f      	ldr	r3, [pc, #188]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ad8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad90:	0f1b      	lsrs	r3, r3, #28
 800ad92:	f003 0307 	and.w	r3, r3, #7
 800ad96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	019a      	lsls	r2, r3, #6
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	041b      	lsls	r3, r3, #16
 800ada4:	431a      	orrs	r2, r3
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	061b      	lsls	r3, r3, #24
 800adaa:	431a      	orrs	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	071b      	lsls	r3, r3, #28
 800adb0:	4925      	ldr	r1, [pc, #148]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800adb2:	4313      	orrs	r3, r2
 800adb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d011      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	019a      	lsls	r2, r3, #6
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	041b      	lsls	r3, r3, #16
 800add0:	431a      	orrs	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	061b      	lsls	r3, r3, #24
 800add8:	431a      	orrs	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	071b      	lsls	r3, r3, #28
 800ade0:	4919      	ldr	r1, [pc, #100]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ade2:	4313      	orrs	r3, r2
 800ade4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ade8:	4b17      	ldr	r3, [pc, #92]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a16      	ldr	r2, [pc, #88]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800adee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800adf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adf4:	f7fa fce6 	bl	80057c4 <HAL_GetTick>
 800adf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800adfa:	e008      	b.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800adfc:	f7fa fce2 	bl	80057c4 <HAL_GetTick>
 800ae00:	4602      	mov	r2, r0
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	2b64      	cmp	r3, #100	; 0x64
 800ae08:	d901      	bls.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e0d7      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ae0e:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0f0      	beq.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	f040 80cd 	bne.w	800afbc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ae22:	4b09      	ldr	r3, [pc, #36]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a08      	ldr	r2, [pc, #32]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800ae28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae2e:	f7fa fcc9 	bl	80057c4 <HAL_GetTick>
 800ae32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ae34:	e00a      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ae36:	f7fa fcc5 	bl	80057c4 <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	2b64      	cmp	r3, #100	; 0x64
 800ae42:	d903      	bls.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e0ba      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800ae48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ae4c:	4b5e      	ldr	r3, [pc, #376]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae58:	d0ed      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d009      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d02e      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d12a      	bne.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ae82:	4b51      	ldr	r3, [pc, #324]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800ae84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae88:	0c1b      	lsrs	r3, r3, #16
 800ae8a:	f003 0303 	and.w	r3, r3, #3
 800ae8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ae90:	4b4d      	ldr	r3, [pc, #308]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800ae92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae96:	0f1b      	lsrs	r3, r3, #28
 800ae98:	f003 0307 	and.w	r3, r3, #7
 800ae9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	019a      	lsls	r2, r3, #6
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	041b      	lsls	r3, r3, #16
 800aea8:	431a      	orrs	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	061b      	lsls	r3, r3, #24
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	071b      	lsls	r3, r3, #28
 800aeb6:	4944      	ldr	r1, [pc, #272]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800aebe:	4b42      	ldr	r3, [pc, #264]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800aec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aec4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aecc:	3b01      	subs	r3, #1
 800aece:	021b      	lsls	r3, r3, #8
 800aed0:	493d      	ldr	r1, [pc, #244]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800aed2:	4313      	orrs	r3, r2
 800aed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d022      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aeec:	d11d      	bne.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aeee:	4b36      	ldr	r3, [pc, #216]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800aef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef4:	0e1b      	lsrs	r3, r3, #24
 800aef6:	f003 030f 	and.w	r3, r3, #15
 800aefa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800aefc:	4b32      	ldr	r3, [pc, #200]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800aefe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af02:	0f1b      	lsrs	r3, r3, #28
 800af04:	f003 0307 	and.w	r3, r3, #7
 800af08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	019a      	lsls	r2, r3, #6
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a1b      	ldr	r3, [r3, #32]
 800af14:	041b      	lsls	r3, r3, #16
 800af16:	431a      	orrs	r2, r3
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	061b      	lsls	r3, r3, #24
 800af1c:	431a      	orrs	r2, r3
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	071b      	lsls	r3, r3, #28
 800af22:	4929      	ldr	r1, [pc, #164]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800af24:	4313      	orrs	r3, r2
 800af26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0308 	and.w	r3, r3, #8
 800af32:	2b00      	cmp	r3, #0
 800af34:	d028      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800af36:	4b24      	ldr	r3, [pc, #144]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800af38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af3c:	0e1b      	lsrs	r3, r3, #24
 800af3e:	f003 030f 	and.w	r3, r3, #15
 800af42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800af44:	4b20      	ldr	r3, [pc, #128]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800af46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af4a:	0c1b      	lsrs	r3, r3, #16
 800af4c:	f003 0303 	and.w	r3, r3, #3
 800af50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	019a      	lsls	r2, r3, #6
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	041b      	lsls	r3, r3, #16
 800af5c:	431a      	orrs	r2, r3
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	061b      	lsls	r3, r3, #24
 800af62:	431a      	orrs	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	69db      	ldr	r3, [r3, #28]
 800af68:	071b      	lsls	r3, r3, #28
 800af6a:	4917      	ldr	r1, [pc, #92]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800af6c:	4313      	orrs	r3, r2
 800af6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800af72:	4b15      	ldr	r3, [pc, #84]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800af74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af80:	4911      	ldr	r1, [pc, #68]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800af82:	4313      	orrs	r3, r2
 800af84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800af88:	4b0f      	ldr	r3, [pc, #60]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a0e      	ldr	r2, [pc, #56]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800af8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af94:	f7fa fc16 	bl	80057c4 <HAL_GetTick>
 800af98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800af9a:	e008      	b.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800af9c:	f7fa fc12 	bl	80057c4 <HAL_GetTick>
 800afa0:	4602      	mov	r2, r0
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	2b64      	cmp	r3, #100	; 0x64
 800afa8:	d901      	bls.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800afaa:	2303      	movs	r3, #3
 800afac:	e007      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800afae:	4b06      	ldr	r3, [pc, #24]	; (800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afba:	d1ef      	bne.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3720      	adds	r7, #32
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	40023800 	.word	0x40023800

0800afcc <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a80      	ldr	r2, [pc, #512]	; (800b1dc <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800afdc:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800afde:	4b80      	ldr	r3, [pc, #512]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800afe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afe4:	099b      	lsrs	r3, r3, #6
 800afe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800afee:	4b7c      	ldr	r3, [pc, #496]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800aff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aff4:	0c1b      	lsrs	r3, r3, #16
 800aff6:	f003 0203 	and.w	r2, r3, #3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800affe:	4b78      	ldr	r3, [pc, #480]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b004:	0e1b      	lsrs	r3, r3, #24
 800b006:	f003 020f 	and.w	r2, r3, #15
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b00e:	4b74      	ldr	r3, [pc, #464]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b014:	0f1b      	lsrs	r3, r3, #28
 800b016:	f003 0207 	and.w	r2, r3, #7
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800b01e:	4b70      	ldr	r3, [pc, #448]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b024:	099b      	lsrs	r3, r3, #6
 800b026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b02e:	4b6c      	ldr	r3, [pc, #432]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b034:	0c1b      	lsrs	r3, r3, #16
 800b036:	f003 0203 	and.w	r2, r3, #3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b03e:	4b68      	ldr	r3, [pc, #416]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b044:	0e1b      	lsrs	r3, r3, #24
 800b046:	f003 020f 	and.w	r2, r3, #15
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b04e:	4b64      	ldr	r3, [pc, #400]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b054:	0f1b      	lsrs	r3, r3, #28
 800b056:	f003 0207 	and.w	r2, r3, #7
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800b05e:	4b60      	ldr	r3, [pc, #384]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b064:	f003 021f 	and.w	r2, r3, #31
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800b06c:	4b5c      	ldr	r3, [pc, #368]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b06e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b072:	0a1b      	lsrs	r3, r3, #8
 800b074:	f003 021f 	and.w	r2, r3, #31
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800b07c:	4b58      	ldr	r3, [pc, #352]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b07e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b082:	0c1b      	lsrs	r3, r3, #16
 800b084:	f003 0203 	and.w	r2, r3, #3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800b08c:	4b54      	ldr	r3, [pc, #336]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b08e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b092:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800b09a:	4b51      	ldr	r3, [pc, #324]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b09c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0a0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800b0a8:	4b4d      	ldr	r3, [pc, #308]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800b0b4:	4b4a      	ldr	r3, [pc, #296]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800b0c2:	4b47      	ldr	r3, [pc, #284]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b0c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0c8:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800b0d0:	4b43      	ldr	r3, [pc, #268]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b0d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0d6:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800b0de:	4b40      	ldr	r3, [pc, #256]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0e4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800b0ec:	4b3c      	ldr	r3, [pc, #240]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b0ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0f2:	f003 0203 	and.w	r2, r3, #3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800b0fa:	4b39      	ldr	r3, [pc, #228]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b100:	f003 020c 	and.w	r2, r3, #12
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800b108:	4b35      	ldr	r3, [pc, #212]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b10e:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800b116:	4b32      	ldr	r3, [pc, #200]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b11c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800b124:	4b2e      	ldr	r3, [pc, #184]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b12a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800b132:	4b2b      	ldr	r3, [pc, #172]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b138:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800b140:	4b27      	ldr	r3, [pc, #156]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b146:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800b14e:	4b24      	ldr	r3, [pc, #144]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b154:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b15c:	4b20      	ldr	r3, [pc, #128]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b162:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800b16a:	4b1d      	ldr	r3, [pc, #116]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b170:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800b178:	4b19      	ldr	r3, [pc, #100]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b17e:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800b186:	4b16      	ldr	r3, [pc, #88]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b18c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800b196:	4b12      	ldr	r3, [pc, #72]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b19e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800b1a0:	4b0f      	ldr	r3, [pc, #60]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800b1b0:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b1b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d103      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800b1c4:	e003      	b.n	800b1ce <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1cc:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b1ce:	bf00      	nop
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	00fffff1 	.word	0x00fffff1
 800b1e0:	40023800 	.word	0x40023800

0800b1e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b202:	f040 8086 	bne.w	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b206:	4b8d      	ldr	r3, [pc, #564]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b20c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b214:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b21c:	d03e      	beq.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800b21e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b222:	d073      	beq.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800b224:	2b00      	cmp	r3, #0
 800b226:	d000      	beq.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b228:	e074      	b.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b22a:	4b84      	ldr	r3, [pc, #528]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d108      	bne.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b236:	4b81      	ldr	r3, [pc, #516]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b23e:	4a80      	ldr	r2, [pc, #512]	; (800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800b240:	fbb2 f3f3 	udiv	r3, r2, r3
 800b244:	613b      	str	r3, [r7, #16]
 800b246:	e007      	b.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b248:	4b7c      	ldr	r3, [pc, #496]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b250:	4a7c      	ldr	r2, [pc, #496]	; (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800b252:	fbb2 f3f3 	udiv	r3, r2, r3
 800b256:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b258:	4b78      	ldr	r3, [pc, #480]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b25e:	0e1b      	lsrs	r3, r3, #24
 800b260:	f003 030f 	and.w	r3, r3, #15
 800b264:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b266:	4b75      	ldr	r3, [pc, #468]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b26c:	099b      	lsrs	r3, r3, #6
 800b26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	fb02 f203 	mul.w	r2, r2, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b280:	4b6e      	ldr	r3, [pc, #440]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b286:	0a1b      	lsrs	r3, r3, #8
 800b288:	f003 031f 	and.w	r3, r3, #31
 800b28c:	3301      	adds	r3, #1
 800b28e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	fbb2 f3f3 	udiv	r3, r2, r3
 800b298:	617b      	str	r3, [r7, #20]
        break;
 800b29a:	e03b      	b.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b29c:	4b67      	ldr	r3, [pc, #412]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d108      	bne.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b2a8:	4b64      	ldr	r3, [pc, #400]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2b0:	4a63      	ldr	r2, [pc, #396]	; (800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800b2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b6:	613b      	str	r3, [r7, #16]
 800b2b8:	e007      	b.n	800b2ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b2ba:	4b60      	ldr	r3, [pc, #384]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2c2:	4a60      	ldr	r2, [pc, #384]	; (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800b2c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2c8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b2ca:	4b5c      	ldr	r3, [pc, #368]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2d0:	0e1b      	lsrs	r3, r3, #24
 800b2d2:	f003 030f 	and.w	r3, r3, #15
 800b2d6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b2d8:	4b58      	ldr	r3, [pc, #352]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b2da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2de:	099b      	lsrs	r3, r3, #6
 800b2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	fb02 f203 	mul.w	r2, r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b2f2:	4b52      	ldr	r3, [pc, #328]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2f8:	f003 031f 	and.w	r3, r3, #31
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	fbb2 f3f3 	udiv	r3, r2, r3
 800b308:	617b      	str	r3, [r7, #20]
        break;
 800b30a:	e003      	b.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b30c:	4b4e      	ldr	r3, [pc, #312]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800b30e:	617b      	str	r3, [r7, #20]
        break;
 800b310:	e000      	b.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800b312:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b31a:	f040 8086 	bne.w	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b31e:	4b47      	ldr	r3, [pc, #284]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b324:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b32c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b334:	d03e      	beq.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800b336:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b33a:	d073      	beq.n	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d000      	beq.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b340:	e074      	b.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b342:	4b3e      	ldr	r3, [pc, #248]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d108      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b34e:	4b3b      	ldr	r3, [pc, #236]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b356:	4a3a      	ldr	r2, [pc, #232]	; (800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800b358:	fbb2 f3f3 	udiv	r3, r2, r3
 800b35c:	613b      	str	r3, [r7, #16]
 800b35e:	e007      	b.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b360:	4b36      	ldr	r3, [pc, #216]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b368:	4a36      	ldr	r2, [pc, #216]	; (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800b36a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b36e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b370:	4b32      	ldr	r3, [pc, #200]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b376:	0e1b      	lsrs	r3, r3, #24
 800b378:	f003 030f 	and.w	r3, r3, #15
 800b37c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b37e:	4b2f      	ldr	r3, [pc, #188]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b384:	099b      	lsrs	r3, r3, #6
 800b386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38a:	693a      	ldr	r2, [r7, #16]
 800b38c:	fb02 f203 	mul.w	r2, r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	fbb2 f3f3 	udiv	r3, r2, r3
 800b396:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b398:	4b28      	ldr	r3, [pc, #160]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b39a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b39e:	0a1b      	lsrs	r3, r3, #8
 800b3a0:	f003 031f 	and.w	r3, r3, #31
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3b0:	617b      	str	r3, [r7, #20]
        break;
 800b3b2:	e03b      	b.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b3b4:	4b21      	ldr	r3, [pc, #132]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d108      	bne.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b3c0:	4b1e      	ldr	r3, [pc, #120]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3c8:	4a1d      	ldr	r2, [pc, #116]	; (800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800b3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ce:	613b      	str	r3, [r7, #16]
 800b3d0:	e007      	b.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b3d2:	4b1a      	ldr	r3, [pc, #104]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3da:	4a1a      	ldr	r2, [pc, #104]	; (800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800b3dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3e0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b3e2:	4b16      	ldr	r3, [pc, #88]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b3e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3e8:	0e1b      	lsrs	r3, r3, #24
 800b3ea:	f003 030f 	and.w	r3, r3, #15
 800b3ee:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b3f0:	4b12      	ldr	r3, [pc, #72]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3f6:	099b      	lsrs	r3, r3, #6
 800b3f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fc:	693a      	ldr	r2, [r7, #16]
 800b3fe:	fb02 f203 	mul.w	r2, r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	fbb2 f3f3 	udiv	r3, r2, r3
 800b408:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b40a:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800b40c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b410:	f003 031f 	and.w	r3, r3, #31
 800b414:	3301      	adds	r3, #1
 800b416:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b420:	617b      	str	r3, [r7, #20]
        break;
 800b422:	e003      	b.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b424:	4b08      	ldr	r3, [pc, #32]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800b426:	617b      	str	r3, [r7, #20]
        break;
 800b428:	e000      	b.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800b42a:	bf00      	nop

  return frequency;
 800b42c:	697b      	ldr	r3, [r7, #20]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	371c      	adds	r7, #28
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	40023800 	.word	0x40023800
 800b440:	00f42400 	.word	0x00f42400
 800b444:	017d7840 	.word	0x017d7840
 800b448:	00bb8000 	.word	0x00bb8000

0800b44c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e06b      	b.n	800b536 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	7f5b      	ldrb	r3, [r3, #29]
 800b462:	b2db      	uxtb	r3, r3
 800b464:	2b00      	cmp	r3, #0
 800b466:	d105      	bne.n	800b474 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7f6 fe4a 	bl	8002108 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	22ca      	movs	r2, #202	; 0xca
 800b480:	625a      	str	r2, [r3, #36]	; 0x24
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2253      	movs	r2, #83	; 0x53
 800b488:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fb00 	bl	800ba90 <RTC_EnterInitMode>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d008      	beq.n	800b4a8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	22ff      	movs	r2, #255	; 0xff
 800b49c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2204      	movs	r2, #4
 800b4a2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e046      	b.n	800b536 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	6899      	ldr	r1, [r3, #8]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	4b23      	ldr	r3, [pc, #140]	; (800b540 <HAL_RTC_Init+0xf4>)
 800b4b4:	400b      	ands	r3, r1
 800b4b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6899      	ldr	r1, [r3, #8]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685a      	ldr	r2, [r3, #4]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	431a      	orrs	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	431a      	orrs	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	68d2      	ldr	r2, [r2, #12]
 800b4de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6919      	ldr	r1, [r3, #16]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	041a      	lsls	r2, r3, #16
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	430a      	orrs	r2, r1
 800b4f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68da      	ldr	r2, [r3, #12]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b502:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f022 0208 	bic.w	r2, r2, #8
 800b512:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	699a      	ldr	r2, [r3, #24]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	430a      	orrs	r2, r1
 800b524:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	22ff      	movs	r2, #255	; 0xff
 800b52c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800b534:	2300      	movs	r3, #0
  }
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	ff8fffbf 	.word	0xff8fffbf

0800b544 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b544:	b590      	push	{r4, r7, lr}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	7f1b      	ldrb	r3, [r3, #28]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d101      	bne.n	800b560 <HAL_RTC_SetTime+0x1c>
 800b55c:	2302      	movs	r3, #2
 800b55e:	e0a8      	b.n	800b6b2 <HAL_RTC_SetTime+0x16e>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2201      	movs	r2, #1
 800b564:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2202      	movs	r2, #2
 800b56a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d126      	bne.n	800b5c0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d102      	bne.n	800b586 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2200      	movs	r2, #0
 800b584:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 faac 	bl	800bae8 <RTC_ByteToBcd2>
 800b590:	4603      	mov	r3, r0
 800b592:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	785b      	ldrb	r3, [r3, #1]
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 faa5 	bl	800bae8 <RTC_ByteToBcd2>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800b5a2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	789b      	ldrb	r3, [r3, #2]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 fa9d 	bl	800bae8 <RTC_ByteToBcd2>
 800b5ae:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800b5b0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	7b1b      	ldrb	r3, [r3, #12]
 800b5b8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	617b      	str	r3, [r7, #20]
 800b5be:	e018      	b.n	800b5f2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d102      	bne.n	800b5d4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	785b      	ldrb	r3, [r3, #1]
 800b5de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800b5e0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800b5e6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	7b1b      	ldrb	r3, [r3, #12]
 800b5ec:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	22ca      	movs	r2, #202	; 0xca
 800b5f8:	625a      	str	r2, [r3, #36]	; 0x24
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2253      	movs	r2, #83	; 0x53
 800b600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f000 fa44 	bl	800ba90 <RTC_EnterInitMode>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00b      	beq.n	800b626 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	22ff      	movs	r2, #255	; 0xff
 800b614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2204      	movs	r2, #4
 800b61a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	e045      	b.n	800b6b2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	6979      	ldr	r1, [r7, #20]
 800b62c:	4b23      	ldr	r3, [pc, #140]	; (800b6bc <HAL_RTC_SetTime+0x178>)
 800b62e:	400b      	ands	r3, r1
 800b630:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	689a      	ldr	r2, [r3, #8]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b640:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6899      	ldr	r1, [r3, #8]
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	691a      	ldr	r2, [r3, #16]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	431a      	orrs	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	430a      	orrs	r2, r1
 800b658:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68da      	ldr	r2, [r3, #12]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b668:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	f003 0320 	and.w	r3, r3, #32
 800b674:	2b00      	cmp	r3, #0
 800b676:	d111      	bne.n	800b69c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 f9e1 	bl	800ba40 <HAL_RTC_WaitForSynchro>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00b      	beq.n	800b69c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	22ff      	movs	r2, #255	; 0xff
 800b68a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2204      	movs	r2, #4
 800b690:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	e00a      	b.n	800b6b2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	22ff      	movs	r2, #255	; 0xff
 800b6a2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
  }
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	371c      	adds	r7, #28
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd90      	pop	{r4, r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	007f7f7f 	.word	0x007f7f7f

0800b6c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b6c0:	b590      	push	{r4, r7, lr}
 800b6c2:	b087      	sub	sp, #28
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	7f1b      	ldrb	r3, [r3, #28]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d101      	bne.n	800b6dc <HAL_RTC_SetDate+0x1c>
 800b6d8:	2302      	movs	r3, #2
 800b6da:	e092      	b.n	800b802 <HAL_RTC_SetDate+0x142>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2202      	movs	r2, #2
 800b6e6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d10e      	bne.n	800b70c <HAL_RTC_SetDate+0x4c>
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	785b      	ldrb	r3, [r3, #1]
 800b6f2:	f003 0310 	and.w	r3, r3, #16
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d008      	beq.n	800b70c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	f023 0310 	bic.w	r3, r3, #16
 800b702:	b2db      	uxtb	r3, r3
 800b704:	330a      	adds	r3, #10
 800b706:	b2da      	uxtb	r2, r3
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d11c      	bne.n	800b74c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	78db      	ldrb	r3, [r3, #3]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f9e6 	bl	800bae8 <RTC_ByteToBcd2>
 800b71c:	4603      	mov	r3, r0
 800b71e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	785b      	ldrb	r3, [r3, #1]
 800b724:	4618      	mov	r0, r3
 800b726:	f000 f9df 	bl	800bae8 <RTC_ByteToBcd2>
 800b72a:	4603      	mov	r3, r0
 800b72c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800b72e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	789b      	ldrb	r3, [r3, #2]
 800b734:	4618      	mov	r0, r3
 800b736:	f000 f9d7 	bl	800bae8 <RTC_ByteToBcd2>
 800b73a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800b73c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800b746:	4313      	orrs	r3, r2
 800b748:	617b      	str	r3, [r7, #20]
 800b74a:	e00e      	b.n	800b76a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	78db      	ldrb	r3, [r3, #3]
 800b750:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	785b      	ldrb	r3, [r3, #1]
 800b756:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800b758:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800b75a:	68ba      	ldr	r2, [r7, #8]
 800b75c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800b75e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800b766:	4313      	orrs	r3, r2
 800b768:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	22ca      	movs	r2, #202	; 0xca
 800b770:	625a      	str	r2, [r3, #36]	; 0x24
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2253      	movs	r2, #83	; 0x53
 800b778:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 f988 	bl	800ba90 <RTC_EnterInitMode>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00b      	beq.n	800b79e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	22ff      	movs	r2, #255	; 0xff
 800b78c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2204      	movs	r2, #4
 800b792:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e031      	b.n	800b802 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	6979      	ldr	r1, [r7, #20]
 800b7a4:	4b19      	ldr	r3, [pc, #100]	; (800b80c <HAL_RTC_SetDate+0x14c>)
 800b7a6:	400b      	ands	r3, r1
 800b7a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68da      	ldr	r2, [r3, #12]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	f003 0320 	and.w	r3, r3, #32
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d111      	bne.n	800b7ec <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 f939 	bl	800ba40 <HAL_RTC_WaitForSynchro>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00b      	beq.n	800b7ec <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	22ff      	movs	r2, #255	; 0xff
 800b7da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2204      	movs	r2, #4
 800b7e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e00a      	b.n	800b802 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	22ff      	movs	r2, #255	; 0xff
 800b7f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800b800:	2300      	movs	r3, #0
  }
}
 800b802:	4618      	mov	r0, r3
 800b804:	371c      	adds	r7, #28
 800b806:	46bd      	mov	sp, r7
 800b808:	bd90      	pop	{r4, r7, pc}
 800b80a:	bf00      	nop
 800b80c:	00ffff3f 	.word	0x00ffff3f

0800b810 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b810:	b590      	push	{r4, r7, lr}
 800b812:	b089      	sub	sp, #36	; 0x24
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800b820:	2300      	movs	r3, #0
 800b822:	61fb      	str	r3, [r7, #28]
 800b824:	2300      	movs	r3, #0
 800b826:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	7f1b      	ldrb	r3, [r3, #28]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d101      	bne.n	800b834 <HAL_RTC_SetAlarm+0x24>
 800b830:	2302      	movs	r3, #2
 800b832:	e101      	b.n	800ba38 <HAL_RTC_SetAlarm+0x228>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2201      	movs	r2, #1
 800b838:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2202      	movs	r2, #2
 800b83e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d137      	bne.n	800b8b6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b850:	2b00      	cmp	r3, #0
 800b852:	d102      	bne.n	800b85a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	2200      	movs	r2, #0
 800b858:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 f942 	bl	800bae8 <RTC_ByteToBcd2>
 800b864:	4603      	mov	r3, r0
 800b866:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	785b      	ldrb	r3, [r3, #1]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 f93b 	bl	800bae8 <RTC_ByteToBcd2>
 800b872:	4603      	mov	r3, r0
 800b874:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800b876:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	789b      	ldrb	r3, [r3, #2]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 f933 	bl	800bae8 <RTC_ByteToBcd2>
 800b882:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800b884:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	7b1b      	ldrb	r3, [r3, #12]
 800b88c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800b88e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b898:	4618      	mov	r0, r3
 800b89a:	f000 f925 	bl	800bae8 <RTC_ByteToBcd2>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800b8a2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800b8aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	61fb      	str	r3, [r7, #28]
 800b8b4:	e023      	b.n	800b8fe <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d102      	bne.n	800b8ca <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	785b      	ldrb	r3, [r3, #1]
 800b8d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800b8d6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800b8dc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	7b1b      	ldrb	r3, [r3, #12]
 800b8e2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800b8e4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b8ec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800b8ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800b8f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	685a      	ldr	r2, [r3, #4]
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	69db      	ldr	r3, [r3, #28]
 800b906:	4313      	orrs	r3, r2
 800b908:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	22ca      	movs	r2, #202	; 0xca
 800b910:	625a      	str	r2, [r3, #36]	; 0x24
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2253      	movs	r2, #83	; 0x53
 800b918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b922:	d13f      	bne.n	800b9a4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	689a      	ldr	r2, [r3, #8]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b932:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	689a      	ldr	r2, [r3, #8]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b942:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b944:	f7f9 ff3e 	bl	80057c4 <HAL_GetTick>
 800b948:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800b94a:	e013      	b.n	800b974 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b94c:	f7f9 ff3a 	bl	80057c4 <HAL_GetTick>
 800b950:	4602      	mov	r2, r0
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b95a:	d90b      	bls.n	800b974 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	22ff      	movs	r2, #255	; 0xff
 800b962:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2203      	movs	r2, #3
 800b968:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b970:	2303      	movs	r3, #3
 800b972:	e061      	b.n	800ba38 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	f003 0301 	and.w	r3, r3, #1
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d0e4      	beq.n	800b94c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	69fa      	ldr	r2, [r7, #28]
 800b988:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9a0:	609a      	str	r2, [r3, #8]
 800b9a2:	e03e      	b.n	800ba22 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	689a      	ldr	r2, [r3, #8]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b9b2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	689a      	ldr	r2, [r3, #8]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b9c2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b9c4:	f7f9 fefe 	bl	80057c4 <HAL_GetTick>
 800b9c8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800b9ca:	e013      	b.n	800b9f4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b9cc:	f7f9 fefa 	bl	80057c4 <HAL_GetTick>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b9da:	d90b      	bls.n	800b9f4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	22ff      	movs	r2, #255	; 0xff
 800b9e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2203      	movs	r2, #3
 800b9e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	e021      	b.n	800ba38 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d0e4      	beq.n	800b9cc <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	69fa      	ldr	r2, [r7, #28]
 800ba08:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	689a      	ldr	r2, [r3, #8]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba20:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	22ff      	movs	r2, #255	; 0xff
 800ba28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3724      	adds	r7, #36	; 0x24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd90      	pop	{r4, r7, pc}

0800ba40 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68da      	ldr	r2, [r3, #12]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ba5a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba5c:	f7f9 feb2 	bl	80057c4 <HAL_GetTick>
 800ba60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ba62:	e009      	b.n	800ba78 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ba64:	f7f9 feae 	bl	80057c4 <HAL_GetTick>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba72:	d901      	bls.n	800ba78 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ba74:	2303      	movs	r3, #3
 800ba76:	e007      	b.n	800ba88 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	f003 0320 	and.w	r3, r3, #32
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0ee      	beq.n	800ba64 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d119      	bne.n	800bade <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f04f 32ff 	mov.w	r2, #4294967295
 800bab2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bab4:	f7f9 fe86 	bl	80057c4 <HAL_GetTick>
 800bab8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800baba:	e009      	b.n	800bad0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800babc:	f7f9 fe82 	bl	80057c4 <HAL_GetTick>
 800bac0:	4602      	mov	r2, r0
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	1ad3      	subs	r3, r2, r3
 800bac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800baca:	d901      	bls.n	800bad0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	e007      	b.n	800bae0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bada:	2b00      	cmp	r3, #0
 800badc:	d0ee      	beq.n	800babc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800baf2:	2300      	movs	r3, #0
 800baf4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800baf6:	e005      	b.n	800bb04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	3301      	adds	r3, #1
 800bafc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800bafe:	79fb      	ldrb	r3, [r7, #7]
 800bb00:	3b0a      	subs	r3, #10
 800bb02:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800bb04:	79fb      	ldrb	r3, [r7, #7]
 800bb06:	2b09      	cmp	r3, #9
 800bb08:	d8f6      	bhi.n	800baf8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	011b      	lsls	r3, r3, #4
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	79fb      	ldrb	r3, [r7, #7]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	b2db      	uxtb	r3, r3
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b087      	sub	sp, #28
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	7f1b      	ldrb	r3, [r3, #28]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d101      	bne.n	800bb40 <HAL_RTCEx_SetTimeStamp+0x1c>
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	e03e      	b.n	800bbbe <HAL_RTCEx_SetTimeStamp+0x9a>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2201      	movs	r2, #1
 800bb44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2202      	movs	r2, #2
 800bb4a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	689a      	ldr	r2, [r3, #8]
 800bb52:	4b1e      	ldr	r3, [pc, #120]	; (800bbcc <HAL_RTCEx_SetTimeStamp+0xa8>)
 800bb54:	4013      	ands	r3, r2
 800bb56:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	22ca      	movs	r2, #202	; 0xca
 800bb66:	625a      	str	r2, [r3, #36]	; 0x24
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2253      	movs	r2, #83	; 0x53
 800bb6e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f022 0206 	bic.w	r2, r2, #6
 800bb7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	430a      	orrs	r2, r1
 800bb8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	697a      	ldr	r2, [r7, #20]
 800bb96:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	689a      	ldr	r2, [r3, #8]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bba6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	22ff      	movs	r2, #255	; 0xff
 800bbae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	fffff7f7 	.word	0xfffff7f7

0800bbd0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b088      	sub	sp, #32
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d101      	bne.n	800bbee <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	e149      	b.n	800be82 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d106      	bne.n	800bc08 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7f6 fd66 	bl	80026d4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 fa57 	bl	800c0c4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d007      	beq.n	800bc2e <HAL_SAI_Init+0x5e>
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d302      	bcc.n	800bc28 <HAL_SAI_Init+0x58>
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d006      	beq.n	800bc34 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800bc26:	e008      	b.n	800bc3a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	61fb      	str	r3, [r7, #28]
      break;
 800bc2c:	e005      	b.n	800bc3a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bc2e:	2310      	movs	r3, #16
 800bc30:	61fb      	str	r3, [r7, #28]
      break;
 800bc32:	e002      	b.n	800bc3a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bc34:	2320      	movs	r3, #32
 800bc36:	61fb      	str	r3, [r7, #28]
      break;
 800bc38:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	d81d      	bhi.n	800bc7e <HAL_SAI_Init+0xae>
 800bc42:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <HAL_SAI_Init+0x78>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc59 	.word	0x0800bc59
 800bc4c:	0800bc5f 	.word	0x0800bc5f
 800bc50:	0800bc67 	.word	0x0800bc67
 800bc54:	0800bc6f 	.word	0x0800bc6f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	617b      	str	r3, [r7, #20]
      }
      break;
 800bc5c:	e010      	b.n	800bc80 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800bc5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc62:	617b      	str	r3, [r7, #20]
      }
      break;
 800bc64:	e00c      	b.n	800bc80 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800bc66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc6a:	617b      	str	r3, [r7, #20]
      }
      break;
 800bc6c:	e008      	b.n	800bc80 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800bc6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc72:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	f043 0301 	orr.w	r3, r3, #1
 800bc7a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800bc7c:	e000      	b.n	800bc80 <HAL_SAI_Init+0xb0>
  default:
    break;
 800bc7e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a81      	ldr	r2, [pc, #516]	; (800be8c <HAL_SAI_Init+0x2bc>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d004      	beq.n	800bc94 <HAL_SAI_Init+0xc4>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a80      	ldr	r2, [pc, #512]	; (800be90 <HAL_SAI_Init+0x2c0>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d103      	bne.n	800bc9c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800bc94:	4a7f      	ldr	r2, [pc, #508]	; (800be94 <HAL_SAI_Init+0x2c4>)
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	6013      	str	r3, [r2, #0]
 800bc9a:	e002      	b.n	800bca2 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bc9c:	4a7e      	ldr	r2, [pc, #504]	; (800be98 <HAL_SAI_Init+0x2c8>)
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	69db      	ldr	r3, [r3, #28]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d043      	beq.n	800bd32 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a76      	ldr	r2, [pc, #472]	; (800be8c <HAL_SAI_Init+0x2bc>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d004      	beq.n	800bcc2 <HAL_SAI_Init+0xf2>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a74      	ldr	r2, [pc, #464]	; (800be90 <HAL_SAI_Init+0x2c0>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d104      	bne.n	800bccc <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bcc2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bcc6:	f7ff fa8d 	bl	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800bcca:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a72      	ldr	r2, [pc, #456]	; (800be9c <HAL_SAI_Init+0x2cc>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d004      	beq.n	800bce0 <HAL_SAI_Init+0x110>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a71      	ldr	r2, [pc, #452]	; (800bea0 <HAL_SAI_Init+0x2d0>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d104      	bne.n	800bcea <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bce0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bce4:	f7ff fa7e 	bl	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800bce8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800bcea:	693a      	ldr	r2, [r7, #16]
 800bcec:	4613      	mov	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	4413      	add	r3, r2
 800bcf2:	005b      	lsls	r3, r3, #1
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	69db      	ldr	r3, [r3, #28]
 800bcfa:	025b      	lsls	r3, r3, #9
 800bcfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd00:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	4a67      	ldr	r2, [pc, #412]	; (800bea4 <HAL_SAI_Init+0x2d4>)
 800bd06:	fba2 2303 	umull	r2, r3, r2, r3
 800bd0a:	08da      	lsrs	r2, r3, #3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800bd10:	68f9      	ldr	r1, [r7, #12]
 800bd12:	4b64      	ldr	r3, [pc, #400]	; (800bea4 <HAL_SAI_Init+0x2d4>)
 800bd14:	fba3 2301 	umull	r2, r3, r3, r1
 800bd18:	08da      	lsrs	r2, r3, #3
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	005b      	lsls	r3, r3, #1
 800bd22:	1aca      	subs	r2, r1, r3
 800bd24:	2a08      	cmp	r2, #8
 800bd26:	d904      	bls.n	800bd32 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6a1b      	ldr	r3, [r3, #32]
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d003      	beq.n	800bd42 <HAL_SAI_Init+0x172>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	2b02      	cmp	r3, #2
 800bd40:	d109      	bne.n	800bd56 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d101      	bne.n	800bd4e <HAL_SAI_Init+0x17e>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e001      	b.n	800bd52 <HAL_SAI_Init+0x182>
 800bd4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd52:	61bb      	str	r3, [r7, #24]
 800bd54:	e008      	b.n	800bd68 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d102      	bne.n	800bd64 <HAL_SAI_Init+0x194>
 800bd5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd62:	e000      	b.n	800bd66 <HAL_SAI_Init+0x196>
 800bd64:	2300      	movs	r3, #0
 800bd66:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6819      	ldr	r1, [r3, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	4b4d      	ldr	r3, [pc, #308]	; (800bea8 <HAL_SAI_Init+0x2d8>)
 800bd74:	400b      	ands	r3, r1
 800bd76:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6819      	ldr	r1, [r3, #0]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd86:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bd8c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd92:	431a      	orrs	r2, r3
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800bda0:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bdac:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	051b      	lsls	r3, r3, #20
 800bdb4:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	6859      	ldr	r1, [r3, #4]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	4b38      	ldr	r3, [pc, #224]	; (800beac <HAL_SAI_Init+0x2dc>)
 800bdca:	400b      	ands	r3, r1
 800bdcc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	6859      	ldr	r1, [r3, #4]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	699a      	ldr	r2, [r3, #24]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bddc:	431a      	orrs	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde2:	431a      	orrs	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	430a      	orrs	r2, r1
 800bdea:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	6899      	ldr	r1, [r3, #8]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	4b2e      	ldr	r3, [pc, #184]	; (800beb0 <HAL_SAI_Init+0x2e0>)
 800bdf8:	400b      	ands	r3, r1
 800bdfa:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6899      	ldr	r1, [r3, #8]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be06:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800be0c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800be12:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800be18:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be1e:	3b01      	subs	r3, #1
 800be20:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800be22:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	430a      	orrs	r2, r1
 800be2a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68d9      	ldr	r1, [r3, #12]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	f24f 0320 	movw	r3, #61472	; 0xf020
 800be3a:	400b      	ands	r3, r1
 800be3c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68d9      	ldr	r1, [r3, #12]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be4c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be52:	041b      	lsls	r3, r3, #16
 800be54:	431a      	orrs	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be5a:	3b01      	subs	r3, #1
 800be5c:	021b      	lsls	r3, r3, #8
 800be5e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	430a      	orrs	r2, r1
 800be66:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3720      	adds	r7, #32
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	40015804 	.word	0x40015804
 800be90:	40015824 	.word	0x40015824
 800be94:	40015800 	.word	0x40015800
 800be98:	40015c00 	.word	0x40015c00
 800be9c:	40015c04 	.word	0x40015c04
 800bea0:	40015c24 	.word	0x40015c24
 800bea4:	cccccccd 	.word	0xcccccccd
 800bea8:	ff05c010 	.word	0xff05c010
 800beac:	ffff1ff0 	.word	0xffff1ff0
 800beb0:	fff88000 	.word	0xfff88000

0800beb4 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d101      	bne.n	800bec6 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e027      	b.n	800bf16 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2202      	movs	r2, #2
 800beca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2200      	movs	r2, #0
 800bed4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f04f 32ff 	mov.w	r2, #4294967295
 800bede:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 f8ef 	bl	800c0c4 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	685a      	ldr	r2, [r3, #4]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f042 0208 	orr.w	r2, r2, #8
 800bef4:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7f6 fc56 	bl	80027a8 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	80fb      	strh	r3, [r7, #6]

  if((pData == NULL) || (Size == 0))
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <HAL_SAI_Receive_DMA+0x1a>
 800bf34:	88fb      	ldrh	r3, [r7, #6]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d101      	bne.n	800bf3e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e074      	b.n	800c028 <HAL_SAI_Receive_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d16d      	bne.n	800c026 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d101      	bne.n	800bf58 <HAL_SAI_Receive_DMA+0x38>
 800bf54:	2302      	movs	r3, #2
 800bf56:	e067      	b.n	800c028 <HAL_SAI_Receive_DMA+0x108>
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	88fa      	ldrh	r2, [r7, #6]
 800bf6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	88fa      	ldrh	r2, [r7, #6]
 800bf72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2222      	movs	r2, #34	; 0x22
 800bf82:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf8a:	4a29      	ldr	r2, [pc, #164]	; (800c030 <HAL_SAI_Receive_DMA+0x110>)
 800bf8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf92:	4a28      	ldr	r2, [pc, #160]	; (800c034 <HAL_SAI_Receive_DMA+0x114>)
 800bf94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf9a:	4a27      	ldr	r2, [pc, #156]	; (800c038 <HAL_SAI_Receive_DMA+0x118>)
 800bf9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	331c      	adds	r3, #28
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bfbe:	f7fa fa09 	bl	80063d4 <HAL_DMA_Start_IT>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d005      	beq.n	800bfd4 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e029      	b.n	800c028 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d107      	bne.n	800bff2 <HAL_SAI_Receive_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bff0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bff2:	2100      	movs	r1, #0
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f000 f82f 	bl	800c058 <SAI_InterruptFlag>
 800bffa:	4601      	mov	r1, r0
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	691a      	ldr	r2, [r3, #16]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	430a      	orrs	r2, r1
 800c008:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c018:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c022:	2300      	movs	r3, #0
 800c024:	e000      	b.n	800c028 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800c026:	2302      	movs	r3, #2
  }
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	0800c191 	.word	0x0800c191
 800c034:	0800c131 	.word	0x0800c131
 800c038:	0800c1ad 	.word	0x0800c1ad

0800c03c <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c04a:	b2db      	uxtb	r3, r3
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800c062:	2301      	movs	r3, #1
 800c064:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d103      	bne.n	800c074 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f043 0308 	orr.w	r3, r3, #8
 800c072:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c078:	2b08      	cmp	r3, #8
 800c07a:	d10b      	bne.n	800c094 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c080:	2b03      	cmp	r3, #3
 800c082:	d003      	beq.n	800c08c <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d103      	bne.n	800c094 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f043 0310 	orr.w	r3, r3, #16
 800c092:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	2b03      	cmp	r3, #3
 800c09a:	d003      	beq.n	800c0a4 <SAI_InterruptFlag+0x4c>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d104      	bne.n	800c0ae <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	e003      	b.n	800c0b6 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f043 0304 	orr.w	r3, r3, #4
 800c0b4:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c0c4:	b490      	push	{r4, r7}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800c0cc:	4b16      	ldr	r3, [pc, #88]	; (800c128 <SAI_Disable+0x64>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a16      	ldr	r2, [pc, #88]	; (800c12c <SAI_Disable+0x68>)
 800c0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d6:	0b1b      	lsrs	r3, r3, #12
 800c0d8:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c0ec:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c0ee:	4623      	mov	r3, r4
 800c0f0:	1e5c      	subs	r4, r3, #1
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d10a      	bne.n	800c10c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800c106:	2303      	movs	r3, #3
 800c108:	73fb      	strb	r3, [r7, #15]
      break;
 800c10a:	e006      	b.n	800c11a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1e9      	bne.n	800c0ee <SAI_Disable+0x2a>

  return status;
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3710      	adds	r7, #16
 800c120:	46bd      	mov	sp, r7
 800c122:	bc90      	pop	{r4, r7}
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	20000000 	.word	0x20000000
 800c12c:	95cbec1b 	.word	0x95cbec1b

0800c130 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	69db      	ldr	r3, [r3, #28]
 800c142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c146:	d01c      	beq.n	800c182 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c156:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c160:	2100      	movs	r1, #0
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f7ff ff78 	bl	800c058 <SAI_InterruptFlag>
 800c168:	4603      	mov	r3, r0
 800c16a:	43d9      	mvns	r1, r3
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	691a      	ldr	r2, [r3, #16]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	400a      	ands	r2, r1
 800c178:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2201      	movs	r2, #1
 800c17e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f7f8 fafe 	bl	8004784 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c188:	bf00      	nop
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c19c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f7f8 fafa 	bl	8004798 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c1a4:	bf00      	nop
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b8:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d004      	beq.n	800c1de <SAI_DMAError+0x32>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d112      	bne.n	800c204 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c1ec:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f7ff ff68 	bl	800c0c4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f7f8 f8df 	bl	80043c8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800c20a:	bf00      	nop
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800c212:	b580      	push	{r7, lr}
 800c214:	b082      	sub	sp, #8
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c222:	2301      	movs	r3, #1
 800c224:	e025      	b.n	800c272 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d106      	bne.n	800c240 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7f6 fa40 	bl	80026c0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2202      	movs	r2, #2
 800c244:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	3304      	adds	r3, #4
 800c250:	4619      	mov	r1, r3
 800c252:	4610      	mov	r0, r2
 800c254:	f001 fd58 	bl	800dd08 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6818      	ldr	r0, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	461a      	mov	r2, r3
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	f001 fdc2 	bl	800ddec <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	60f8      	str	r0, [r7, #12]
 800c282:	60b9      	str	r1, [r7, #8]
 800c284:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d101      	bne.n	800c296 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800c292:	2302      	movs	r3, #2
 800c294:	e018      	b.n	800c2c8 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2202      	movs	r2, #2
 800c29a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	68b9      	ldr	r1, [r7, #8]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f001 fe20 	bl	800deec <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d104      	bne.n	800c2be <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2205      	movs	r2, #5
 800c2b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800c2bc:	e003      	b.n	800c2c6 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2b02      	cmp	r3, #2
 800c2e4:	d101      	bne.n	800c2ea <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800c2e6:	2302      	movs	r3, #2
 800c2e8:	e00e      	b.n	800c308 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2202      	movs	r2, #2
 800c2ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f001 fe18 	bl	800df2e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2201      	movs	r2, #1
 800c302:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800c31e:	2301      	movs	r3, #1
 800c320:	e04c      	b.n	800c3bc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d106      	bne.n	800c33c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7f5 ff00 	bl	800213c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2202      	movs	r2, #2
 800c340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f022 0203 	bic.w	r2, r2, #3
 800c352:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	4b19      	ldr	r3, [pc, #100]	; (800c3c4 <HAL_SPDIFRX_Init+0xb4>)
 800c360:	4013      	ands	r3, r2
 800c362:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800c36c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800c372:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800c378:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800c37e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800c384:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800c38a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800c390:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800c396:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800c39c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	fff88407 	.word	0xfff88407

0800c3c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e01d      	b.n	800c416 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d106      	bne.n	800c3f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7f5 fee6 	bl	80021c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2202      	movs	r2, #2
 800c3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	3304      	adds	r3, #4
 800c404:	4619      	mov	r1, r3
 800c406:	4610      	mov	r0, r2
 800c408:	f000 fb78 	bl	800cafc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
	...

0800c420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	68da      	ldr	r2, [r3, #12]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f042 0201 	orr.w	r2, r2, #1
 800c436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	689a      	ldr	r2, [r3, #8]
 800c43e:	4b0c      	ldr	r3, [pc, #48]	; (800c470 <HAL_TIM_Base_Start_IT+0x50>)
 800c440:	4013      	ands	r3, r2
 800c442:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2b06      	cmp	r3, #6
 800c448:	d00b      	beq.n	800c462 <HAL_TIM_Base_Start_IT+0x42>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c450:	d007      	beq.n	800c462 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f042 0201 	orr.w	r2, r2, #1
 800c460:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3714      	adds	r7, #20
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	00010007 	.word	0x00010007

0800c474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d101      	bne.n	800c486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	e01d      	b.n	800c4c2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d106      	bne.n	800c4a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f7f5 fefe 	bl	800229c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2202      	movs	r2, #2
 800c4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	4610      	mov	r0, r2
 800c4b4:	f000 fb22 	bl	800cafc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b082      	sub	sp, #8
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	691b      	ldr	r3, [r3, #16]
 800c4d8:	f003 0302 	and.w	r3, r3, #2
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	d122      	bne.n	800c526 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f003 0302 	and.w	r3, r3, #2
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d11b      	bne.n	800c526 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f06f 0202 	mvn.w	r2, #2
 800c4f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	f003 0303 	and.w	r3, r3, #3
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d003      	beq.n	800c514 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fad7 	bl	800cac0 <HAL_TIM_IC_CaptureCallback>
 800c512:	e005      	b.n	800c520 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 fac9 	bl	800caac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fada 	bl	800cad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	f003 0304 	and.w	r3, r3, #4
 800c530:	2b04      	cmp	r3, #4
 800c532:	d122      	bne.n	800c57a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	f003 0304 	and.w	r3, r3, #4
 800c53e:	2b04      	cmp	r3, #4
 800c540:	d11b      	bne.n	800c57a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f06f 0204 	mvn.w	r2, #4
 800c54a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2202      	movs	r2, #2
 800c550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d003      	beq.n	800c568 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 faad 	bl	800cac0 <HAL_TIM_IC_CaptureCallback>
 800c566:	e005      	b.n	800c574 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fa9f 	bl	800caac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fab0 	bl	800cad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	f003 0308 	and.w	r3, r3, #8
 800c584:	2b08      	cmp	r3, #8
 800c586:	d122      	bne.n	800c5ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	f003 0308 	and.w	r3, r3, #8
 800c592:	2b08      	cmp	r3, #8
 800c594:	d11b      	bne.n	800c5ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f06f 0208 	mvn.w	r2, #8
 800c59e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2204      	movs	r2, #4
 800c5a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	69db      	ldr	r3, [r3, #28]
 800c5ac:	f003 0303 	and.w	r3, r3, #3
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d003      	beq.n	800c5bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fa83 	bl	800cac0 <HAL_TIM_IC_CaptureCallback>
 800c5ba:	e005      	b.n	800c5c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fa75 	bl	800caac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fa86 	bl	800cad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	f003 0310 	and.w	r3, r3, #16
 800c5d8:	2b10      	cmp	r3, #16
 800c5da:	d122      	bne.n	800c622 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	f003 0310 	and.w	r3, r3, #16
 800c5e6:	2b10      	cmp	r3, #16
 800c5e8:	d11b      	bne.n	800c622 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f06f 0210 	mvn.w	r2, #16
 800c5f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2208      	movs	r2, #8
 800c5f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	69db      	ldr	r3, [r3, #28]
 800c600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c604:	2b00      	cmp	r3, #0
 800c606:	d003      	beq.n	800c610 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fa59 	bl	800cac0 <HAL_TIM_IC_CaptureCallback>
 800c60e:	e005      	b.n	800c61c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fa4b 	bl	800caac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fa5c 	bl	800cad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d10e      	bne.n	800c64e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d107      	bne.n	800c64e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f06f 0201 	mvn.w	r2, #1
 800c646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7f5 f9b1 	bl	80019b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c658:	2b80      	cmp	r3, #128	; 0x80
 800c65a:	d10e      	bne.n	800c67a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c666:	2b80      	cmp	r3, #128	; 0x80
 800c668:	d107      	bne.n	800c67a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 feef 	bl	800d458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c688:	d10e      	bne.n	800c6a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c694:	2b80      	cmp	r3, #128	; 0x80
 800c696:	d107      	bne.n	800c6a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c6a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 fee2 	bl	800d46c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6b2:	2b40      	cmp	r3, #64	; 0x40
 800c6b4:	d10e      	bne.n	800c6d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c0:	2b40      	cmp	r3, #64	; 0x40
 800c6c2:	d107      	bne.n	800c6d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c6cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fa0a 	bl	800cae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	f003 0320 	and.w	r3, r3, #32
 800c6de:	2b20      	cmp	r3, #32
 800c6e0:	d10e      	bne.n	800c700 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	f003 0320 	and.w	r3, r3, #32
 800c6ec:	2b20      	cmp	r3, #32
 800c6ee:	d107      	bne.n	800c700 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f06f 0220 	mvn.w	r2, #32
 800c6f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fea2 	bl	800d444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c700:	bf00      	nop
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d101      	bne.n	800c722 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c71e:	2302      	movs	r3, #2
 800c720:	e105      	b.n	800c92e <HAL_TIM_PWM_ConfigChannel+0x226>
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2201      	movs	r2, #1
 800c726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2202      	movs	r2, #2
 800c72e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b14      	cmp	r3, #20
 800c736:	f200 80f0 	bhi.w	800c91a <HAL_TIM_PWM_ConfigChannel+0x212>
 800c73a:	a201      	add	r2, pc, #4	; (adr r2, 800c740 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c740:	0800c795 	.word	0x0800c795
 800c744:	0800c91b 	.word	0x0800c91b
 800c748:	0800c91b 	.word	0x0800c91b
 800c74c:	0800c91b 	.word	0x0800c91b
 800c750:	0800c7d5 	.word	0x0800c7d5
 800c754:	0800c91b 	.word	0x0800c91b
 800c758:	0800c91b 	.word	0x0800c91b
 800c75c:	0800c91b 	.word	0x0800c91b
 800c760:	0800c817 	.word	0x0800c817
 800c764:	0800c91b 	.word	0x0800c91b
 800c768:	0800c91b 	.word	0x0800c91b
 800c76c:	0800c91b 	.word	0x0800c91b
 800c770:	0800c857 	.word	0x0800c857
 800c774:	0800c91b 	.word	0x0800c91b
 800c778:	0800c91b 	.word	0x0800c91b
 800c77c:	0800c91b 	.word	0x0800c91b
 800c780:	0800c899 	.word	0x0800c899
 800c784:	0800c91b 	.word	0x0800c91b
 800c788:	0800c91b 	.word	0x0800c91b
 800c78c:	0800c91b 	.word	0x0800c91b
 800c790:	0800c8d9 	.word	0x0800c8d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	68b9      	ldr	r1, [r7, #8]
 800c79a:	4618      	mov	r0, r3
 800c79c:	f000 fa4e 	bl	800cc3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	699a      	ldr	r2, [r3, #24]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f042 0208 	orr.w	r2, r2, #8
 800c7ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	699a      	ldr	r2, [r3, #24]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f022 0204 	bic.w	r2, r2, #4
 800c7be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	6999      	ldr	r1, [r3, #24]
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	691a      	ldr	r2, [r3, #16]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	430a      	orrs	r2, r1
 800c7d0:	619a      	str	r2, [r3, #24]
      break;
 800c7d2:	e0a3      	b.n	800c91c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68b9      	ldr	r1, [r7, #8]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 faa0 	bl	800cd20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	699a      	ldr	r2, [r3, #24]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	699a      	ldr	r2, [r3, #24]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6999      	ldr	r1, [r3, #24]
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	021a      	lsls	r2, r3, #8
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	430a      	orrs	r2, r1
 800c812:	619a      	str	r2, [r3, #24]
      break;
 800c814:	e082      	b.n	800c91c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68b9      	ldr	r1, [r7, #8]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f000 faf7 	bl	800ce10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	69da      	ldr	r2, [r3, #28]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f042 0208 	orr.w	r2, r2, #8
 800c830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69da      	ldr	r2, [r3, #28]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f022 0204 	bic.w	r2, r2, #4
 800c840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	69d9      	ldr	r1, [r3, #28]
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	691a      	ldr	r2, [r3, #16]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	430a      	orrs	r2, r1
 800c852:	61da      	str	r2, [r3, #28]
      break;
 800c854:	e062      	b.n	800c91c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	68b9      	ldr	r1, [r7, #8]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 fb4d 	bl	800cefc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	69da      	ldr	r2, [r3, #28]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	69da      	ldr	r2, [r3, #28]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	69d9      	ldr	r1, [r3, #28]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	021a      	lsls	r2, r3, #8
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	430a      	orrs	r2, r1
 800c894:	61da      	str	r2, [r3, #28]
      break;
 800c896:	e041      	b.n	800c91c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68b9      	ldr	r1, [r7, #8]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 fb84 	bl	800cfac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f042 0208 	orr.w	r2, r2, #8
 800c8b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f022 0204 	bic.w	r2, r2, #4
 800c8c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	691a      	ldr	r2, [r3, #16]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c8d6:	e021      	b.n	800c91c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68b9      	ldr	r1, [r7, #8]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f000 fbb6 	bl	800d050 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	021a      	lsls	r2, r3, #8
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	430a      	orrs	r2, r1
 800c916:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c918:	e000      	b.n	800c91c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800c91a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2200      	movs	r2, #0
 800c928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop

0800c938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d101      	bne.n	800c950 <HAL_TIM_ConfigClockSource+0x18>
 800c94c:	2302      	movs	r3, #2
 800c94e:	e0a6      	b.n	800ca9e <HAL_TIM_ConfigClockSource+0x166>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2202      	movs	r2, #2
 800c95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	4b4f      	ldr	r3, [pc, #316]	; (800caa8 <HAL_TIM_ConfigClockSource+0x170>)
 800c96c:	4013      	ands	r3, r2
 800c96e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c976:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b40      	cmp	r3, #64	; 0x40
 800c986:	d067      	beq.n	800ca58 <HAL_TIM_ConfigClockSource+0x120>
 800c988:	2b40      	cmp	r3, #64	; 0x40
 800c98a:	d80b      	bhi.n	800c9a4 <HAL_TIM_ConfigClockSource+0x6c>
 800c98c:	2b10      	cmp	r3, #16
 800c98e:	d073      	beq.n	800ca78 <HAL_TIM_ConfigClockSource+0x140>
 800c990:	2b10      	cmp	r3, #16
 800c992:	d802      	bhi.n	800c99a <HAL_TIM_ConfigClockSource+0x62>
 800c994:	2b00      	cmp	r3, #0
 800c996:	d06f      	beq.n	800ca78 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c998:	e078      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c99a:	2b20      	cmp	r3, #32
 800c99c:	d06c      	beq.n	800ca78 <HAL_TIM_ConfigClockSource+0x140>
 800c99e:	2b30      	cmp	r3, #48	; 0x30
 800c9a0:	d06a      	beq.n	800ca78 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c9a2:	e073      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c9a4:	2b70      	cmp	r3, #112	; 0x70
 800c9a6:	d00d      	beq.n	800c9c4 <HAL_TIM_ConfigClockSource+0x8c>
 800c9a8:	2b70      	cmp	r3, #112	; 0x70
 800c9aa:	d804      	bhi.n	800c9b6 <HAL_TIM_ConfigClockSource+0x7e>
 800c9ac:	2b50      	cmp	r3, #80	; 0x50
 800c9ae:	d033      	beq.n	800ca18 <HAL_TIM_ConfigClockSource+0xe0>
 800c9b0:	2b60      	cmp	r3, #96	; 0x60
 800c9b2:	d041      	beq.n	800ca38 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c9b4:	e06a      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c9b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9ba:	d066      	beq.n	800ca8a <HAL_TIM_ConfigClockSource+0x152>
 800c9bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9c0:	d017      	beq.n	800c9f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c9c2:	e063      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6818      	ldr	r0, [r3, #0]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	6899      	ldr	r1, [r3, #8]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	685a      	ldr	r2, [r3, #4]
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	f000 fc0a 	bl	800d1ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c9e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	609a      	str	r2, [r3, #8]
      break;
 800c9f0:	e04c      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6818      	ldr	r0, [r3, #0]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	6899      	ldr	r1, [r3, #8]
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	685a      	ldr	r2, [r3, #4]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	f000 fbf3 	bl	800d1ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	689a      	ldr	r2, [r3, #8]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca14:	609a      	str	r2, [r3, #8]
      break;
 800ca16:	e039      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6818      	ldr	r0, [r3, #0]
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	6859      	ldr	r1, [r3, #4]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	461a      	mov	r2, r3
 800ca26:	f000 fb67 	bl	800d0f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2150      	movs	r1, #80	; 0x50
 800ca30:	4618      	mov	r0, r3
 800ca32:	f000 fbc0 	bl	800d1b6 <TIM_ITRx_SetConfig>
      break;
 800ca36:	e029      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6818      	ldr	r0, [r3, #0]
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	6859      	ldr	r1, [r3, #4]
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	461a      	mov	r2, r3
 800ca46:	f000 fb86 	bl	800d156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2160      	movs	r1, #96	; 0x60
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 fbb0 	bl	800d1b6 <TIM_ITRx_SetConfig>
      break;
 800ca56:	e019      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6818      	ldr	r0, [r3, #0]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	6859      	ldr	r1, [r3, #4]
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	461a      	mov	r2, r3
 800ca66:	f000 fb47 	bl	800d0f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2140      	movs	r1, #64	; 0x40
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 fba0 	bl	800d1b6 <TIM_ITRx_SetConfig>
      break;
 800ca76:	e009      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4619      	mov	r1, r3
 800ca82:	4610      	mov	r0, r2
 800ca84:	f000 fb97 	bl	800d1b6 <TIM_ITRx_SetConfig>
      break;
 800ca88:	e000      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ca8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca9c:	2300      	movs	r3, #0
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	fffeff88 	.word	0xfffeff88

0800caac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a40      	ldr	r2, [pc, #256]	; (800cc10 <TIM_Base_SetConfig+0x114>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d013      	beq.n	800cb3c <TIM_Base_SetConfig+0x40>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb1a:	d00f      	beq.n	800cb3c <TIM_Base_SetConfig+0x40>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a3d      	ldr	r2, [pc, #244]	; (800cc14 <TIM_Base_SetConfig+0x118>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d00b      	beq.n	800cb3c <TIM_Base_SetConfig+0x40>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a3c      	ldr	r2, [pc, #240]	; (800cc18 <TIM_Base_SetConfig+0x11c>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d007      	beq.n	800cb3c <TIM_Base_SetConfig+0x40>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a3b      	ldr	r2, [pc, #236]	; (800cc1c <TIM_Base_SetConfig+0x120>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d003      	beq.n	800cb3c <TIM_Base_SetConfig+0x40>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a3a      	ldr	r2, [pc, #232]	; (800cc20 <TIM_Base_SetConfig+0x124>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d108      	bne.n	800cb4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a2f      	ldr	r2, [pc, #188]	; (800cc10 <TIM_Base_SetConfig+0x114>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d02b      	beq.n	800cbae <TIM_Base_SetConfig+0xb2>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb5c:	d027      	beq.n	800cbae <TIM_Base_SetConfig+0xb2>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a2c      	ldr	r2, [pc, #176]	; (800cc14 <TIM_Base_SetConfig+0x118>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d023      	beq.n	800cbae <TIM_Base_SetConfig+0xb2>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a2b      	ldr	r2, [pc, #172]	; (800cc18 <TIM_Base_SetConfig+0x11c>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d01f      	beq.n	800cbae <TIM_Base_SetConfig+0xb2>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a2a      	ldr	r2, [pc, #168]	; (800cc1c <TIM_Base_SetConfig+0x120>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d01b      	beq.n	800cbae <TIM_Base_SetConfig+0xb2>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a29      	ldr	r2, [pc, #164]	; (800cc20 <TIM_Base_SetConfig+0x124>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d017      	beq.n	800cbae <TIM_Base_SetConfig+0xb2>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a28      	ldr	r2, [pc, #160]	; (800cc24 <TIM_Base_SetConfig+0x128>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d013      	beq.n	800cbae <TIM_Base_SetConfig+0xb2>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a27      	ldr	r2, [pc, #156]	; (800cc28 <TIM_Base_SetConfig+0x12c>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d00f      	beq.n	800cbae <TIM_Base_SetConfig+0xb2>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a26      	ldr	r2, [pc, #152]	; (800cc2c <TIM_Base_SetConfig+0x130>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d00b      	beq.n	800cbae <TIM_Base_SetConfig+0xb2>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a25      	ldr	r2, [pc, #148]	; (800cc30 <TIM_Base_SetConfig+0x134>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d007      	beq.n	800cbae <TIM_Base_SetConfig+0xb2>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a24      	ldr	r2, [pc, #144]	; (800cc34 <TIM_Base_SetConfig+0x138>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d003      	beq.n	800cbae <TIM_Base_SetConfig+0xb2>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a23      	ldr	r2, [pc, #140]	; (800cc38 <TIM_Base_SetConfig+0x13c>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d108      	bne.n	800cbc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	695b      	ldr	r3, [r3, #20]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	68fa      	ldr	r2, [r7, #12]
 800cbd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	689a      	ldr	r2, [r3, #8]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4a0a      	ldr	r2, [pc, #40]	; (800cc10 <TIM_Base_SetConfig+0x114>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d003      	beq.n	800cbf4 <TIM_Base_SetConfig+0xf8>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	4a0c      	ldr	r2, [pc, #48]	; (800cc20 <TIM_Base_SetConfig+0x124>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d103      	bne.n	800cbfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	691a      	ldr	r2, [r3, #16]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	615a      	str	r2, [r3, #20]
}
 800cc02:	bf00      	nop
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	40010000 	.word	0x40010000
 800cc14:	40000400 	.word	0x40000400
 800cc18:	40000800 	.word	0x40000800
 800cc1c:	40000c00 	.word	0x40000c00
 800cc20:	40010400 	.word	0x40010400
 800cc24:	40014000 	.word	0x40014000
 800cc28:	40014400 	.word	0x40014400
 800cc2c:	40014800 	.word	0x40014800
 800cc30:	40001800 	.word	0x40001800
 800cc34:	40001c00 	.word	0x40001c00
 800cc38:	40002000 	.word	0x40002000

0800cc3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b087      	sub	sp, #28
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6a1b      	ldr	r3, [r3, #32]
 800cc4a:	f023 0201 	bic.w	r2, r3, #1
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6a1b      	ldr	r3, [r3, #32]
 800cc56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	4b2b      	ldr	r3, [pc, #172]	; (800cd14 <TIM_OC1_SetConfig+0xd8>)
 800cc68:	4013      	ands	r3, r2
 800cc6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f023 0303 	bic.w	r3, r3, #3
 800cc72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68fa      	ldr	r2, [r7, #12]
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	f023 0302 	bic.w	r3, r3, #2
 800cc84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	689b      	ldr	r3, [r3, #8]
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a21      	ldr	r2, [pc, #132]	; (800cd18 <TIM_OC1_SetConfig+0xdc>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d003      	beq.n	800cca0 <TIM_OC1_SetConfig+0x64>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a20      	ldr	r2, [pc, #128]	; (800cd1c <TIM_OC1_SetConfig+0xe0>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d10c      	bne.n	800ccba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	f023 0308 	bic.w	r3, r3, #8
 800cca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	697a      	ldr	r2, [r7, #20]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f023 0304 	bic.w	r3, r3, #4
 800ccb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a16      	ldr	r2, [pc, #88]	; (800cd18 <TIM_OC1_SetConfig+0xdc>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d003      	beq.n	800ccca <TIM_OC1_SetConfig+0x8e>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a15      	ldr	r2, [pc, #84]	; (800cd1c <TIM_OC1_SetConfig+0xe0>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d111      	bne.n	800ccee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ccd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	695b      	ldr	r3, [r3, #20]
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	4313      	orrs	r3, r2
 800cce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	699b      	ldr	r3, [r3, #24]
 800cce8:	693a      	ldr	r2, [r7, #16]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	693a      	ldr	r2, [r7, #16]
 800ccf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	685a      	ldr	r2, [r3, #4]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	621a      	str	r2, [r3, #32]
}
 800cd08:	bf00      	nop
 800cd0a:	371c      	adds	r7, #28
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr
 800cd14:	fffeff8f 	.word	0xfffeff8f
 800cd18:	40010000 	.word	0x40010000
 800cd1c:	40010400 	.word	0x40010400

0800cd20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6a1b      	ldr	r3, [r3, #32]
 800cd2e:	f023 0210 	bic.w	r2, r3, #16
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a1b      	ldr	r3, [r3, #32]
 800cd3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	699b      	ldr	r3, [r3, #24]
 800cd46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	4b2e      	ldr	r3, [pc, #184]	; (800ce04 <TIM_OC2_SetConfig+0xe4>)
 800cd4c:	4013      	ands	r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	021b      	lsls	r3, r3, #8
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	4313      	orrs	r3, r2
 800cd62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	f023 0320 	bic.w	r3, r3, #32
 800cd6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	011b      	lsls	r3, r3, #4
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a23      	ldr	r2, [pc, #140]	; (800ce08 <TIM_OC2_SetConfig+0xe8>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d003      	beq.n	800cd88 <TIM_OC2_SetConfig+0x68>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a22      	ldr	r2, [pc, #136]	; (800ce0c <TIM_OC2_SetConfig+0xec>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d10d      	bne.n	800cda4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	011b      	lsls	r3, r3, #4
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cda2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4a18      	ldr	r2, [pc, #96]	; (800ce08 <TIM_OC2_SetConfig+0xe8>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d003      	beq.n	800cdb4 <TIM_OC2_SetConfig+0x94>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	4a17      	ldr	r2, [pc, #92]	; (800ce0c <TIM_OC2_SetConfig+0xec>)
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d113      	bne.n	800cddc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cdba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cdc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	693a      	ldr	r2, [r7, #16]
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	699b      	ldr	r3, [r3, #24]
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	693a      	ldr	r2, [r7, #16]
 800cde0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	697a      	ldr	r2, [r7, #20]
 800cdf4:	621a      	str	r2, [r3, #32]
}
 800cdf6:	bf00      	nop
 800cdf8:	371c      	adds	r7, #28
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	feff8fff 	.word	0xfeff8fff
 800ce08:	40010000 	.word	0x40010000
 800ce0c:	40010400 	.word	0x40010400

0800ce10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b087      	sub	sp, #28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6a1b      	ldr	r3, [r3, #32]
 800ce1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	69db      	ldr	r3, [r3, #28]
 800ce36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	4b2d      	ldr	r3, [pc, #180]	; (800cef0 <TIM_OC3_SetConfig+0xe0>)
 800ce3c:	4013      	ands	r3, r2
 800ce3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f023 0303 	bic.w	r3, r3, #3
 800ce46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	021b      	lsls	r3, r3, #8
 800ce60:	697a      	ldr	r2, [r7, #20]
 800ce62:	4313      	orrs	r3, r2
 800ce64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	4a22      	ldr	r2, [pc, #136]	; (800cef4 <TIM_OC3_SetConfig+0xe4>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d003      	beq.n	800ce76 <TIM_OC3_SetConfig+0x66>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4a21      	ldr	r2, [pc, #132]	; (800cef8 <TIM_OC3_SetConfig+0xe8>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d10d      	bne.n	800ce92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	021b      	lsls	r3, r3, #8
 800ce84:	697a      	ldr	r2, [r7, #20]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a17      	ldr	r2, [pc, #92]	; (800cef4 <TIM_OC3_SetConfig+0xe4>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d003      	beq.n	800cea2 <TIM_OC3_SetConfig+0x92>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a16      	ldr	r2, [pc, #88]	; (800cef8 <TIM_OC3_SetConfig+0xe8>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d113      	bne.n	800ceca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ceb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	695b      	ldr	r3, [r3, #20]
 800ceb6:	011b      	lsls	r3, r3, #4
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	699b      	ldr	r3, [r3, #24]
 800cec2:	011b      	lsls	r3, r3, #4
 800cec4:	693a      	ldr	r2, [r7, #16]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	693a      	ldr	r2, [r7, #16]
 800cece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	685a      	ldr	r2, [r3, #4]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	697a      	ldr	r2, [r7, #20]
 800cee2:	621a      	str	r2, [r3, #32]
}
 800cee4:	bf00      	nop
 800cee6:	371c      	adds	r7, #28
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr
 800cef0:	fffeff8f 	.word	0xfffeff8f
 800cef4:	40010000 	.word	0x40010000
 800cef8:	40010400 	.word	0x40010400

0800cefc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b087      	sub	sp, #28
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6a1b      	ldr	r3, [r3, #32]
 800cf0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a1b      	ldr	r3, [r3, #32]
 800cf16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	69db      	ldr	r3, [r3, #28]
 800cf22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	4b1e      	ldr	r3, [pc, #120]	; (800cfa0 <TIM_OC4_SetConfig+0xa4>)
 800cf28:	4013      	ands	r3, r2
 800cf2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	021b      	lsls	r3, r3, #8
 800cf3a:	68fa      	ldr	r2, [r7, #12]
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	031b      	lsls	r3, r3, #12
 800cf4e:	693a      	ldr	r2, [r7, #16]
 800cf50:	4313      	orrs	r3, r2
 800cf52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	4a13      	ldr	r2, [pc, #76]	; (800cfa4 <TIM_OC4_SetConfig+0xa8>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d003      	beq.n	800cf64 <TIM_OC4_SetConfig+0x68>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4a12      	ldr	r2, [pc, #72]	; (800cfa8 <TIM_OC4_SetConfig+0xac>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d109      	bne.n	800cf78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	695b      	ldr	r3, [r3, #20]
 800cf70:	019b      	lsls	r3, r3, #6
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	4313      	orrs	r3, r2
 800cf76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	685a      	ldr	r2, [r3, #4]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	693a      	ldr	r2, [r7, #16]
 800cf90:	621a      	str	r2, [r3, #32]
}
 800cf92:	bf00      	nop
 800cf94:	371c      	adds	r7, #28
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	feff8fff 	.word	0xfeff8fff
 800cfa4:	40010000 	.word	0x40010000
 800cfa8:	40010400 	.word	0x40010400

0800cfac <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b087      	sub	sp, #28
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a1b      	ldr	r3, [r3, #32]
 800cfba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	4b1b      	ldr	r3, [pc, #108]	; (800d044 <TIM_OC5_SetConfig+0x98>)
 800cfd8:	4013      	ands	r3, r2
 800cfda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68fa      	ldr	r2, [r7, #12]
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cfec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	041b      	lsls	r3, r3, #16
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4a12      	ldr	r2, [pc, #72]	; (800d048 <TIM_OC5_SetConfig+0x9c>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d003      	beq.n	800d00a <TIM_OC5_SetConfig+0x5e>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	4a11      	ldr	r2, [pc, #68]	; (800d04c <TIM_OC5_SetConfig+0xa0>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d109      	bne.n	800d01e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d010:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	021b      	lsls	r3, r3, #8
 800d018:	697a      	ldr	r2, [r7, #20]
 800d01a:	4313      	orrs	r3, r2
 800d01c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	697a      	ldr	r2, [r7, #20]
 800d022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	621a      	str	r2, [r3, #32]
}
 800d038:	bf00      	nop
 800d03a:	371c      	adds	r7, #28
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr
 800d044:	fffeff8f 	.word	0xfffeff8f
 800d048:	40010000 	.word	0x40010000
 800d04c:	40010400 	.word	0x40010400

0800d050 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d050:	b480      	push	{r7}
 800d052:	b087      	sub	sp, #28
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a1b      	ldr	r3, [r3, #32]
 800d05e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a1b      	ldr	r3, [r3, #32]
 800d06a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	4b1c      	ldr	r3, [pc, #112]	; (800d0ec <TIM_OC6_SetConfig+0x9c>)
 800d07c:	4013      	ands	r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	021b      	lsls	r3, r3, #8
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	4313      	orrs	r3, r2
 800d08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	689b      	ldr	r3, [r3, #8]
 800d098:	051b      	lsls	r3, r3, #20
 800d09a:	693a      	ldr	r2, [r7, #16]
 800d09c:	4313      	orrs	r3, r2
 800d09e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a13      	ldr	r2, [pc, #76]	; (800d0f0 <TIM_OC6_SetConfig+0xa0>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d003      	beq.n	800d0b0 <TIM_OC6_SetConfig+0x60>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a12      	ldr	r2, [pc, #72]	; (800d0f4 <TIM_OC6_SetConfig+0xa4>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d109      	bne.n	800d0c4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d0b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	695b      	ldr	r3, [r3, #20]
 800d0bc:	029b      	lsls	r3, r3, #10
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	685a      	ldr	r2, [r3, #4]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	693a      	ldr	r2, [r7, #16]
 800d0dc:	621a      	str	r2, [r3, #32]
}
 800d0de:	bf00      	nop
 800d0e0:	371c      	adds	r7, #28
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	feff8fff 	.word	0xfeff8fff
 800d0f0:	40010000 	.word	0x40010000
 800d0f4:	40010400 	.word	0x40010400

0800d0f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b087      	sub	sp, #28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6a1b      	ldr	r3, [r3, #32]
 800d108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	f023 0201 	bic.w	r2, r3, #1
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	699b      	ldr	r3, [r3, #24]
 800d11a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	011b      	lsls	r3, r3, #4
 800d128:	693a      	ldr	r2, [r7, #16]
 800d12a:	4313      	orrs	r3, r2
 800d12c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	f023 030a 	bic.w	r3, r3, #10
 800d134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	697a      	ldr	r2, [r7, #20]
 800d148:	621a      	str	r2, [r3, #32]
}
 800d14a:	bf00      	nop
 800d14c:	371c      	adds	r7, #28
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr

0800d156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d156:	b480      	push	{r7}
 800d158:	b087      	sub	sp, #28
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	60f8      	str	r0, [r7, #12]
 800d15e:	60b9      	str	r1, [r7, #8]
 800d160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	f023 0210 	bic.w	r2, r3, #16
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	699b      	ldr	r3, [r3, #24]
 800d172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6a1b      	ldr	r3, [r3, #32]
 800d178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	031b      	lsls	r3, r3, #12
 800d186:	697a      	ldr	r2, [r7, #20]
 800d188:	4313      	orrs	r3, r2
 800d18a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	011b      	lsls	r3, r3, #4
 800d198:	693a      	ldr	r2, [r7, #16]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	693a      	ldr	r2, [r7, #16]
 800d1a8:	621a      	str	r2, [r3, #32]
}
 800d1aa:	bf00      	nop
 800d1ac:	371c      	adds	r7, #28
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr

0800d1b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d1b6:	b480      	push	{r7}
 800d1b8:	b085      	sub	sp, #20
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d1ce:	683a      	ldr	r2, [r7, #0]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	f043 0307 	orr.w	r3, r3, #7
 800d1d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	609a      	str	r2, [r3, #8]
}
 800d1e0:	bf00      	nop
 800d1e2:	3714      	adds	r7, #20
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b087      	sub	sp, #28
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
 800d1f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	021a      	lsls	r2, r3, #8
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	431a      	orrs	r2, r3
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	4313      	orrs	r3, r2
 800d214:	697a      	ldr	r2, [r7, #20]
 800d216:	4313      	orrs	r3, r2
 800d218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	697a      	ldr	r2, [r7, #20]
 800d21e:	609a      	str	r2, [r3, #8]
}
 800d220:	bf00      	nop
 800d222:	371c      	adds	r7, #28
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d101      	bne.n	800d244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d240:	2302      	movs	r3, #2
 800d242:	e06d      	b.n	800d320 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2202      	movs	r2, #2
 800d250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a30      	ldr	r2, [pc, #192]	; (800d32c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d004      	beq.n	800d278 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a2f      	ldr	r2, [pc, #188]	; (800d330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d108      	bne.n	800d28a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d27e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	4313      	orrs	r3, r2
 800d288:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d290:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	68fa      	ldr	r2, [r7, #12]
 800d298:	4313      	orrs	r3, r2
 800d29a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a20      	ldr	r2, [pc, #128]	; (800d32c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d022      	beq.n	800d2f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2b6:	d01d      	beq.n	800d2f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a1d      	ldr	r2, [pc, #116]	; (800d334 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d018      	beq.n	800d2f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a1c      	ldr	r2, [pc, #112]	; (800d338 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d013      	beq.n	800d2f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a1a      	ldr	r2, [pc, #104]	; (800d33c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d00e      	beq.n	800d2f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a15      	ldr	r2, [pc, #84]	; (800d330 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d009      	beq.n	800d2f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a16      	ldr	r2, [pc, #88]	; (800d340 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d004      	beq.n	800d2f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a15      	ldr	r2, [pc, #84]	; (800d344 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d10c      	bne.n	800d30e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	68ba      	ldr	r2, [r7, #8]
 800d302:	4313      	orrs	r3, r2
 800d304:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2201      	movs	r2, #1
 800d312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	40010000 	.word	0x40010000
 800d330:	40010400 	.word	0x40010400
 800d334:	40000400 	.word	0x40000400
 800d338:	40000800 	.word	0x40000800
 800d33c:	40000c00 	.word	0x40000c00
 800d340:	40014000 	.word	0x40014000
 800d344:	40001800 	.word	0x40001800

0800d348 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d352:	2300      	movs	r3, #0
 800d354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d101      	bne.n	800d364 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d360:	2302      	movs	r3, #2
 800d362:	e065      	b.n	800d430 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	4313      	orrs	r3, r2
 800d378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	4313      	orrs	r3, r2
 800d386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	4313      	orrs	r3, r2
 800d394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	691b      	ldr	r3, [r3, #16]
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	695b      	ldr	r3, [r3, #20]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	699b      	ldr	r3, [r3, #24]
 800d3d8:	041b      	lsls	r3, r3, #16
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a16      	ldr	r2, [pc, #88]	; (800d43c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d004      	beq.n	800d3f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a14      	ldr	r2, [pc, #80]	; (800d440 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d115      	bne.n	800d41e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fc:	051b      	lsls	r3, r3, #20
 800d3fe:	4313      	orrs	r3, r2
 800d400:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	69db      	ldr	r3, [r3, #28]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	6a1b      	ldr	r3, [r3, #32]
 800d41a:	4313      	orrs	r3, r2
 800d41c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr
 800d43c:	40010000 	.word	0x40010000
 800d440:	40010400 	.word	0x40010400

0800d444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d44c:	bf00      	nop
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d101      	bne.n	800d492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	e040      	b.n	800d514 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d496:	2b00      	cmp	r3, #0
 800d498:	d106      	bne.n	800d4a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7f4 ffe8 	bl	8002478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2224      	movs	r2, #36	; 0x24
 800d4ac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f022 0201 	bic.w	r2, r2, #1
 800d4bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 f82c 	bl	800d51c <UART_SetConfig>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d101      	bne.n	800d4ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e022      	b.n	800d514 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d002      	beq.n	800d4dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 faca 	bl	800da70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	685a      	ldr	r2, [r3, #4]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d4ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	689a      	ldr	r2, [r3, #8]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d4fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f042 0201 	orr.w	r2, r2, #1
 800d50a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 fb51 	bl	800dbb4 <UART_CheckIdleState>
 800d512:	4603      	mov	r3, r0
}
 800d514:	4618      	mov	r0, r3
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b088      	sub	sp, #32
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800d524:	2300      	movs	r3, #0
 800d526:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	689a      	ldr	r2, [r3, #8]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	691b      	ldr	r3, [r3, #16]
 800d534:	431a      	orrs	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	695b      	ldr	r3, [r3, #20]
 800d53a:	431a      	orrs	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	69db      	ldr	r3, [r3, #28]
 800d540:	4313      	orrs	r3, r2
 800d542:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	4bb1      	ldr	r3, [pc, #708]	; (800d810 <UART_SetConfig+0x2f4>)
 800d54c:	4013      	ands	r3, r2
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	6812      	ldr	r2, [r2, #0]
 800d552:	6939      	ldr	r1, [r7, #16]
 800d554:	430b      	orrs	r3, r1
 800d556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68da      	ldr	r2, [r3, #12]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	430a      	orrs	r2, r1
 800d56c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6a1b      	ldr	r3, [r3, #32]
 800d578:	693a      	ldr	r2, [r7, #16]
 800d57a:	4313      	orrs	r3, r2
 800d57c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	693a      	ldr	r2, [r7, #16]
 800d58e:	430a      	orrs	r2, r1
 800d590:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a9f      	ldr	r2, [pc, #636]	; (800d814 <UART_SetConfig+0x2f8>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d121      	bne.n	800d5e0 <UART_SetConfig+0xc4>
 800d59c:	4b9e      	ldr	r3, [pc, #632]	; (800d818 <UART_SetConfig+0x2fc>)
 800d59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5a2:	f003 0303 	and.w	r3, r3, #3
 800d5a6:	2b03      	cmp	r3, #3
 800d5a8:	d816      	bhi.n	800d5d8 <UART_SetConfig+0xbc>
 800d5aa:	a201      	add	r2, pc, #4	; (adr r2, 800d5b0 <UART_SetConfig+0x94>)
 800d5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b0:	0800d5c1 	.word	0x0800d5c1
 800d5b4:	0800d5cd 	.word	0x0800d5cd
 800d5b8:	0800d5c7 	.word	0x0800d5c7
 800d5bc:	0800d5d3 	.word	0x0800d5d3
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	77fb      	strb	r3, [r7, #31]
 800d5c4:	e151      	b.n	800d86a <UART_SetConfig+0x34e>
 800d5c6:	2302      	movs	r3, #2
 800d5c8:	77fb      	strb	r3, [r7, #31]
 800d5ca:	e14e      	b.n	800d86a <UART_SetConfig+0x34e>
 800d5cc:	2304      	movs	r3, #4
 800d5ce:	77fb      	strb	r3, [r7, #31]
 800d5d0:	e14b      	b.n	800d86a <UART_SetConfig+0x34e>
 800d5d2:	2308      	movs	r3, #8
 800d5d4:	77fb      	strb	r3, [r7, #31]
 800d5d6:	e148      	b.n	800d86a <UART_SetConfig+0x34e>
 800d5d8:	2310      	movs	r3, #16
 800d5da:	77fb      	strb	r3, [r7, #31]
 800d5dc:	bf00      	nop
 800d5de:	e144      	b.n	800d86a <UART_SetConfig+0x34e>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a8d      	ldr	r2, [pc, #564]	; (800d81c <UART_SetConfig+0x300>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d134      	bne.n	800d654 <UART_SetConfig+0x138>
 800d5ea:	4b8b      	ldr	r3, [pc, #556]	; (800d818 <UART_SetConfig+0x2fc>)
 800d5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5f0:	f003 030c 	and.w	r3, r3, #12
 800d5f4:	2b0c      	cmp	r3, #12
 800d5f6:	d829      	bhi.n	800d64c <UART_SetConfig+0x130>
 800d5f8:	a201      	add	r2, pc, #4	; (adr r2, 800d600 <UART_SetConfig+0xe4>)
 800d5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fe:	bf00      	nop
 800d600:	0800d635 	.word	0x0800d635
 800d604:	0800d64d 	.word	0x0800d64d
 800d608:	0800d64d 	.word	0x0800d64d
 800d60c:	0800d64d 	.word	0x0800d64d
 800d610:	0800d641 	.word	0x0800d641
 800d614:	0800d64d 	.word	0x0800d64d
 800d618:	0800d64d 	.word	0x0800d64d
 800d61c:	0800d64d 	.word	0x0800d64d
 800d620:	0800d63b 	.word	0x0800d63b
 800d624:	0800d64d 	.word	0x0800d64d
 800d628:	0800d64d 	.word	0x0800d64d
 800d62c:	0800d64d 	.word	0x0800d64d
 800d630:	0800d647 	.word	0x0800d647
 800d634:	2300      	movs	r3, #0
 800d636:	77fb      	strb	r3, [r7, #31]
 800d638:	e117      	b.n	800d86a <UART_SetConfig+0x34e>
 800d63a:	2302      	movs	r3, #2
 800d63c:	77fb      	strb	r3, [r7, #31]
 800d63e:	e114      	b.n	800d86a <UART_SetConfig+0x34e>
 800d640:	2304      	movs	r3, #4
 800d642:	77fb      	strb	r3, [r7, #31]
 800d644:	e111      	b.n	800d86a <UART_SetConfig+0x34e>
 800d646:	2308      	movs	r3, #8
 800d648:	77fb      	strb	r3, [r7, #31]
 800d64a:	e10e      	b.n	800d86a <UART_SetConfig+0x34e>
 800d64c:	2310      	movs	r3, #16
 800d64e:	77fb      	strb	r3, [r7, #31]
 800d650:	bf00      	nop
 800d652:	e10a      	b.n	800d86a <UART_SetConfig+0x34e>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a71      	ldr	r2, [pc, #452]	; (800d820 <UART_SetConfig+0x304>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d120      	bne.n	800d6a0 <UART_SetConfig+0x184>
 800d65e:	4b6e      	ldr	r3, [pc, #440]	; (800d818 <UART_SetConfig+0x2fc>)
 800d660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d664:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d668:	2b10      	cmp	r3, #16
 800d66a:	d00f      	beq.n	800d68c <UART_SetConfig+0x170>
 800d66c:	2b10      	cmp	r3, #16
 800d66e:	d802      	bhi.n	800d676 <UART_SetConfig+0x15a>
 800d670:	2b00      	cmp	r3, #0
 800d672:	d005      	beq.n	800d680 <UART_SetConfig+0x164>
 800d674:	e010      	b.n	800d698 <UART_SetConfig+0x17c>
 800d676:	2b20      	cmp	r3, #32
 800d678:	d005      	beq.n	800d686 <UART_SetConfig+0x16a>
 800d67a:	2b30      	cmp	r3, #48	; 0x30
 800d67c:	d009      	beq.n	800d692 <UART_SetConfig+0x176>
 800d67e:	e00b      	b.n	800d698 <UART_SetConfig+0x17c>
 800d680:	2300      	movs	r3, #0
 800d682:	77fb      	strb	r3, [r7, #31]
 800d684:	e0f1      	b.n	800d86a <UART_SetConfig+0x34e>
 800d686:	2302      	movs	r3, #2
 800d688:	77fb      	strb	r3, [r7, #31]
 800d68a:	e0ee      	b.n	800d86a <UART_SetConfig+0x34e>
 800d68c:	2304      	movs	r3, #4
 800d68e:	77fb      	strb	r3, [r7, #31]
 800d690:	e0eb      	b.n	800d86a <UART_SetConfig+0x34e>
 800d692:	2308      	movs	r3, #8
 800d694:	77fb      	strb	r3, [r7, #31]
 800d696:	e0e8      	b.n	800d86a <UART_SetConfig+0x34e>
 800d698:	2310      	movs	r3, #16
 800d69a:	77fb      	strb	r3, [r7, #31]
 800d69c:	bf00      	nop
 800d69e:	e0e4      	b.n	800d86a <UART_SetConfig+0x34e>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a5f      	ldr	r2, [pc, #380]	; (800d824 <UART_SetConfig+0x308>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d120      	bne.n	800d6ec <UART_SetConfig+0x1d0>
 800d6aa:	4b5b      	ldr	r3, [pc, #364]	; (800d818 <UART_SetConfig+0x2fc>)
 800d6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d6b4:	2b40      	cmp	r3, #64	; 0x40
 800d6b6:	d00f      	beq.n	800d6d8 <UART_SetConfig+0x1bc>
 800d6b8:	2b40      	cmp	r3, #64	; 0x40
 800d6ba:	d802      	bhi.n	800d6c2 <UART_SetConfig+0x1a6>
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d005      	beq.n	800d6cc <UART_SetConfig+0x1b0>
 800d6c0:	e010      	b.n	800d6e4 <UART_SetConfig+0x1c8>
 800d6c2:	2b80      	cmp	r3, #128	; 0x80
 800d6c4:	d005      	beq.n	800d6d2 <UART_SetConfig+0x1b6>
 800d6c6:	2bc0      	cmp	r3, #192	; 0xc0
 800d6c8:	d009      	beq.n	800d6de <UART_SetConfig+0x1c2>
 800d6ca:	e00b      	b.n	800d6e4 <UART_SetConfig+0x1c8>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	77fb      	strb	r3, [r7, #31]
 800d6d0:	e0cb      	b.n	800d86a <UART_SetConfig+0x34e>
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	77fb      	strb	r3, [r7, #31]
 800d6d6:	e0c8      	b.n	800d86a <UART_SetConfig+0x34e>
 800d6d8:	2304      	movs	r3, #4
 800d6da:	77fb      	strb	r3, [r7, #31]
 800d6dc:	e0c5      	b.n	800d86a <UART_SetConfig+0x34e>
 800d6de:	2308      	movs	r3, #8
 800d6e0:	77fb      	strb	r3, [r7, #31]
 800d6e2:	e0c2      	b.n	800d86a <UART_SetConfig+0x34e>
 800d6e4:	2310      	movs	r3, #16
 800d6e6:	77fb      	strb	r3, [r7, #31]
 800d6e8:	bf00      	nop
 800d6ea:	e0be      	b.n	800d86a <UART_SetConfig+0x34e>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a4d      	ldr	r2, [pc, #308]	; (800d828 <UART_SetConfig+0x30c>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d124      	bne.n	800d740 <UART_SetConfig+0x224>
 800d6f6:	4b48      	ldr	r3, [pc, #288]	; (800d818 <UART_SetConfig+0x2fc>)
 800d6f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d704:	d012      	beq.n	800d72c <UART_SetConfig+0x210>
 800d706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d70a:	d802      	bhi.n	800d712 <UART_SetConfig+0x1f6>
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d007      	beq.n	800d720 <UART_SetConfig+0x204>
 800d710:	e012      	b.n	800d738 <UART_SetConfig+0x21c>
 800d712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d716:	d006      	beq.n	800d726 <UART_SetConfig+0x20a>
 800d718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d71c:	d009      	beq.n	800d732 <UART_SetConfig+0x216>
 800d71e:	e00b      	b.n	800d738 <UART_SetConfig+0x21c>
 800d720:	2300      	movs	r3, #0
 800d722:	77fb      	strb	r3, [r7, #31]
 800d724:	e0a1      	b.n	800d86a <UART_SetConfig+0x34e>
 800d726:	2302      	movs	r3, #2
 800d728:	77fb      	strb	r3, [r7, #31]
 800d72a:	e09e      	b.n	800d86a <UART_SetConfig+0x34e>
 800d72c:	2304      	movs	r3, #4
 800d72e:	77fb      	strb	r3, [r7, #31]
 800d730:	e09b      	b.n	800d86a <UART_SetConfig+0x34e>
 800d732:	2308      	movs	r3, #8
 800d734:	77fb      	strb	r3, [r7, #31]
 800d736:	e098      	b.n	800d86a <UART_SetConfig+0x34e>
 800d738:	2310      	movs	r3, #16
 800d73a:	77fb      	strb	r3, [r7, #31]
 800d73c:	bf00      	nop
 800d73e:	e094      	b.n	800d86a <UART_SetConfig+0x34e>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a39      	ldr	r2, [pc, #228]	; (800d82c <UART_SetConfig+0x310>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d124      	bne.n	800d794 <UART_SetConfig+0x278>
 800d74a:	4b33      	ldr	r3, [pc, #204]	; (800d818 <UART_SetConfig+0x2fc>)
 800d74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d750:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d758:	d012      	beq.n	800d780 <UART_SetConfig+0x264>
 800d75a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d75e:	d802      	bhi.n	800d766 <UART_SetConfig+0x24a>
 800d760:	2b00      	cmp	r3, #0
 800d762:	d007      	beq.n	800d774 <UART_SetConfig+0x258>
 800d764:	e012      	b.n	800d78c <UART_SetConfig+0x270>
 800d766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d76a:	d006      	beq.n	800d77a <UART_SetConfig+0x25e>
 800d76c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d770:	d009      	beq.n	800d786 <UART_SetConfig+0x26a>
 800d772:	e00b      	b.n	800d78c <UART_SetConfig+0x270>
 800d774:	2301      	movs	r3, #1
 800d776:	77fb      	strb	r3, [r7, #31]
 800d778:	e077      	b.n	800d86a <UART_SetConfig+0x34e>
 800d77a:	2302      	movs	r3, #2
 800d77c:	77fb      	strb	r3, [r7, #31]
 800d77e:	e074      	b.n	800d86a <UART_SetConfig+0x34e>
 800d780:	2304      	movs	r3, #4
 800d782:	77fb      	strb	r3, [r7, #31]
 800d784:	e071      	b.n	800d86a <UART_SetConfig+0x34e>
 800d786:	2308      	movs	r3, #8
 800d788:	77fb      	strb	r3, [r7, #31]
 800d78a:	e06e      	b.n	800d86a <UART_SetConfig+0x34e>
 800d78c:	2310      	movs	r3, #16
 800d78e:	77fb      	strb	r3, [r7, #31]
 800d790:	bf00      	nop
 800d792:	e06a      	b.n	800d86a <UART_SetConfig+0x34e>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a25      	ldr	r2, [pc, #148]	; (800d830 <UART_SetConfig+0x314>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d124      	bne.n	800d7e8 <UART_SetConfig+0x2cc>
 800d79e:	4b1e      	ldr	r3, [pc, #120]	; (800d818 <UART_SetConfig+0x2fc>)
 800d7a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d7a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7ac:	d012      	beq.n	800d7d4 <UART_SetConfig+0x2b8>
 800d7ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7b2:	d802      	bhi.n	800d7ba <UART_SetConfig+0x29e>
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d007      	beq.n	800d7c8 <UART_SetConfig+0x2ac>
 800d7b8:	e012      	b.n	800d7e0 <UART_SetConfig+0x2c4>
 800d7ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d7be:	d006      	beq.n	800d7ce <UART_SetConfig+0x2b2>
 800d7c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d7c4:	d009      	beq.n	800d7da <UART_SetConfig+0x2be>
 800d7c6:	e00b      	b.n	800d7e0 <UART_SetConfig+0x2c4>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	77fb      	strb	r3, [r7, #31]
 800d7cc:	e04d      	b.n	800d86a <UART_SetConfig+0x34e>
 800d7ce:	2302      	movs	r3, #2
 800d7d0:	77fb      	strb	r3, [r7, #31]
 800d7d2:	e04a      	b.n	800d86a <UART_SetConfig+0x34e>
 800d7d4:	2304      	movs	r3, #4
 800d7d6:	77fb      	strb	r3, [r7, #31]
 800d7d8:	e047      	b.n	800d86a <UART_SetConfig+0x34e>
 800d7da:	2308      	movs	r3, #8
 800d7dc:	77fb      	strb	r3, [r7, #31]
 800d7de:	e044      	b.n	800d86a <UART_SetConfig+0x34e>
 800d7e0:	2310      	movs	r3, #16
 800d7e2:	77fb      	strb	r3, [r7, #31]
 800d7e4:	bf00      	nop
 800d7e6:	e040      	b.n	800d86a <UART_SetConfig+0x34e>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a11      	ldr	r2, [pc, #68]	; (800d834 <UART_SetConfig+0x318>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d139      	bne.n	800d866 <UART_SetConfig+0x34a>
 800d7f2:	4b09      	ldr	r3, [pc, #36]	; (800d818 <UART_SetConfig+0x2fc>)
 800d7f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d7fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d800:	d027      	beq.n	800d852 <UART_SetConfig+0x336>
 800d802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d806:	d817      	bhi.n	800d838 <UART_SetConfig+0x31c>
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d01c      	beq.n	800d846 <UART_SetConfig+0x32a>
 800d80c:	e027      	b.n	800d85e <UART_SetConfig+0x342>
 800d80e:	bf00      	nop
 800d810:	efff69f3 	.word	0xefff69f3
 800d814:	40011000 	.word	0x40011000
 800d818:	40023800 	.word	0x40023800
 800d81c:	40004400 	.word	0x40004400
 800d820:	40004800 	.word	0x40004800
 800d824:	40004c00 	.word	0x40004c00
 800d828:	40005000 	.word	0x40005000
 800d82c:	40011400 	.word	0x40011400
 800d830:	40007800 	.word	0x40007800
 800d834:	40007c00 	.word	0x40007c00
 800d838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d83c:	d006      	beq.n	800d84c <UART_SetConfig+0x330>
 800d83e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d842:	d009      	beq.n	800d858 <UART_SetConfig+0x33c>
 800d844:	e00b      	b.n	800d85e <UART_SetConfig+0x342>
 800d846:	2300      	movs	r3, #0
 800d848:	77fb      	strb	r3, [r7, #31]
 800d84a:	e00e      	b.n	800d86a <UART_SetConfig+0x34e>
 800d84c:	2302      	movs	r3, #2
 800d84e:	77fb      	strb	r3, [r7, #31]
 800d850:	e00b      	b.n	800d86a <UART_SetConfig+0x34e>
 800d852:	2304      	movs	r3, #4
 800d854:	77fb      	strb	r3, [r7, #31]
 800d856:	e008      	b.n	800d86a <UART_SetConfig+0x34e>
 800d858:	2308      	movs	r3, #8
 800d85a:	77fb      	strb	r3, [r7, #31]
 800d85c:	e005      	b.n	800d86a <UART_SetConfig+0x34e>
 800d85e:	2310      	movs	r3, #16
 800d860:	77fb      	strb	r3, [r7, #31]
 800d862:	bf00      	nop
 800d864:	e001      	b.n	800d86a <UART_SetConfig+0x34e>
 800d866:	2310      	movs	r3, #16
 800d868:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	69db      	ldr	r3, [r3, #28]
 800d86e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d872:	d17f      	bne.n	800d974 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800d874:	7ffb      	ldrb	r3, [r7, #31]
 800d876:	2b08      	cmp	r3, #8
 800d878:	d85c      	bhi.n	800d934 <UART_SetConfig+0x418>
 800d87a:	a201      	add	r2, pc, #4	; (adr r2, 800d880 <UART_SetConfig+0x364>)
 800d87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d880:	0800d8a5 	.word	0x0800d8a5
 800d884:	0800d8c5 	.word	0x0800d8c5
 800d888:	0800d8e5 	.word	0x0800d8e5
 800d88c:	0800d935 	.word	0x0800d935
 800d890:	0800d8fd 	.word	0x0800d8fd
 800d894:	0800d935 	.word	0x0800d935
 800d898:	0800d935 	.word	0x0800d935
 800d89c:	0800d935 	.word	0x0800d935
 800d8a0:	0800d91d 	.word	0x0800d91d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8a4:	f7fc ff4a 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800d8a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	005a      	lsls	r2, r3, #1
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	085b      	lsrs	r3, r3, #1
 800d8b4:	441a      	add	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	61bb      	str	r3, [r7, #24]
        break;
 800d8c2:	e03a      	b.n	800d93a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d8c4:	f7fc ff4e 	bl	800a764 <HAL_RCC_GetPCLK2Freq>
 800d8c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	005a      	lsls	r2, r3, #1
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	085b      	lsrs	r3, r3, #1
 800d8d4:	441a      	add	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	61bb      	str	r3, [r7, #24]
        break;
 800d8e2:	e02a      	b.n	800d93a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	085a      	lsrs	r2, r3, #1
 800d8ea:	4b5f      	ldr	r3, [pc, #380]	; (800da68 <UART_SetConfig+0x54c>)
 800d8ec:	4413      	add	r3, r2
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	6852      	ldr	r2, [r2, #4]
 800d8f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	61bb      	str	r3, [r7, #24]
        break;
 800d8fa:	e01e      	b.n	800d93a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d8fc:	f7fc fe60 	bl	800a5c0 <HAL_RCC_GetSysClockFreq>
 800d900:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	005a      	lsls	r2, r3, #1
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	085b      	lsrs	r3, r3, #1
 800d90c:	441a      	add	r2, r3
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	fbb2 f3f3 	udiv	r3, r2, r3
 800d916:	b29b      	uxth	r3, r3
 800d918:	61bb      	str	r3, [r7, #24]
        break;
 800d91a:	e00e      	b.n	800d93a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	085b      	lsrs	r3, r3, #1
 800d922:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d92e:	b29b      	uxth	r3, r3
 800d930:	61bb      	str	r3, [r7, #24]
        break;
 800d932:	e002      	b.n	800d93a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800d934:	2301      	movs	r3, #1
 800d936:	75fb      	strb	r3, [r7, #23]
        break;
 800d938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	2b0f      	cmp	r3, #15
 800d93e:	d916      	bls.n	800d96e <UART_SetConfig+0x452>
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d946:	d212      	bcs.n	800d96e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	f023 030f 	bic.w	r3, r3, #15
 800d950:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	085b      	lsrs	r3, r3, #1
 800d956:	b29b      	uxth	r3, r3
 800d958:	f003 0307 	and.w	r3, r3, #7
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	897b      	ldrh	r3, [r7, #10]
 800d960:	4313      	orrs	r3, r2
 800d962:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	897a      	ldrh	r2, [r7, #10]
 800d96a:	60da      	str	r2, [r3, #12]
 800d96c:	e070      	b.n	800da50 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800d96e:	2301      	movs	r3, #1
 800d970:	75fb      	strb	r3, [r7, #23]
 800d972:	e06d      	b.n	800da50 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800d974:	7ffb      	ldrb	r3, [r7, #31]
 800d976:	2b08      	cmp	r3, #8
 800d978:	d859      	bhi.n	800da2e <UART_SetConfig+0x512>
 800d97a:	a201      	add	r2, pc, #4	; (adr r2, 800d980 <UART_SetConfig+0x464>)
 800d97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d980:	0800d9a5 	.word	0x0800d9a5
 800d984:	0800d9c3 	.word	0x0800d9c3
 800d988:	0800d9e1 	.word	0x0800d9e1
 800d98c:	0800da2f 	.word	0x0800da2f
 800d990:	0800d9f9 	.word	0x0800d9f9
 800d994:	0800da2f 	.word	0x0800da2f
 800d998:	0800da2f 	.word	0x0800da2f
 800d99c:	0800da2f 	.word	0x0800da2f
 800d9a0:	0800da17 	.word	0x0800da17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9a4:	f7fc feca 	bl	800a73c <HAL_RCC_GetPCLK1Freq>
 800d9a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	085a      	lsrs	r2, r3, #1
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	441a      	add	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	61bb      	str	r3, [r7, #24]
        break;
 800d9c0:	e038      	b.n	800da34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9c2:	f7fc fecf 	bl	800a764 <HAL_RCC_GetPCLK2Freq>
 800d9c6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	085a      	lsrs	r2, r3, #1
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	441a      	add	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	61bb      	str	r3, [r7, #24]
        break;
 800d9de:	e029      	b.n	800da34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	085a      	lsrs	r2, r3, #1
 800d9e6:	4b21      	ldr	r3, [pc, #132]	; (800da6c <UART_SetConfig+0x550>)
 800d9e8:	4413      	add	r3, r2
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	6852      	ldr	r2, [r2, #4]
 800d9ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	61bb      	str	r3, [r7, #24]
        break;
 800d9f6:	e01d      	b.n	800da34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d9f8:	f7fc fde2 	bl	800a5c0 <HAL_RCC_GetSysClockFreq>
 800d9fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	085a      	lsrs	r2, r3, #1
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	441a      	add	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da10:	b29b      	uxth	r3, r3
 800da12:	61bb      	str	r3, [r7, #24]
        break;
 800da14:	e00e      	b.n	800da34 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	085b      	lsrs	r3, r3, #1
 800da1c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	fbb2 f3f3 	udiv	r3, r2, r3
 800da28:	b29b      	uxth	r3, r3
 800da2a:	61bb      	str	r3, [r7, #24]
        break;
 800da2c:	e002      	b.n	800da34 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800da2e:	2301      	movs	r3, #1
 800da30:	75fb      	strb	r3, [r7, #23]
        break;
 800da32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	2b0f      	cmp	r3, #15
 800da38:	d908      	bls.n	800da4c <UART_SetConfig+0x530>
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da40:	d204      	bcs.n	800da4c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	69ba      	ldr	r2, [r7, #24]
 800da48:	60da      	str	r2, [r3, #12]
 800da4a:	e001      	b.n	800da50 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800da4c:	2301      	movs	r3, #1
 800da4e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2200      	movs	r2, #0
 800da5a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800da5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3720      	adds	r7, #32
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	01e84800 	.word	0x01e84800
 800da6c:	00f42400 	.word	0x00f42400

0800da70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7c:	f003 0301 	and.w	r3, r3, #1
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00a      	beq.n	800da9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	430a      	orrs	r2, r1
 800da98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9e:	f003 0302 	and.w	r3, r3, #2
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00a      	beq.n	800dabc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	430a      	orrs	r2, r1
 800daba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac0:	f003 0304 	and.w	r3, r3, #4
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00a      	beq.n	800dade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	430a      	orrs	r2, r1
 800dadc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae2:	f003 0308 	and.w	r3, r3, #8
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00a      	beq.n	800db00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	430a      	orrs	r2, r1
 800dafe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db04:	f003 0310 	and.w	r3, r3, #16
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00a      	beq.n	800db22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	689b      	ldr	r3, [r3, #8]
 800db12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	430a      	orrs	r2, r1
 800db20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db26:	f003 0320 	and.w	r3, r3, #32
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d00a      	beq.n	800db44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	430a      	orrs	r2, r1
 800db42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01a      	beq.n	800db86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	430a      	orrs	r2, r1
 800db64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db6e:	d10a      	bne.n	800db86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	430a      	orrs	r2, r1
 800db84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00a      	beq.n	800dba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	430a      	orrs	r2, r1
 800dba6:	605a      	str	r2, [r3, #4]
  }
}
 800dba8:	bf00      	nop
 800dbaa:	370c      	adds	r7, #12
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr

0800dbb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af02      	add	r7, sp, #8
 800dbba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800dbc2:	f7f7 fdff 	bl	80057c4 <HAL_GetTick>
 800dbc6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f003 0308 	and.w	r3, r3, #8
 800dbd2:	2b08      	cmp	r3, #8
 800dbd4:	d10e      	bne.n	800dbf4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dbd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 f814 	bl	800dc12 <UART_WaitOnFlagUntilTimeout>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d001      	beq.n	800dbf4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbf0:	2303      	movs	r3, #3
 800dbf2:	e00a      	b.n	800dc0a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2220      	movs	r2, #32
 800dbf8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2220      	movs	r2, #32
 800dbfe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b084      	sub	sp, #16
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	60f8      	str	r0, [r7, #12]
 800dc1a:	60b9      	str	r1, [r7, #8]
 800dc1c:	603b      	str	r3, [r7, #0]
 800dc1e:	4613      	mov	r3, r2
 800dc20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc22:	e05d      	b.n	800dce0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc24:	69bb      	ldr	r3, [r7, #24]
 800dc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc2a:	d059      	beq.n	800dce0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc2c:	f7f7 fdca 	bl	80057c4 <HAL_GetTick>
 800dc30:	4602      	mov	r2, r0
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	69ba      	ldr	r2, [r7, #24]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d302      	bcc.n	800dc42 <UART_WaitOnFlagUntilTimeout+0x30>
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d11b      	bne.n	800dc7a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dc50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	689a      	ldr	r2, [r3, #8]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f022 0201 	bic.w	r2, r2, #1
 800dc60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2220      	movs	r2, #32
 800dc66:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2220      	movs	r2, #32
 800dc6c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800dc76:	2303      	movs	r3, #3
 800dc78:	e042      	b.n	800dd00 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f003 0304 	and.w	r3, r3, #4
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d02b      	beq.n	800dce0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	69db      	ldr	r3, [r3, #28]
 800dc8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc96:	d123      	bne.n	800dce0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dca0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dcb0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	689a      	ldr	r2, [r3, #8]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f022 0201 	bic.w	r2, r2, #1
 800dcc0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2220      	movs	r2, #32
 800dcc6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2220      	movs	r2, #32
 800dccc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2220      	movs	r2, #32
 800dcd2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800dcdc:	2303      	movs	r3, #3
 800dcde:	e00f      	b.n	800dd00 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	69da      	ldr	r2, [r3, #28]
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	4013      	ands	r3, r2
 800dcea:	68ba      	ldr	r2, [r7, #8]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	bf0c      	ite	eq
 800dcf0:	2301      	moveq	r3, #1
 800dcf2:	2300      	movne	r3, #0
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	79fb      	ldrb	r3, [r7, #7]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d092      	beq.n	800dc24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dcfe:	2300      	movs	r3, #0
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3710      	adds	r7, #16
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}

0800dd08 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d027      	beq.n	800dd72 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800dd28:	68fa      	ldr	r2, [r7, #12]
 800dd2a:	4b2f      	ldr	r3, [pc, #188]	; (800dde8 <FMC_SDRAM_Init+0xe0>)
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800dd38:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800dd3e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800dd44:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800dd4a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800dd50:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800dd56:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800dd5c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800dd62:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	601a      	str	r2, [r3, #0]
 800dd70:	e032      	b.n	800ddd8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dd7e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800dd88:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800dd8e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	4313      	orrs	r3, r2
 800dd94:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800dd9c:	68ba      	ldr	r2, [r7, #8]
 800dd9e:	4b12      	ldr	r3, [pc, #72]	; (800dde8 <FMC_SDRAM_Init+0xe0>)
 800dda0:	4013      	ands	r3, r2
 800dda2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ddac:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ddb2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ddb8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ddbe:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ddc4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	68ba      	ldr	r2, [r7, #8]
 800ddd6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ddd8:	2300      	movs	r3, #0
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3714      	adds	r7, #20
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr
 800dde6:	bf00      	nop
 800dde8:	ffff8000 	.word	0xffff8000

0800ddec <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b087      	sub	sp, #28
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	60b9      	str	r1, [r7, #8]
 800ddf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b01      	cmp	r3, #1
 800de04:	d02e      	beq.n	800de64 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	689b      	ldr	r3, [r3, #8]
 800de0a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800de12:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	3b01      	subs	r3, #1
 800de20:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800de22:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	3b01      	subs	r3, #1
 800de2a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800de2c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	3b01      	subs	r3, #1
 800de34:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800de36:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	691b      	ldr	r3, [r3, #16]
 800de3c:	3b01      	subs	r3, #1
 800de3e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800de40:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	695b      	ldr	r3, [r3, #20]
 800de46:	3b01      	subs	r3, #1
 800de48:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800de4a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	699b      	ldr	r3, [r3, #24]
 800de50:	3b01      	subs	r3, #1
 800de52:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800de54:	4313      	orrs	r3, r2
 800de56:	697a      	ldr	r2, [r7, #20]
 800de58:	4313      	orrs	r3, r2
 800de5a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	697a      	ldr	r2, [r7, #20]
 800de60:	609a      	str	r2, [r3, #8]
 800de62:	e039      	b.n	800ded8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	4b1e      	ldr	r3, [pc, #120]	; (800dee8 <FMC_SDRAM_Timing_Init+0xfc>)
 800de6e:	4013      	ands	r3, r2
 800de70:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	3b01      	subs	r3, #1
 800de78:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	695b      	ldr	r3, [r3, #20]
 800de7e:	3b01      	subs	r3, #1
 800de80:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800de82:	4313      	orrs	r3, r2
 800de84:	697a      	ldr	r2, [r7, #20]
 800de86:	4313      	orrs	r3, r2
 800de88:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	68db      	ldr	r3, [r3, #12]
 800de8e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800de96:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	3b01      	subs	r3, #1
 800dea4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800dea6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	3b01      	subs	r3, #1
 800deae:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800deb0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	3b01      	subs	r3, #1
 800deb8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800deba:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	699b      	ldr	r3, [r3, #24]
 800dec0:	3b01      	subs	r3, #1
 800dec2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800dec4:	4313      	orrs	r3, r2
 800dec6:	693a      	ldr	r2, [r7, #16]
 800dec8:	4313      	orrs	r3, r2
 800deca:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	697a      	ldr	r2, [r7, #20]
 800ded0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	693a      	ldr	r2, [r7, #16]
 800ded6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800ded8:	2300      	movs	r3, #0
}
 800deda:	4618      	mov	r0, r3
 800dedc:	371c      	adds	r7, #28
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr
 800dee6:	bf00      	nop
 800dee8:	ff0f0fff 	.word	0xff0f0fff

0800deec <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800deec:	b480      	push	{r7}
 800deee:	b087      	sub	sp, #28
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800def8:	2300      	movs	r3, #0
 800defa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800df04:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	689b      	ldr	r3, [r3, #8]
 800df0a:	3b01      	subs	r3, #1
 800df0c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800df0e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800df16:	4313      	orrs	r3, r2
 800df18:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800df1a:	697a      	ldr	r2, [r7, #20]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	371c      	adds	r7, #28
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800df2e:	b480      	push	{r7}
 800df30:	b083      	sub	sp, #12
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
 800df36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	695a      	ldr	r2, [r3, #20]
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	005b      	lsls	r3, r3, #1
 800df40:	431a      	orrs	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	370c      	adds	r7, #12
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr

0800df54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	689b      	ldr	r3, [r3, #8]
 800df60:	f043 0201 	orr.w	r2, r3, #1
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df76:	b480      	push	{r7}
 800df78:	b083      	sub	sp, #12
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	f023 0201 	bic.w	r2, r3, #1
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800df98:	b480      	push	{r7}
 800df9a:	b085      	sub	sp, #20
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	019b      	lsls	r3, r3, #6
 800dfaa:	f043 0220 	orr.w	r2, r3, #32
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	60fb      	str	r3, [r7, #12]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	4a09      	ldr	r2, [pc, #36]	; (800dfe0 <USB_FlushTxFifo+0x48>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d901      	bls.n	800dfc4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800dfc0:	2303      	movs	r3, #3
 800dfc2:	e006      	b.n	800dfd2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	691b      	ldr	r3, [r3, #16]
 800dfc8:	f003 0320 	and.w	r3, r3, #32
 800dfcc:	2b20      	cmp	r3, #32
 800dfce:	d0f0      	beq.n	800dfb2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800dfd0:	2300      	movs	r3, #0
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3714      	adds	r7, #20
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	00030d40 	.word	0x00030d40

0800dfe4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800dfec:	2300      	movs	r3, #0
 800dfee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2210      	movs	r2, #16
 800dff4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	3301      	adds	r3, #1
 800dffa:	60fb      	str	r3, [r7, #12]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	4a09      	ldr	r2, [pc, #36]	; (800e024 <USB_FlushRxFifo+0x40>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d901      	bls.n	800e008 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e004:	2303      	movs	r3, #3
 800e006:	e006      	b.n	800e016 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	691b      	ldr	r3, [r3, #16]
 800e00c:	f003 0310 	and.w	r3, r3, #16
 800e010:	2b10      	cmp	r3, #16
 800e012:	d0f0      	beq.n	800dff6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3714      	adds	r7, #20
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop
 800e024:	00030d40 	.word	0x00030d40

0800e028 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e028:	b480      	push	{r7}
 800e02a:	b089      	sub	sp, #36	; 0x24
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	4613      	mov	r3, r2
 800e034:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e03e:	88fb      	ldrh	r3, [r7, #6]
 800e040:	3303      	adds	r3, #3
 800e042:	089b      	lsrs	r3, r3, #2
 800e044:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e046:	2300      	movs	r3, #0
 800e048:	61bb      	str	r3, [r7, #24]
 800e04a:	e00b      	b.n	800e064 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	601a      	str	r2, [r3, #0]
    pDest++;
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	3304      	adds	r3, #4
 800e05c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	3301      	adds	r3, #1
 800e062:	61bb      	str	r3, [r7, #24]
 800e064:	69ba      	ldr	r2, [r7, #24]
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d3ef      	bcc.n	800e04c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e06c:	69fb      	ldr	r3, [r7, #28]
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3724      	adds	r7, #36	; 0x24
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr

0800e07a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e07a:	b480      	push	{r7}
 800e07c:	b085      	sub	sp, #20
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	695b      	ldr	r3, [r3, #20]
 800e086:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	4013      	ands	r3, r2
 800e090:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e092:	68fb      	ldr	r3, [r7, #12]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3714      	adds	r7, #20
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	695b      	ldr	r3, [r3, #20]
 800e0ac:	f003 0301 	and.w	r3, r3, #1
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e0da:	f023 0303 	bic.w	r3, r3, #3
 800e0de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	78fb      	ldrb	r3, [r7, #3]
 800e0ea:	f003 0303 	and.w	r3, r3, #3
 800e0ee:	68f9      	ldr	r1, [r7, #12]
 800e0f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e0f4:	4313      	orrs	r3, r2
 800e0f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e0f8:	78fb      	ldrb	r3, [r7, #3]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d107      	bne.n	800e10e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e104:	461a      	mov	r2, r3
 800e106:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e10a:	6053      	str	r3, [r2, #4]
 800e10c:	e009      	b.n	800e122 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800e10e:	78fb      	ldrb	r3, [r7, #3]
 800e110:	2b02      	cmp	r3, #2
 800e112:	d106      	bne.n	800e122 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e11a:	461a      	mov	r2, r3
 800e11c:	f241 7370 	movw	r3, #6000	; 0x1770
 800e120:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	4618      	mov	r0, r3
 800e126:	3714      	adds	r7, #20
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e130:	b480      	push	{r7}
 800e132:	b085      	sub	sp, #20
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e142:	695b      	ldr	r3, [r3, #20]
 800e144:	b29b      	uxth	r3, r3
}
 800e146:	4618      	mov	r0, r3
 800e148:	3714      	adds	r7, #20
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr

0800e152 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e152:	b480      	push	{r7}
 800e154:	b087      	sub	sp, #28
 800e156:	af00      	add	r7, sp, #0
 800e158:	6078      	str	r0, [r7, #4]
 800e15a:	460b      	mov	r3, r1
 800e15c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800e162:	78fb      	ldrb	r3, [r7, #3]
 800e164:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	015a      	lsls	r2, r3, #5
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	4413      	add	r3, r2
 800e172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	0c9b      	lsrs	r3, r3, #18
 800e17a:	f003 0303 	and.w	r3, r3, #3
 800e17e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d002      	beq.n	800e18c <USB_HC_Halt+0x3a>
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	2b02      	cmp	r3, #2
 800e18a:	d16c      	bne.n	800e266 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	015a      	lsls	r2, r3, #5
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	4413      	add	r3, r2
 800e194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	0151      	lsls	r1, r2, #5
 800e19e:	693a      	ldr	r2, [r7, #16]
 800e1a0:	440a      	add	r2, r1
 800e1a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e1a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e1aa:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d143      	bne.n	800e240 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	0151      	lsls	r1, r2, #5
 800e1ca:	693a      	ldr	r2, [r7, #16]
 800e1cc:	440a      	add	r2, r1
 800e1ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e1d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	015a      	lsls	r2, r3, #5
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	4413      	add	r3, r2
 800e1e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	68fa      	ldr	r2, [r7, #12]
 800e1e8:	0151      	lsls	r1, r2, #5
 800e1ea:	693a      	ldr	r2, [r7, #16]
 800e1ec:	440a      	add	r2, r1
 800e1ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e1f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e1f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	015a      	lsls	r2, r3, #5
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	4413      	add	r3, r2
 800e200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	0151      	lsls	r1, r2, #5
 800e20a:	693a      	ldr	r2, [r7, #16]
 800e20c:	440a      	add	r2, r1
 800e20e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e212:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e216:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	3301      	adds	r3, #1
 800e21c:	617b      	str	r3, [r7, #20]
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e224:	d81d      	bhi.n	800e262 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	015a      	lsls	r2, r3, #5
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	4413      	add	r3, r2
 800e22e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e23c:	d0ec      	beq.n	800e218 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e23e:	e080      	b.n	800e342 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	015a      	lsls	r2, r3, #5
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	4413      	add	r3, r2
 800e248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	0151      	lsls	r1, r2, #5
 800e252:	693a      	ldr	r2, [r7, #16]
 800e254:	440a      	add	r2, r1
 800e256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e25a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e25e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e260:	e06f      	b.n	800e342 <USB_HC_Halt+0x1f0>
          break;
 800e262:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e264:	e06d      	b.n	800e342 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	015a      	lsls	r2, r3, #5
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	4413      	add	r3, r2
 800e26e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	68fa      	ldr	r2, [r7, #12]
 800e276:	0151      	lsls	r1, r2, #5
 800e278:	693a      	ldr	r2, [r7, #16]
 800e27a:	440a      	add	r2, r1
 800e27c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e284:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e292:	2b00      	cmp	r3, #0
 800e294:	d143      	bne.n	800e31e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	015a      	lsls	r2, r3, #5
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	4413      	add	r3, r2
 800e29e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	68fa      	ldr	r2, [r7, #12]
 800e2a6:	0151      	lsls	r1, r2, #5
 800e2a8:	693a      	ldr	r2, [r7, #16]
 800e2aa:	440a      	add	r2, r1
 800e2ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	015a      	lsls	r2, r3, #5
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	4413      	add	r3, r2
 800e2be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	0151      	lsls	r1, r2, #5
 800e2c8:	693a      	ldr	r2, [r7, #16]
 800e2ca:	440a      	add	r2, r1
 800e2cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e2d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	015a      	lsls	r2, r3, #5
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	4413      	add	r3, r2
 800e2de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	0151      	lsls	r1, r2, #5
 800e2e8:	693a      	ldr	r2, [r7, #16]
 800e2ea:	440a      	add	r2, r1
 800e2ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e2f4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	617b      	str	r3, [r7, #20]
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e302:	d81d      	bhi.n	800e340 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	015a      	lsls	r2, r3, #5
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	4413      	add	r3, r2
 800e30c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e31a:	d0ec      	beq.n	800e2f6 <USB_HC_Halt+0x1a4>
 800e31c:	e011      	b.n	800e342 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	015a      	lsls	r2, r3, #5
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	4413      	add	r3, r2
 800e326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	68fa      	ldr	r2, [r7, #12]
 800e32e:	0151      	lsls	r1, r2, #5
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	440a      	add	r2, r1
 800e334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e33c:	6013      	str	r3, [r2, #0]
 800e33e:	e000      	b.n	800e342 <USB_HC_Halt+0x1f0>
          break;
 800e340:	bf00      	nop
    }
  }

  return HAL_OK;
 800e342:	2300      	movs	r3, #0
}
 800e344:	4618      	mov	r0, r3
 800e346:	371c      	adds	r7, #28
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b086      	sub	sp, #24
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e35c:	2300      	movs	r3, #0
 800e35e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f7ff fe08 	bl	800df76 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e366:	2110      	movs	r1, #16
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff fe15 	bl	800df98 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7ff fe38 	bl	800dfe4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e374:	2300      	movs	r3, #0
 800e376:	613b      	str	r3, [r7, #16]
 800e378:	e01f      	b.n	800e3ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	015a      	lsls	r2, r3, #5
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	4413      	add	r3, r2
 800e382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e390:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e398:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e3a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	015a      	lsls	r2, r3, #5
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	613b      	str	r3, [r7, #16]
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	2b0f      	cmp	r3, #15
 800e3be:	d9dc      	bls.n	800e37a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	613b      	str	r3, [r7, #16]
 800e3c4:	e034      	b.n	800e430 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	015a      	lsls	r2, r3, #5
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e3dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e3e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e3ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	015a      	lsls	r2, r3, #5
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	3301      	adds	r3, #1
 800e404:	617b      	str	r3, [r7, #20]
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e40c:	d80c      	bhi.n	800e428 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	4413      	add	r3, r2
 800e416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e424:	d0ec      	beq.n	800e400 <USB_StopHost+0xb0>
 800e426:	e000      	b.n	800e42a <USB_StopHost+0xda>
        break;
 800e428:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	3301      	adds	r3, #1
 800e42e:	613b      	str	r3, [r7, #16]
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	2b0f      	cmp	r3, #15
 800e434:	d9c7      	bls.n	800e3c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e43c:	461a      	mov	r2, r3
 800e43e:	f04f 33ff 	mov.w	r3, #4294967295
 800e442:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f04f 32ff 	mov.w	r2, #4294967295
 800e44a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f7ff fd81 	bl	800df54 <USB_EnableGlobalInt>

  return HAL_OK;
 800e452:	2300      	movs	r3, #0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3718      	adds	r7, #24
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e46a:	1c5a      	adds	r2, r3, #1
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 f804 	bl	800e480 <USBH_HandleSof>
}
 800e478:	bf00      	nop
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	2b0b      	cmp	r3, #11
 800e490:	d10a      	bne.n	800e4a8 <USBH_HandleSof+0x28>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d005      	beq.n	800e4a8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4a2:	699b      	ldr	r3, [r3, #24]
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	4798      	blx	r3
  }
}
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	f000 f8ae 	bl	800e638 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800e4dc:	bf00      	nop
}
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e4f4:	bf00      	nop
}
 800e4f6:	370c      	adds	r7, #12
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2201      	movs	r2, #1
 800e50c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2201      	movs	r2, #1
 800e524:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e534:	2200      	movs	r2, #0
 800e536:	4619      	mov	r1, r3
 800e538:	f000 f87e 	bl	800e638 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e53c:	2300      	movs	r3, #0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}

0800e546 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e546:	b580      	push	{r7, lr}
 800e548:	b082      	sub	sp, #8
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2201      	movs	r2, #1
 800e552:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2200      	movs	r2, #0
 800e562:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f001 f92a 	bl	800f7c0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	791b      	ldrb	r3, [r3, #4]
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 f830 	bl	800e5d8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	795b      	ldrb	r3, [r3, #5]
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 f82a 	bl	800e5d8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2201      	movs	r2, #1
 800e588:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e598:	2200      	movs	r2, #0
 800e59a:	4619      	mov	r1, r3
 800e59c:	f000 f84c 	bl	800e638 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e5a0:	2300      	movs	r3, #0
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3708      	adds	r7, #8
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b082      	sub	sp, #8
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	f000 f835 	bl	800e638 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800e5ce:	2300      	movs	r3, #0
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e5e4:	78fb      	ldrb	r3, [r7, #3]
 800e5e6:	2b0a      	cmp	r3, #10
 800e5e8:	d80d      	bhi.n	800e606 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e5ea:	78fb      	ldrb	r3, [r7, #3]
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	33e0      	adds	r3, #224	; 0xe0
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	4413      	add	r3, r2
 800e5f4:	685a      	ldr	r2, [r3, #4]
 800e5f6:	78fb      	ldrb	r3, [r7, #3]
 800e5f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e5fc:	6879      	ldr	r1, [r7, #4]
 800e5fe:	33e0      	adds	r3, #224	; 0xe0
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	440b      	add	r3, r1
 800e604:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e606:	2300      	movs	r3, #0
}
 800e608:	4618      	mov	r0, r3
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e61a:	f3ef 8305 	mrs	r3, IPSR
 800e61e:	607b      	str	r3, [r7, #4]
  return(result);
 800e620:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e622:	2b00      	cmp	r3, #0
 800e624:	bf14      	ite	ne
 800e626:	2301      	movne	r3, #1
 800e628:	2300      	moveq	r3, #0
 800e62a:	b2db      	uxtb	r3, r3
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e644:	2300      	movs	r3, #0
 800e646:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d101      	bne.n	800e656 <osMessagePut+0x1e>
    ticks = 1;
 800e652:	2301      	movs	r3, #1
 800e654:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e656:	f7ff ffdd 	bl	800e614 <inHandlerMode>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d018      	beq.n	800e692 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e660:	f107 0210 	add.w	r2, r7, #16
 800e664:	f107 0108 	add.w	r1, r7, #8
 800e668:	2300      	movs	r3, #0
 800e66a:	68f8      	ldr	r0, [r7, #12]
 800e66c:	f000 f9ae 	bl	800e9cc <xQueueGenericSendFromISR>
 800e670:	4603      	mov	r3, r0
 800e672:	2b01      	cmp	r3, #1
 800e674:	d001      	beq.n	800e67a <osMessagePut+0x42>
      return osErrorOS;
 800e676:	23ff      	movs	r3, #255	; 0xff
 800e678:	e018      	b.n	800e6ac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d014      	beq.n	800e6aa <osMessagePut+0x72>
 800e680:	4b0c      	ldr	r3, [pc, #48]	; (800e6b4 <osMessagePut+0x7c>)
 800e682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e686:	601a      	str	r2, [r3, #0]
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	e00b      	b.n	800e6aa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e692:	f107 0108 	add.w	r1, r7, #8
 800e696:	2300      	movs	r3, #0
 800e698:	697a      	ldr	r2, [r7, #20]
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f000 f894 	bl	800e7c8 <xQueueGenericSend>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d001      	beq.n	800e6aa <osMessagePut+0x72>
      return osErrorOS;
 800e6a6:	23ff      	movs	r3, #255	; 0xff
 800e6a8:	e000      	b.n	800e6ac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	e000ed04 	.word	0xe000ed04

0800e6b8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b085      	sub	sp, #20
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	689a      	ldr	r2, [r3, #8]
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	683a      	ldr	r2, [r7, #0]
 800e6e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	1c5a      	adds	r2, r3, #1
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	601a      	str	r2, [r3, #0]
}
 800e6f4:	bf00      	nop
 800e6f6:	3714      	adds	r7, #20
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e716:	d103      	bne.n	800e720 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	60fb      	str	r3, [r7, #12]
 800e71e:	e00c      	b.n	800e73a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	3308      	adds	r3, #8
 800e724:	60fb      	str	r3, [r7, #12]
 800e726:	e002      	b.n	800e72e <vListInsert+0x2e>
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	60fb      	str	r3, [r7, #12]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	429a      	cmp	r2, r3
 800e738:	d2f6      	bcs.n	800e728 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	685b      	ldr	r3, [r3, #4]
 800e746:	683a      	ldr	r2, [r7, #0]
 800e748:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	683a      	ldr	r2, [r7, #0]
 800e754:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	1c5a      	adds	r2, r3, #1
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	601a      	str	r2, [r3, #0]
}
 800e766:	bf00      	nop
 800e768:	3714      	adds	r7, #20
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr

0800e772 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e772:	b480      	push	{r7}
 800e774:	b085      	sub	sp, #20
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	691b      	ldr	r3, [r3, #16]
 800e77e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	6892      	ldr	r2, [r2, #8]
 800e788:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	6852      	ldr	r2, [r2, #4]
 800e792:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d103      	bne.n	800e7a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	689a      	ldr	r2, [r3, #8]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	1e5a      	subs	r2, r3, #1
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3714      	adds	r7, #20
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr
	...

0800e7c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b08e      	sub	sp, #56	; 0x38
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
 800e7d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10b      	bne.n	800e7fc <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	b672      	cpsid	i
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	b662      	cpsie	i
 800e7f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7fa:	e7fe      	b.n	800e7fa <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d103      	bne.n	800e80a <xQueueGenericSend+0x42>
 800e802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e806:	2b00      	cmp	r3, #0
 800e808:	d101      	bne.n	800e80e <xQueueGenericSend+0x46>
 800e80a:	2301      	movs	r3, #1
 800e80c:	e000      	b.n	800e810 <xQueueGenericSend+0x48>
 800e80e:	2300      	movs	r3, #0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d10b      	bne.n	800e82c <xQueueGenericSend+0x64>
 800e814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e818:	b672      	cpsid	i
 800e81a:	f383 8811 	msr	BASEPRI, r3
 800e81e:	f3bf 8f6f 	isb	sy
 800e822:	f3bf 8f4f 	dsb	sy
 800e826:	b662      	cpsie	i
 800e828:	627b      	str	r3, [r7, #36]	; 0x24
 800e82a:	e7fe      	b.n	800e82a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2b02      	cmp	r3, #2
 800e830:	d103      	bne.n	800e83a <xQueueGenericSend+0x72>
 800e832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e836:	2b01      	cmp	r3, #1
 800e838:	d101      	bne.n	800e83e <xQueueGenericSend+0x76>
 800e83a:	2301      	movs	r3, #1
 800e83c:	e000      	b.n	800e840 <xQueueGenericSend+0x78>
 800e83e:	2300      	movs	r3, #0
 800e840:	2b00      	cmp	r3, #0
 800e842:	d10b      	bne.n	800e85c <xQueueGenericSend+0x94>
 800e844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e848:	b672      	cpsid	i
 800e84a:	f383 8811 	msr	BASEPRI, r3
 800e84e:	f3bf 8f6f 	isb	sy
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	b662      	cpsie	i
 800e858:	623b      	str	r3, [r7, #32]
 800e85a:	e7fe      	b.n	800e85a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e85c:	f000 fd3e 	bl	800f2dc <xTaskGetSchedulerState>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d102      	bne.n	800e86c <xQueueGenericSend+0xa4>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d101      	bne.n	800e870 <xQueueGenericSend+0xa8>
 800e86c:	2301      	movs	r3, #1
 800e86e:	e000      	b.n	800e872 <xQueueGenericSend+0xaa>
 800e870:	2300      	movs	r3, #0
 800e872:	2b00      	cmp	r3, #0
 800e874:	d10b      	bne.n	800e88e <xQueueGenericSend+0xc6>
 800e876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87a:	b672      	cpsid	i
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	b662      	cpsie	i
 800e88a:	61fb      	str	r3, [r7, #28]
 800e88c:	e7fe      	b.n	800e88c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e88e:	f000 fe4b 	bl	800f528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d302      	bcc.n	800e8a4 <xQueueGenericSend+0xdc>
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	2b02      	cmp	r3, #2
 800e8a2:	d129      	bne.n	800e8f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	68b9      	ldr	r1, [r7, #8]
 800e8a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8aa:	f000 f92b 	bl	800eb04 <prvCopyDataToQueue>
 800e8ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d010      	beq.n	800e8da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ba:	3324      	adds	r3, #36	; 0x24
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f000 fc03 	bl	800f0c8 <xTaskRemoveFromEventList>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d013      	beq.n	800e8f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e8c8:	4b3f      	ldr	r3, [pc, #252]	; (800e9c8 <xQueueGenericSend+0x200>)
 800e8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ce:	601a      	str	r2, [r3, #0]
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	f3bf 8f6f 	isb	sy
 800e8d8:	e00a      	b.n	800e8f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d007      	beq.n	800e8f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e8e0:	4b39      	ldr	r3, [pc, #228]	; (800e9c8 <xQueueGenericSend+0x200>)
 800e8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8e6:	601a      	str	r2, [r3, #0]
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e8f0:	f000 fe4c 	bl	800f58c <vPortExitCritical>
				return pdPASS;
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	e063      	b.n	800e9c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d103      	bne.n	800e906 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e8fe:	f000 fe45 	bl	800f58c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e902:	2300      	movs	r3, #0
 800e904:	e05c      	b.n	800e9c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d106      	bne.n	800e91a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e90c:	f107 0314 	add.w	r3, r7, #20
 800e910:	4618      	mov	r0, r3
 800e912:	f000 fc3d 	bl	800f190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e916:	2301      	movs	r3, #1
 800e918:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e91a:	f000 fe37 	bl	800f58c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e91e:	f000 f9c5 	bl	800ecac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e922:	f000 fe01 	bl	800f528 <vPortEnterCritical>
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e92c:	b25b      	sxtb	r3, r3
 800e92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e932:	d103      	bne.n	800e93c <xQueueGenericSend+0x174>
 800e934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e936:	2200      	movs	r2, #0
 800e938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e942:	b25b      	sxtb	r3, r3
 800e944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e948:	d103      	bne.n	800e952 <xQueueGenericSend+0x18a>
 800e94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94c:	2200      	movs	r2, #0
 800e94e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e952:	f000 fe1b 	bl	800f58c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e956:	1d3a      	adds	r2, r7, #4
 800e958:	f107 0314 	add.w	r3, r7, #20
 800e95c:	4611      	mov	r1, r2
 800e95e:	4618      	mov	r0, r3
 800e960:	f000 fc2c 	bl	800f1bc <xTaskCheckForTimeOut>
 800e964:	4603      	mov	r3, r0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d124      	bne.n	800e9b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e96a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e96c:	f000 f986 	bl	800ec7c <prvIsQueueFull>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d018      	beq.n	800e9a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e978:	3310      	adds	r3, #16
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	4611      	mov	r1, r2
 800e97e:	4618      	mov	r0, r3
 800e980:	f000 fb7c 	bl	800f07c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e986:	f000 f927 	bl	800ebd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e98a:	f000 f99d 	bl	800ecc8 <xTaskResumeAll>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	f47f af7c 	bne.w	800e88e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e996:	4b0c      	ldr	r3, [pc, #48]	; (800e9c8 <xQueueGenericSend+0x200>)
 800e998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e99c:	601a      	str	r2, [r3, #0]
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	e772      	b.n	800e88e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e9a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9aa:	f000 f915 	bl	800ebd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9ae:	f000 f98b 	bl	800ecc8 <xTaskResumeAll>
 800e9b2:	e76c      	b.n	800e88e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e9b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9b6:	f000 f90f 	bl	800ebd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9ba:	f000 f985 	bl	800ecc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e9be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3738      	adds	r7, #56	; 0x38
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	e000ed04 	.word	0xe000ed04

0800e9cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b08e      	sub	sp, #56	; 0x38
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	607a      	str	r2, [r7, #4]
 800e9d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10b      	bne.n	800e9fc <xQueueGenericSendFromISR+0x30>
 800e9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e8:	b672      	cpsid	i
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	b662      	cpsie	i
 800e9f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9fa:	e7fe      	b.n	800e9fa <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d103      	bne.n	800ea0a <xQueueGenericSendFromISR+0x3e>
 800ea02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d101      	bne.n	800ea0e <xQueueGenericSendFromISR+0x42>
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e000      	b.n	800ea10 <xQueueGenericSendFromISR+0x44>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10b      	bne.n	800ea2c <xQueueGenericSendFromISR+0x60>
 800ea14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea18:	b672      	cpsid	i
 800ea1a:	f383 8811 	msr	BASEPRI, r3
 800ea1e:	f3bf 8f6f 	isb	sy
 800ea22:	f3bf 8f4f 	dsb	sy
 800ea26:	b662      	cpsie	i
 800ea28:	623b      	str	r3, [r7, #32]
 800ea2a:	e7fe      	b.n	800ea2a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	d103      	bne.n	800ea3a <xQueueGenericSendFromISR+0x6e>
 800ea32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	d101      	bne.n	800ea3e <xQueueGenericSendFromISR+0x72>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e000      	b.n	800ea40 <xQueueGenericSendFromISR+0x74>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d10b      	bne.n	800ea5c <xQueueGenericSendFromISR+0x90>
 800ea44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea48:	b672      	cpsid	i
 800ea4a:	f383 8811 	msr	BASEPRI, r3
 800ea4e:	f3bf 8f6f 	isb	sy
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	b662      	cpsie	i
 800ea58:	61fb      	str	r3, [r7, #28]
 800ea5a:	e7fe      	b.n	800ea5a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea5c:	f000 fe16 	bl	800f68c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ea60:	f3ef 8211 	mrs	r2, BASEPRI
 800ea64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea68:	b672      	cpsid	i
 800ea6a:	f383 8811 	msr	BASEPRI, r3
 800ea6e:	f3bf 8f6f 	isb	sy
 800ea72:	f3bf 8f4f 	dsb	sy
 800ea76:	b662      	cpsie	i
 800ea78:	61ba      	str	r2, [r7, #24]
 800ea7a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ea7c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d302      	bcc.n	800ea92 <xQueueGenericSendFromISR+0xc6>
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	2b02      	cmp	r3, #2
 800ea90:	d12c      	bne.n	800eaec <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea9c:	683a      	ldr	r2, [r7, #0]
 800ea9e:	68b9      	ldr	r1, [r7, #8]
 800eaa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaa2:	f000 f82f 	bl	800eb04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eaa6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800eaaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaae:	d112      	bne.n	800ead6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d016      	beq.n	800eae6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaba:	3324      	adds	r3, #36	; 0x24
 800eabc:	4618      	mov	r0, r3
 800eabe:	f000 fb03 	bl	800f0c8 <xTaskRemoveFromEventList>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d00e      	beq.n	800eae6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00b      	beq.n	800eae6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2201      	movs	r2, #1
 800ead2:	601a      	str	r2, [r3, #0]
 800ead4:	e007      	b.n	800eae6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ead6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eada:	3301      	adds	r3, #1
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	b25a      	sxtb	r2, r3
 800eae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eae6:	2301      	movs	r3, #1
 800eae8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800eaea:	e001      	b.n	800eaf0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eaec:	2300      	movs	r3, #0
 800eaee:	637b      	str	r3, [r7, #52]	; 0x34
 800eaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3738      	adds	r7, #56	; 0x38
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eb10:	2300      	movs	r3, #0
 800eb12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d10d      	bne.n	800eb3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d14d      	bne.n	800ebc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f000 fbf2 	bl	800f318 <xTaskPriorityDisinherit>
 800eb34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	609a      	str	r2, [r3, #8]
 800eb3c:	e043      	b.n	800ebc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d119      	bne.n	800eb78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6858      	ldr	r0, [r3, #4]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	68b9      	ldr	r1, [r7, #8]
 800eb50:	f000 fea2 	bl	800f898 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	685a      	ldr	r2, [r3, #4]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb5c:	441a      	add	r2, r3
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	685a      	ldr	r2, [r3, #4]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	689b      	ldr	r3, [r3, #8]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d32b      	bcc.n	800ebc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	605a      	str	r2, [r3, #4]
 800eb76:	e026      	b.n	800ebc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	68d8      	ldr	r0, [r3, #12]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb80:	461a      	mov	r2, r3
 800eb82:	68b9      	ldr	r1, [r7, #8]
 800eb84:	f000 fe88 	bl	800f898 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	68da      	ldr	r2, [r3, #12]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb90:	425b      	negs	r3, r3
 800eb92:	441a      	add	r2, r3
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	68da      	ldr	r2, [r3, #12]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d207      	bcs.n	800ebb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	689a      	ldr	r2, [r3, #8]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebac:	425b      	negs	r3, r3
 800ebae:	441a      	add	r2, r3
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b02      	cmp	r3, #2
 800ebb8:	d105      	bne.n	800ebc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d002      	beq.n	800ebc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	3b01      	subs	r3, #1
 800ebc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	1c5a      	adds	r2, r3, #1
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ebce:	697b      	ldr	r3, [r7, #20]
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3718      	adds	r7, #24
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ebe0:	f000 fca2 	bl	800f528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebec:	e011      	b.n	800ec12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d012      	beq.n	800ec1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	3324      	adds	r3, #36	; 0x24
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f000 fa64 	bl	800f0c8 <xTaskRemoveFromEventList>
 800ec00:	4603      	mov	r3, r0
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d001      	beq.n	800ec0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ec06:	f000 fb3d 	bl	800f284 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ec0a:	7bfb      	ldrb	r3, [r7, #15]
 800ec0c:	3b01      	subs	r3, #1
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	dce9      	bgt.n	800ebee <prvUnlockQueue+0x16>
 800ec1a:	e000      	b.n	800ec1e <prvUnlockQueue+0x46>
					break;
 800ec1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	22ff      	movs	r2, #255	; 0xff
 800ec22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ec26:	f000 fcb1 	bl	800f58c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ec2a:	f000 fc7d 	bl	800f528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec36:	e011      	b.n	800ec5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	691b      	ldr	r3, [r3, #16]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d012      	beq.n	800ec66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	3310      	adds	r3, #16
 800ec44:	4618      	mov	r0, r3
 800ec46:	f000 fa3f 	bl	800f0c8 <xTaskRemoveFromEventList>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d001      	beq.n	800ec54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ec50:	f000 fb18 	bl	800f284 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ec54:	7bbb      	ldrb	r3, [r7, #14]
 800ec56:	3b01      	subs	r3, #1
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	dce9      	bgt.n	800ec38 <prvUnlockQueue+0x60>
 800ec64:	e000      	b.n	800ec68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ec66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	22ff      	movs	r2, #255	; 0xff
 800ec6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ec70:	f000 fc8c 	bl	800f58c <vPortExitCritical>
}
 800ec74:	bf00      	nop
 800ec76:	3710      	adds	r7, #16
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec84:	f000 fc50 	bl	800f528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d102      	bne.n	800ec9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ec94:	2301      	movs	r3, #1
 800ec96:	60fb      	str	r3, [r7, #12]
 800ec98:	e001      	b.n	800ec9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec9e:	f000 fc75 	bl	800f58c <vPortExitCritical>

	return xReturn;
 800eca2:	68fb      	ldr	r3, [r7, #12]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ecac:	b480      	push	{r7}
 800ecae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ecb0:	4b04      	ldr	r3, [pc, #16]	; (800ecc4 <vTaskSuspendAll+0x18>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	4a03      	ldr	r2, [pc, #12]	; (800ecc4 <vTaskSuspendAll+0x18>)
 800ecb8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ecba:	bf00      	nop
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr
 800ecc4:	200004dc 	.word	0x200004dc

0800ecc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ecd6:	4b42      	ldr	r3, [pc, #264]	; (800ede0 <xTaskResumeAll+0x118>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d10b      	bne.n	800ecf6 <xTaskResumeAll+0x2e>
	__asm volatile
 800ecde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece2:	b672      	cpsid	i
 800ece4:	f383 8811 	msr	BASEPRI, r3
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	f3bf 8f4f 	dsb	sy
 800ecf0:	b662      	cpsie	i
 800ecf2:	603b      	str	r3, [r7, #0]
 800ecf4:	e7fe      	b.n	800ecf4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ecf6:	f000 fc17 	bl	800f528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ecfa:	4b39      	ldr	r3, [pc, #228]	; (800ede0 <xTaskResumeAll+0x118>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	4a37      	ldr	r2, [pc, #220]	; (800ede0 <xTaskResumeAll+0x118>)
 800ed02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed04:	4b36      	ldr	r3, [pc, #216]	; (800ede0 <xTaskResumeAll+0x118>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d161      	bne.n	800edd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ed0c:	4b35      	ldr	r3, [pc, #212]	; (800ede4 <xTaskResumeAll+0x11c>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d05d      	beq.n	800edd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed14:	e02e      	b.n	800ed74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed16:	4b34      	ldr	r3, [pc, #208]	; (800ede8 <xTaskResumeAll+0x120>)
 800ed18:	68db      	ldr	r3, [r3, #12]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	3318      	adds	r3, #24
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7ff fd25 	bl	800e772 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	3304      	adds	r3, #4
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7ff fd20 	bl	800e772 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed36:	2201      	movs	r2, #1
 800ed38:	409a      	lsls	r2, r3
 800ed3a:	4b2c      	ldr	r3, [pc, #176]	; (800edec <xTaskResumeAll+0x124>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	4a2a      	ldr	r2, [pc, #168]	; (800edec <xTaskResumeAll+0x124>)
 800ed42:	6013      	str	r3, [r2, #0]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed48:	4613      	mov	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	4413      	add	r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	4a27      	ldr	r2, [pc, #156]	; (800edf0 <xTaskResumeAll+0x128>)
 800ed52:	441a      	add	r2, r3
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3304      	adds	r3, #4
 800ed58:	4619      	mov	r1, r3
 800ed5a:	4610      	mov	r0, r2
 800ed5c:	f7ff fcac 	bl	800e6b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed64:	4b23      	ldr	r3, [pc, #140]	; (800edf4 <xTaskResumeAll+0x12c>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d302      	bcc.n	800ed74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ed6e:	4b22      	ldr	r3, [pc, #136]	; (800edf8 <xTaskResumeAll+0x130>)
 800ed70:	2201      	movs	r2, #1
 800ed72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed74:	4b1c      	ldr	r3, [pc, #112]	; (800ede8 <xTaskResumeAll+0x120>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d1cc      	bne.n	800ed16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d001      	beq.n	800ed86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed82:	f000 fa8b 	bl	800f29c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ed86:	4b1d      	ldr	r3, [pc, #116]	; (800edfc <xTaskResumeAll+0x134>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d010      	beq.n	800edb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ed92:	f000 f837 	bl	800ee04 <xTaskIncrementTick>
 800ed96:	4603      	mov	r3, r0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d002      	beq.n	800eda2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ed9c:	4b16      	ldr	r3, [pc, #88]	; (800edf8 <xTaskResumeAll+0x130>)
 800ed9e:	2201      	movs	r2, #1
 800eda0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	3b01      	subs	r3, #1
 800eda6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d1f1      	bne.n	800ed92 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800edae:	4b13      	ldr	r3, [pc, #76]	; (800edfc <xTaskResumeAll+0x134>)
 800edb0:	2200      	movs	r2, #0
 800edb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800edb4:	4b10      	ldr	r3, [pc, #64]	; (800edf8 <xTaskResumeAll+0x130>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d009      	beq.n	800edd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800edbc:	2301      	movs	r3, #1
 800edbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800edc0:	4b0f      	ldr	r3, [pc, #60]	; (800ee00 <xTaskResumeAll+0x138>)
 800edc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edc6:	601a      	str	r2, [r3, #0]
 800edc8:	f3bf 8f4f 	dsb	sy
 800edcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800edd0:	f000 fbdc 	bl	800f58c <vPortExitCritical>

	return xAlreadyYielded;
 800edd4:	68bb      	ldr	r3, [r7, #8]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	200004dc 	.word	0x200004dc
 800ede4:	200004bc 	.word	0x200004bc
 800ede8:	20000494 	.word	0x20000494
 800edec:	200004c4 	.word	0x200004c4
 800edf0:	20000400 	.word	0x20000400
 800edf4:	200003fc 	.word	0x200003fc
 800edf8:	200004d0 	.word	0x200004d0
 800edfc:	200004cc 	.word	0x200004cc
 800ee00:	e000ed04 	.word	0xe000ed04

0800ee04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b086      	sub	sp, #24
 800ee08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee0e:	4b4f      	ldr	r3, [pc, #316]	; (800ef4c <xTaskIncrementTick+0x148>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f040 8089 	bne.w	800ef2a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ee18:	4b4d      	ldr	r3, [pc, #308]	; (800ef50 <xTaskIncrementTick+0x14c>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ee20:	4a4b      	ldr	r2, [pc, #300]	; (800ef50 <xTaskIncrementTick+0x14c>)
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d121      	bne.n	800ee70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ee2c:	4b49      	ldr	r3, [pc, #292]	; (800ef54 <xTaskIncrementTick+0x150>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d00b      	beq.n	800ee4e <xTaskIncrementTick+0x4a>
 800ee36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3a:	b672      	cpsid	i
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	b662      	cpsie	i
 800ee4a:	603b      	str	r3, [r7, #0]
 800ee4c:	e7fe      	b.n	800ee4c <xTaskIncrementTick+0x48>
 800ee4e:	4b41      	ldr	r3, [pc, #260]	; (800ef54 <xTaskIncrementTick+0x150>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	60fb      	str	r3, [r7, #12]
 800ee54:	4b40      	ldr	r3, [pc, #256]	; (800ef58 <xTaskIncrementTick+0x154>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a3e      	ldr	r2, [pc, #248]	; (800ef54 <xTaskIncrementTick+0x150>)
 800ee5a:	6013      	str	r3, [r2, #0]
 800ee5c:	4a3e      	ldr	r2, [pc, #248]	; (800ef58 <xTaskIncrementTick+0x154>)
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6013      	str	r3, [r2, #0]
 800ee62:	4b3e      	ldr	r3, [pc, #248]	; (800ef5c <xTaskIncrementTick+0x158>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	3301      	adds	r3, #1
 800ee68:	4a3c      	ldr	r2, [pc, #240]	; (800ef5c <xTaskIncrementTick+0x158>)
 800ee6a:	6013      	str	r3, [r2, #0]
 800ee6c:	f000 fa16 	bl	800f29c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee70:	4b3b      	ldr	r3, [pc, #236]	; (800ef60 <xTaskIncrementTick+0x15c>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	693a      	ldr	r2, [r7, #16]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d348      	bcc.n	800ef0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee7a:	4b36      	ldr	r3, [pc, #216]	; (800ef54 <xTaskIncrementTick+0x150>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d104      	bne.n	800ee8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee84:	4b36      	ldr	r3, [pc, #216]	; (800ef60 <xTaskIncrementTick+0x15c>)
 800ee86:	f04f 32ff 	mov.w	r2, #4294967295
 800ee8a:	601a      	str	r2, [r3, #0]
					break;
 800ee8c:	e03e      	b.n	800ef0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee8e:	4b31      	ldr	r3, [pc, #196]	; (800ef54 <xTaskIncrementTick+0x150>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ee9e:	693a      	ldr	r2, [r7, #16]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d203      	bcs.n	800eeae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eea6:	4a2e      	ldr	r2, [pc, #184]	; (800ef60 <xTaskIncrementTick+0x15c>)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eeac:	e02e      	b.n	800ef0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	3304      	adds	r3, #4
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7ff fc5d 	bl	800e772 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d004      	beq.n	800eeca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	3318      	adds	r3, #24
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7ff fc54 	bl	800e772 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eece:	2201      	movs	r2, #1
 800eed0:	409a      	lsls	r2, r3
 800eed2:	4b24      	ldr	r3, [pc, #144]	; (800ef64 <xTaskIncrementTick+0x160>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4313      	orrs	r3, r2
 800eed8:	4a22      	ldr	r2, [pc, #136]	; (800ef64 <xTaskIncrementTick+0x160>)
 800eeda:	6013      	str	r3, [r2, #0]
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee0:	4613      	mov	r3, r2
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	4413      	add	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	4a1f      	ldr	r2, [pc, #124]	; (800ef68 <xTaskIncrementTick+0x164>)
 800eeea:	441a      	add	r2, r3
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	3304      	adds	r3, #4
 800eef0:	4619      	mov	r1, r3
 800eef2:	4610      	mov	r0, r2
 800eef4:	f7ff fbe0 	bl	800e6b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eefc:	4b1b      	ldr	r3, [pc, #108]	; (800ef6c <xTaskIncrementTick+0x168>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d3b9      	bcc.n	800ee7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ef06:	2301      	movs	r3, #1
 800ef08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef0a:	e7b6      	b.n	800ee7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ef0c:	4b17      	ldr	r3, [pc, #92]	; (800ef6c <xTaskIncrementTick+0x168>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef12:	4915      	ldr	r1, [pc, #84]	; (800ef68 <xTaskIncrementTick+0x164>)
 800ef14:	4613      	mov	r3, r2
 800ef16:	009b      	lsls	r3, r3, #2
 800ef18:	4413      	add	r3, r2
 800ef1a:	009b      	lsls	r3, r3, #2
 800ef1c:	440b      	add	r3, r1
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d907      	bls.n	800ef34 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800ef24:	2301      	movs	r3, #1
 800ef26:	617b      	str	r3, [r7, #20]
 800ef28:	e004      	b.n	800ef34 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ef2a:	4b11      	ldr	r3, [pc, #68]	; (800ef70 <xTaskIncrementTick+0x16c>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	4a0f      	ldr	r2, [pc, #60]	; (800ef70 <xTaskIncrementTick+0x16c>)
 800ef32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ef34:	4b0f      	ldr	r3, [pc, #60]	; (800ef74 <xTaskIncrementTick+0x170>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d001      	beq.n	800ef40 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ef40:	697b      	ldr	r3, [r7, #20]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3718      	adds	r7, #24
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	200004dc 	.word	0x200004dc
 800ef50:	200004c0 	.word	0x200004c0
 800ef54:	2000048c 	.word	0x2000048c
 800ef58:	20000490 	.word	0x20000490
 800ef5c:	200004d4 	.word	0x200004d4
 800ef60:	200004d8 	.word	0x200004d8
 800ef64:	200004c4 	.word	0x200004c4
 800ef68:	20000400 	.word	0x20000400
 800ef6c:	200003fc 	.word	0x200003fc
 800ef70:	200004cc 	.word	0x200004cc
 800ef74:	200004d0 	.word	0x200004d0

0800ef78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b088      	sub	sp, #32
 800ef7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef7e:	4b3a      	ldr	r3, [pc, #232]	; (800f068 <vTaskSwitchContext+0xf0>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d003      	beq.n	800ef8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef86:	4b39      	ldr	r3, [pc, #228]	; (800f06c <vTaskSwitchContext+0xf4>)
 800ef88:	2201      	movs	r2, #1
 800ef8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef8c:	e067      	b.n	800f05e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800ef8e:	4b37      	ldr	r3, [pc, #220]	; (800f06c <vTaskSwitchContext+0xf4>)
 800ef90:	2200      	movs	r2, #0
 800ef92:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ef94:	4b36      	ldr	r3, [pc, #216]	; (800f070 <vTaskSwitchContext+0xf8>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef9a:	61fb      	str	r3, [r7, #28]
 800ef9c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800efa0:	61bb      	str	r3, [r7, #24]
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	69ba      	ldr	r2, [r7, #24]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d111      	bne.n	800efd0 <vTaskSwitchContext+0x58>
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	3304      	adds	r3, #4
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	69ba      	ldr	r2, [r7, #24]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d10b      	bne.n	800efd0 <vTaskSwitchContext+0x58>
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	3308      	adds	r3, #8
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	69ba      	ldr	r2, [r7, #24]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d105      	bne.n	800efd0 <vTaskSwitchContext+0x58>
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	330c      	adds	r3, #12
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	69ba      	ldr	r2, [r7, #24]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d008      	beq.n	800efe2 <vTaskSwitchContext+0x6a>
 800efd0:	4b27      	ldr	r3, [pc, #156]	; (800f070 <vTaskSwitchContext+0xf8>)
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	4b26      	ldr	r3, [pc, #152]	; (800f070 <vTaskSwitchContext+0xf8>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	3334      	adds	r3, #52	; 0x34
 800efda:	4619      	mov	r1, r3
 800efdc:	4610      	mov	r0, r2
 800efde:	f7f1 fa97 	bl	8000510 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efe2:	4b24      	ldr	r3, [pc, #144]	; (800f074 <vTaskSwitchContext+0xfc>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	fab3 f383 	clz	r3, r3
 800efee:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800eff0:	7afb      	ldrb	r3, [r7, #11]
 800eff2:	f1c3 031f 	rsb	r3, r3, #31
 800eff6:	617b      	str	r3, [r7, #20]
 800eff8:	491f      	ldr	r1, [pc, #124]	; (800f078 <vTaskSwitchContext+0x100>)
 800effa:	697a      	ldr	r2, [r7, #20]
 800effc:	4613      	mov	r3, r2
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4413      	add	r3, r2
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	440b      	add	r3, r1
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d10b      	bne.n	800f024 <vTaskSwitchContext+0xac>
	__asm volatile
 800f00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f010:	b672      	cpsid	i
 800f012:	f383 8811 	msr	BASEPRI, r3
 800f016:	f3bf 8f6f 	isb	sy
 800f01a:	f3bf 8f4f 	dsb	sy
 800f01e:	b662      	cpsie	i
 800f020:	607b      	str	r3, [r7, #4]
 800f022:	e7fe      	b.n	800f022 <vTaskSwitchContext+0xaa>
 800f024:	697a      	ldr	r2, [r7, #20]
 800f026:	4613      	mov	r3, r2
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	4413      	add	r3, r2
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	4a12      	ldr	r2, [pc, #72]	; (800f078 <vTaskSwitchContext+0x100>)
 800f030:	4413      	add	r3, r2
 800f032:	613b      	str	r3, [r7, #16]
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	685a      	ldr	r2, [r3, #4]
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	605a      	str	r2, [r3, #4]
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	685a      	ldr	r2, [r3, #4]
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	3308      	adds	r3, #8
 800f046:	429a      	cmp	r2, r3
 800f048:	d104      	bne.n	800f054 <vTaskSwitchContext+0xdc>
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	685a      	ldr	r2, [r3, #4]
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	605a      	str	r2, [r3, #4]
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	4a05      	ldr	r2, [pc, #20]	; (800f070 <vTaskSwitchContext+0xf8>)
 800f05c:	6013      	str	r3, [r2, #0]
}
 800f05e:	bf00      	nop
 800f060:	3720      	adds	r7, #32
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	200004dc 	.word	0x200004dc
 800f06c:	200004d0 	.word	0x200004d0
 800f070:	200003fc 	.word	0x200003fc
 800f074:	200004c4 	.word	0x200004c4
 800f078:	20000400 	.word	0x20000400

0800f07c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10b      	bne.n	800f0a4 <vTaskPlaceOnEventList+0x28>
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	b672      	cpsid	i
 800f092:	f383 8811 	msr	BASEPRI, r3
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	b662      	cpsie	i
 800f0a0:	60fb      	str	r3, [r7, #12]
 800f0a2:	e7fe      	b.n	800f0a2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f0a4:	4b07      	ldr	r3, [pc, #28]	; (800f0c4 <vTaskPlaceOnEventList+0x48>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	3318      	adds	r3, #24
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7ff fb27 	bl	800e700 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f0b2:	2101      	movs	r1, #1
 800f0b4:	6838      	ldr	r0, [r7, #0]
 800f0b6:	f000 f9b7 	bl	800f428 <prvAddCurrentTaskToDelayedList>
}
 800f0ba:	bf00      	nop
 800f0bc:	3710      	adds	r7, #16
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	200003fc 	.word	0x200003fc

0800f0c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b086      	sub	sp, #24
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	68db      	ldr	r3, [r3, #12]
 800f0d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d10b      	bne.n	800f0f6 <xTaskRemoveFromEventList+0x2e>
 800f0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e2:	b672      	cpsid	i
 800f0e4:	f383 8811 	msr	BASEPRI, r3
 800f0e8:	f3bf 8f6f 	isb	sy
 800f0ec:	f3bf 8f4f 	dsb	sy
 800f0f0:	b662      	cpsie	i
 800f0f2:	60fb      	str	r3, [r7, #12]
 800f0f4:	e7fe      	b.n	800f0f4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	3318      	adds	r3, #24
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff fb39 	bl	800e772 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f100:	4b1d      	ldr	r3, [pc, #116]	; (800f178 <xTaskRemoveFromEventList+0xb0>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d11c      	bne.n	800f142 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	3304      	adds	r3, #4
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7ff fb30 	bl	800e772 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f116:	2201      	movs	r2, #1
 800f118:	409a      	lsls	r2, r3
 800f11a:	4b18      	ldr	r3, [pc, #96]	; (800f17c <xTaskRemoveFromEventList+0xb4>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4313      	orrs	r3, r2
 800f120:	4a16      	ldr	r2, [pc, #88]	; (800f17c <xTaskRemoveFromEventList+0xb4>)
 800f122:	6013      	str	r3, [r2, #0]
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f128:	4613      	mov	r3, r2
 800f12a:	009b      	lsls	r3, r3, #2
 800f12c:	4413      	add	r3, r2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	4a13      	ldr	r2, [pc, #76]	; (800f180 <xTaskRemoveFromEventList+0xb8>)
 800f132:	441a      	add	r2, r3
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	3304      	adds	r3, #4
 800f138:	4619      	mov	r1, r3
 800f13a:	4610      	mov	r0, r2
 800f13c:	f7ff fabc 	bl	800e6b8 <vListInsertEnd>
 800f140:	e005      	b.n	800f14e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	3318      	adds	r3, #24
 800f146:	4619      	mov	r1, r3
 800f148:	480e      	ldr	r0, [pc, #56]	; (800f184 <xTaskRemoveFromEventList+0xbc>)
 800f14a:	f7ff fab5 	bl	800e6b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f152:	4b0d      	ldr	r3, [pc, #52]	; (800f188 <xTaskRemoveFromEventList+0xc0>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f158:	429a      	cmp	r2, r3
 800f15a:	d905      	bls.n	800f168 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f15c:	2301      	movs	r3, #1
 800f15e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f160:	4b0a      	ldr	r3, [pc, #40]	; (800f18c <xTaskRemoveFromEventList+0xc4>)
 800f162:	2201      	movs	r2, #1
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	e001      	b.n	800f16c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f168:	2300      	movs	r3, #0
 800f16a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f16c:	697b      	ldr	r3, [r7, #20]
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3718      	adds	r7, #24
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	200004dc 	.word	0x200004dc
 800f17c:	200004c4 	.word	0x200004c4
 800f180:	20000400 	.word	0x20000400
 800f184:	20000494 	.word	0x20000494
 800f188:	200003fc 	.word	0x200003fc
 800f18c:	200004d0 	.word	0x200004d0

0800f190 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f198:	4b06      	ldr	r3, [pc, #24]	; (800f1b4 <vTaskInternalSetTimeOutState+0x24>)
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f1a0:	4b05      	ldr	r3, [pc, #20]	; (800f1b8 <vTaskInternalSetTimeOutState+0x28>)
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	605a      	str	r2, [r3, #4]
}
 800f1a8:	bf00      	nop
 800f1aa:	370c      	adds	r7, #12
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr
 800f1b4:	200004d4 	.word	0x200004d4
 800f1b8:	200004c0 	.word	0x200004c0

0800f1bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b088      	sub	sp, #32
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d10b      	bne.n	800f1e4 <xTaskCheckForTimeOut+0x28>
 800f1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d0:	b672      	cpsid	i
 800f1d2:	f383 8811 	msr	BASEPRI, r3
 800f1d6:	f3bf 8f6f 	isb	sy
 800f1da:	f3bf 8f4f 	dsb	sy
 800f1de:	b662      	cpsie	i
 800f1e0:	613b      	str	r3, [r7, #16]
 800f1e2:	e7fe      	b.n	800f1e2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d10b      	bne.n	800f202 <xTaskCheckForTimeOut+0x46>
 800f1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ee:	b672      	cpsid	i
 800f1f0:	f383 8811 	msr	BASEPRI, r3
 800f1f4:	f3bf 8f6f 	isb	sy
 800f1f8:	f3bf 8f4f 	dsb	sy
 800f1fc:	b662      	cpsie	i
 800f1fe:	60fb      	str	r3, [r7, #12]
 800f200:	e7fe      	b.n	800f200 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800f202:	f000 f991 	bl	800f528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f206:	4b1d      	ldr	r3, [pc, #116]	; (800f27c <xTaskCheckForTimeOut+0xc0>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	69ba      	ldr	r2, [r7, #24]
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f21e:	d102      	bne.n	800f226 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f220:	2300      	movs	r3, #0
 800f222:	61fb      	str	r3, [r7, #28]
 800f224:	e023      	b.n	800f26e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	4b15      	ldr	r3, [pc, #84]	; (800f280 <xTaskCheckForTimeOut+0xc4>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d007      	beq.n	800f242 <xTaskCheckForTimeOut+0x86>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	69ba      	ldr	r2, [r7, #24]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d302      	bcc.n	800f242 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f23c:	2301      	movs	r3, #1
 800f23e:	61fb      	str	r3, [r7, #28]
 800f240:	e015      	b.n	800f26e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	697a      	ldr	r2, [r7, #20]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d20b      	bcs.n	800f264 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	1ad2      	subs	r2, r2, r3
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff ff99 	bl	800f190 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f25e:	2300      	movs	r3, #0
 800f260:	61fb      	str	r3, [r7, #28]
 800f262:	e004      	b.n	800f26e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	2200      	movs	r2, #0
 800f268:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f26a:	2301      	movs	r3, #1
 800f26c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f26e:	f000 f98d 	bl	800f58c <vPortExitCritical>

	return xReturn;
 800f272:	69fb      	ldr	r3, [r7, #28]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3720      	adds	r7, #32
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	200004c0 	.word	0x200004c0
 800f280:	200004d4 	.word	0x200004d4

0800f284 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f284:	b480      	push	{r7}
 800f286:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f288:	4b03      	ldr	r3, [pc, #12]	; (800f298 <vTaskMissedYield+0x14>)
 800f28a:	2201      	movs	r2, #1
 800f28c:	601a      	str	r2, [r3, #0]
}
 800f28e:	bf00      	nop
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr
 800f298:	200004d0 	.word	0x200004d0

0800f29c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2a2:	4b0c      	ldr	r3, [pc, #48]	; (800f2d4 <prvResetNextTaskUnblockTime+0x38>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d104      	bne.n	800f2b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f2ac:	4b0a      	ldr	r3, [pc, #40]	; (800f2d8 <prvResetNextTaskUnblockTime+0x3c>)
 800f2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f2b4:	e008      	b.n	800f2c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2b6:	4b07      	ldr	r3, [pc, #28]	; (800f2d4 <prvResetNextTaskUnblockTime+0x38>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	4a04      	ldr	r2, [pc, #16]	; (800f2d8 <prvResetNextTaskUnblockTime+0x3c>)
 800f2c6:	6013      	str	r3, [r2, #0]
}
 800f2c8:	bf00      	nop
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr
 800f2d4:	2000048c 	.word	0x2000048c
 800f2d8:	200004d8 	.word	0x200004d8

0800f2dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f2dc:	b480      	push	{r7}
 800f2de:	b083      	sub	sp, #12
 800f2e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f2e2:	4b0b      	ldr	r3, [pc, #44]	; (800f310 <xTaskGetSchedulerState+0x34>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d102      	bne.n	800f2f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	607b      	str	r3, [r7, #4]
 800f2ee:	e008      	b.n	800f302 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2f0:	4b08      	ldr	r3, [pc, #32]	; (800f314 <xTaskGetSchedulerState+0x38>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d102      	bne.n	800f2fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f2f8:	2302      	movs	r3, #2
 800f2fa:	607b      	str	r3, [r7, #4]
 800f2fc:	e001      	b.n	800f302 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f2fe:	2300      	movs	r3, #0
 800f300:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f302:	687b      	ldr	r3, [r7, #4]
	}
 800f304:	4618      	mov	r0, r3
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr
 800f310:	200004c8 	.word	0x200004c8
 800f314:	200004dc 	.word	0x200004dc

0800f318 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b086      	sub	sp, #24
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f324:	2300      	movs	r3, #0
 800f326:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d070      	beq.n	800f410 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f32e:	4b3b      	ldr	r3, [pc, #236]	; (800f41c <xTaskPriorityDisinherit+0x104>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	693a      	ldr	r2, [r7, #16]
 800f334:	429a      	cmp	r2, r3
 800f336:	d00b      	beq.n	800f350 <xTaskPriorityDisinherit+0x38>
 800f338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33c:	b672      	cpsid	i
 800f33e:	f383 8811 	msr	BASEPRI, r3
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	f3bf 8f4f 	dsb	sy
 800f34a:	b662      	cpsie	i
 800f34c:	60fb      	str	r3, [r7, #12]
 800f34e:	e7fe      	b.n	800f34e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f354:	2b00      	cmp	r3, #0
 800f356:	d10b      	bne.n	800f370 <xTaskPriorityDisinherit+0x58>
 800f358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35c:	b672      	cpsid	i
 800f35e:	f383 8811 	msr	BASEPRI, r3
 800f362:	f3bf 8f6f 	isb	sy
 800f366:	f3bf 8f4f 	dsb	sy
 800f36a:	b662      	cpsie	i
 800f36c:	60bb      	str	r3, [r7, #8]
 800f36e:	e7fe      	b.n	800f36e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f374:	1e5a      	subs	r2, r3, #1
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f382:	429a      	cmp	r2, r3
 800f384:	d044      	beq.n	800f410 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d140      	bne.n	800f410 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	3304      	adds	r3, #4
 800f392:	4618      	mov	r0, r3
 800f394:	f7ff f9ed 	bl	800e772 <uxListRemove>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d115      	bne.n	800f3ca <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3a2:	491f      	ldr	r1, [pc, #124]	; (800f420 <xTaskPriorityDisinherit+0x108>)
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	009b      	lsls	r3, r3, #2
 800f3a8:	4413      	add	r3, r2
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	440b      	add	r3, r1
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d10a      	bne.n	800f3ca <xTaskPriorityDisinherit+0xb2>
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f3be:	43da      	mvns	r2, r3
 800f3c0:	4b18      	ldr	r3, [pc, #96]	; (800f424 <xTaskPriorityDisinherit+0x10c>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	4013      	ands	r3, r2
 800f3c6:	4a17      	ldr	r2, [pc, #92]	; (800f424 <xTaskPriorityDisinherit+0x10c>)
 800f3c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f3ca:	693b      	ldr	r3, [r7, #16]
 800f3cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d6:	f1c3 0207 	rsb	r2, r3, #7
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	409a      	lsls	r2, r3
 800f3e6:	4b0f      	ldr	r3, [pc, #60]	; (800f424 <xTaskPriorityDisinherit+0x10c>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	4a0d      	ldr	r2, [pc, #52]	; (800f424 <xTaskPriorityDisinherit+0x10c>)
 800f3ee:	6013      	str	r3, [r2, #0]
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3f4:	4613      	mov	r3, r2
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	4413      	add	r3, r2
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	4a08      	ldr	r2, [pc, #32]	; (800f420 <xTaskPriorityDisinherit+0x108>)
 800f3fe:	441a      	add	r2, r3
 800f400:	693b      	ldr	r3, [r7, #16]
 800f402:	3304      	adds	r3, #4
 800f404:	4619      	mov	r1, r3
 800f406:	4610      	mov	r0, r2
 800f408:	f7ff f956 	bl	800e6b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f40c:	2301      	movs	r3, #1
 800f40e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f410:	697b      	ldr	r3, [r7, #20]
	}
 800f412:	4618      	mov	r0, r3
 800f414:	3718      	adds	r7, #24
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	200003fc 	.word	0x200003fc
 800f420:	20000400 	.word	0x20000400
 800f424:	200004c4 	.word	0x200004c4

0800f428 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f432:	4b29      	ldr	r3, [pc, #164]	; (800f4d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f438:	4b28      	ldr	r3, [pc, #160]	; (800f4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	3304      	adds	r3, #4
 800f43e:	4618      	mov	r0, r3
 800f440:	f7ff f997 	bl	800e772 <uxListRemove>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d10b      	bne.n	800f462 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f44a:	4b24      	ldr	r3, [pc, #144]	; (800f4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f450:	2201      	movs	r2, #1
 800f452:	fa02 f303 	lsl.w	r3, r2, r3
 800f456:	43da      	mvns	r2, r3
 800f458:	4b21      	ldr	r3, [pc, #132]	; (800f4e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	4013      	ands	r3, r2
 800f45e:	4a20      	ldr	r2, [pc, #128]	; (800f4e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f460:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f468:	d10a      	bne.n	800f480 <prvAddCurrentTaskToDelayedList+0x58>
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d007      	beq.n	800f480 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f470:	4b1a      	ldr	r3, [pc, #104]	; (800f4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	3304      	adds	r3, #4
 800f476:	4619      	mov	r1, r3
 800f478:	481a      	ldr	r0, [pc, #104]	; (800f4e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f47a:	f7ff f91d 	bl	800e6b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f47e:	e026      	b.n	800f4ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f480:	68fa      	ldr	r2, [r7, #12]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4413      	add	r3, r2
 800f486:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f488:	4b14      	ldr	r3, [pc, #80]	; (800f4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68ba      	ldr	r2, [r7, #8]
 800f48e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	429a      	cmp	r2, r3
 800f496:	d209      	bcs.n	800f4ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f498:	4b13      	ldr	r3, [pc, #76]	; (800f4e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	4b0f      	ldr	r3, [pc, #60]	; (800f4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	3304      	adds	r3, #4
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	f7ff f92b 	bl	800e700 <vListInsert>
}
 800f4aa:	e010      	b.n	800f4ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4ac:	4b0f      	ldr	r3, [pc, #60]	; (800f4ec <prvAddCurrentTaskToDelayedList+0xc4>)
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	4b0a      	ldr	r3, [pc, #40]	; (800f4dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	3304      	adds	r3, #4
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	4610      	mov	r0, r2
 800f4ba:	f7ff f921 	bl	800e700 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f4be:	4b0c      	ldr	r3, [pc, #48]	; (800f4f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d202      	bcs.n	800f4ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f4c8:	4a09      	ldr	r2, [pc, #36]	; (800f4f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	6013      	str	r3, [r2, #0]
}
 800f4ce:	bf00      	nop
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	200004c0 	.word	0x200004c0
 800f4dc:	200003fc 	.word	0x200003fc
 800f4e0:	200004c4 	.word	0x200004c4
 800f4e4:	200004a8 	.word	0x200004a8
 800f4e8:	20000490 	.word	0x20000490
 800f4ec:	2000048c 	.word	0x2000048c
 800f4f0:	200004d8 	.word	0x200004d8
	...

0800f500 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f500:	4b07      	ldr	r3, [pc, #28]	; (800f520 <pxCurrentTCBConst2>)
 800f502:	6819      	ldr	r1, [r3, #0]
 800f504:	6808      	ldr	r0, [r1, #0]
 800f506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f50a:	f380 8809 	msr	PSP, r0
 800f50e:	f3bf 8f6f 	isb	sy
 800f512:	f04f 0000 	mov.w	r0, #0
 800f516:	f380 8811 	msr	BASEPRI, r0
 800f51a:	4770      	bx	lr
 800f51c:	f3af 8000 	nop.w

0800f520 <pxCurrentTCBConst2>:
 800f520:	200003fc 	.word	0x200003fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f524:	bf00      	nop
 800f526:	bf00      	nop

0800f528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f532:	b672      	cpsid	i
 800f534:	f383 8811 	msr	BASEPRI, r3
 800f538:	f3bf 8f6f 	isb	sy
 800f53c:	f3bf 8f4f 	dsb	sy
 800f540:	b662      	cpsie	i
 800f542:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f544:	4b0f      	ldr	r3, [pc, #60]	; (800f584 <vPortEnterCritical+0x5c>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	3301      	adds	r3, #1
 800f54a:	4a0e      	ldr	r2, [pc, #56]	; (800f584 <vPortEnterCritical+0x5c>)
 800f54c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f54e:	4b0d      	ldr	r3, [pc, #52]	; (800f584 <vPortEnterCritical+0x5c>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2b01      	cmp	r3, #1
 800f554:	d110      	bne.n	800f578 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f556:	4b0c      	ldr	r3, [pc, #48]	; (800f588 <vPortEnterCritical+0x60>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00b      	beq.n	800f578 <vPortEnterCritical+0x50>
 800f560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f564:	b672      	cpsid	i
 800f566:	f383 8811 	msr	BASEPRI, r3
 800f56a:	f3bf 8f6f 	isb	sy
 800f56e:	f3bf 8f4f 	dsb	sy
 800f572:	b662      	cpsie	i
 800f574:	603b      	str	r3, [r7, #0]
 800f576:	e7fe      	b.n	800f576 <vPortEnterCritical+0x4e>
	}
}
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr
 800f584:	2000004c 	.word	0x2000004c
 800f588:	e000ed04 	.word	0xe000ed04

0800f58c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f58c:	b480      	push	{r7}
 800f58e:	b083      	sub	sp, #12
 800f590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f592:	4b12      	ldr	r3, [pc, #72]	; (800f5dc <vPortExitCritical+0x50>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d10b      	bne.n	800f5b2 <vPortExitCritical+0x26>
 800f59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59e:	b672      	cpsid	i
 800f5a0:	f383 8811 	msr	BASEPRI, r3
 800f5a4:	f3bf 8f6f 	isb	sy
 800f5a8:	f3bf 8f4f 	dsb	sy
 800f5ac:	b662      	cpsie	i
 800f5ae:	607b      	str	r3, [r7, #4]
 800f5b0:	e7fe      	b.n	800f5b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800f5b2:	4b0a      	ldr	r3, [pc, #40]	; (800f5dc <vPortExitCritical+0x50>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3b01      	subs	r3, #1
 800f5b8:	4a08      	ldr	r2, [pc, #32]	; (800f5dc <vPortExitCritical+0x50>)
 800f5ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f5bc:	4b07      	ldr	r3, [pc, #28]	; (800f5dc <vPortExitCritical+0x50>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d104      	bne.n	800f5ce <vPortExitCritical+0x42>
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f5ce:	bf00      	nop
 800f5d0:	370c      	adds	r7, #12
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr
 800f5da:	bf00      	nop
 800f5dc:	2000004c 	.word	0x2000004c

0800f5e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f5e0:	f3ef 8009 	mrs	r0, PSP
 800f5e4:	f3bf 8f6f 	isb	sy
 800f5e8:	4b15      	ldr	r3, [pc, #84]	; (800f640 <pxCurrentTCBConst>)
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	f01e 0f10 	tst.w	lr, #16
 800f5f0:	bf08      	it	eq
 800f5f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f5f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5fa:	6010      	str	r0, [r2, #0]
 800f5fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f600:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f604:	b672      	cpsid	i
 800f606:	f380 8811 	msr	BASEPRI, r0
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	f3bf 8f6f 	isb	sy
 800f612:	b662      	cpsie	i
 800f614:	f7ff fcb0 	bl	800ef78 <vTaskSwitchContext>
 800f618:	f04f 0000 	mov.w	r0, #0
 800f61c:	f380 8811 	msr	BASEPRI, r0
 800f620:	bc09      	pop	{r0, r3}
 800f622:	6819      	ldr	r1, [r3, #0]
 800f624:	6808      	ldr	r0, [r1, #0]
 800f626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f62a:	f01e 0f10 	tst.w	lr, #16
 800f62e:	bf08      	it	eq
 800f630:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f634:	f380 8809 	msr	PSP, r0
 800f638:	f3bf 8f6f 	isb	sy
 800f63c:	4770      	bx	lr
 800f63e:	bf00      	nop

0800f640 <pxCurrentTCBConst>:
 800f640:	200003fc 	.word	0x200003fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop

0800f648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
	__asm volatile
 800f64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f652:	b672      	cpsid	i
 800f654:	f383 8811 	msr	BASEPRI, r3
 800f658:	f3bf 8f6f 	isb	sy
 800f65c:	f3bf 8f4f 	dsb	sy
 800f660:	b662      	cpsie	i
 800f662:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f664:	f7ff fbce 	bl	800ee04 <xTaskIncrementTick>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d003      	beq.n	800f676 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f66e:	4b06      	ldr	r3, [pc, #24]	; (800f688 <SysTick_Handler+0x40>)
 800f670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f674:	601a      	str	r2, [r3, #0]
 800f676:	2300      	movs	r3, #0
 800f678:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f680:	bf00      	nop
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}
 800f688:	e000ed04 	.word	0xe000ed04

0800f68c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f68c:	b480      	push	{r7}
 800f68e:	b085      	sub	sp, #20
 800f690:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f692:	f3ef 8305 	mrs	r3, IPSR
 800f696:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2b0f      	cmp	r3, #15
 800f69c:	d915      	bls.n	800f6ca <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f69e:	4a18      	ldr	r2, [pc, #96]	; (800f700 <vPortValidateInterruptPriority+0x74>)
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	4413      	add	r3, r2
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f6a8:	4b16      	ldr	r3, [pc, #88]	; (800f704 <vPortValidateInterruptPriority+0x78>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	7afa      	ldrb	r2, [r7, #11]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d20b      	bcs.n	800f6ca <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b6:	b672      	cpsid	i
 800f6b8:	f383 8811 	msr	BASEPRI, r3
 800f6bc:	f3bf 8f6f 	isb	sy
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	b662      	cpsie	i
 800f6c6:	607b      	str	r3, [r7, #4]
 800f6c8:	e7fe      	b.n	800f6c8 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f6ca:	4b0f      	ldr	r3, [pc, #60]	; (800f708 <vPortValidateInterruptPriority+0x7c>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f6d2:	4b0e      	ldr	r3, [pc, #56]	; (800f70c <vPortValidateInterruptPriority+0x80>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d90b      	bls.n	800f6f2 <vPortValidateInterruptPriority+0x66>
 800f6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6de:	b672      	cpsid	i
 800f6e0:	f383 8811 	msr	BASEPRI, r3
 800f6e4:	f3bf 8f6f 	isb	sy
 800f6e8:	f3bf 8f4f 	dsb	sy
 800f6ec:	b662      	cpsie	i
 800f6ee:	603b      	str	r3, [r7, #0]
 800f6f0:	e7fe      	b.n	800f6f0 <vPortValidateInterruptPriority+0x64>
	}
 800f6f2:	bf00      	nop
 800f6f4:	3714      	adds	r7, #20
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr
 800f6fe:	bf00      	nop
 800f700:	e000e3f0 	.word	0xe000e3f0
 800f704:	200004e0 	.word	0x200004e0
 800f708:	e000ed0c 	.word	0xe000ed0c
 800f70c:	200004e4 	.word	0x200004e4

0800f710 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f71e:	4618      	mov	r0, r3
 800f720:	f7fe fe9c 	bl	800e45c <USBH_LL_IncTimer>
}
 800f724:	bf00      	nop
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fe fee0 	bl	800e500 <USBH_LL_Connect>
}
 800f740:	bf00      	nop
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f756:	4618      	mov	r0, r3
 800f758:	f7fe fef5 	bl	800e546 <USBH_LL_Disconnect>
}
 800f75c:	bf00      	nop
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	460b      	mov	r3, r1
 800f76e:	70fb      	strb	r3, [r7, #3]
 800f770:	4613      	mov	r3, r2
 800f772:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7fe ff15 	bl	800e5aa <USBH_LL_NotifyURBChange>
#endif
}
 800f780:	bf00      	nop
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f796:	4618      	mov	r0, r3
 800f798:	f7fe fe8a 	bl	800e4b0 <USBH_LL_PortEnabled>
}
 800f79c:	bf00      	nop
 800f79e:	3708      	adds	r7, #8
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fe fe96 	bl	800e4e4 <USBH_LL_PortDisabled>
}
 800f7b8:	bf00      	nop
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7f8 f831 	bl	800783e <HAL_HCD_Stop>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f7e0:	7bfb      	ldrb	r3, [r7, #15]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 f808 	bl	800f7f8 <USBH_Get_USB_Status>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3710      	adds	r7, #16
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
	...

0800f7f8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	4603      	mov	r3, r0
 800f800:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f802:	2300      	movs	r3, #0
 800f804:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f806:	79fb      	ldrb	r3, [r7, #7]
 800f808:	2b03      	cmp	r3, #3
 800f80a:	d817      	bhi.n	800f83c <USBH_Get_USB_Status+0x44>
 800f80c:	a201      	add	r2, pc, #4	; (adr r2, 800f814 <USBH_Get_USB_Status+0x1c>)
 800f80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f812:	bf00      	nop
 800f814:	0800f825 	.word	0x0800f825
 800f818:	0800f82b 	.word	0x0800f82b
 800f81c:	0800f831 	.word	0x0800f831
 800f820:	0800f837 	.word	0x0800f837
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f824:	2300      	movs	r3, #0
 800f826:	73fb      	strb	r3, [r7, #15]
    break;
 800f828:	e00b      	b.n	800f842 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f82a:	2302      	movs	r3, #2
 800f82c:	73fb      	strb	r3, [r7, #15]
    break;
 800f82e:	e008      	b.n	800f842 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f830:	2301      	movs	r3, #1
 800f832:	73fb      	strb	r3, [r7, #15]
    break;
 800f834:	e005      	b.n	800f842 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f836:	2302      	movs	r3, #2
 800f838:	73fb      	strb	r3, [r7, #15]
    break;
 800f83a:	e002      	b.n	800f842 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f83c:	2302      	movs	r3, #2
 800f83e:	73fb      	strb	r3, [r7, #15]
    break;
 800f840:	bf00      	nop
  }
  return usb_status;
 800f842:	7bfb      	ldrb	r3, [r7, #15]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3714      	adds	r7, #20
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr

0800f850 <__libc_init_array>:
 800f850:	b570      	push	{r4, r5, r6, lr}
 800f852:	4e0d      	ldr	r6, [pc, #52]	; (800f888 <__libc_init_array+0x38>)
 800f854:	4c0d      	ldr	r4, [pc, #52]	; (800f88c <__libc_init_array+0x3c>)
 800f856:	1ba4      	subs	r4, r4, r6
 800f858:	10a4      	asrs	r4, r4, #2
 800f85a:	2500      	movs	r5, #0
 800f85c:	42a5      	cmp	r5, r4
 800f85e:	d109      	bne.n	800f874 <__libc_init_array+0x24>
 800f860:	4e0b      	ldr	r6, [pc, #44]	; (800f890 <__libc_init_array+0x40>)
 800f862:	4c0c      	ldr	r4, [pc, #48]	; (800f894 <__libc_init_array+0x44>)
 800f864:	f000 f82c 	bl	800f8c0 <_init>
 800f868:	1ba4      	subs	r4, r4, r6
 800f86a:	10a4      	asrs	r4, r4, #2
 800f86c:	2500      	movs	r5, #0
 800f86e:	42a5      	cmp	r5, r4
 800f870:	d105      	bne.n	800f87e <__libc_init_array+0x2e>
 800f872:	bd70      	pop	{r4, r5, r6, pc}
 800f874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f878:	4798      	blx	r3
 800f87a:	3501      	adds	r5, #1
 800f87c:	e7ee      	b.n	800f85c <__libc_init_array+0xc>
 800f87e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f882:	4798      	blx	r3
 800f884:	3501      	adds	r5, #1
 800f886:	e7f2      	b.n	800f86e <__libc_init_array+0x1e>
 800f888:	080113c8 	.word	0x080113c8
 800f88c:	080113c8 	.word	0x080113c8
 800f890:	080113c8 	.word	0x080113c8
 800f894:	080113cc 	.word	0x080113cc

0800f898 <memcpy>:
 800f898:	b510      	push	{r4, lr}
 800f89a:	1e43      	subs	r3, r0, #1
 800f89c:	440a      	add	r2, r1
 800f89e:	4291      	cmp	r1, r2
 800f8a0:	d100      	bne.n	800f8a4 <memcpy+0xc>
 800f8a2:	bd10      	pop	{r4, pc}
 800f8a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8ac:	e7f7      	b.n	800f89e <memcpy+0x6>

0800f8ae <memset>:
 800f8ae:	4402      	add	r2, r0
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d100      	bne.n	800f8b8 <memset+0xa>
 800f8b6:	4770      	bx	lr
 800f8b8:	f803 1b01 	strb.w	r1, [r3], #1
 800f8bc:	e7f9      	b.n	800f8b2 <memset+0x4>
	...

0800f8c0 <_init>:
 800f8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c2:	bf00      	nop
 800f8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8c6:	bc08      	pop	{r3}
 800f8c8:	469e      	mov	lr, r3
 800f8ca:	4770      	bx	lr

0800f8cc <_fini>:
 800f8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ce:	bf00      	nop
 800f8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8d2:	bc08      	pop	{r3}
 800f8d4:	469e      	mov	lr, r3
 800f8d6:	4770      	bx	lr
